{#- SQLite任务生成提示词模板 -#}

{% macro generate_sqlite_tasks_prompt(execution_plan, services_summary, context_window=None) %}
你是任务管理专家，基于设计文档生成具体的开发任务。

服务概要：{{ services_summary }}

执行计划：{{ execution_plan }}

{% if context_window %}
上下文信息：{{ context_window }}
{% endif %}

**重要约束：严格使用设计文档中的真实内容，禁止编造。**

**设计文档关键信息：**
- GitLab仓库：用户服务 https://gitlab.local/zqyl/zqyl-user-center-service.git，确权开立服务 http://gitlab.local/ls/crcl-open.git
- 接口路径：/general/multiorgManage/queryCompanyUnitList，/crcl-open-api/lsLimit/listUnitLimitByCompanyId，/crcl-open-api/lsLimit/listUnitLimitByCompanyIdExport
- 表名：t_cust_multiorg_unit
- 数据库：jdbc:mysql://localhost:6446/dbwebappdb，用户名密码：dbwebapp/dbwebapp

**任务类型说明：**
git_extraction(提取Git地址) -> git_clone(下载代码) -> code_analysis(分析结构) -> config(配置环境) -> database(建表) -> api(开发接口) -> integration_test(集成测试) -> deployment(代码提交)

请输出JSON格式的12个任务（从task_001到task_012）：

{
  "tasks": [
    {
      "task_id": "task_001",
      "service_name": "系统",
      "task_type": "git_extraction",
      "priority": 1,
      "dependencies": [],
      "estimated_duration": "5分钟",
      "description": "从设计文档提取GitLab仓库地址",
      "implementation_details": "解析设计文档，提取用户服务 https://gitlab.local/zqyl/zqyl-user-center-service.git 和确权开立服务 http://gitlab.local/ls/crcl-open.git 仓库地址",
      "deliverables": ["GitLab仓库地址清单", "仓库访问验证报告"],
      "completion_criteria": "成功提取并验证两个GitLab仓库地址可访问性",
      "parameters": {
        "repositories": ["zqyl-user-center-service", "crcl-open"]
      }
    },
    {
      "task_id": "task_002", 
      "service_name": "用户服务",
      "task_type": "git_clone",
      "priority": 2,
      "dependencies": ["task_001"],
      "estimated_duration": "10分钟",
      "description": "下载用户服务代码到D:/gitlab/create_project/zqyl-user-center-service",
      "implementation_details": "使用git clone命令下载用户服务代码到指定目录，确保项目结构完整可编译",
      "deliverables": ["用户服务源码目录"],
      "completion_criteria": "代码下载完成，项目目录存在且包含pom.xml文件",
      "parameters": {
        "git_url": "https://gitlab.local/zqyl/zqyl-user-center-service.git",
        "local_path": "D:/gitlab/create_project/zqyl-user-center-service"
      }
    },
    {
      "task_id": "task_003",
      "service_name": "确权开立服务", 
      "task_type": "git_clone",
      "priority": 2,
      "dependencies": ["task_001"],
      "estimated_duration": "10分钟",
      "description": "下载确权开立服务代码到D:/gitlab/create_project/crcl-open",
      "implementation_details": "使用git clone命令下载确权开立服务代码到指定目录，确保项目结构完整可编译",
      "deliverables": ["确权开立服务源码目录"],
      "completion_criteria": "代码下载完成，项目目录存在且包含pom.xml文件",
      "parameters": {
        "git_url": "http://gitlab.local/ls/crcl-open.git",
        "local_path": "D:/gitlab/create_project/crcl-open"
      }
    },
    {
      "task_id": "task_004",
      "service_name": "用户服务",
      "task_type": "code_analysis", 
      "priority": 3,
      "dependencies": ["task_002"],
      "estimated_duration": "20分钟",
      "description": "分析用户服务代码结构，确定MultiorgManageController添加位置",
      "implementation_details": "分析项目package结构和controller层，找到或创建MultiorgManageController类的最佳位置",
      "deliverables": ["代码结构从Controller层开始到数据获取的完整路径"],
      "completion_criteria": "确定MultiorgManageController的包路径和文件位置，明确依赖的Service层结构",
      "parameters": {
        "project_path": "D:/gitlab/create_project/zqyl-user-center-service",
        "target_controller": "MultiorgManageController",
        "target_api": "/general/multiorgManage/queryCompanyUnitList"
      }
    },
    {
      "task_id": "task_005",
      "service_name": "确权开立服务",
      "task_type": "code_analysis",
      "priority": 3,
      "dependencies": ["task_003"],
      "estimated_duration": "20分钟", 
      "description": "分析确权开立服务代码结构，确定LsLimitController添加位置",
      "implementation_details": "分析项目package结构和controller层，找到或创建LsLimitController类的最佳位置，支持两个接口开发",
      "deliverables": ["代码结构从Controller层开始到数据获取的完整路径",  "Feign客户端配置方案"],
      "completion_criteria": "确定LsLimitController的包路径和文件位置，明确服务间调用的Feign配置",
      "parameters": {
        "project_path": "D:/gitlab/create_project/crcl-open",
        "target_controller": "LsLimitController",
        "target_apis": ["/crcl-open-api/lsLimit/listUnitLimitByCompanyId", "/crcl-open-api/lsLimit/listUnitLimitByCompanyIdExport"]
      }
    },
    {
      "task_id": "task_006",
      "service_name": "用户服务",
      "task_type": "config",
      "priority": 4,
      "dependencies": ["task_004"],
      "estimated_duration": "15分钟",
      "description": "配置用户服务数据库连接：jdbc:mysql://localhost:6446/dbwebappdb",
      "implementation_details": "修改application.yml文件，配置数据库连接信息包括URL、用户名密码和连接池设置",
      "deliverables": ["数据库配置文件", "连接测试报告"],
      "completion_criteria": "application.yml文件已更新，数据库连接配置正确且可连通",
      "parameters": {
        "config_file": "D:/gitlab/create_project/zqyl-user-center-service/src/main/resources/application.yml",
        "database_url": "jdbc:mysql://localhost:6446/dbwebappdb?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC&characterEncoding=utf8&useUnicode=true",
        "username": "dbwebapp",
        "password": "dbwebapp"
      }
    },
    {
      "task_id": "task_007",
      "service_name": "用户服务",
      "task_type": "database",
      "priority": 5,
      "dependencies": ["task_006"],
      "estimated_duration": "15分钟",
      "description": "创建t_cust_multiorg_unit表，包含id,company_id,unit_code,unit_name等字段",
      "implementation_details": "编写建表SQL脚本，定义主键、索引和字段约束，创建对应的Entity和Mapper文件",
      "deliverables": ["建表SQL脚本", "Entity实体类", "Mapper接口文件"],
      "completion_criteria": "表结构创建成功，Entity和Mapper文件可正常编译，支持基本CRUD操作",
      "parameters": {
        "table_name": "t_cust_multiorg_unit",
        "sql_location": "src/main/resources/sql/t_cust_multiorg_unit.sql"
      }
    },
    {
      "task_id": "task_008",
      "service_name": "用户服务",
      "task_type": "api",
      "priority": 6, 
      "dependencies": ["task_007"],
      "estimated_duration": "60分钟",
      "description": "实现GET /general/multiorgManage/queryCompanyUnitList接口",
      "implementation_details": "在MultiorgManageController中实现查询接口，支持条件查询和分页，返回规定的字段格式",
      "deliverables": ["MultiorgManageController类", "Service业务逻辑层", "接口文档"],
      "completion_criteria": "接口可正常访问，返回数据格式符合规范，支持条件查询和分页功能",
      "parameters": {
        "project_path": "D:/gitlab/create_project/zqyl-user-center-service",
        "api_path": "/general/multiorgManage/queryCompanyUnitList",
        "request_params": ["unitCode", "openStatus", "unitList"],
        "response_params": ["unitId", "unitTypeDicType", "unitTypeId", "openStatus", "unitCode", "unitName"]
      }
    },
    {
      "task_id": "task_009",
      "service_name": "确权开立服务",
      "task_type": "api",
      "priority": 7,
      "dependencies": ["task_008"],
      "estimated_duration": "90分钟",
      "description": "实现GET /crcl-open-api/lsLimit/listUnitLimitByCompanyId接口，调用用户服务",
      "implementation_details": "在LsLimitController中实现额度查询接口，配置Feign客户端调用用户服务接口获取组织单元信息",
      "deliverables": ["LsLimitController类", "Feign客户端配置", "业务逻辑层"],
      "completion_criteria": "接口可正常访问，能成功调用用户服务，返回额度数据格式正确",
      "parameters": {
        "project_path": "D:/gitlab/create_project/crcl-open", 
        "api_path": "/crcl-open-api/lsLimit/listUnitLimitByCompanyId",
        "request_params": ["gwCompanyId", "unitName", "limitSource", "bizType", "page", "pageRow"],
        "response_params": ["totalLimitAmt", "usedLimitAmt", "usableLimitAmt", "unitLimitListDetail"],
        "external_call": "/general/multiorgManage/queryCompanyUnitList"
      }
    },
    {
      "task_id": "task_010",
      "service_name": "确权开立服务",
      "task_type": "api",
      "priority": 8,
      "dependencies": ["task_009"],
      "estimated_duration": "45分钟",
      "description": "实现GET /crcl-open-api/lsLimit/listUnitLimitByCompanyIdExport导出接口",
      "implementation_details": "在LsLimitController中实现Excel导出接口，复用listUnitLimitByCompanyId的数据逻辑",
      "deliverables": ["导出接口方法", "Excel工具类", "导出模板文件"],
      "completion_criteria": "接口可正常访问，能成功导出Excel文件，表头和数据格式正确",
      "parameters": {
        "project_path": "D:/gitlab/create_project/crcl-open",
        "api_path": "/crcl-open-api/lsLimit/listUnitLimitByCompanyIdExport",
        "export_format": "xlsx",
        "export_headers": ["组织单元名称", "额度名称", "额度类型", "已分配额度", "已用额度", "可用额度"]
      }
    },
    {
      "task_id": "task_011",
      "service_name": "系统",
      "task_type": "integration_test",
      "priority": 9,
      "dependencies": ["task_008", "task_009", "task_010"],
      "estimated_duration": "30分钟",
      "description": "测试确权开立服务调用用户服务接口的完整流程",
      "implementation_details": "编写集成测试用例，验证服务间调用正确性和数据完整性",
      "deliverables": ["集成测试用例", "测试数据脚本", "测试报告"],
      "completion_criteria": "所有测试用例通过，接口调用链路正常，数据返回格式正确",
      "parameters": {
        "test_scenarios": ["组织单元额度查询测试"],
        "test_data": {"gwCompanyId": 1, "unitName": "测试单元", "bizType": 80}
      }
    },
    {
      "task_id": "task_012",
      "service_name": "系统",
      "task_type": "deployment",
      "priority": 10,
      "dependencies": ["task_011"],
      "estimated_duration": "20分钟", 
      "description": "提交代码到GitLab仓库，commit message: feat: 新增组织单元额度管理功能",
      "implementation_details": "执行git add、git commit和git push命令，提交所有新增和修改的代码文件",
      "deliverables": ["Git提交记录", "代码合并报告", "部署文档"],
      "completion_criteria": "代码成功提交到GitLab仓库，commit信息清晰，无冲突",
      "parameters": {
        "repositories": [
          {"path": "D:/gitlab/create_project/zqyl-user-center-service", "changes": "新增组织单元查询接口"},
          {"path": "D:/gitlab/create_project/crcl-open", "changes": "新增组织单元额度列表和导出接口"}
        ]
      }
    }
  ],
  "task_summary": {
    "total_tasks": 12,
    "execution_phases": [
      {"phase": "代码管理", "tasks": ["task_001", "task_002", "task_003"]},
      {"phase": "结构分析", "tasks": ["task_004", "task_005"]}, 
      {"phase": "环境配置", "tasks": ["task_006", "task_007"]},
      {"phase": "接口开发", "tasks": ["task_008", "task_009", "task_010"]},
      {"phase": "测试部署", "tasks": ["task_011", "task_012"]}
    ]
  },
  "summary": "生成12个任务：GitLab代码下载->结构分析->环境配置->接口开发->测试部署。严格使用设计文档中的真实接口路径和参数，确保先开发用户服务接口，再开发依赖它的确权开立服务接口。"
}

**执行顺序说明：**
1. **GitLab管理**：提取地址->下载用户服务代码->下载确权开立服务代码
2. **代码分析**：分析用户服务结构->分析确权开立服务结构  
3. **环境准备**：配置数据库连接->创建数据表
4. **接口开发**：开发用户服务接口->开发确权开立服务接口->开发导出接口
5. **测试部署**：集成测试->代码提交

**关键依赖关系：**
- 确权开立服务的接口依赖用户服务的接口
- 所有接口开发前需要先完成代码下载和结构分析
- 部署前需要完成集成测试验证

{% endmacro %} 