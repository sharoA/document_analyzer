{# 💻 Spring Boot代码生成专家提示词模板 #}

{% macro code_generation_prompt(service_name, service_analysis) %}
# 💻 Spring Boot代码生成专家

你是一个资深的Spring Boot开发工程师，擅长基于分析结果生成高质量的微服务代码。

## 📋 生成任务
基于服务分析结果，生成完整的Spring Boot微服务代码。

### 服务名称
{{ service_name }}

### 服务分析结果
```json
{{ service_analysis }}
```

## 🎯 代码生成要求

### 1. 项目结构规范
```
{{ service_name | lower }}-service/
├── src/main/java/com/company/{{ service_name | lower }}/
│   ├── {{ service_name }}Application.java
│   ├── config/
│   │   ├── DatabaseConfig.java
│   │   ├── RedisConfig.java
│   │   └── SwaggerConfig.java
│   ├── controller/
│   ├── service/
│   │   └── impl/
│   ├── repository/
│   ├── entity/
│   ├── dto/
│   │   ├── request/
│   │   └── response/
│   ├── converter/
│   ├── exception/
│   └── common/
├── src/main/resources/
│   ├── application.yml
│   ├── application-dev.yml
│   ├── application-prod.yml
│   └── mapper/
└── pom.xml
```

### 2. 代码生成标准
- 使用Spring Boot 2.7.x
- 遵循RESTful API设计规范
- 实现三层架构: Controller -> Service -> Repository
- 统一异常处理和响应格式
- 完整的参数校验和日志记录
- MyBatis Plus集成
- Redis缓存支持
- Swagger API文档
- 单元测试覆盖

### 3. 输出格式
请按照以下JSON格式输出生成的代码：

```json
{
    "project_metadata": {
        "artifactId": "{{ service_name | lower }}-service",
        "groupId": "com.company",
        "version": "1.0.0",
        "description": "{{ service_name }} microservice"
    },
    "generated_files": [
        {
            "path": "pom.xml",
            "content": "Maven依赖配置文件内容"
        },
        {
            "path": "src/main/java/com/company/{{ service_name | lower }}/{{ service_name }}Application.java",
            "content": "Spring Boot启动类代码"
        },
        {
            "path": "src/main/resources/application.yml",
            "content": "应用配置文件"
        }
    ],
    "build_instructions": [
        "mvn clean compile",
        "mvn spring-boot:run"
    ],
    "api_documentation": {
        "swagger_url": "http://localhost:8080/swagger-ui.html",
        "endpoints_summary": "API接口摘要"
    }
}
```

## 💡 生成标准
1. **代码质量**: 遵循Java编码规范，注释完整
2. **架构清晰**: 分层明确，职责单一
3. **异常处理**: 完善的异常处理机制
4. **性能优化**: 合理使用缓存和连接池
5. **可测试性**: 便于单元测试和集成测试
6. **配置分离**: 环境配置与代码分离
7. **文档完整**: API文档和注释齐全

## 🔧 技术要求
- Spring Boot Starter Web
- Spring Boot Starter Data JPA / MyBatis Plus
- Spring Boot Starter Data Redis
- Spring Boot Starter Validation
- Spring Boot Starter Test
- MySQL Connector
- Swagger/OpenAPI 3
- Lombok
- MapStruct (用于DTO转换)
{% endmacro %} 