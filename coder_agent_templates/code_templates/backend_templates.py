#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
后端代码模版
包含Spring Boot项目的各种代码模版
"""

from typing import Dict, Any

class BackendTemplates:
    """后端代码模版集合"""
    
    @staticmethod
    def spring_boot_main_class(package_name: str, class_name: str) -> str:
        """Spring Boot主类模版"""
        return f"""package {package_name};

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

/**
 * Spring Boot Application Main Class
 * Generated by CoderAgent
 */
@SpringBootApplication
public class {class_name}Application {{
    
    public static void main(String[] args) {{
        SpringApplication.run({class_name}Application.class, args);
    }}
}}"""
    
    @staticmethod
    def entity_template(entity_name: str, package_name: str, fields: Dict[str, str] = None) -> str:
        """JPA实体类模版"""
        if fields is None:
            fields = {"name": "String", "description": "String"}
        
        field_declarations = []
        getters_setters = []
        
        for field_name, field_type in fields.items():
            # 字段声明
            field_declarations.append(f"    @Column(name = \"{field_name}\")")
            field_declarations.append(f"    private {field_type} {field_name};")
            field_declarations.append("")
            
            # Getter和Setter
            capitalized_name = field_name.capitalize()
            getters_setters.append(f"    public {field_type} get{capitalized_name}() {{")
            getters_setters.append(f"        return {field_name};")
            getters_setters.append("    }")
            getters_setters.append("")
            getters_setters.append(f"    public void set{capitalized_name}({field_type} {field_name}) {{")
            getters_setters.append(f"        this.{field_name} = {field_name};")
            getters_setters.append("    }")
            getters_setters.append("")
        
        return f"""package {package_name}.entity;

import javax.persistence.*;
import java.time.LocalDateTime;

/**
 * {entity_name} Entity
 * Generated by CoderAgent
 */
@Entity
@Table(name = "{entity_name.lower()}")
public class {entity_name} {{
    
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    
{chr(10).join(field_declarations)}
    @Column(name = "created_at")
    private LocalDateTime createdAt;
    
    @Column(name = "updated_at") 
    private LocalDateTime updatedAt;
    
    // Constructors
    public {entity_name}() {{}}
    
    // Getters and Setters
    public Long getId() {{
        return id;
    }}
    
    public void setId(Long id) {{
        this.id = id;
    }}
    
{chr(10).join(getters_setters)}
    public LocalDateTime getCreatedAt() {{
        return createdAt;
    }}
    
    public void setCreatedAt(LocalDateTime createdAt) {{
        this.createdAt = createdAt;
    }}
    
    public LocalDateTime getUpdatedAt() {{
        return updatedAt;
    }}
    
    public void setUpdatedAt(LocalDateTime updatedAt) {{
        this.updatedAt = updatedAt;
    }}
}}"""
    
    @staticmethod
    def repository_template(entity_name: str, package_name: str) -> str:
        """Repository接口模版"""
        return f"""package {package_name}.repository;

import {package_name}.entity.{entity_name};
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.util.List;
import java.util.Optional;

/**
 * {entity_name} Repository Interface
 * Generated by CoderAgent
 */
@Repository
public interface {entity_name}Repository extends JpaRepository<{entity_name}, Long> {{
    
    /**
     * Find by name
     */
    Optional<{entity_name}> findByName(String name);
    
    /**
     * Find all active records
     */
    @Query("SELECT e FROM {entity_name} e WHERE e.deletedAt IS NULL")
    List<{entity_name}> findAllActive();
    
    /**
     * Count by status
     */
    @Query("SELECT COUNT(e) FROM {entity_name} e WHERE e.status = :status")
    long countByStatus(@Param("status") String status);
}}"""
    
    @staticmethod
    def service_template(service_name: str, package_name: str, entity_name: str = None) -> str:
        """Service类模版"""
        if entity_name is None:
            entity_name = service_name.replace("Service", "")
        
        return f"""package {package_name}.service;

import {package_name}.entity.{entity_name};
import {package_name}.repository.{entity_name}Repository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.List;
import java.util.Optional;

/**
 * {service_name} Service Implementation
 * Generated by CoderAgent
 */
@Service
@Transactional
public class {service_name} {{
    
    private static final Logger logger = LoggerFactory.getLogger({service_name}.class);
    
    @Autowired
    private {entity_name}Repository {entity_name.lower()}Repository;
    
    /**
     * Create new {entity_name.lower()}
     */
    public {entity_name} create({entity_name} {entity_name.lower()}) {{
        logger.info("Creating new {entity_name.lower()}: {{}}", {entity_name.lower()});
        return {entity_name.lower()}Repository.save({entity_name.lower()});
    }}
    
    /**
     * Get {entity_name.lower()} by ID
     */
    @Transactional(readOnly = true)
    public Optional<{entity_name}> findById(Long id) {{
        logger.debug("Finding {entity_name.lower()} by ID: {{}}", id);
        return {entity_name.lower()}Repository.findById(id);
    }}
    
    /**
     * Get all {entity_name.lower()}s
     */
    @Transactional(readOnly = true)
    public List<{entity_name}> findAll() {{
        logger.debug("Finding all {entity_name.lower()}s");
        return {entity_name.lower()}Repository.findAll();
    }}
    
    /**
     * Update {entity_name.lower()}
     */
    public {entity_name} update({entity_name} {entity_name.lower()}) {{
        logger.info("Updating {entity_name.lower()}: {{}}", {entity_name.lower()});
        return {entity_name.lower()}Repository.save({entity_name.lower()});
    }}
    
    /**
     * Delete {entity_name.lower()} by ID
     */
    public void deleteById(Long id) {{
        logger.info("Deleting {entity_name.lower()} by ID: {{}}", id);
        {entity_name.lower()}Repository.deleteById(id);
    }}
}}"""
    
    @staticmethod
    def controller_template(controller_name: str, package_name: str, service_name: str = None, entity_name: str = None) -> str:
        """Controller类模版"""
        if service_name is None:
            service_name = controller_name.replace("Controller", "Service")
        if entity_name is None:
            entity_name = controller_name.replace("Controller", "")
        
        return f"""package {package_name}.controller;

import {package_name}.entity.{entity_name};
import {package_name}.service.{service_name};
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.List;
import java.util.Optional;

/**
 * {controller_name} REST Controller
 * Generated by CoderAgent
 */
@RestController
@RequestMapping("/api/{entity_name.lower()}s")
@CrossOrigin(origins = "*")
public class {controller_name} {{
    
    private static final Logger logger = LoggerFactory.getLogger({controller_name}.class);
    
    @Autowired
    private {service_name} {service_name.lower()};
    
    /**
     * Create new {entity_name.lower()}
     */
    @PostMapping
    public ResponseEntity<{entity_name}> create(@RequestBody {entity_name} {entity_name.lower()}) {{
        try {{
            {entity_name} created = {service_name.lower()}.create({entity_name.lower()});
            return ResponseEntity.ok(created);
        }} catch (Exception e) {{
            logger.error("Error creating {entity_name.lower()}", e);
            return ResponseEntity.badRequest().build();
        }}
    }}
    
    /**
     * Get {entity_name.lower()} by ID
     */
    @GetMapping("/{{id}}")
    public ResponseEntity<{entity_name}> getById(@PathVariable Long id) {{
        Optional<{entity_name}> {entity_name.lower()} = {service_name.lower()}.findById(id);
        return {entity_name.lower()}.map(ResponseEntity::ok)
                .orElse(ResponseEntity.notFound().build());
    }}
    
    /**
     * Get all {entity_name.lower()}s
     */
    @GetMapping
    public ResponseEntity<List<{entity_name}>> getAll() {{
        List<{entity_name}> {entity_name.lower()}s = {service_name.lower()}.findAll();
        return ResponseEntity.ok({entity_name.lower()}s);
    }}
    
    /**
     * Update {entity_name.lower()}
     */
    @PutMapping("/{{id}}")
    public ResponseEntity<{entity_name}> update(@PathVariable Long id, @RequestBody {entity_name} {entity_name.lower()}) {{
        try {{
            {entity_name.lower()}.setId(id);
            {entity_name} updated = {service_name.lower()}.update({entity_name.lower()});
            return ResponseEntity.ok(updated);
        }} catch (Exception e) {{
            logger.error("Error updating {entity_name.lower()}", e);
            return ResponseEntity.badRequest().build();
        }}
    }}
    
    /**
     * Delete {entity_name.lower()}
     */
    @DeleteMapping("/{{id}}")
    public ResponseEntity<Void> delete(@PathVariable Long id) {{
        try {{
            {service_name.lower()}.deleteById(id);
            return ResponseEntity.ok().build();
        }} catch (Exception e) {{
            logger.error("Error deleting {entity_name.lower()}", e);
            return ResponseEntity.badRequest().build();
        }}
    }}
}}""" 