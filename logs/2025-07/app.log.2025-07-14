2025-07-14 10:51:15 - system - INFO - ==================================================
2025-07-14 10:51:15 - system - INFO - 🚀 智能分析系统日志系统初始化完成
2025-07-14 10:51:15 - system - INFO - 📁 日志根目录: D:\ai_project\document_analyzer\logs
2025-07-14 10:51:15 - system - INFO - 📊 日志级别: INFO
2025-07-14 10:51:15 - system - INFO - 📅 按日期轮转: 每天午夜自动轮转
2025-07-14 10:51:15 - system - INFO - 📂 按月分目录: logs/YYYY-MM/
2025-07-14 10:51:15 - system - INFO - 📝 主日志: logs/2025-07/app.log
2025-07-14 10:51:15 - system - INFO - 🔧 API日志: logs/2025-07/api_server.log
2025-07-14 10:51:15 - system - INFO - 🗂️ 保留天数: 7 天
2025-07-14 10:51:15 - system - INFO - ==================================================
2025-07-14 10:51:25 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-14 10:51:25 - root - WARNING - 智能编码节点不可用: cannot import name 'IntelligentCodingAgent' from partially initialized module 'src.corder_integration.langgraph.nodes.intelligent_coding_node' (most likely due to a circular import) (D:\ai_project\document_analyzer\src\corder_integration\langgraph\nodes\intelligent_coding_node.py)
2025-07-14 10:51:26 - src.utils.task_storage - INFO - 数据库初始化成功
2025-07-14 10:51:26 - markdown_storage - INFO - Markdown存储管理器初始化完成
2025-07-14 10:51:26 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-14 10:51:26 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 10:51:26 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-14 10:51:27 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-14 10:51:27 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-14 10:51:27 - WeaviateVectorDatabase - INFO - ✅ Weaviate连接成功: http://localhost:8080 (gRPC: 50051)
2025-07-14 10:51:27 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/schema/AnalyDesignDocuments "HTTP/1.1 200 OK"
2025-07-14 10:51:27 - WeaviateVectorDatabase - INFO - ✅ Weaviate集合已存在: AnalyDesignDocuments
2025-07-14 10:51:27 - AnalysisServiceManager - INFO - 初始化向量数据库: weaviate
2025-07-14 10:51:27 - sentence_transformers.SentenceTransformer - INFO - Use pytorch device_name: cpu
2025-07-14 10:51:27 - sentence_transformers.SentenceTransformer - INFO - Load pretrained SentenceTransformer: BAAI/bge-large-zh
2025-07-14 10:51:33 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-14 10:51:34 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-14 10:51:34 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-14 10:51:34 - src.utils.weaviate_helper - INFO - 成功连接到 Weaviate: localhost:8080
2025-07-14 10:51:34 - AnalysisServiceManager - INFO - 分析服务管理器初始化完成
2025-07-14 10:51:34 - src.utils.enhanced_analyzer - INFO - 增强分析器初始化完成
2025-07-14 10:51:34 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:8082
 * Running on http://26.26.26.1:8082
2025-07-14 10:51:34 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-07-14 10:51:34 - werkzeug - INFO -  * Restarting with stat
2025-07-14 10:51:35 - system - INFO - ==================================================
2025-07-14 10:51:35 - system - INFO - 🚀 智能分析系统日志系统初始化完成
2025-07-14 10:51:35 - system - INFO - 📁 日志根目录: D:\ai_project\document_analyzer\logs
2025-07-14 10:51:35 - system - INFO - 📊 日志级别: INFO
2025-07-14 10:51:35 - system - INFO - 📅 按日期轮转: 每天午夜自动轮转
2025-07-14 10:51:35 - system - INFO - 📂 按月分目录: logs/YYYY-MM/
2025-07-14 10:51:35 - system - INFO - 📝 主日志: logs/2025-07/app.log
2025-07-14 10:51:35 - system - INFO - 🔧 API日志: logs/2025-07/api_server.log
2025-07-14 10:51:35 - system - INFO - 🗂️ 保留天数: 7 天
2025-07-14 10:51:35 - system - INFO - ==================================================
2025-07-14 10:51:43 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-14 10:51:43 - root - WARNING - 智能编码节点不可用: cannot import name 'IntelligentCodingAgent' from partially initialized module 'src.corder_integration.langgraph.nodes.intelligent_coding_node' (most likely due to a circular import) (D:\ai_project\document_analyzer\src\corder_integration\langgraph\nodes\intelligent_coding_node.py)
2025-07-14 10:51:43 - src.utils.task_storage - INFO - 数据库初始化成功
2025-07-14 10:51:43 - markdown_storage - INFO - Markdown存储管理器初始化完成
2025-07-14 10:51:43 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-14 10:51:44 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 10:51:44 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-14 10:51:45 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-14 10:51:45 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-14 10:51:45 - WeaviateVectorDatabase - INFO - ✅ Weaviate连接成功: http://localhost:8080 (gRPC: 50051)
2025-07-14 10:51:45 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/schema/AnalyDesignDocuments "HTTP/1.1 200 OK"
2025-07-14 10:51:45 - WeaviateVectorDatabase - INFO - ✅ Weaviate集合已存在: AnalyDesignDocuments
2025-07-14 10:51:45 - AnalysisServiceManager - INFO - 初始化向量数据库: weaviate
2025-07-14 10:51:45 - sentence_transformers.SentenceTransformer - INFO - Use pytorch device_name: cpu
2025-07-14 10:51:45 - sentence_transformers.SentenceTransformer - INFO - Load pretrained SentenceTransformer: BAAI/bge-large-zh
2025-07-14 10:51:51 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-14 10:51:52 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-14 10:51:52 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-14 10:51:52 - src.utils.weaviate_helper - INFO - 成功连接到 Weaviate: localhost:8080
2025-07-14 10:51:52 - AnalysisServiceManager - INFO - 分析服务管理器初始化完成
2025-07-14 10:51:52 - src.utils.enhanced_analyzer - INFO - 增强分析器初始化完成
2025-07-14 10:51:52 - werkzeug - WARNING -  * Debugger is active!
2025-07-14 10:51:52 - werkzeug - INFO -  * Debugger PIN: 887-537-592
2025-07-14 10:53:59 - src.apis.coder_agent_api - INFO - 开始处理文档: 链数中建一局_1752461639
2025-07-14 10:53:59 - src.apis.coder_agent_api - INFO - 文档长度: 4931 字符
2025-07-14 10:53:59 - src.apis.coder_agent_api - INFO - 使用LangGraph: True
2025-07-14 10:53:59 - src.apis.coder_agent_api - INFO - 代码输出路径: D:\gitlab\create_project
2025-07-14 10:53:59 - src.apis.coder_agent_api - INFO - 使用LangGraph工作流处理项目: 链数中建一局_1752461639
2025-07-14 10:53:59 - src.corder_integration.langgraph.workflow_orchestrator - INFO - 准备使用异步SQLite检查点: D:\ai_project\document_analyzer\workflow_checkpoints.db
2025-07-14 10:53:59 - src.corder_integration.langgraph.workflow_orchestrator - INFO - 生成目标分支名称: 链数中建一局_1752461639 -> D_20250714_链数中建一局_1752461639
2025-07-14 10:53:59 - src.corder_integration.langgraph.workflow_orchestrator - INFO - 开始执行编码工作流: 链数中建一局_1752461639 -> D:\gitlab\create_project
2025-07-14 10:53:59 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 🚀 开始执行任务拆分: 链数中建一局_1752461639
2025-07-14 10:53:59 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📥 输入状态键: ['design_doc', 'project_name', 'identified_services', 'service_dependencies', 'task_execution_plan', 'parallel_tasks', 'git_repo_url', 'target_branch', 'project_paths', 'output_path', 'repo_initialized', 'generated_services', 'generated_apis', 'generated_sql', 'service_interconnections', 'unit_test_results', 'test_coverage', 'interface_compatibility', 'code_review_results', 'static_analysis_results', 'security_scan_results', 'commit_hashes', 'push_results', 'pr_urls', 'current_phase', 'completed_services', 'failed_services', 'retry_count', 'execution_errors']
2025-07-14 10:53:59 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📄 设计文档长度: 4930
2025-07-14 10:53:59 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 🔄 当前阶段: task_splitting
2025-07-14 10:53:59 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📁 计算的基础项目路径: D:\gitlab\create_project/链数中建一局_1752461639
2025-07-14 10:53:59 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 10:53:59 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 模板 task_splitting/design_analysis_prompts.jinja2 加载成功
2025-07-14 10:53:59 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 模板 task_splitting/service_boundary_prompts.jinja2 加载成功
2025-07-14 10:53:59 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 模板 task_splitting/dependency_analysis_prompts.jinja2 加载成功
2025-07-14 10:53:59 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 模板 task_splitting/task_scheduling_prompts.jinja2 加载成功
2025-07-14 10:53:59 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 模板 task_splitting/generate_sqlite_tasks_prompts.jinja2 加载成功
2025-07-14 10:53:59 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 任务数据库初始化完成
2025-07-14 10:53:59 - src.corder_integration.langgraph.nodes.task_splitting_node - WARNING - ⚠️ 无法删除文件 coding_agent_workflow.db-wal，可能被其他进程占用
2025-07-14 10:53:59 - src.corder_integration.langgraph.nodes.task_splitting_node - WARNING - ⚠️ 无法删除文件 coding_agent_workflow.db-shm，可能被其他进程占用
2025-07-14 10:53:59 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 数据库WAL检查点和优化完成
2025-07-14 10:53:59 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 数据库表结构重置完成
2025-07-14 10:53:59 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📋 步骤1：开始设计文档分析...
2025-07-14 10:53:59 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📄 文档分割完成：4930 字符 -> 3 个窗口
2025-07-14 10:53:59 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📄 设计文档分割成 3 个窗口
2025-07-14 10:53:59 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 分析窗口 1/3 (字符: 0-1926)
2025-07-14 10:54:18 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-14 10:54:18 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 窗口 1 分析完成
2025-07-14 10:54:18 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 分析窗口 2/3 (字符: 1626-3553)
2025-07-14 10:54:34 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-14 10:54:34 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 窗口 2 分析完成
2025-07-14 10:54:34 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 分析窗口 3/3 (字符: 3253-4930)
2025-07-14 10:54:50 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-14 10:54:50 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 窗口 3 分析完成
2025-07-14 10:54:50 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 🔄 合并 3 个设计分析分析结果...
2025-07-14 10:54:50 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📊 合并后的设计分析结果: {'architecture_style': '微服务', 'technology_stack': ['RabbitMQ 3.8', 'Spring Boot 2.7.x', 'Redis', 'Spring Boot', 'MyBatis Plus 3.5.x', 'PageHelper', 'RESTful API', 'Nacos', 'Excel导出工具（如Apache POI或EasyExcel）', 'Redis 6.0', 'pageHelper', 'MySQL', 'MySQL 8.0', 'Spring Cloud 2021.x'], 'functional_modules': [{'name': '用户服务', 'description': '处理用户管理、权限控制和角色管理', 'responsibilities': ['组织单元管理', '用户认证与授权']}, {'name': '确权开立服务', 'description': '处理业务数据的推送和校验逻辑', 'responsibilities': ['业务数据校验', '额度管理功能']}, {'name': '多组织单元管理', 'description': '管理组织单元的基础信息', 'responsibilities': ['组织单元CRUD', '状态管理', '多组织关联']}, {'name': '确权开立服务', 'description': '处理确权开立和额度管理', 'responsibilities': ['额度分配', '额度查询', '额度使用统计']}, {'name': '额度管理模块', 'description': '处理组织单元额度的查询和导出功能', 'responsibilities': ['查询组织单元额度信息', '生成Excel格式的额度报表', '与用户服务交互获取组织单元详细信息']}], 'system_components': ['Redis', 'zqyl-user-center-service（用户服务）', '多组织单元表(t_cust_multiorg_unit)', '确权开立API服务', 'zqyl-user-center-service', 'Redis缓存', 'crcl-open', 'crcl-open（确权开立服务）', 'MySQL数据库', 'MySQL', '额度管理模块'], 'data_flow': ['客户端请求额度列表导出 -> crcl-open服务 -> 调用zqyl-user-center-service获取组织单元信息 -> 查询数据库获取额度数据 -> 生成Excel文件 -> 返回文件下载链接', '分页查询时使用PageHelper进行分页处理', '业务数据 -> 确权开立服务 -> 数据库/缓存', '用户请求 -> 用户服务 -> 数据库', '额度查询→使用统计→报表展示', '企业信息→组织单元创建→额度分配'], 'integration_points': ['企业系统与组织单元管理的集成', 'MySQL数据库连接', '核心企业系统与平台的数据推送接口', '组织单元管理与确权开立服务的集成', 'zqyl-user-center-service的/queryCompanyUnitList接口', '用户服务与确权开立服务间的API调用', 'Redis缓存连接'], 'summary': '该设计采用微服务架构，技术栈成熟且全面。主要包含用户服务和确权开立服务两个核心模块，分别处理用户管理和业务逻辑。系统通过MySQL和Redis进行数据存储和缓存，使用Nacos进行服务发现和配置管理。设计重点在于调整接口校验逻辑以支持数据重推，并新增组织单元额度管理功能。整体架构合理，但需关注服务间通信和数据一致性问题。 该设计采用微服务架构，包含组织单元管理和确权开立两大核心服务。技术栈基于Sp'}
2025-07-14 10:54:50 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 设计概要: 该设计采用微服务架构，技术栈成熟且全面。主要包含用户服务和确权开立服务两个核心模块，分别处理用户管理和业务逻辑。系统通过MySQL和Redis进行数据存储和缓存，使用Nacos进行服务发现和配置管理。设计重点在于调整接口校验逻辑以支持数据重推，并新增组织单元额度管理功能。整体架构合理，但需关注服务间通信和数据一致性问题。 该设计采用微服务架构，包含组织单元管理和确权开立两大核心服务。技术栈基于Sp
2025-07-14 10:54:50 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 🏗️ 步骤2：开始技术架构分析...
2025-07-14 10:54:50 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 技术架构概要: 该设计采用微服务架构，技术栈成熟且全面。主要包含用户服务和确权开立服务两个核心模块，分别处理用户管理和业务逻辑。系统通过MySQL和Redis进行数据存储和缓存，使用Nacos进行服务发现和配置管理。设计重点在于调整接口校验逻辑以支持数据重推，并新增组织单元额度管理功能。整体架构合理，但需关注服务间通信和数据一致性问题。 该设计采用微服务架构，包含组织单元管理和确权开立两大核心服务。技术栈基于Sp
2025-07-14 10:54:50 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 🔍 步骤3：开始服务边界识别...
2025-07-14 10:54:50 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 输入 - 设计概要: 该设计采用微服务架构，技术栈成熟且全面。主要包含用户服务和确权开立服务两个核心模块，分别处理用户管理和业务逻辑。系统通过MySQL和Redis进行数据存储和缓存，使用Nacos进行服务发现和配置管理。设计重点在于调整接口校验逻辑以支持数据重推，并新增组织单元额度管理功能。整体架构合理，但需关注服务间通信和数据一致性问题。 该设计采用微服务架构，包含组织单元管理和确权开立两大核心服务。技术栈基于Sp
2025-07-14 10:54:50 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 输入 - 架构概要: 该设计采用微服务架构，技术栈成熟且全面。主要包含用户服务和确权开立服务两个核心模块，分别处理用户管理和业务逻辑。系统通过MySQL和Redis进行数据存储和缓存，使用Nacos进行服务发现和配置管理。设计重点在于调整接口校验逻辑以支持数据重推，并新增组织单元额度管理功能。整体架构合理，但需关注服务间通信和数据一致性问题。 该设计采用微服务架构，包含组织单元管理和确权开立两大核心服务。技术栈基于Sp
2025-07-14 10:54:50 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 服务拆分提示词长度: 2333
2025-07-14 10:54:59 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-14 10:54:59 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 服务拆分LLM响应长度: 728
2025-07-14 10:54:59 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📊 服务拆分解析结果: {'identified_services': [{'name': '用户服务', 'description': '处理用户管理相关功能', 'git_repository': '', 'responsibilities': ['用户管理'], 'api_endpoints': [], 'database_tables': [], 'external_service_calls': [], 'config_requirements': ['MySQL连接', 'Redis缓存']}, {'name': '确权开立服务', 'description': '处理业务逻辑', 'git_repository': '', 'responsibilities': ['业务逻辑处理', '组织单元额度管理'], 'api_endpoints': [], 'database_tables': [], 'external_service_calls': [], 'config_requirements': ['MySQL连接', 'Redis缓存']}], 'service_call_relationships': {'dependencies': []}, 'summary': '基于设计文档的服务分析概要，确认涉及2个服务，0个新增接口，0个数据库表'}
2025-07-14 10:54:59 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 🎯 识别的服务列表: [{'name': '用户服务', 'description': '处理用户管理相关功能', 'git_repository': '', 'responsibilities': ['用户管理'], 'api_endpoints': [], 'database_tables': [], 'external_service_calls': [], 'config_requirements': ['MySQL连接', 'Redis缓存']}, {'name': '确权开立服务', 'description': '处理业务逻辑', 'git_repository': '', 'responsibilities': ['业务逻辑处理', '组织单元额度管理'], 'api_endpoints': [], 'database_tables': [], 'external_service_calls': [], 'config_requirements': ['MySQL连接', 'Redis缓存']}]
2025-07-14 10:54:59 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 🔢 识别的服务数量: 2
2025-07-14 10:54:59 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 服务拆分概要: 基于设计文档的服务分析概要，确认涉及2个服务，0个新增接口，0个数据库表
2025-07-14 10:54:59 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 🌐 步骤4：开始依赖分析...
2025-07-14 10:54:59 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 依赖分析提示词长度: 2310
2025-07-14 10:55:22 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-14 10:55:22 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 依赖分析LLM响应长度: 1736
2025-07-14 10:55:22 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📊 依赖分析解析结果: {'service_dependencies': {'用户服务': {'database_dependencies': [{'database_type': 'MySQL', 'config_info': '用户数据存储', 'tables_needed': ['user_info'], 'description': '存储用户基本信息'}, {'database_type': 'Redis', 'config_info': '用户会话缓存', 'tables_needed': [], 'description': '缓存用户会话信息'}], 'api_call_dependencies': [], 'provides_apis': [{'endpoint': '/api/user/validate', 'used_by': ['确权开立服务']}]}, '确权开立服务': {'database_dependencies': [{'database_type': 'MySQL', 'config_info': '业务数据存储', 'tables_needed': ['authorization_records'], 'description': '存储确权业务记录'}], 'api_call_dependencies': [{'target_service': '用户服务', 'target_endpoint': '/api/user/validate', 'call_purpose': '用户权限校验', 'dependency_type': '强依赖'}], 'provides_apis': []}}, 'development_order': [{'phase': 1, 'services': ['用户服务'], 'tasks': ['创建user_info表', '实现用户校验接口/api/user/validate'], 'reason': '确权开立服务强依赖用户校验接口'}, {'phase': 2, 'services': ['确权开立服务'], 'tasks': ['创建authorization_records表', '实现业务逻辑并调用用户服务接口'], 'reason': '依赖用户服务的校验接口'}], 'critical_path': ['用户服务 → 确权开立服务'], 'parallel_development': [{'phase': '数据库准备阶段', 'parallel_services': ['用户服务', '确权开立服务'], 'reason': '数据库表可以并行创建，无交叉依赖'}], 'summary': '分析了2个服务的依赖关系，建议分2个阶段开发，关键路径为用户服务→确权开立服务'}
2025-07-14 10:55:22 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 依赖分析概要: 分析了2个服务的依赖关系，建议分2个阶段开发，关键路径为用户服务→确权开立服务
2025-07-14 10:55:22 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📅 步骤5：开始制定执行计划...
2025-07-14 10:55:22 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 任务调度提示词长度: 6199
2025-07-14 10:56:38 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-14 10:56:38 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 任务调度LLM响应长度: 6902
2025-07-14 10:56:38 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📊 执行计划解析结果: {'execution_phases': [{'phase_name': '基础设施搭建阶段', 'phase_order': 1, 'description': '搭建基础环境，包括数据库、配置中心和服务发现', 'estimated_duration': '2天', 'services_involved': ['用户服务', '确权开立服务'], 'task_categories': [{'category': 'database', 'description': '数据库初始化', 'tasks': [{'task_name': '创建MySQL数据库实例', 'service': '基础设施', 'deliverable': '运行中的MySQL实例', 'estimated_hours': 4, 'prerequisites': [], 'assignee_role': 'DBA'}, {'task_name': '配置Redis缓存', 'service': '基础设施', 'deliverable': '运行中的Redis实例', 'estimated_hours': 2, 'prerequisites': [], 'assignee_role': '运维工程师'}]}, {'category': 'config', 'description': '服务配置管理', 'tasks': [{'task_name': '部署Nacos配置中心', 'service': '基础设施', 'deliverable': '可用的Nacos服务', 'estimated_hours': 3, 'prerequisites': [], 'assignee_role': '运维工程师'}, {'task_name': '初始化基础配置', 'service': '基础设施', 'deliverable': '公共配置项', 'estimated_hours': 2, 'prerequisites': ['Nacos部署完成'], 'assignee_role': '后端开发'}]}], 'success_criteria': ['数据库连接测试通过', '配置中心可正常访问', '基础环境健康检查通过'], 'parallel_execution': True}, {'phase_name': '核心服务开发阶段', 'phase_order': 2, 'description': '按依赖顺序开发用户服务和确权开立服务', 'estimated_duration': '5天', 'services_involved': ['用户服务', '确权开立服务'], 'task_categories': [{'category': 'database', 'description': '数据层开发', 'tasks': [{'task_name': '用户服务数据访问层实现', 'service': '用户服务', 'deliverable': 'UserMapper/Dao实现', 'estimated_hours': 8, 'prerequisites': ['MySQL实例就绪'], 'assignee_role': '后端开发'}]}, {'category': 'api', 'description': '接口层开发', 'tasks': [{'task_name': '用户服务接口调整', 'service': '用户服务', 'deliverable': '更新后的接口实现', 'estimated_hours': 6, 'prerequisites': ['数据访问层完成'], 'assignee_role': '后端开发'}]}, {'category': 'service', 'description': '业务逻辑实现', 'tasks': [{'task_name': '用户校验逻辑重构', 'service': '用户服务', 'deliverable': 'UserValidationService', 'estimated_hours': 8, 'prerequisites': ['接口层开发'], 'assignee_role': '后端开发'}, {'task_name': '确权开立服务核心逻辑', 'service': '确权开立服务', 'deliverable': 'EntitlementService实现', 'estimated_hours': 12, 'prerequisites': ['用户服务开发完成'], 'assignee_role': '后端开发'}]}, {'category': 'test', 'description': '单元测试', 'tasks': [{'task_name': '用户服务单元测试', 'service': '用户服务', 'deliverable': '单元测试报告', 'estimated_hours': 4, 'prerequisites': ['业务逻辑实现'], 'assignee_role': '测试工程师'}]}], 'success_criteria': ['核心业务逻辑测试通过', '关键路径集成验证通过', '代码覆盖率达标'], 'parallel_execution': False}, {'phase_name': '系统集成阶段', 'phase_order': 3, 'description': '服务间联调与端到端测试', 'estimated_duration': '3天', 'services_involved': ['用户服务', '确权开立服务'], 'task_categories': [{'category': 'integration', 'description': '服务集成', 'tasks': [{'task_name': '用户服务与确权服务联调', 'service': '集成', 'deliverable': '联调测试报告', 'estimated_hours': 8, 'prerequisites': ['核心服务开发完成'], 'assignee_role': '测试工程师'}]}, {'category': 'config', 'description': '生产配置准备', 'tasks': [{'task_name': '生产环境参数配置', 'service': '基础设施', 'deliverable': '生产环境配置项', 'estimated_hours': 4, 'prerequisites': ['集成测试通过'], 'assignee_role': '运维工程师'}]}], 'success_criteria': ['端到端业务流程测试通过', '性能指标达到要求', '生产配置验证完成'], 'parallel_execution': False}, {'phase_name': '部署上线阶段', 'phase_order': 4, 'description': '生产环境部署与监控', 'estimated_duration': '2天', 'services_involved': ['用户服务', '确权开立服务'], 'task_categories': [{'category': 'deployment', 'description': '服务部署', 'tasks': [{'task_name': '容器化打包部署', 'service': '基础设施', 'deliverable': 'Docker镜像', 'estimated_hours': 6, 'prerequisites': ['生产配置完成'], 'assignee_role': '运维工程师'}]}, {'category': 'monitoring', 'description': '监控配置', 'tasks': [{'task_name': '生产监控告警设置', 'service': '基础设施', 'deliverable': '监控仪表盘', 'estimated_hours': 4, 'prerequisites': ['服务部署完成'], 'assignee_role': '运维工程师'}]}], 'success_criteria': ['生产环境健康检查通过', '监控系统正常运行', '关键业务指标可观测'], 'parallel_execution': False}], 'parallel_groups': [{'group_name': '基础设施并行组', 'group_order': 1, 'services': ['数据库', '缓存', '配置中心'], 'estimated_duration': '2天', 'description': '基础组件可并行部署', 'coordination_points': ['网络配置统一']}], 'execution_order': ['基础设施搭建', '用户服务开发', '确权开立服务开发', '服务集成测试', '生产部署'], 'resource_allocation': {'backend_developers': 2, 'test_engineers': 1, 'devops_engineers': 1, 'dba': 1, 'total_estimated_time': '12天'}, 'risk_management': {'critical_dependencies': [{'task': '用户服务开发', 'risk': '延迟影响确权服务开发', 'mitigation': '优先保证用户服务资源'}], 'buffer_time': '15%', 'contingency_plans': ['关键开发人员备份', '每日站会跟踪进度']}, 'summary': '项目分4个阶段实施，关键路径为用户服务→确权开立服务，预计12个工作日完成交付'}
2025-07-14 10:56:38 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 💾 步骤6：开始生成SQLite任务...
2025-07-14 10:56:38 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📄 执行计划较长(7354字符)，使用滑动窗口处理
2025-07-14 10:56:38 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📄 文档分割完成：7354 字符 -> 5 个窗口
2025-07-14 10:56:38 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 处理计划窗口 1/5
2025-07-14 10:59:06 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-14 10:59:06 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 窗口 1 任务生成完成
2025-07-14 10:59:06 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 处理计划窗口 2/5
2025-07-14 11:01:35 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-14 11:01:35 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 窗口 2 任务生成完成
2025-07-14 11:01:35 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 处理计划窗口 3/5
2025-07-14 11:04:01 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-14 11:04:01 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 窗口 3 任务生成完成
2025-07-14 11:04:01 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 处理计划窗口 4/5
2025-07-14 11:04:33 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-14 11:04:33 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 窗口 4 任务生成完成
2025-07-14 11:04:33 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 处理计划窗口 5/5
2025-07-14 11:07:14 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-14 11:07:14 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 窗口 5 任务生成完成
2025-07-14 11:07:14 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 🔄 合并 5 个任务生成分析结果...
2025-07-14 11:07:14 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📊 任务生成解析结果: {'tasks': [{'task_id': 'task_001', 'service_name': '系统', 'task_type': 'git_extraction', 'priority': 1, 'dependencies': [], 'estimated_duration': '5分钟', 'description': '从设计文档提取GitLab仓库地址', 'implementation_details': '解析设计文档，提取用户服务 http://gitlab.local/ls/zqyl-user-center-service.git 和确权开立服务 http://gitlab.local/ls/crcl-open.git 仓库地址', 'deliverables': ['GitLab仓库地址清单', '仓库访问验证报告'], 'completion_criteria': '成功提取并验证两个GitLab仓库地址可访问性', 'parameters': {'repositories': ['zqyl-user-center-service', 'crcl-open']}}, {'task_id': 'task_002', 'service_name': '用户服务', 'task_type': 'git_clone', 'priority': 2, 'dependencies': ['task_001'], 'estimated_duration': '10分钟', 'description': '下载用户服务代码到D:\\gitlab\\create_project/链数中建一局_1752461639/zqyl-user-center-service', 'implementation_details': '使用git clone命令下载用户服务代码到指定目录，确保项目结构完整可编译', 'deliverables': ['用户服务源码目录'], 'completion_criteria': '代码下载完成，项目目录存在且包含pom.xml文件', 'parameters': {'git_url': 'http://gitlab.local/ls/zqyl-user-center-service.git', 'local_path': 'D:\\gitlab\\create_project/链数中建一局_1752461639/zqyl-user-center-service'}}, {'task_id': 'task_003', 'service_name': '确权开立服务', 'task_type': 'git_clone', 'priority': 2, 'dependencies': ['task_001'], 'estimated_duration': '10分钟', 'description': '下载确权开立服务代码到D:\\gitlab\\create_project/链数中建一局_1752461639/crcl-open', 'implementation_details': '使用git clone命令下载确权开立服务代码到指定目录，确保项目结构完整可编译', 'deliverables': ['确权开立服务源码目录'], 'completion_criteria': '代码下载完成，项目目录存在且包含pom.xml文件', 'parameters': {'git_url': 'http://gitlab.local/ls/crcl-open.git', 'local_path': 'D:\\gitlab\\create_project/链数中建一局_1752461639/crcl-open'}}, {'task_id': 'task_004', 'service_name': '用户服务', 'task_type': 'code_analysis', 'priority': 3, 'dependencies': ['task_002'], 'estimated_duration': '20分钟', 'description': '分析用户服务代码结构，确定MultiorgManageController添加位置', 'implementation_details': '分析项目package结构和controller层，找到或创建MultiorgManageController类的最佳位置', 'deliverables': ['代码结构从Controller层开始到数据获取的完整路径'], 'completion_criteria': '确定MultiorgManageController的包路径和文件位置，明确依赖的Service层结构', 'parameters': {'project_path': 'D:\\gitlab\\create_project/链数中建一局_1752461639/zqyl-user-center-service', 'target_controller': 'MultiorgManageController', 'target_api': '/general/multiorgManage/queryCompanyUnitList'}}, {'task_id': 'task_005', 'service_name': '确权开立服务', 'task_type': 'code_analysis', 'priority': 3, 'dependencies': ['task_003'], 'estimated_duration': '20分钟', 'description': '分析确权开立服务代码结构，确定LsLimitController添加位置', 'implementation_details': '分析项目package结构和controller层，找到或创建LsLimitController类的最佳位置，支持两个接口开发', 'deliverables': ['代码结构从Controller层开始到数据获取的完整路径', 'Feign客户端配置方案'], 'completion_criteria': '确定LsLimitController的包路径和文件位置，明确服务间调用的Feign配置', 'parameters': {'project_path': 'D:\\gitlab\\create_project/链数中建一局_1752461639/crcl-open', 'target_controller': 'LsLimitController', 'target_apis': ['/crcl-open-api/lsLimit/listUnitLimitByCompanyId', '/crcl-open-api/lsLimit/listUnitLimitByCompanyIdExport']}}, {'task_id': 'task_006', 'service_name': '用户服务', 'task_type': 'config', 'priority': 4, 'dependencies': ['task_004'], 'estimated_duration': '15分钟', 'description': '配置用户服务数据库连接：jdbc:mysql://localhost:6446/dbwebappdb', 'implementation_details': '修改application.yml文件，配置数据库连接信息包括URL、用户名密码和连接池设置', 'deliverables': ['数据库配置文件', '连接测试报告'], 'completion_criteria': 'application.yml文件已更新，数据库连接配置正确且可连通', 'parameters': {'config_file': 'D:\\gitlab\\create_project/链数中建一局_1752461639/zqyl-user-center-service/src/main/resources/application.yml', 'database_url': 'jdbc:mysql://localhost:6446/dbwebappdb?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC&characterEncoding=utf8&useUnicode=true', 'username': 'dbwebapp', 'password': 'dbwebapp'}}, {'task_id': 'task_007', 'service_name': '用户服务', 'task_type': 'database', 'priority': 5, 'dependencies': ['task_006'], 'estimated_duration': '15分钟', 'description': '创建t_cust_multiorg_unit表，包含id,company_id,unit_code,unit_name等字段', 'implementation_details': '编写建表SQL脚本，定义主键、索引和字段约束，创建对应的Entity和Mapper文件', 'deliverables': ['建表SQL脚本', 'Entity实体类', 'Mapper接口文件'], 'completion_criteria': '表结构创建成功，Entity和Mapper文件可正常编译，支持基本CRUD操作', 'parameters': {'table_name': 't_cust_multiorg_unit', 'sql_location': 'src/main/resources/sql/t_cust_multiorg_unit.sql'}}, {'task_id': 'task_008', 'service_name': '用户服务', 'task_type': 'api', 'priority': 6, 'dependencies': ['task_007'], 'estimated_duration': '60分钟', 'description': '实现GET /general/multiorgManage/queryCompanyUnitList接口', 'implementation_details': '在MultiorgManageController中实现查询接口，支持条件查询和分页，返回规定的字段格式', 'deliverables': ['MultiorgManageController类', 'Service业务逻辑层', '接口文档'], 'completion_criteria': '接口可正常访问，返回数据格式符合规范，支持条件查询和分页功能', 'parameters': {'project_path': 'D:\\gitlab\\create_project/链数中建一局_1752461639/zqyl-user-center-service', 'api_path': '/general/multiorgManage/queryCompanyUnitList', 'http_method': 'GET', 'content_type': 'application/json', 'request_params': {'unitCode': '组织单元编码(可选)', 'openStatus': '开通状态(可选)', 'unitList': '组织单元列表(可选)'}, 'response_params': {'unitId': '组织单元ID', 'unitTypeDicType': '组织单元类型字典类型', 'unitTypeId': '组织单元类型ID', 'openStatus': '开通状态', 'unitCode': '组织单元编码', 'unitName': '组织单元名称'}, 'business_logic': '根据查询条件查询组织单元信息，支持按编码、状态等条件筛选', 'data_source': 't_cust_multiorg_unit表', 'validation_rules': {'unitCode': '长度不超过50字符', 'openStatus': '取值范围0-1'}}}, {'task_id': 'task_009', 'service_name': '确权开立服务', 'task_type': 'api', 'priority': 7, 'dependencies': ['task_008'], 'estimated_duration': '90分钟', 'description': '实现GET /crcl-open-api/lsLimit/listUnitLimitByCompanyId接口，调用用户服务', 'implementation_details': '在LsLimitController中实现额度查询接口，配置Feign客户端调用用户服务接口获取组织单元信息', 'deliverables': ['LsLimitController类', 'Feign客户端配置', '业务逻辑层'], 'completion_criteria': '接口可正常访问，能成功调用用户服务，返回额度数据格式正确', 'parameters': {'project_path': 'D:\\gitlab\\create_project/链数中建一局_1752461639/crcl-open', 'api_path': '/crcl-open-api/lsLimit/listUnitLimitByCompanyId', 'http_method': 'GET', 'content_type': 'application/json', 'request_params': {'gwCompanyId': '公司ID(必填)', 'unitName': '组织单元名称(可选)', 'limitSource': '额度来源(可选)', 'bizType': '业务类型(必填)', 'page': '页码(可选,默认1)', 'pageRow': '每页行数(可选,默认10)'}, 'response_params': {'totalLimitAmt': '总额度金额', 'usedLimitAmt': '已用额度金额', 'usableLimitAmt': '可用额度金额', 'unitLimitListDetail': '单元额度详情列表'}, 'business_logic': '根据公司ID和筛选条件查询组织单元额度信息，调用用户服务获取组织单元基础信息', 'data_source': '本地额度表 + 用户服务接口', 'external_call': '/general/multiorgManage/queryCompanyUnitList', 'validation_rules': {'gwCompanyId': '必填，数值类型', 'bizType': '必填，业务类型枚举值', 'page': '正整数，默认1', 'pageRow': '正整数，范围1-100'}}}, {'task_id': 'task_010', 'service_name': '确权开立服务', 'task_type': 'api', 'priority': 8, 'dependencies': ['task_009'], 'estimated_duration': '45分钟', 'description': '实现GET /crcl-open-api/lsLimit/listUnitLimitByCompanyIdExport导出接口', 'implementation_details': '在LsLimitController中实现Excel导出接口，复用listUnitLimitByCompanyId的数据逻辑', 'deliverables': ['导出接口方法', 'Excel工具类', '导出模板文件'], 'completion_criteria': '接口可正常访问，能成功导出Excel文件，表头和数据格式正确', 'parameters': {'project_path': 'D:\\gitlab\\create_project/链数中建一局_1752461639/crcl-open', 'api_path': '/crcl-open-api/lsLimit/listUnitLimitByCompanyIdExport', 'http_method': 'GET', 'content_type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'request_params': {'gwCompanyId': '公司ID(必填)', 'unitName': '组织单元名称(可选)', 'limitSource': '额度来源(可选)', 'bizType': '业务类型(必填)'}, 'response_params': {'file': 'Excel文件流', 'filename': '导出文件名', 'contentType': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'}, 'business_logic': '复用listUnitLimitByCompanyId接口的查询逻辑，将结果导出为Excel格式', 'data_source': '调用listUnitLimitByCompanyId接口获取数据', 'export_format': 'xlsx', 'export_headers': ['组织单元名称', '额度名称', '额度类型', '已分配额度', '已用额度', '可用额度'], 'validation_rules': {'gwCompanyId': '必填，数值类型', 'bizType': '必填，业务类型枚举值'}}}, {'task_id': 'task_011', 'service_name': '系统', 'task_type': 'integration_test', 'priority': 9, 'dependencies': ['task_008', 'task_009', 'task_010'], 'estimated_duration': '30分钟', 'description': '测试确权开立服务调用用户服务接口的完整流程', 'implementation_details': '编写集成测试用例，验证服务间调用正确性和数据完整性', 'deliverables': ['集成测试用例', '测试数据脚本', '测试报告'], 'completion_criteria': '所有测试用例通过，接口调用链路正常，数据返回格式正确', 'parameters': {'test_scenarios': ['组织单元额度查询测试'], 'test_data': {'gwCompanyId': 1, 'unitName': '测试单元', 'bizType': 80}}}, {'task_id': 'task_012', 'service_name': '系统', 'task_type': 'deployment', 'priority': 10, 'dependencies': ['task_011'], 'estimated_duration': '20分钟', 'description': '提交代码到GitLab仓库，commit message: feat: 新增组织单元额度管理功能', 'implementation_details': '执行git add、git commit和git push命令，提交所有新增和修改的代码文件', 'deliverables': ['Git提交记录', '代码合并报告', '部署文档'], 'completion_criteria': '代码成功提交到GitLab仓库，commit信息清晰，无冲突', 'parameters': {'repositories': [{'path': 'D:\\gitlab\\create_project/链数中建一局_1752461639/zqyl-user-center-service', 'changes': '新增组织单元查询接口'}, {'path': 'D:\\gitlab\\create_project/链数中建一局_1752461639/crcl-open', 'changes': '新增组织单元额度列表和导出接口'}]}}], 'total_tasks': 12, 'summary': '生成12个任务：GitLab代码下载->结构分析->环境配置->接口开发->测试部署。严格使用设计文档中的真实接口路径和参数，确保先开发用户服务接口，再开发依赖它的确权开立服务接口。 生成12个任务：GitLab代码下载->结构分析->环境配置->接口开发->测试部署。严格使用设计文档中的真实接口路径和参数，确保先开发用户服务接口，再开发依赖它的确权开立服务接口。 生成12个任务：GitLab代码'}
2025-07-14 11:07:14 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 🎯 生成的任务列表: [{'task_id': 'task_001', 'service_name': '系统', 'task_type': 'git_extraction', 'priority': 1, 'dependencies': [], 'estimated_duration': '5分钟', 'description': '从设计文档提取GitLab仓库地址', 'implementation_details': '解析设计文档，提取用户服务 http://gitlab.local/ls/zqyl-user-center-service.git 和确权开立服务 http://gitlab.local/ls/crcl-open.git 仓库地址', 'deliverables': ['GitLab仓库地址清单', '仓库访问验证报告'], 'completion_criteria': '成功提取并验证两个GitLab仓库地址可访问性', 'parameters': {'repositories': ['zqyl-user-center-service', 'crcl-open']}}, {'task_id': 'task_002', 'service_name': '用户服务', 'task_type': 'git_clone', 'priority': 2, 'dependencies': ['task_001'], 'estimated_duration': '10分钟', 'description': '下载用户服务代码到D:\\gitlab\\create_project/链数中建一局_1752461639/zqyl-user-center-service', 'implementation_details': '使用git clone命令下载用户服务代码到指定目录，确保项目结构完整可编译', 'deliverables': ['用户服务源码目录'], 'completion_criteria': '代码下载完成，项目目录存在且包含pom.xml文件', 'parameters': {'git_url': 'http://gitlab.local/ls/zqyl-user-center-service.git', 'local_path': 'D:\\gitlab\\create_project/链数中建一局_1752461639/zqyl-user-center-service'}}, {'task_id': 'task_003', 'service_name': '确权开立服务', 'task_type': 'git_clone', 'priority': 2, 'dependencies': ['task_001'], 'estimated_duration': '10分钟', 'description': '下载确权开立服务代码到D:\\gitlab\\create_project/链数中建一局_1752461639/crcl-open', 'implementation_details': '使用git clone命令下载确权开立服务代码到指定目录，确保项目结构完整可编译', 'deliverables': ['确权开立服务源码目录'], 'completion_criteria': '代码下载完成，项目目录存在且包含pom.xml文件', 'parameters': {'git_url': 'http://gitlab.local/ls/crcl-open.git', 'local_path': 'D:\\gitlab\\create_project/链数中建一局_1752461639/crcl-open'}}, {'task_id': 'task_004', 'service_name': '用户服务', 'task_type': 'code_analysis', 'priority': 3, 'dependencies': ['task_002'], 'estimated_duration': '20分钟', 'description': '分析用户服务代码结构，确定MultiorgManageController添加位置', 'implementation_details': '分析项目package结构和controller层，找到或创建MultiorgManageController类的最佳位置', 'deliverables': ['代码结构从Controller层开始到数据获取的完整路径'], 'completion_criteria': '确定MultiorgManageController的包路径和文件位置，明确依赖的Service层结构', 'parameters': {'project_path': 'D:\\gitlab\\create_project/链数中建一局_1752461639/zqyl-user-center-service', 'target_controller': 'MultiorgManageController', 'target_api': '/general/multiorgManage/queryCompanyUnitList'}}, {'task_id': 'task_005', 'service_name': '确权开立服务', 'task_type': 'code_analysis', 'priority': 3, 'dependencies': ['task_003'], 'estimated_duration': '20分钟', 'description': '分析确权开立服务代码结构，确定LsLimitController添加位置', 'implementation_details': '分析项目package结构和controller层，找到或创建LsLimitController类的最佳位置，支持两个接口开发', 'deliverables': ['代码结构从Controller层开始到数据获取的完整路径', 'Feign客户端配置方案'], 'completion_criteria': '确定LsLimitController的包路径和文件位置，明确服务间调用的Feign配置', 'parameters': {'project_path': 'D:\\gitlab\\create_project/链数中建一局_1752461639/crcl-open', 'target_controller': 'LsLimitController', 'target_apis': ['/crcl-open-api/lsLimit/listUnitLimitByCompanyId', '/crcl-open-api/lsLimit/listUnitLimitByCompanyIdExport']}}, {'task_id': 'task_006', 'service_name': '用户服务', 'task_type': 'config', 'priority': 4, 'dependencies': ['task_004'], 'estimated_duration': '15分钟', 'description': '配置用户服务数据库连接：jdbc:mysql://localhost:6446/dbwebappdb', 'implementation_details': '修改application.yml文件，配置数据库连接信息包括URL、用户名密码和连接池设置', 'deliverables': ['数据库配置文件', '连接测试报告'], 'completion_criteria': 'application.yml文件已更新，数据库连接配置正确且可连通', 'parameters': {'config_file': 'D:\\gitlab\\create_project/链数中建一局_1752461639/zqyl-user-center-service/src/main/resources/application.yml', 'database_url': 'jdbc:mysql://localhost:6446/dbwebappdb?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC&characterEncoding=utf8&useUnicode=true', 'username': 'dbwebapp', 'password': 'dbwebapp'}}, {'task_id': 'task_007', 'service_name': '用户服务', 'task_type': 'database', 'priority': 5, 'dependencies': ['task_006'], 'estimated_duration': '15分钟', 'description': '创建t_cust_multiorg_unit表，包含id,company_id,unit_code,unit_name等字段', 'implementation_details': '编写建表SQL脚本，定义主键、索引和字段约束，创建对应的Entity和Mapper文件', 'deliverables': ['建表SQL脚本', 'Entity实体类', 'Mapper接口文件'], 'completion_criteria': '表结构创建成功，Entity和Mapper文件可正常编译，支持基本CRUD操作', 'parameters': {'table_name': 't_cust_multiorg_unit', 'sql_location': 'src/main/resources/sql/t_cust_multiorg_unit.sql'}}, {'task_id': 'task_008', 'service_name': '用户服务', 'task_type': 'api', 'priority': 6, 'dependencies': ['task_007'], 'estimated_duration': '60分钟', 'description': '实现GET /general/multiorgManage/queryCompanyUnitList接口', 'implementation_details': '在MultiorgManageController中实现查询接口，支持条件查询和分页，返回规定的字段格式', 'deliverables': ['MultiorgManageController类', 'Service业务逻辑层', '接口文档'], 'completion_criteria': '接口可正常访问，返回数据格式符合规范，支持条件查询和分页功能', 'parameters': {'project_path': 'D:\\gitlab\\create_project/链数中建一局_1752461639/zqyl-user-center-service', 'api_path': '/general/multiorgManage/queryCompanyUnitList', 'http_method': 'GET', 'content_type': 'application/json', 'request_params': {'unitCode': '组织单元编码(可选)', 'openStatus': '开通状态(可选)', 'unitList': '组织单元列表(可选)'}, 'response_params': {'unitId': '组织单元ID', 'unitTypeDicType': '组织单元类型字典类型', 'unitTypeId': '组织单元类型ID', 'openStatus': '开通状态', 'unitCode': '组织单元编码', 'unitName': '组织单元名称'}, 'business_logic': '根据查询条件查询组织单元信息，支持按编码、状态等条件筛选', 'data_source': 't_cust_multiorg_unit表', 'validation_rules': {'unitCode': '长度不超过50字符', 'openStatus': '取值范围0-1'}}}, {'task_id': 'task_009', 'service_name': '确权开立服务', 'task_type': 'api', 'priority': 7, 'dependencies': ['task_008'], 'estimated_duration': '90分钟', 'description': '实现GET /crcl-open-api/lsLimit/listUnitLimitByCompanyId接口，调用用户服务', 'implementation_details': '在LsLimitController中实现额度查询接口，配置Feign客户端调用用户服务接口获取组织单元信息', 'deliverables': ['LsLimitController类', 'Feign客户端配置', '业务逻辑层'], 'completion_criteria': '接口可正常访问，能成功调用用户服务，返回额度数据格式正确', 'parameters': {'project_path': 'D:\\gitlab\\create_project/链数中建一局_1752461639/crcl-open', 'api_path': '/crcl-open-api/lsLimit/listUnitLimitByCompanyId', 'http_method': 'GET', 'content_type': 'application/json', 'request_params': {'gwCompanyId': '公司ID(必填)', 'unitName': '组织单元名称(可选)', 'limitSource': '额度来源(可选)', 'bizType': '业务类型(必填)', 'page': '页码(可选,默认1)', 'pageRow': '每页行数(可选,默认10)'}, 'response_params': {'totalLimitAmt': '总额度金额', 'usedLimitAmt': '已用额度金额', 'usableLimitAmt': '可用额度金额', 'unitLimitListDetail': '单元额度详情列表'}, 'business_logic': '根据公司ID和筛选条件查询组织单元额度信息，调用用户服务获取组织单元基础信息', 'data_source': '本地额度表 + 用户服务接口', 'external_call': '/general/multiorgManage/queryCompanyUnitList', 'validation_rules': {'gwCompanyId': '必填，数值类型', 'bizType': '必填，业务类型枚举值', 'page': '正整数，默认1', 'pageRow': '正整数，范围1-100'}}}, {'task_id': 'task_010', 'service_name': '确权开立服务', 'task_type': 'api', 'priority': 8, 'dependencies': ['task_009'], 'estimated_duration': '45分钟', 'description': '实现GET /crcl-open-api/lsLimit/listUnitLimitByCompanyIdExport导出接口', 'implementation_details': '在LsLimitController中实现Excel导出接口，复用listUnitLimitByCompanyId的数据逻辑', 'deliverables': ['导出接口方法', 'Excel工具类', '导出模板文件'], 'completion_criteria': '接口可正常访问，能成功导出Excel文件，表头和数据格式正确', 'parameters': {'project_path': 'D:\\gitlab\\create_project/链数中建一局_1752461639/crcl-open', 'api_path': '/crcl-open-api/lsLimit/listUnitLimitByCompanyIdExport', 'http_method': 'GET', 'content_type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'request_params': {'gwCompanyId': '公司ID(必填)', 'unitName': '组织单元名称(可选)', 'limitSource': '额度来源(可选)', 'bizType': '业务类型(必填)'}, 'response_params': {'file': 'Excel文件流', 'filename': '导出文件名', 'contentType': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'}, 'business_logic': '复用listUnitLimitByCompanyId接口的查询逻辑，将结果导出为Excel格式', 'data_source': '调用listUnitLimitByCompanyId接口获取数据', 'export_format': 'xlsx', 'export_headers': ['组织单元名称', '额度名称', '额度类型', '已分配额度', '已用额度', '可用额度'], 'validation_rules': {'gwCompanyId': '必填，数值类型', 'bizType': '必填，业务类型枚举值'}}}, {'task_id': 'task_011', 'service_name': '系统', 'task_type': 'integration_test', 'priority': 9, 'dependencies': ['task_008', 'task_009', 'task_010'], 'estimated_duration': '30分钟', 'description': '测试确权开立服务调用用户服务接口的完整流程', 'implementation_details': '编写集成测试用例，验证服务间调用正确性和数据完整性', 'deliverables': ['集成测试用例', '测试数据脚本', '测试报告'], 'completion_criteria': '所有测试用例通过，接口调用链路正常，数据返回格式正确', 'parameters': {'test_scenarios': ['组织单元额度查询测试'], 'test_data': {'gwCompanyId': 1, 'unitName': '测试单元', 'bizType': 80}}}, {'task_id': 'task_012', 'service_name': '系统', 'task_type': 'deployment', 'priority': 10, 'dependencies': ['task_011'], 'estimated_duration': '20分钟', 'description': '提交代码到GitLab仓库，commit message: feat: 新增组织单元额度管理功能', 'implementation_details': '执行git add、git commit和git push命令，提交所有新增和修改的代码文件', 'deliverables': ['Git提交记录', '代码合并报告', '部署文档'], 'completion_criteria': '代码成功提交到GitLab仓库，commit信息清晰，无冲突', 'parameters': {'repositories': [{'path': 'D:\\gitlab\\create_project/链数中建一局_1752461639/zqyl-user-center-service', 'changes': '新增组织单元查询接口'}, {'path': 'D:\\gitlab\\create_project/链数中建一局_1752461639/crcl-open', 'changes': '新增组织单元额度列表和导出接口'}]}}]
2025-07-14 11:07:14 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 🔢 生成的任务数量: 12
2025-07-14 11:07:14 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 已保存 12 个任务到数据库
2025-07-14 11:07:14 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 已生成并保存 12 个任务到数据库
2025-07-14 11:07:14 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📤 最终服务列表: ['用户服务', '确权开立服务']
2025-07-14 11:07:14 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📤 生成并行任务批次: [{'batch_id': 'batch_1', 'services': ['用户服务', '确权开立服务'], 'dependencies': []}]
2025-07-14 11:07:14 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📤 输出状态键: ['design_doc', 'project_name', 'identified_services', 'service_dependencies', 'task_execution_plan', 'parallel_tasks', 'git_repo_url', 'target_branch', 'project_paths', 'output_path', 'repo_initialized', 'generated_services', 'generated_apis', 'generated_sql', 'service_interconnections', 'unit_test_results', 'test_coverage', 'interface_compatibility', 'code_review_results', 'static_analysis_results', 'security_scan_results', 'commit_hashes', 'push_results', 'pr_urls', 'current_phase', 'completed_services', 'failed_services', 'retry_count', 'execution_errors', 'generated_tasks']
2025-07-14 11:07:14 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📤 输出 - 识别服务: ['用户服务', '确权开立服务']
2025-07-14 11:07:14 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📤 输出 - 当前阶段: intelligent_coding
2025-07-14 11:07:14 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 任务拆分完成，识别 2 个服务，生成 12 个任务
2025-07-14 11:07:14 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🚀 Git管理节点开始执行...
2025-07-14 11:07:14 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 11:07:14 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🎯 git_management_node 开始执行任务...
2025-07-14 11:07:14 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 📋 找到 1 个可执行任务
2025-07-14 11:07:14 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🚀 开始执行任务: task_001 (git_extraction)
2025-07-14 11:07:14 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_001 已被 git_management_node 领取
2025-07-14 11:07:14 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🔍 执行Git提取任务: task_001
2025-07-14 11:07:14 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 📄 提取源文本: 解析设计文档，提取用户服务 http://gitlab.local/ls/zqyl-user-center-service.git 和确权开立服务 http://gitlab.local/ls/crcl-open.git 仓库地址 从设计文档提取GitLab仓库地址...
2025-07-14 11:07:14 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🔍 开始从文本提取Git URL...
2025-07-14 11:07:14 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🔗 找到Git仓库: http://gitlab.local/ls/zqyl-user-center-service.git
2025-07-14 11:07:14 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🔗 找到Git仓库: http://gitlab.local/ls/crcl-open.git
2025-07-14 11:07:14 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 提取到 2 个Git仓库
2025-07-14 11:07:14 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_001 状态更新为 completed
2025-07-14 11:07:14 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 任务 task_001 执行成功
2025-07-14 11:07:14 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ Git管理任务执行完成，共处理 1 个任务
2025-07-14 11:07:14 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🚀 基于提取结果自动克隆 2 个仓库...
2025-07-14 11:07:14 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 📥 自动克隆仓库: http://gitlab.local/ls/zqyl-user-center-service.git -> D:\gitlab\create_project/链数中建一局_1752461639/zqyl-user-center-service
2025-07-14 11:07:14 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 📥 开始克隆仓库: http://gitlab.local/ls/zqyl-user-center-service.git -> D:\gitlab\create_project/链数中建一局_1752461639/zqyl-user-center-service
2025-07-14 11:07:16 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 已切换到分支: master
2025-07-14 11:07:16 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 仓库克隆成功: D:\gitlab\create_project/链数中建一局_1752461639/zqyl-user-center-service
2025-07-14 11:07:16 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 自动克隆成功: zqyl-user-center-service
2025-07-14 11:07:16 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 已标记任务 task_002 为完成状态
2025-07-14 11:07:16 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 📥 自动克隆仓库: http://gitlab.local/ls/crcl-open.git -> D:\gitlab\create_project/链数中建一局_1752461639/crcl-open
2025-07-14 11:07:16 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 📥 开始克隆仓库: http://gitlab.local/ls/crcl-open.git -> D:\gitlab\create_project/链数中建一局_1752461639/crcl-open
2025-07-14 11:07:17 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 已切换到分支: master
2025-07-14 11:07:17 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 仓库克隆成功: D:\gitlab\create_project/链数中建一局_1752461639/crcl-open
2025-07-14 11:07:17 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 自动克隆成功: crcl-open
2025-07-14 11:07:17 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 已标记任务 task_003 为完成状态
2025-07-14 11:07:17 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ Git管理节点完成 - 提取: 2 个仓库, 克隆: 2 个仓库, 仓库初始化状态: True
2025-07-14 11:07:17 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 11:07:17 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 11:07:17 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 11:07:18 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 11:07:18 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 11:07:18 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 11:07:18 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 11:07:18 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 11:07:18 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-14 11:07:18 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 11:07:18 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 11:07:18 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 第1轮找到 2 个可执行任务
2025-07-14 11:07:18 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 开始执行任务: task_004 (code_analysis)
2025-07-14 11:07:18 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_004 已被 intelligent_coding_node 领取
2025-07-14 11:07:18 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行代码分析任务: task_004
2025-07-14 11:07:18 - src.utils.java_code_analyzer - INFO - 🔍 开始分析企业级Java项目: D:\gitlab\create_project/链数中建一局_1752461639/zqyl-user-center-service
2025-07-14 11:07:18 - src.utils.java_code_analyzer - INFO - ✅ 企业级项目分析完成，共分析 29 个Java文件
2025-07-14 11:07:18 - src.utils.java_code_analyzer - INFO - 📄 企业级分析报告已导出: outputs\用户服务_java_analysis_20250714_110718.md
2025-07-14 11:07:18 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_004 状态更新为 completed
2025-07-14 11:07:18 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 任务 task_004 执行成功
2025-07-14 11:07:18 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 开始执行任务: task_005 (code_analysis)
2025-07-14 11:07:18 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_005 已被 intelligent_coding_node 领取
2025-07-14 11:07:18 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行代码分析任务: task_005
2025-07-14 11:07:18 - src.utils.java_code_analyzer - INFO - 🔍 开始分析企业级Java项目: D:\gitlab\create_project/链数中建一局_1752461639/crcl-open
2025-07-14 11:07:28 - src.utils.java_code_analyzer - INFO - ✅ 企业级项目分析完成，共分析 2262 个Java文件
2025-07-14 11:07:28 - src.utils.java_code_analyzer - INFO - 📄 企业级分析报告已导出: outputs\确权开立服务_java_analysis_20250714_110728.md
2025-07-14 11:07:29 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_005 状态更新为 completed
2025-07-14 11:07:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 任务 task_005 执行成功
2025-07-14 11:07:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 第1轮执行完成，处理了 2 个任务
2025-07-14 11:07:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第2轮任务检查...
2025-07-14 11:07:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 第2轮找到 1 个可执行任务
2025-07-14 11:07:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 开始执行任务: task_006 (config)
2025-07-14 11:07:29 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_006 已被 intelligent_coding_node 领取
2025-07-14 11:07:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ⚙️ 执行配置生成任务: task_006
2025-07-14 11:07:29 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_006 状态更新为 completed
2025-07-14 11:07:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 任务 task_006 执行成功
2025-07-14 11:07:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 第2轮执行完成，处理了 1 个任务
2025-07-14 11:07:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第3轮任务检查...
2025-07-14 11:07:30 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 第3轮找到 1 个可执行任务
2025-07-14 11:07:30 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 开始执行任务: task_007 (database)
2025-07-14 11:07:30 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_007 已被 intelligent_coding_node 领取
2025-07-14 11:07:30 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🗄️ 执行数据库设计任务: task_007
2025-07-14 11:07:30 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_007 状态更新为 completed
2025-07-14 11:07:30 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 任务 task_007 执行成功
2025-07-14 11:07:30 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 第3轮执行完成，处理了 1 个任务
2025-07-14 11:07:30 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第4轮任务检查...
2025-07-14 11:07:30 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 第4轮找到 1 个可执行任务
2025-07-14 11:07:30 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 开始执行任务: task_008 (api)
2025-07-14 11:07:30 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_008 已被 intelligent_coding_node 领取
2025-07-14 11:07:30 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🌐 执行API接口生成任务: task_008
2025-07-14 11:07:30 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 解析的接口信息:
2025-07-14 11:07:30 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 接口名称: CompanyUnitList
2025-07-14 11:07:30 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - API路径: /general/multiorgManage/queryCompanyUnitList
2025-07-14 11:07:30 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - HTTP方法: GET
2025-07-14 11:07:30 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 输入参数: 3个
2025-07-14 11:07:30 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 输出参数: 6个
2025-07-14 11:07:30 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 业务描述: 根据查询条件查询组织单元信息，支持按编码、状态等条件筛选
2025-07-14 11:07:30 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 在 D:\gitlab\create_project/链数中建一局_1752461639/zqyl-user-center-service 中查找最佳Java项目路径...
2025-07-14 11:07:30 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 目标服务名: 用户服务
2025-07-14 11:07:30 - src.corder_integration.langgraph.nodes.intelligent_coding_node - ERROR - ❌ 接口生成失败: 'IntelligentCodingAgent' object has no attribute '_calculate_enhanced_path_priority'
2025-07-14 11:07:30 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_008 状态更新为 failed
2025-07-14 11:07:30 - src.corder_integration.langgraph.nodes.intelligent_coding_node - ERROR - ❌ 任务 task_008 执行失败: 接口生成失败: 'IntelligentCodingAgent' object has no attribute '_calculate_enhanced_path_priority'
2025-07-14 11:07:30 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 第4轮执行完成，处理了 1 个任务
2025-07-14 11:07:30 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第5轮任务检查...
2025-07-14 11:07:30 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第5轮没有可执行的智能编码任务
2025-07-14 11:07:30 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 5 个任务，共5轮
2025-07-14 11:07:30 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 5 个任务
2025-07-14 11:07:30 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 11:07:30 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 11:07:30 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 11:07:31 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 11:07:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 11:07:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 11:07:31 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 11:07:31 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 11:07:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-14 11:07:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 11:07:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 11:07:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 11:07:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 11:07:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 11:07:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 11:07:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 11:07:31 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 11:07:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 11:07:31 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 11:07:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 11:07:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 11:07:31 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 11:07:31 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 11:07:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-14 11:07:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 11:07:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 11:07:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 11:07:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 11:07:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 11:07:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 11:07:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 11:07:31 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 11:07:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 11:07:32 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 11:07:32 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 11:07:32 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 11:07:32 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 11:07:32 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 11:07:32 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-14 11:07:32 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 11:07:32 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 11:07:32 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 11:07:32 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 11:07:32 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 11:07:32 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 11:07:32 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 11:07:32 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 11:07:32 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 11:07:32 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 11:07:32 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 11:07:32 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 11:07:32 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 11:07:32 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 11:07:32 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-14 11:07:32 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 11:07:32 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 11:07:32 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 11:07:32 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 11:07:32 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 11:07:32 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 11:07:32 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 11:07:32 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 11:07:32 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 11:07:33 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 11:07:33 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 11:07:33 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 11:07:33 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 11:07:33 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 11:07:33 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-14 11:07:33 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 11:07:33 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 11:07:33 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 11:07:33 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 11:07:33 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 11:07:33 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 11:07:33 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 11:07:33 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 11:07:33 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 11:07:33 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 11:07:33 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 11:07:33 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 11:07:33 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 11:07:33 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 11:07:33 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-14 11:07:33 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 11:07:33 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 11:07:33 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 11:07:33 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 11:07:33 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 11:07:33 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 11:07:33 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 11:07:33 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 11:07:33 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 11:07:34 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 11:07:34 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 11:07:34 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 11:07:34 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 11:07:34 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 11:07:34 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-14 11:07:34 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 11:07:34 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 11:07:34 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 11:07:34 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 11:07:34 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 11:07:34 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 11:07:34 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 11:07:34 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 11:07:34 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 11:07:34 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 11:07:34 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 11:07:34 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 11:07:34 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 11:07:34 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 11:07:34 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-14 11:07:34 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 11:07:34 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 11:07:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 11:07:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 11:07:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 11:07:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 11:07:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 11:07:35 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 11:07:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 11:07:35 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 11:07:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 11:07:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 11:07:35 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 11:07:35 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 11:07:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-14 11:07:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 11:07:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 11:07:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 11:07:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 11:07:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 11:07:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 11:07:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 11:07:35 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 11:07:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 11:07:35 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 11:07:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 11:07:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 11:07:35 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 11:07:35 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 11:07:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-14 11:07:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 11:07:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 11:07:36 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 11:07:36 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 11:07:36 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 11:07:36 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 11:07:36 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 11:07:36 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 11:07:36 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 11:07:36 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 11:07:36 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 11:07:36 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 11:07:36 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 11:07:36 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 11:07:36 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-14 11:07:36 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 11:07:36 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 11:07:36 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 11:07:36 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 11:07:36 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 11:07:36 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 11:07:36 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 11:07:36 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 11:07:36 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 11:07:36 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 11:07:36 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 11:07:36 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 11:07:36 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 11:07:36 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 11:07:36 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-14 11:07:36 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 11:07:36 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 11:07:36 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 11:07:36 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 11:07:36 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 11:07:36 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 11:07:36 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 11:07:36 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 11:07:36 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 11:07:37 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 11:07:37 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 11:07:37 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 11:07:37 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 11:07:37 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 11:07:37 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-14 11:07:37 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 11:07:37 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 11:07:37 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 11:07:37 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 11:07:37 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 11:07:37 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 11:07:37 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 11:07:37 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 11:07:37 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 11:07:37 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 11:07:37 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 11:07:37 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 11:07:37 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 11:07:37 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 11:07:37 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-14 11:07:37 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 11:07:37 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 11:07:37 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 11:07:37 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 11:07:37 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 11:07:37 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 11:07:37 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 11:07:37 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 11:07:37 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 11:07:38 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 11:07:38 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 11:07:38 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 11:07:38 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 11:07:38 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 11:07:38 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-14 11:07:38 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 11:07:38 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 11:07:38 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 11:07:38 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 11:07:38 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 11:07:38 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 11:07:38 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 11:07:38 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 11:07:38 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 11:07:38 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 11:07:38 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 11:07:38 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 11:07:38 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 11:07:38 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 11:07:38 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-14 11:07:38 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 11:07:38 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 11:07:38 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 11:07:38 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 11:07:38 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 11:07:38 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 11:07:38 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 11:07:38 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 11:07:38 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 11:07:39 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 11:07:39 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 11:07:39 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 11:07:39 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 11:07:39 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 11:07:39 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-14 11:07:39 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 11:07:39 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 11:07:39 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 11:07:39 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 11:07:39 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 11:07:39 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 11:07:39 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 11:07:39 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 11:07:39 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 11:07:39 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 11:07:39 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 11:07:39 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 11:07:39 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 11:07:39 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 11:07:39 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-14 11:07:39 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 11:07:39 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 11:07:39 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 11:07:39 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 11:07:39 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 11:07:39 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 11:07:39 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 11:07:39 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 11:07:39 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 11:07:40 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 11:07:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 11:07:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 11:07:40 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 11:07:40 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 11:07:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-14 11:07:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 11:07:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 11:07:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 11:07:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 11:07:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 11:07:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 11:07:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 11:07:40 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 11:07:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 11:07:40 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 11:07:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 11:07:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 11:07:40 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 11:07:40 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 11:07:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-14 11:07:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 11:07:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 11:07:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 11:07:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 11:07:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 11:07:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 11:07:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 11:07:40 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 11:07:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 11:07:41 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 11:07:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 11:07:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 11:07:41 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 11:07:41 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 11:07:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-14 11:07:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 11:07:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 11:07:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 11:07:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 11:07:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 11:07:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 11:07:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 11:07:41 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 11:07:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 11:07:41 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 11:07:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 11:07:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 11:07:41 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 11:07:41 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 11:07:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-14 11:07:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 11:07:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 11:07:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 11:07:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 11:07:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 11:07:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 11:07:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 11:07:42 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 11:07:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 11:07:42 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 11:07:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 11:07:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 11:07:42 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 11:07:42 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 11:07:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-14 11:07:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 11:07:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 11:07:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 11:07:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 11:07:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 11:07:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 11:07:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 11:07:42 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 11:07:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 11:07:42 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 11:07:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 11:07:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 11:07:42 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 11:07:42 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 11:07:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-14 11:07:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 11:07:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 11:07:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 11:07:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 11:07:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 11:07:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 11:07:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 11:07:42 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 11:07:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 11:07:43 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 11:07:43 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 11:07:43 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 11:07:43 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 11:07:43 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 11:07:43 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-14 11:07:43 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 11:07:43 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 11:07:43 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 11:07:43 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 11:07:43 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 11:07:43 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 11:07:43 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 11:07:43 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 11:07:43 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 11:07:43 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 11:07:43 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 11:07:43 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 11:07:43 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 11:07:43 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 11:07:43 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-14 11:07:43 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 11:07:43 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 11:07:43 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 11:07:43 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 11:07:43 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 11:07:43 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 11:07:43 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 11:07:43 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 11:07:43 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 11:07:44 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 11:07:44 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 11:07:44 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 11:07:44 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 11:07:44 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 11:07:44 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-14 11:07:44 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 11:07:44 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 11:07:44 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 11:07:44 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 11:07:44 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 11:07:44 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 11:07:44 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 11:07:44 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 11:07:44 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 11:07:44 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 11:07:44 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 11:07:44 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 11:07:44 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 11:07:44 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 11:07:44 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-14 11:07:44 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 11:07:44 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 11:07:44 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 11:07:44 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 11:07:44 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 11:07:44 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 11:07:44 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 11:07:44 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 11:07:44 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 11:07:45 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 11:07:45 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 11:07:45 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 11:07:45 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 11:07:45 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 11:07:45 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-14 11:07:45 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 11:07:45 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 11:07:45 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 11:07:45 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 11:07:45 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 11:07:45 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 11:07:45 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 11:07:45 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 11:07:45 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 11:07:45 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 11:07:45 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 11:07:45 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 11:07:45 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 11:07:45 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 11:07:45 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-14 11:07:45 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 11:07:45 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 11:07:46 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 11:07:46 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 11:07:46 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 11:07:46 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 11:07:46 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 11:07:46 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 11:07:46 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 11:07:46 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 11:07:46 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 11:07:46 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 11:07:46 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 11:07:46 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 11:07:46 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-14 11:07:46 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 11:07:46 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 11:07:46 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 11:07:46 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 11:07:46 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 11:07:46 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 11:07:46 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 11:07:46 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 11:07:46 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 11:07:46 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 11:07:46 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 11:07:46 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 11:07:46 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 11:07:46 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 11:07:46 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-14 11:07:46 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 11:07:46 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 11:07:47 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 11:07:47 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 11:07:47 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 11:07:47 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 11:07:47 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 11:07:47 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 11:07:47 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 11:07:47 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 11:07:47 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 11:07:47 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 11:07:47 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 11:07:47 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 11:07:47 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-14 11:07:47 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 11:07:47 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 11:07:47 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 11:07:47 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 11:07:47 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 11:07:47 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 11:07:47 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 11:07:47 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 11:07:47 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 11:07:48 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 11:07:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 11:07:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 11:07:48 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 11:07:48 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 11:07:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-14 11:07:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 11:07:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 11:07:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 11:07:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 11:07:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 11:07:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 11:07:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 11:07:48 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 11:07:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 11:07:48 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 11:07:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 11:07:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 11:07:48 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 11:07:48 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 11:07:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-14 11:07:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 11:07:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 11:07:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 11:07:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 11:07:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 11:07:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 11:07:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 11:07:48 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 11:07:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 11:07:49 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 11:07:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 11:07:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 11:07:49 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 11:07:49 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 11:07:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-14 11:07:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 11:07:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 11:07:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 11:07:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 11:07:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 11:07:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 11:07:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 11:07:49 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 11:07:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 11:07:49 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 11:07:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 11:07:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 11:07:49 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 11:07:49 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 11:07:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-14 11:07:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 11:07:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 11:07:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 11:07:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 11:07:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 11:07:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 11:07:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 11:07:49 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 11:07:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 11:07:50 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 11:07:50 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 11:07:50 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 11:07:50 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 11:07:50 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 11:07:50 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-14 11:07:50 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 11:07:50 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 11:07:50 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 11:07:50 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 11:07:50 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 11:07:50 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 11:07:50 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 11:07:50 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 11:07:50 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 11:07:50 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 11:07:50 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 11:07:50 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 11:07:50 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 11:07:50 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 11:07:50 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-14 11:07:50 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 11:07:50 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 11:07:50 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 11:07:50 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 11:07:50 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 11:07:50 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 11:07:50 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 11:07:50 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 11:07:50 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 11:07:51 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 11:07:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 11:07:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 11:07:51 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 11:07:51 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 11:07:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-14 11:07:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 11:07:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 11:07:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 11:07:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 11:07:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 11:07:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 11:07:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 11:07:51 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 11:07:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 11:07:51 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 11:07:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 11:07:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 11:07:51 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 11:07:51 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 11:07:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-14 11:07:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 11:07:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 11:07:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 11:07:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 11:07:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 11:07:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 11:07:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 11:07:51 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 11:07:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 11:07:52 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 11:07:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 11:07:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 11:07:52 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 11:07:52 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 11:07:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-14 11:07:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 11:07:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 11:07:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 11:07:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 11:07:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 11:07:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 11:07:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 11:07:52 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 11:07:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 11:07:52 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 11:07:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 11:07:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 11:07:52 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 11:07:52 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 11:07:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-14 11:07:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 11:07:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 11:07:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 11:07:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 11:07:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 11:07:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 11:07:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 11:07:52 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 11:07:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 11:07:52 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 11:07:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 11:07:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 11:07:52 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 11:07:52 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 11:07:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-14 11:07:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 11:07:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 11:07:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 11:07:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 11:07:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 11:07:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 11:07:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 11:07:53 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 11:07:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 11:07:53 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 11:07:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 11:07:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 11:07:53 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 11:07:53 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 11:07:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-14 11:07:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 11:07:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 11:07:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 11:07:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 11:07:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 11:07:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 11:07:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 11:07:53 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 11:07:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 11:07:53 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 11:07:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 11:07:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 11:07:53 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 11:07:53 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 11:07:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-14 11:07:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 11:07:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 11:07:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 11:07:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 11:07:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 11:07:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 11:07:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 11:07:54 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 11:07:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 11:07:54 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 11:07:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 11:07:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 11:07:54 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 11:07:54 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 11:07:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-14 11:07:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 11:07:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 11:07:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 11:07:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 11:07:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 11:07:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 11:07:54 - src.corder_integration.langgraph.workflow_orchestrator - ERROR - 工作流执行失败: Recursion limit of 50 reached without hitting a stop condition. You can increase the limit by setting the `recursion_limit` config key.
For troubleshooting, visit: https://python.langchain.com/docs/troubleshooting/errors/GRAPH_RECURSION_LIMIT
2025-07-14 11:07:54 - werkzeug - INFO - 127.0.0.1 - - [14/Jul/2025 11:07:54] "POST /api/coder-agent/process-document HTTP/1.1" 200 -
2025-07-14 14:23:16 - system - INFO - ==================================================
2025-07-14 14:23:16 - system - INFO - 🚀 智能分析系统日志系统初始化完成
2025-07-14 14:23:16 - system - INFO - 📁 日志根目录: D:\ai_project\document_analyzer\logs
2025-07-14 14:23:16 - system - INFO - 📊 日志级别: INFO
2025-07-14 14:23:16 - system - INFO - 📅 按日期轮转: 每天午夜自动轮转
2025-07-14 14:23:16 - system - INFO - 📂 按月分目录: logs/YYYY-MM/
2025-07-14 14:23:16 - system - INFO - 📝 主日志: logs/2025-07/app.log
2025-07-14 14:23:16 - system - INFO - 🔧 API日志: logs/2025-07/api_server.log
2025-07-14 14:23:16 - system - INFO - 🗂️ 保留天数: 7 天
2025-07-14 14:23:16 - system - INFO - ==================================================
2025-07-14 14:23:26 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-14 14:23:26 - root - WARNING - 智能编码节点不可用: cannot import name 'IntelligentCodingAgent' from partially initialized module 'src.corder_integration.langgraph.nodes.intelligent_coding_node' (most likely due to a circular import) (D:\ai_project\document_analyzer\src\corder_integration\langgraph\nodes\intelligent_coding_node.py)
2025-07-14 14:23:26 - src.utils.task_storage - INFO - 数据库初始化成功
2025-07-14 14:23:26 - markdown_storage - INFO - Markdown存储管理器初始化完成
2025-07-14 14:23:26 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-14 14:23:26 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 14:23:27 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-14 14:23:28 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-14 14:23:28 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-14 14:23:28 - WeaviateVectorDatabase - INFO - ✅ Weaviate连接成功: http://localhost:8080 (gRPC: 50051)
2025-07-14 14:23:28 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/schema/AnalyDesignDocuments "HTTP/1.1 200 OK"
2025-07-14 14:23:28 - WeaviateVectorDatabase - INFO - ✅ Weaviate集合已存在: AnalyDesignDocuments
2025-07-14 14:23:28 - AnalysisServiceManager - INFO - 初始化向量数据库: weaviate
2025-07-14 14:23:28 - sentence_transformers.SentenceTransformer - INFO - Use pytorch device_name: cpu
2025-07-14 14:23:28 - sentence_transformers.SentenceTransformer - INFO - Load pretrained SentenceTransformer: BAAI/bge-large-zh
2025-07-14 14:23:33 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-14 14:23:34 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-14 14:23:34 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-14 14:23:34 - src.utils.weaviate_helper - INFO - 成功连接到 Weaviate: localhost:8080
2025-07-14 14:23:34 - AnalysisServiceManager - INFO - 分析服务管理器初始化完成
2025-07-14 14:23:34 - src.utils.enhanced_analyzer - INFO - 增强分析器初始化完成
2025-07-14 14:23:34 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:8082
 * Running on http://26.26.26.1:8082
2025-07-14 14:23:34 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-07-14 14:23:34 - werkzeug - INFO -  * Restarting with stat
2025-07-14 14:23:35 - system - INFO - ==================================================
2025-07-14 14:23:35 - system - INFO - 🚀 智能分析系统日志系统初始化完成
2025-07-14 14:23:35 - system - INFO - 📁 日志根目录: D:\ai_project\document_analyzer\logs
2025-07-14 14:23:35 - system - INFO - 📊 日志级别: INFO
2025-07-14 14:23:35 - system - INFO - 📅 按日期轮转: 每天午夜自动轮转
2025-07-14 14:23:35 - system - INFO - 📂 按月分目录: logs/YYYY-MM/
2025-07-14 14:23:35 - system - INFO - 📝 主日志: logs/2025-07/app.log
2025-07-14 14:23:35 - system - INFO - 🔧 API日志: logs/2025-07/api_server.log
2025-07-14 14:23:35 - system - INFO - 🗂️ 保留天数: 7 天
2025-07-14 14:23:35 - system - INFO - ==================================================
2025-07-14 14:23:43 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-14 14:23:43 - root - WARNING - 智能编码节点不可用: cannot import name 'IntelligentCodingAgent' from partially initialized module 'src.corder_integration.langgraph.nodes.intelligent_coding_node' (most likely due to a circular import) (D:\ai_project\document_analyzer\src\corder_integration\langgraph\nodes\intelligent_coding_node.py)
2025-07-14 14:23:44 - src.utils.task_storage - INFO - 数据库初始化成功
2025-07-14 14:23:44 - markdown_storage - INFO - Markdown存储管理器初始化完成
2025-07-14 14:23:44 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-14 14:23:44 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 14:23:44 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-14 14:23:45 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-14 14:23:45 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-14 14:23:45 - WeaviateVectorDatabase - INFO - ✅ Weaviate连接成功: http://localhost:8080 (gRPC: 50051)
2025-07-14 14:23:45 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/schema/AnalyDesignDocuments "HTTP/1.1 200 OK"
2025-07-14 14:23:45 - WeaviateVectorDatabase - INFO - ✅ Weaviate集合已存在: AnalyDesignDocuments
2025-07-14 14:23:45 - AnalysisServiceManager - INFO - 初始化向量数据库: weaviate
2025-07-14 14:23:45 - sentence_transformers.SentenceTransformer - INFO - Use pytorch device_name: cpu
2025-07-14 14:23:45 - sentence_transformers.SentenceTransformer - INFO - Load pretrained SentenceTransformer: BAAI/bge-large-zh
2025-07-14 14:23:51 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-14 14:23:51 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-14 14:23:51 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-14 14:23:51 - src.utils.weaviate_helper - INFO - 成功连接到 Weaviate: localhost:8080
2025-07-14 14:23:51 - AnalysisServiceManager - INFO - 分析服务管理器初始化完成
2025-07-14 14:23:51 - src.utils.enhanced_analyzer - INFO - 增强分析器初始化完成
2025-07-14 14:23:51 - werkzeug - WARNING -  * Debugger is active!
2025-07-14 14:23:51 - werkzeug - INFO -  * Debugger PIN: 887-537-592
2025-07-14 14:26:05 - src.apis.coder_agent_api - INFO - 开始处理文档: 链数中建一局_1752474365
2025-07-14 14:26:05 - src.apis.coder_agent_api - INFO - 文档长度: 4931 字符
2025-07-14 14:26:05 - src.apis.coder_agent_api - INFO - 使用LangGraph: True
2025-07-14 14:26:05 - src.apis.coder_agent_api - INFO - 代码输出路径: D:\gitlab\create_project
2025-07-14 14:26:05 - src.apis.coder_agent_api - INFO - 使用LangGraph工作流处理项目: 链数中建一局_1752474365
2025-07-14 14:26:05 - src.corder_integration.langgraph.workflow_orchestrator - INFO - 准备使用异步SQLite检查点: D:\ai_project\document_analyzer\workflow_checkpoints.db
2025-07-14 14:26:05 - src.corder_integration.langgraph.workflow_orchestrator - INFO - 生成目标分支名称: 链数中建一局_1752474365 -> D_20250714_链数中建一局_1752474365
2025-07-14 14:26:05 - src.corder_integration.langgraph.workflow_orchestrator - INFO - 开始执行编码工作流: 链数中建一局_1752474365 -> D:\gitlab\create_project
2025-07-14 14:26:05 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🚀 Git管理节点开始执行...
2025-07-14 14:26:05 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 14:26:05 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🎯 git_management_node 开始执行任务...
2025-07-14 14:26:05 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ℹ️ 没有可执行的Git管理任务
2025-07-14 14:26:05 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ Git管理节点完成 - 提取: 0 个仓库, 克隆: 0 个仓库, 仓库初始化状态: False
2025-07-14 14:26:05 - src.corder_integration.langgraph.workflow_orchestrator - WARNING - 没有识别到任何服务，Git设置阶段结束
2025-07-14 14:26:05 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 14:26:05 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 14:26:05 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: config.yaml
2025-07-14 14:26:05 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 14:26:05 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 14:26:05 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 14:26:05 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 14:26:05 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 14:26:05 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-14 14:26:05 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 14:26:05 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 14:26:06 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 第1轮找到 1 个可执行任务
2025-07-14 14:26:06 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 开始执行任务: task_008 (api)
2025-07-14 14:26:06 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_008 已被 intelligent_coding_node 领取
2025-07-14 14:26:06 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🌐 执行API接口生成任务: task_008
2025-07-14 14:26:06 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 解析的接口信息:
2025-07-14 14:26:06 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 接口名称: CompanyUnitList
2025-07-14 14:26:06 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - API路径: /general/multiorgManage/queryCompanyUnitList
2025-07-14 14:26:06 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - HTTP方法: GET
2025-07-14 14:26:06 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 输入参数: 3个
2025-07-14 14:26:06 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 输出参数: 6个
2025-07-14 14:26:06 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 业务描述: 根据查询条件查询组织单元信息，支持按编码、状态等条件筛选
2025-07-14 14:26:06 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 在 D:\gitlab\create_project/链数中建一局_1752461639/zqyl-user-center-service 中查找最佳Java项目路径...
2025-07-14 14:26:06 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 目标服务名: 用户服务
2025-07-14 14:26:07 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-14 14:26:07 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 发现Java项目: user-basic-general
2025-07-14 14:26:07 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       🎯 相对路径: user-basic-service\user-basic-general
2025-07-14 14:26:07 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       📊 Java文件: 29个
2025-07-14 14:26:07 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       📐 目录深度: 2
2025-07-14 14:26:07 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       🏆 优先级分数: 750
2025-07-14 14:26:07 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 排序后的候选路径（前3个）:
2025-07-14 14:26:07 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    1. user-basic-service\user-basic-general (优先级: 750)
2025-07-14 14:26:07 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 选择最佳Java项目路径:
2025-07-14 14:26:07 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 完整路径: D:\gitlab\create_project\链数中建一局_1752461639\zqyl-user-center-service\user-basic-service\user-basic-general
2025-07-14 14:26:07 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📋 相对路径: user-basic-service\user-basic-general
2025-07-14 14:26:07 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    🏆 最终优先级: 750
2025-07-14 14:26:07 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 从API路径 /general/multiorgManage/queryCompanyUnitList 提取关键字: multiorgManage
2025-07-14 14:26:07 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 在项目中搜索关键字相关路径: multiorgManage
2025-07-14 14:26:07 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    ❌ 未找到包含关键字 'multiorgManage' 的相关目录
2025-07-14 14:26:07 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -  分析目标项目: D:\gitlab\create_project\链数中建一局_1752461639\zqyl-user-center-service\user-basic-service\user-basic-general
2025-07-14 14:26:07 - src.apis.project_analysis_api - INFO - 🔍 开始分析项目用于代码生成: D:\gitlab\create_project\链数中建一局_1752461639\zqyl-user-center-service\user-basic-service\user-basic-general
2025-07-14 14:26:07 - src.apis.project_analysis_api - INFO - 🔍 在 D:\gitlab\create_project\链数中建一局_1752461639\zqyl-user-center-service\user-basic-service\user-basic-general 中查找最佳Java项目路径...
2025-07-14 14:26:07 - src.apis.project_analysis_api - INFO - 🎯 目标服务名: 用户服务
2025-07-14 14:26:07 - src.apis.project_analysis_api - INFO -    📐 中等深度结构 (深度7) -> +100
2025-07-14 14:26:07 - src.apis.project_analysis_api - INFO -    📦 服务模块匹配: user-basic-service -> +120
2025-07-14 14:26:07 - src.apis.project_analysis_api - INFO -    🏢 业务域匹配: user -> +60
2025-07-14 14:26:07 - src.apis.project_analysis_api - INFO -    🏗️ 架构层级匹配: service -> +100
2025-07-14 14:26:07 - src.apis.project_analysis_api - INFO -    🎯🎯🎯 深层服务模块路径匹配 -> +800
2025-07-14 14:26:07 - src.apis.project_analysis_api - INFO -    📁 发现Java项目: user-basic-general
2025-07-14 14:26:07 - src.apis.project_analysis_api - INFO -       🎯 相对路径: .
2025-07-14 14:26:07 - src.apis.project_analysis_api - INFO -       📊 Java文件: 29个
2025-07-14 14:26:07 - src.apis.project_analysis_api - INFO -       📐 目录深度: 0
2025-07-14 14:26:07 - src.apis.project_analysis_api - INFO -       🏆 优先级分数: 1181
2025-07-14 14:26:07 - src.apis.project_analysis_api - INFO - 📋 排序后的候选路径（前3个）:
2025-07-14 14:26:07 - src.apis.project_analysis_api - INFO -    1. . (优先级: 1181)
2025-07-14 14:26:07 - src.apis.project_analysis_api - INFO - ✅ 选择最佳Java项目路径:
2025-07-14 14:26:07 - src.apis.project_analysis_api - INFO -    📁 完整路径: D:\gitlab\create_project\链数中建一局_1752461639\zqyl-user-center-service\user-basic-service\user-basic-general
2025-07-14 14:26:07 - src.apis.project_analysis_api - INFO -    📋 相对路径: .
2025-07-14 14:26:07 - src.apis.project_analysis_api - INFO -    🏆 最终优先级: 1181
2025-07-14 14:26:07 - src.apis.project_analysis_api - INFO - 📂 实际分析路径: D:\gitlab\create_project\链数中建一局_1752461639\zqyl-user-center-service\user-basic-service\user-basic-general
2025-07-14 14:26:07 - src.utils.java_code_analyzer - INFO - 🔍 开始分析企业级Java项目: D:\gitlab\create_project\链数中建一局_1752461639\zqyl-user-center-service\user-basic-service\user-basic-general
2025-07-14 14:26:07 - src.utils.java_code_analyzer - INFO - ✅ 企业级项目分析完成，共分析 29 个Java文件
2025-07-14 14:26:07 - src.apis.project_analysis_api - INFO - 📦 动态检测到基础包: com.yljr.user.basicgeneral (出现29次)
2025-07-14 14:26:07 - src.apis.project_analysis_api - INFO - 📦 动态检测到基础包: com.yljr.user.basicgeneral (出现29次)
2025-07-14 14:26:07 - src.apis.project_analysis_api - INFO - 📦 动态检测到基础包: com.yljr.user.basicgeneral (出现29次)
2025-07-14 14:26:07 - src.apis.project_analysis_api - INFO - ✅ 项目分析完成，已提取代码生成上下文
2025-07-14 14:26:07 - src.corder_integration.code_generator.controller_interface_manager - INFO - 🚀 开始处理API接口请求: /general/multiorgManage/queryCompanyUnitList
2025-07-14 14:26:07 - src.corder_integration.code_generator.controller_analyzer - INFO - 🔍 开始分析路径下的Controller文件: D:\gitlab\create_project\链数中建一局_1752461639\zqyl-user-center-service\user-basic-service\user-basic-general
2025-07-14 14:26:07 - src.corder_integration.code_generator.controller_analyzer - INFO - 🎯 匹配关键字: multiorgManage
2025-07-14 14:26:07 - src.corder_integration.code_generator.controller_analyzer - INFO - 📊 总共找到 0 个匹配的Controller文件
2025-07-14 14:26:07 - src.corder_integration.code_generator.controller_interface_manager - INFO - ⚠️ 未找到匹配关键字 'multiorgManage' 的Controller文件
2025-07-14 14:26:07 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ⚠️ 未能在现有Controller中添加接口，将生成新文件
2025-07-14 14:26:07 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -  调用volcengine大模型生成代码...
2025-07-14 14:26:07 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 开始代码生成...
2025-07-14 14:26:07 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎨 使用模板+AI混合模式生成代码
2025-07-14 14:26:07 - src.corder_integration.code_generator.template_ai_generator - INFO - 🎨 开始模板+AI混合代码生成: CompanyUnitList
2025-07-14 14:26:07 - src.corder_integration.code_generator.template_ai_generator - INFO - 🤖 使用unknown增强模板代码...
2025-07-14 14:26:07 - src.corder_integration.code_generator.template_ai_generator - INFO - 增强模板代码入参：[{'role': 'system', 'content': '你是Java代码优化专家。请根据业务需求优化给定的模板代码，保持代码结构清晰，添加必要的业务逻辑。重要：请使用具体的类名，不要使用{{}}模板变量语法。只返回优化后的Java代码，不要添加额外说明。'}, {'role': 'user', 'content': '\n请优化以下service_impl代码模板，重点关注：\n- 实现完整的业务逻辑\n- 添加数据验证和转换\n- 处理异常情况\n- 添加事务管理\n- 优化数据库查询逻辑\n\n## 当前模板代码：\n```java\npackage com.yljr.user.basicgeneral.application.service.impl;\n\nimport com.yljr.user.basicgeneral.application.service.CompanyUnitListService;\nimport com.yljr.user.basicgeneral.domain.entity.CompanyUnitList;\nimport com.yljr.user.basicgeneral.domain.mapper.CompanyUnitListMapper;\nimport com.yljr.user.basicgeneral.interfaces.dto.CompanyUnitListReq;\nimport com.yljr.user.basicgeneral.interfaces.dto.CompanyUnitListResp;\nimport org.springframework.stereotype.Service;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.transaction.annotation.Transactional;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\n/**\n * CompanyUnitList Service - 根据查询条件查询组织单元信息，支持按编码、状态等条件筛选\n * Generated by Template + AI\n */\n@Service\n@Transactional\npublic class CompanyUnitListServiceImpl implements CompanyUnitListService {\n    \n    private static final Logger logger = LoggerFactory.getLogger(CompanyUnitListServiceImpl.class);\n    \n    @Autowired\n    private CompanyUnitListMapper companyUnitListMapper;\n    \n    @Override\n    public CompanyUnitListResp CompanyUnitList(CompanyUnitListReq request) {\n        logger.info("Executing CompanyUnitList with parameters: {}", request);\n        \n        try {\n            // TODO: 实现根据查询条件查询组织单元信息，支持按编码、状态等条件筛选业务逻辑\n            \n            logger.info("CompanyUnitList completed successfully");\n            return new CompanyUnitListResp();\n        } catch (Exception e) {\n            logger.error("Error in CompanyUnitList: ", e);\n            throw new RuntimeException("CompanyUnitList failed", e);\n        }\n    }\n}\n```\n\n## 业务需求：\n- 接口名称：CompanyUnitList\n- 功能描述：根据查询条件查询组织单元信息，支持按编码、状态等条件筛选\n- 业务逻辑：根据查询条件查询组织单元信息，支持按编码、状态等条件筛选\n\n## 输入参数：\n- unitCode (String): 组织单元编码(可选) [可选]\n- openStatus (String): 开通状态(可选) [可选]\n- unitList (String): 组织单元列表(可选) [可选]\n\n## 输出参数：\n- unitId (String): 组织单元ID\n- unitTypeDicType (String): 组织单元类型字典类型\n- unitTypeId (String): 组织单元类型ID\n- openStatus (String): 开通状态\n- unitCode (String): 组织单元编码\n- unitName (String): 组织单元名称\n\n## 技术要求：\n- 基础包名：com.yljr.user.basicgeneral\n- 使用Spring Boot + MyBatis Plus\n- 遵循DDD分层架构\n- 保持原有类名和包结构\n- 请求DTO类名：CompanyUnitListReq\n- 响应DTO类名：CompanyUnitListResp\n- Service类名：CompanyUnitListService\n\n**重要：请使用具体的类名（如 CompanyUnitListReq），不要使用模板变量语法（如 {{REQUEST_DTO_NAME}}）**\n\n请返回优化后的完整Java代码（只要代码，不要额外说明）：\n'}]
2025-07-14 14:26:39 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-14 14:26:39 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ service_impl AI增强完成
2025-07-14 14:26:39 - src.corder_integration.code_generator.template_ai_generator - INFO - 增强模板代码入参：[{'role': 'system', 'content': '你是Java代码优化专家。请根据业务需求优化给定的模板代码，保持代码结构清晰，添加必要的业务逻辑。重要：请使用具体的类名，不要使用{{}}模板变量语法。只返回优化后的Java代码，不要添加额外说明。'}, {'role': 'user', 'content': '\n请优化以下controller代码模板，重点关注：\n- 完善参数验证\n- 统一响应格式\n- 添加API文档注解\n- 改进错误处理\n- 优化日志记录\n\n## 当前模板代码：\n```java\npackage com.yljr.user.basicgeneral.interfaces.rest;\n\nimport com.yljr.user.basicgeneral.application.service.CompanyUnitListService;\nimport com.yljr.user.basicgeneral.interfaces.dto.CompanyUnitListReq;\nimport com.yljr.user.basicgeneral.interfaces.dto.CompanyUnitListResp;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.*;\nimport org.springframework.http.ResponseEntity;\nimport javax.validation.Valid;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport io.swagger.annotations.Api;\nimport io.swagger.annotations.ApiOperation;\n\n/**\n * CompanyUnitList Controller - 根据查询条件查询组织单元信息，支持按编码、状态等条件筛选\n * Generated by Template + AI\n */\n@Api(tags = "CompanyUnitList Controller - 根据查询条件查询组织单元信息，支持按编码、状态等条件筛选")\n@RestController\n@RequestMapping("/general/multiorgManage/queryCompanyUnitList")\n@CrossOrigin(origins = "*")\npublic class CompanyUnitListController {\n    \n    private static final Logger logger = LoggerFactory.getLogger(CompanyUnitListController.class);\n    \n    @Autowired\n    private CompanyUnitListService companyUnitListService;\n    \n    /**\n     * 根据查询条件查询组织单元信息，支持按编码、状态等条件筛选\n     */\n    @ApiOperation("根据查询条件查询组织单元信息，支持按编码、状态等条件筛选")\n    @GetMapping\n    public ResponseEntity<CompanyUnitListResp> CompanyUnitList(@Valid @RequestBody CompanyUnitListReq request) {\n        try {\n            logger.info("Processing CompanyUnitList request: {}", request);\n            \n            CompanyUnitListResp response = companyUnitListService.CompanyUnitList(request);\n            \n            logger.info("CompanyUnitList completed successfully");\n            return ResponseEntity.ok(response);\n        } catch (Exception e) {\n            logger.error("Error in CompanyUnitList: ", e);\n            return ResponseEntity.internalServerError().build();\n        }\n    }\n}\n```\n\n## 业务需求：\n- 接口名称：CompanyUnitList\n- 功能描述：根据查询条件查询组织单元信息，支持按编码、状态等条件筛选\n- 业务逻辑：根据查询条件查询组织单元信息，支持按编码、状态等条件筛选\n\n## 输入参数：\n- unitCode (String): 组织单元编码(可选) [可选]\n- openStatus (String): 开通状态(可选) [可选]\n- unitList (String): 组织单元列表(可选) [可选]\n\n## 输出参数：\n- unitId (String): 组织单元ID\n- unitTypeDicType (String): 组织单元类型字典类型\n- unitTypeId (String): 组织单元类型ID\n- openStatus (String): 开通状态\n- unitCode (String): 组织单元编码\n- unitName (String): 组织单元名称\n\n## 技术要求：\n- 基础包名：com.yljr.user.basicgeneral\n- 使用Spring Boot + MyBatis Plus\n- 遵循DDD分层架构\n- 保持原有类名和包结构\n- 请求DTO类名：CompanyUnitListReq\n- 响应DTO类名：CompanyUnitListResp\n- Service类名：CompanyUnitListService\n\n**重要：请使用具体的类名（如 CompanyUnitListReq），不要使用模板变量语法（如 {{REQUEST_DTO_NAME}}）**\n\n请返回优化后的完整Java代码（只要代码，不要额外说明）：\n'}]
2025-07-14 14:27:02 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-14 14:27:02 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ controller AI增强完成
2025-07-14 14:27:02 - src.corder_integration.code_generator.template_ai_generator - INFO - 增强模板代码入参：[{'role': 'system', 'content': '你是Java代码优化专家。请根据业务需求优化给定的模板代码，保持代码结构清晰，添加必要的业务逻辑。重要：请使用具体的类名，不要使用{{}}模板变量语法。只返回优化后的Java代码，不要添加额外说明。'}, {'role': 'user', 'content': '\n请优化以下service_interface代码模板，重点关注：\n- 改进代码结构\n- 添加必要注释\n- 优化实现逻辑\n\n## 当前模板代码：\n```java\npackage com.yljr.user.basicgeneral.application.service;\n\nimport com.yljr.user.basicgeneral.interfaces.dto.CompanyUnitListReq;\nimport com.yljr.user.basicgeneral.interfaces.dto.CompanyUnitListResp;\nimport java.util.List;\n\n/**\n * CompanyUnitList Service - 根据查询条件查询组织单元信息，支持按编码、状态等条件筛选\n * Generated by Template + AI\n */\npublic interface CompanyUnitListService {\n    \n    /**\n     * 根据查询条件查询组织单元信息，支持按编码、状态等条件筛选\n     */\n    CompanyUnitListResp CompanyUnitList(CompanyUnitListReq request);\n}\n```\n\n## 业务需求：\n- 接口名称：CompanyUnitList\n- 功能描述：根据查询条件查询组织单元信息，支持按编码、状态等条件筛选\n- 业务逻辑：根据查询条件查询组织单元信息，支持按编码、状态等条件筛选\n\n## 输入参数：\n- unitCode (String): 组织单元编码(可选) [可选]\n- openStatus (String): 开通状态(可选) [可选]\n- unitList (String): 组织单元列表(可选) [可选]\n\n## 输出参数：\n- unitId (String): 组织单元ID\n- unitTypeDicType (String): 组织单元类型字典类型\n- unitTypeId (String): 组织单元类型ID\n- openStatus (String): 开通状态\n- unitCode (String): 组织单元编码\n- unitName (String): 组织单元名称\n\n## 技术要求：\n- 基础包名：com.yljr.user.basicgeneral\n- 使用Spring Boot + MyBatis Plus\n- 遵循DDD分层架构\n- 保持原有类名和包结构\n- 请求DTO类名：CompanyUnitListReq\n- 响应DTO类名：CompanyUnitListResp\n- Service类名：CompanyUnitListService\n\n**重要：请使用具体的类名（如 CompanyUnitListReq），不要使用模板变量语法（如 {{REQUEST_DTO_NAME}}）**\n\n请返回优化后的完整Java代码（只要代码，不要额外说明）：\n'}]
2025-07-14 14:27:13 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-14 14:27:13 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ service_interface AI增强完成
2025-07-14 14:27:13 - src.corder_integration.code_generator.template_ai_generator - INFO - 增强模板代码入参：[{'role': 'system', 'content': '你是Java代码优化专家。请根据业务需求优化给定的模板代码，保持代码结构清晰，添加必要的业务逻辑。重要：请使用具体的类名，不要使用{{}}模板变量语法。只返回优化后的Java代码，不要添加额外说明。'}, {'role': 'user', 'content': '\n请优化以下request_dto代码模板，重点关注：\n- 添加详细的字段验证\n- 完善API文档注解\n- 优化字段类型选择\n- 添加字段描述\n\n## 当前模板代码：\n```java\npackage com.yljr.user.basicgeneral.interfaces.dto;\n\nimport javax.validation.constraints.*;\nimport lombok.Data;\nimport io.swagger.annotations.ApiModel;\nimport io.swagger.annotations.ApiModelProperty;\n\n/**\n * CompanyUnitList Request DTO\n * Generated by Template + AI\n */\n@Data\n@ApiModel(description = "CompanyUnitList Request DTO")\npublic class CompanyUnitListReq {\n    \n    @ApiModelProperty(value = "组织单元编码(可选)", required = false)\n    private String unitCode;\n\n    @ApiModelProperty(value = "开通状态(可选)", required = false)\n    private String openStatus;\n\n    @ApiModelProperty(value = "组织单元列表(可选)", required = false)\n    private String unitList;\n}\n```\n\n## 业务需求：\n- 接口名称：CompanyUnitList\n- 功能描述：根据查询条件查询组织单元信息，支持按编码、状态等条件筛选\n- 业务逻辑：根据查询条件查询组织单元信息，支持按编码、状态等条件筛选\n\n## 输入参数：\n- unitCode (String): 组织单元编码(可选) [可选]\n- openStatus (String): 开通状态(可选) [可选]\n- unitList (String): 组织单元列表(可选) [可选]\n\n## 输出参数：\n- unitId (String): 组织单元ID\n- unitTypeDicType (String): 组织单元类型字典类型\n- unitTypeId (String): 组织单元类型ID\n- openStatus (String): 开通状态\n- unitCode (String): 组织单元编码\n- unitName (String): 组织单元名称\n\n## 技术要求：\n- 基础包名：com.yljr.user.basicgeneral\n- 使用Spring Boot + MyBatis Plus\n- 遵循DDD分层架构\n- 保持原有类名和包结构\n- 请求DTO类名：CompanyUnitListReq\n- 响应DTO类名：CompanyUnitListResp\n- Service类名：CompanyUnitListService\n\n**重要：请使用具体的类名（如 CompanyUnitListReq），不要使用模板变量语法（如 {{REQUEST_DTO_NAME}}）**\n\n请返回优化后的完整Java代码（只要代码，不要额外说明）：\n'}]
2025-07-14 14:27:36 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-14 14:27:36 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ request_dto AI增强完成
2025-07-14 14:27:36 - src.corder_integration.code_generator.template_ai_generator - INFO - 增强模板代码入参：[{'role': 'system', 'content': '你是Java代码优化专家。请根据业务需求优化给定的模板代码，保持代码结构清晰，添加必要的业务逻辑。重要：请使用具体的类名，不要使用{{}}模板变量语法。只返回优化后的Java代码，不要添加额外说明。'}, {'role': 'user', 'content': '\n请优化以下response_dto代码模板，重点关注：\n- 添加详细的字段验证\n- 完善API文档注解\n- 优化字段类型选择\n- 添加字段描述\n\n## 当前模板代码：\n```java\npackage com.yljr.user.basicgeneral.interfaces.dto;\n\nimport lombok.Data;\nimport io.swagger.annotations.ApiModel;\nimport io.swagger.annotations.ApiModelProperty;\n\n/**\n * CompanyUnitList Response DTO\n * Generated by Template + AI\n */\n@Data\n@ApiModel(description = "CompanyUnitList Response DTO")\npublic class CompanyUnitListResp {\n    \n    @ApiModelProperty("组织单元ID")\n    private String unitId;\n\n    @ApiModelProperty("组织单元类型字典类型")\n    private String unitTypeDicType;\n\n    @ApiModelProperty("组织单元类型ID")\n    private String unitTypeId;\n\n    @ApiModelProperty("开通状态")\n    private String openStatus;\n\n    @ApiModelProperty("组织单元编码")\n    private String unitCode;\n\n    @ApiModelProperty("组织单元名称")\n    private String unitName;\n}\n```\n\n## 业务需求：\n- 接口名称：CompanyUnitList\n- 功能描述：根据查询条件查询组织单元信息，支持按编码、状态等条件筛选\n- 业务逻辑：根据查询条件查询组织单元信息，支持按编码、状态等条件筛选\n\n## 输入参数：\n- unitCode (String): 组织单元编码(可选) [可选]\n- openStatus (String): 开通状态(可选) [可选]\n- unitList (String): 组织单元列表(可选) [可选]\n\n## 输出参数：\n- unitId (String): 组织单元ID\n- unitTypeDicType (String): 组织单元类型字典类型\n- unitTypeId (String): 组织单元类型ID\n- openStatus (String): 开通状态\n- unitCode (String): 组织单元编码\n- unitName (String): 组织单元名称\n\n## 技术要求：\n- 基础包名：com.yljr.user.basicgeneral\n- 使用Spring Boot + MyBatis Plus\n- 遵循DDD分层架构\n- 保持原有类名和包结构\n- 请求DTO类名：CompanyUnitListReq\n- 响应DTO类名：CompanyUnitListResp\n- Service类名：CompanyUnitListService\n\n**重要：请使用具体的类名（如 CompanyUnitListReq），不要使用模板变量语法（如 {{REQUEST_DTO_NAME}}）**\n\n请返回优化后的完整Java代码（只要代码，不要额外说明）：\n'}]
2025-07-14 14:27:55 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-14 14:27:55 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ response_dto AI增强完成
2025-07-14 14:27:55 - src.corder_integration.code_generator.template_ai_generator - INFO - 增强模板代码入参：[{'role': 'system', 'content': '你是Java代码优化专家。请根据业务需求优化给定的模板代码，保持代码结构清晰，添加必要的业务逻辑。重要：请使用具体的类名，不要使用{{}}模板变量语法。只返回优化后的Java代码，不要添加额外说明。'}, {'role': 'user', 'content': '\n请优化以下entity代码模板，重点关注：\n- 改进代码结构\n- 添加必要注释\n- 优化实现逻辑\n\n## 当前模板代码：\n```java\npackage com.yljr.user.basicgeneral.domain.entity;\n\nimport com.baomidou.mybatisplus.annotation.*;\nimport lombok.Data;\nimport io.swagger.annotations.ApiModel;\nimport io.swagger.annotations.ApiModelProperty;\nimport java.time.LocalDateTime;\n\n/**\n * CompanyUnitList Entity\n * Generated by Template + AI\n */\n@Data\n@ApiModel(description = "CompanyUnitList Entity")\n@TableName("companyunitlist")\npublic class CompanyUnitList {\n    \n    @ApiModelProperty("主键ID")\n    @TableId(type = IdType.AUTO)\n    private Long id;\n    \n    @ApiModelProperty("组织单元编码(可选)")\n    @TableField("unitCode")\n    private String unitCode;\n\n    @ApiModelProperty("开通状态(可选)")\n    @TableField("openStatus")\n    private String openStatus;\n\n    @ApiModelProperty("组织单元列表(可选)")\n    @TableField("unitList")\n    private String unitList;\n\n    @ApiModelProperty("组织单元ID")\n    @TableField("unitId")\n    private String unitId;\n\n    @ApiModelProperty("组织单元类型字典类型")\n    @TableField("unitTypeDicType")\n    private String unitTypeDicType;\n\n    @ApiModelProperty("组织单元类型ID")\n    @TableField("unitTypeId")\n    private String unitTypeId;\n\n    @ApiModelProperty("组织单元名称")\n    @TableField("unitName")\n    private String unitName;\n    \n    @ApiModelProperty("创建时间")\n    @TableField(fill = FieldFill.INSERT)\n    private LocalDateTime createTime;\n    \n    @ApiModelProperty("更新时间")\n    @TableField(fill = FieldFill.INSERT_UPDATE)\n    private LocalDateTime updateTime;\n}\n```\n\n## 业务需求：\n- 接口名称：CompanyUnitList\n- 功能描述：根据查询条件查询组织单元信息，支持按编码、状态等条件筛选\n- 业务逻辑：根据查询条件查询组织单元信息，支持按编码、状态等条件筛选\n\n## 输入参数：\n- unitCode (String): 组织单元编码(可选) [可选]\n- openStatus (String): 开通状态(可选) [可选]\n- unitList (String): 组织单元列表(可选) [可选]\n\n## 输出参数：\n- unitId (String): 组织单元ID\n- unitTypeDicType (String): 组织单元类型字典类型\n- unitTypeId (String): 组织单元类型ID\n- openStatus (String): 开通状态\n- unitCode (String): 组织单元编码\n- unitName (String): 组织单元名称\n\n## 技术要求：\n- 基础包名：com.yljr.user.basicgeneral\n- 使用Spring Boot + MyBatis Plus\n- 遵循DDD分层架构\n- 保持原有类名和包结构\n- 请求DTO类名：CompanyUnitListReq\n- 响应DTO类名：CompanyUnitListResp\n- Service类名：CompanyUnitListService\n\n**重要：请使用具体的类名（如 CompanyUnitListReq），不要使用模板变量语法（如 {{REQUEST_DTO_NAME}}）**\n\n请返回优化后的完整Java代码（只要代码，不要额外说明）：\n'}]
2025-07-14 14:28:19 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-14 14:28:19 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ entity AI增强完成
2025-07-14 14:28:19 - src.corder_integration.code_generator.template_ai_generator - INFO - 增强模板代码入参：[{'role': 'system', 'content': '你是Java代码优化专家。请根据业务需求优化给定的模板代码，保持代码结构清晰，添加必要的业务逻辑。重要：请使用具体的类名，不要使用{{}}模板变量语法。只返回优化后的Java代码，不要添加额外说明。'}, {'role': 'user', 'content': '\n请优化以下mapper代码模板，重点关注：\n- 改进代码结构\n- 添加必要注释\n- 优化实现逻辑\n\n## 当前模板代码：\n```java\npackage com.yljr.user.basicgeneral.domain.mapper;\n\nimport com.yljr.user.basicgeneral.domain.entity.CompanyUnitList;\nimport com.baomidou.mybatisplus.core.mapper.BaseMapper;\nimport org.apache.ibatis.annotations.Mapper;\nimport org.apache.ibatis.annotations.Param;\nimport java.util.List;\n\n/**\n * CompanyUnitListMapper Mapper\n * Generated by Template + AI\n */\n@Mapper\npublic interface CompanyUnitListMapper extends BaseMapper<CompanyUnitList> {\n    \n    /**\n     * Custom query for CompanyUnitList\n     */\n    List<CompanyUnitList> selectCompanyUnitListList(@Param("unitCode") String unitCode, @Param("openStatus") String openStatus, @Param("unitList") String unitList);\n}\n```\n\n## 业务需求：\n- 接口名称：CompanyUnitList\n- 功能描述：根据查询条件查询组织单元信息，支持按编码、状态等条件筛选\n- 业务逻辑：根据查询条件查询组织单元信息，支持按编码、状态等条件筛选\n\n## 输入参数：\n- unitCode (String): 组织单元编码(可选) [可选]\n- openStatus (String): 开通状态(可选) [可选]\n- unitList (String): 组织单元列表(可选) [可选]\n\n## 输出参数：\n- unitId (String): 组织单元ID\n- unitTypeDicType (String): 组织单元类型字典类型\n- unitTypeId (String): 组织单元类型ID\n- openStatus (String): 开通状态\n- unitCode (String): 组织单元编码\n- unitName (String): 组织单元名称\n\n## 技术要求：\n- 基础包名：com.yljr.user.basicgeneral\n- 使用Spring Boot + MyBatis Plus\n- 遵循DDD分层架构\n- 保持原有类名和包结构\n- 请求DTO类名：CompanyUnitListReq\n- 响应DTO类名：CompanyUnitListResp\n- Service类名：CompanyUnitListService\n\n**重要：请使用具体的类名（如 CompanyUnitListReq），不要使用模板变量语法（如 {{REQUEST_DTO_NAME}}）**\n\n请返回优化后的完整Java代码（只要代码，不要额外说明）：\n'}]
2025-07-14 14:28:35 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-14 14:28:35 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ mapper AI增强完成
2025-07-14 14:28:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI生成成功，生成代码类型: ['service_impl', 'controller', 'service_interface', 'request_dto', 'response_dto', 'entity', 'mapper', 'mapper_xml']
2025-07-14 14:28:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 开始写入生成的代码文件...
2025-07-14 14:28:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔧 统一类名基础: CompanyUnitList
2025-07-14 14:28:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ service_impl 类名: CompanyUnitListServiceImpl
2025-07-14 14:28:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ controller 类名: CompanyUnitListController
2025-07-14 14:28:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ request_dto 类名: CompanyUnitListReq
2025-07-14 14:28:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ response_dto 类名: CompanyUnitListResp
2025-07-14 14:28:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ entity 类名: CompanyUnitListEntity
2025-07-14 14:28:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 检测到service_impl但缺少service，这是正常的（接口会被自动生成）
2025-07-14 14:28:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 标准化后的代码类型: ['service_impl', 'controller', 'service_interface', 'request_dto', 'response_dto', 'entity', 'mapper', 'mapper_xml']
2025-07-14 14:28:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🤖 调用volcengine判断Java文件输出路径...
2025-07-14 14:29:00 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-14 14:29:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM路径判断成功，配置了 8 个Java文件路径
2025-07-14 14:29:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 controller: CompanyUnitListController.java
2025-07-14 14:29:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 service_interface: CompanyUnitListService.java
2025-07-14 14:29:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 service_impl: CompanyUnitListServiceImpl.java
2025-07-14 14:29:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 request_dto: CompanyUnitListReq.java
2025-07-14 14:29:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 response_dto: CompanyUnitListResp.java
2025-07-14 14:29:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 entity: CompanyUnitListEntity.java
2025-07-14 14:29:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 mapper: CompanyUnitListMapper.java
2025-07-14 14:29:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 mapper_xml: CompanyUnitListMapper.xml
2025-07-14 14:29:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: D:\gitlab\create_project\链数中建一局_1752461639\zqyl-user-center-service\user-basic-service\user-basic-general\src\main\java\com\yljr\user\basicgeneral\application\service\impl\CompanyUnitListServiceImpl.java
2025-07-14 14:29:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: D:\gitlab\create_project\链数中建一局_1752461639\zqyl-user-center-service\user-basic-service\user-basic-general\src\main\java\com\yljr\user\basicgeneral\application\service\impl\CompanyUnitListServiceImpl.java
2025-07-14 14:29:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: D:\gitlab\create_project\链数中建一局_1752461639\zqyl-user-center-service\user-basic-service\user-basic-general\src\main\java\com\yljr\user\basicgeneral\interfaces\rest\CompanyUnitListController.java
2025-07-14 14:29:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: D:\gitlab\create_project\链数中建一局_1752461639\zqyl-user-center-service\user-basic-service\user-basic-general\src\main\java\com\yljr\user\basicgeneral\interfaces\rest\CompanyUnitListController.java
2025-07-14 14:29:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: D:\gitlab\create_project\链数中建一局_1752461639\zqyl-user-center-service\user-basic-service\user-basic-general\src\main\java\com\yljr\user\basicgeneral\application\service\CompanyUnitListService.java
2025-07-14 14:29:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: D:\gitlab\create_project\链数中建一局_1752461639\zqyl-user-center-service\user-basic-service\user-basic-general\src\main\java\com\yljr\user\basicgeneral\application\service\CompanyUnitListService.java
2025-07-14 14:29:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: D:\gitlab\create_project\链数中建一局_1752461639\zqyl-user-center-service\user-basic-service\user-basic-general\src\main\java\com\yljr\user\basicgeneral\interfaces\dto\CompanyUnitListReq.java
2025-07-14 14:29:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: D:\gitlab\create_project\链数中建一局_1752461639\zqyl-user-center-service\user-basic-service\user-basic-general\src\main\java\com\yljr\user\basicgeneral\interfaces\dto\CompanyUnitListReq.java
2025-07-14 14:29:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: D:\gitlab\create_project\链数中建一局_1752461639\zqyl-user-center-service\user-basic-service\user-basic-general\src\main\java\com\yljr\user\basicgeneral\interfaces\dto\CompanyUnitListResp.java
2025-07-14 14:29:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: D:\gitlab\create_project\链数中建一局_1752461639\zqyl-user-center-service\user-basic-service\user-basic-general\src\main\java\com\yljr\user\basicgeneral\interfaces\dto\CompanyUnitListResp.java
2025-07-14 14:29:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: D:\gitlab\create_project\链数中建一局_1752461639\zqyl-user-center-service\user-basic-service\user-basic-general\src\main\java\com\yljr\user\basicgeneral\domain\entity\CompanyUnitListEntity.java
2025-07-14 14:29:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: D:\gitlab\create_project\链数中建一局_1752461639\zqyl-user-center-service\user-basic-service\user-basic-general\src\main\java\com\yljr\user\basicgeneral\domain\entity\CompanyUnitListEntity.java
2025-07-14 14:29:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: D:\gitlab\create_project\链数中建一局_1752461639\zqyl-user-center-service\user-basic-service\user-basic-general\src\main\java\com\yljr\user\basicgeneral\domain\mapper\CompanyUnitListMapper.java
2025-07-14 14:29:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: D:\gitlab\create_project\链数中建一局_1752461639\zqyl-user-center-service\user-basic-service\user-basic-general\src\main\java\com\yljr\user\basicgeneral\domain\mapper\CompanyUnitListMapper.java
2025-07-14 14:29:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: D:\gitlab\create_project\链数中建一局_1752461639\zqyl-user-center-service\user-basic-service\user-basic-general\src\main\resources\mapper\CompanyUnitListMapper.xml
2025-07-14 14:29:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: D:\gitlab\create_project\链数中建一局_1752461639\zqyl-user-center-service\user-basic-service\user-basic-general\src\main\resources\mapper\CompanyUnitListMapper.xml
2025-07-14 14:29:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📊 代码生成完成，共写入 8 个文件到项目中
2025-07-14 14:29:00 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_008 状态更新为 completed
2025-07-14 14:29:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 任务 task_008 执行成功
2025-07-14 14:29:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 第1轮执行完成，处理了 1 个任务
2025-07-14 14:29:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第2轮任务检查...
2025-07-14 14:29:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 第2轮找到 1 个可执行任务
2025-07-14 14:29:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 开始执行任务: task_009 (api)
2025-07-14 14:29:00 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_009 已被 intelligent_coding_node 领取
2025-07-14 14:29:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🌐 执行API接口生成任务: task_009
2025-07-14 14:29:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 解析的接口信息:
2025-07-14 14:29:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 接口名称: UnitLimitByCompanyId
2025-07-14 14:29:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - API路径: /crcl-open-api/lsLimit/listUnitLimitByCompanyId
2025-07-14 14:29:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - HTTP方法: GET
2025-07-14 14:29:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 输入参数: 6个
2025-07-14 14:29:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 输出参数: 4个
2025-07-14 14:29:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 业务描述: 根据公司ID和筛选条件查询组织单元额度信息，调用用户服务获取组织单元基础信息
2025-07-14 14:29:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 在 D:\gitlab\create_project/链数中建一局_1752461639/crcl-open 中查找最佳Java项目路径...
2025-07-14 14:29:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 目标服务名: 确权开立服务
2025-07-14 14:29:01 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-14 14:29:01 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 发现Java项目: crcl-open
2025-07-14 14:29:01 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       🎯 相对路径: .
2025-07-14 14:29:01 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       📊 Java文件: 2251个
2025-07-14 14:29:01 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       📐 目录深度: 0
2025-07-14 14:29:01 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       🏆 优先级分数: 650
2025-07-14 14:29:01 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 排序后的候选路径（前3个）:
2025-07-14 14:29:01 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    1. . (优先级: 650)
2025-07-14 14:29:01 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 选择最佳Java项目路径:
2025-07-14 14:29:01 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 完整路径: D:\gitlab\create_project\链数中建一局_1752461639\crcl-open
2025-07-14 14:29:01 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📋 相对路径: .
2025-07-14 14:29:01 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    🏆 最终优先级: 650
2025-07-14 14:29:01 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 从API路径 /crcl-open-api/lsLimit/listUnitLimitByCompanyId 提取关键字: lsLimit
2025-07-14 14:29:01 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 在项目中搜索关键字相关路径: lsLimit
2025-07-14 14:29:01 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 找到匹配目录: limit (得分: 25)
2025-07-14 14:29:01 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 找到匹配目录: ls (得分: 25)
2025-07-14 14:29:01 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 找到匹配目录: ls (得分: 25)
2025-07-14 14:29:01 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 找到匹配目录: ls (得分: 25)
2025-07-14 14:29:01 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 找到匹配目录: limit (得分: 25)
2025-07-14 14:29:01 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    ✅ 选择最佳匹配目录: limit (路径: src\main\java\com\yljr\crcl\limit)
2025-07-14 14:29:01 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 基于API关键字 'lsLimit' 找到现有路径: D:\gitlab\create_project\链数中建一局_1752461639\crcl-open\src\main\java\com\yljr\crcl\limit
2025-07-14 14:29:01 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -  分析目标项目: D:\gitlab\create_project\链数中建一局_1752461639\crcl-open\src\main\java\com\yljr\crcl\limit
2025-07-14 14:29:01 - src.apis.project_analysis_api - INFO - 🔍 开始分析项目用于代码生成: D:\gitlab\create_project\链数中建一局_1752461639\crcl-open\src\main\java\com\yljr\crcl\limit
2025-07-14 14:29:01 - src.apis.project_analysis_api - INFO - 🔍 在 D:\gitlab\create_project\链数中建一局_1752461639\crcl-open\src\main\java\com\yljr\crcl\limit 中查找最佳Java项目路径...
2025-07-14 14:29:01 - src.apis.project_analysis_api - INFO - 🎯 目标服务名: 确权开立服务
2025-07-14 14:29:01 - src.apis.project_analysis_api - WARNING - ⚠️ 在 D:\gitlab\create_project\链数中建一局_1752461639\crcl-open\src\main\java\com\yljr\crcl\limit 中未找到包含Java文件的src/main/java结构
2025-07-14 14:29:01 - src.apis.project_analysis_api - INFO - 📂 实际分析路径: D:\gitlab\create_project\链数中建一局_1752461639\crcl-open\src\main\java\com\yljr\crcl\limit
2025-07-14 14:29:01 - src.utils.java_code_analyzer - INFO - 🔍 开始分析企业级Java项目: D:\gitlab\create_project\链数中建一局_1752461639\crcl-open\src\main\java\com\yljr\crcl\limit
2025-07-14 14:29:04 - src.utils.java_code_analyzer - INFO - ✅ 企业级项目分析完成，共分析 533 个Java文件
2025-07-14 14:29:04 - src.apis.project_analysis_api - INFO - 📦 动态检测到基础包: com.yljr.crcl.limit (出现533次)
2025-07-14 14:29:04 - src.apis.project_analysis_api - INFO - 📦 动态检测到基础包: com.yljr.crcl.limit (出现533次)
2025-07-14 14:29:04 - src.apis.project_analysis_api - INFO - 📦 动态检测到基础包: com.yljr.crcl.limit (出现533次)
2025-07-14 14:29:04 - src.apis.project_analysis_api - INFO - ✅ 项目分析完成，已提取代码生成上下文
2025-07-14 14:29:04 - src.corder_integration.code_generator.controller_interface_manager - INFO - 🚀 开始处理API接口请求: /crcl-open-api/lsLimit/listUnitLimitByCompanyId
2025-07-14 14:29:04 - src.corder_integration.code_generator.controller_analyzer - INFO - 🔍 开始分析路径下的Controller文件: D:\gitlab\create_project\链数中建一局_1752461639\crcl-open\src\main\java\com\yljr\crcl\limit
2025-07-14 14:29:04 - src.corder_integration.code_generator.controller_analyzer - INFO - 🎯 匹配关键字: lsLimit
2025-07-14 14:29:04 - src.corder_integration.code_generator.controller_analyzer - INFO - 🎯 在 D:\gitlab\create_project\链数中建一局_1752461639\crcl-open\src\main\java\com\yljr\crcl\limit\interfaces\LsLimitController.java 中找到匹配的@RequestMapping: /lsLimit
2025-07-14 14:29:04 - src.corder_integration.code_generator.controller_analyzer - INFO - 📋 提取到 0 个Service依赖
2025-07-14 14:29:04 - src.corder_integration.code_generator.controller_analyzer - INFO - ✅ 找到匹配的Controller: D:\gitlab\create_project\链数中建一局_1752461639\crcl-open\src\main\java\com\yljr\crcl\limit\interfaces\LsLimitController.java
2025-07-14 14:29:04 - src.corder_integration.code_generator.controller_analyzer - INFO - 📊 总共找到 1 个匹配的Controller文件
2025-07-14 14:29:04 - src.corder_integration.code_generator.controller_analyzer - INFO - 🔧 从API路径 '/crcl-open-api/lsLimit/listUnitLimitByCompanyId' 提取接口名称: 'listUnitLimitByCompanyId'
2025-07-14 14:29:04 - src.corder_integration.code_generator.controller_interface_manager - INFO - 📝 处理Controller: LsLimitController
2025-07-14 14:29:04 - src.corder_integration.code_generator.service_decision_maker - INFO - 🔍 开始分析Service需求: listUnitLimitByCompanyId
2025-07-14 14:29:04 - src.corder_integration.code_generator.service_decision_maker - INFO - 📂 扫描项目Service文件: D:\gitlab\create_project\链数中建一局_1752461639\crcl-open
2025-07-14 14:29:05 - src.corder_integration.code_generator.service_decision_maker - INFO - 📊 找到 336 个Service文件
2025-07-14 14:29:05 - src.corder_integration.code_generator.service_decision_maker - INFO - 📂 扫描Application文件: D:\gitlab\create_project\链数中建一局_1752461639\crcl-open
2025-07-14 14:29:05 - src.corder_integration.code_generator.service_decision_maker - INFO - 📊 找到 35 个Application文件
2025-07-14 14:29:05 - src.corder_integration.code_generator.service_decision_maker - INFO - 🤔 进行Service决策: listUnitLimitByCompanyId
2025-07-14 14:29:05 - src.corder_integration.code_generator.service_decision_maker - ERROR - ❌ LLM决策失败: 'VolcengineClient' object has no attribute 'chat_completion'
2025-07-14 14:29:05 - src.corder_integration.code_generator.interface_adder - INFO - ➕ 开始在Controller中添加新接口: listUnitLimitByCompanyId
2025-07-14 14:29:05 - src.corder_integration.code_generator.interface_adder - INFO - ✅ 成功添加接口方法到Controller
2025-07-14 14:29:05 - src.corder_integration.code_generator.interface_adder - INFO - 📝 已备份原始文件: D:\gitlab\create_project\链数中建一局_1752461639\crcl-open\src\main\java\com\yljr\crcl\limit\interfaces\LsLimitController.java.backup
2025-07-14 14:29:05 - src.corder_integration.code_generator.interface_adder - INFO - ✅ 已保存更新后的Controller文件: D:\gitlab\create_project\链数中建一局_1752461639\crcl-open\src\main\java\com\yljr\crcl\limit\interfaces\LsLimitController.java
2025-07-14 14:29:05 - src.corder_integration.code_generator.controller_interface_manager - INFO - ✅ Controller LsLimitController 处理完成
2025-07-14 14:29:05 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功在现有Controller中添加接口: listUnitLimitByCompanyId
2025-07-14 14:29:05 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔧 使用现有模块处理Service和Mapper层: UnitLimitByCompanyId
2025-07-14 14:29:05 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 Service决策结果: use_existing
2025-07-14 14:29:05 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_009 状态更新为 completed
2025-07-14 14:29:05 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 任务 task_009 执行成功
2025-07-14 14:29:05 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 第2轮执行完成，处理了 1 个任务
2025-07-14 14:29:05 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第3轮任务检查...
2025-07-14 14:29:06 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 第3轮找到 1 个可执行任务
2025-07-14 14:29:06 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 开始执行任务: task_010 (api)
2025-07-14 14:29:06 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_010 已被 intelligent_coding_node 领取
2025-07-14 14:29:06 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🌐 执行API接口生成任务: task_010
2025-07-14 14:29:06 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 解析的接口信息:
2025-07-14 14:29:06 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 接口名称: UnitLimitByCompanyIdExport
2025-07-14 14:29:06 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - API路径: /crcl-open-api/lsLimit/listUnitLimitByCompanyIdExport
2025-07-14 14:29:06 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - HTTP方法: GET
2025-07-14 14:29:06 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 输入参数: 4个
2025-07-14 14:29:06 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 输出参数: 3个
2025-07-14 14:29:06 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 业务描述: 复用listUnitLimitByCompanyId接口的查询逻辑，将结果导出为Excel格式
2025-07-14 14:29:06 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 在 D:\gitlab\create_project/链数中建一局_1752461639/crcl-open 中查找最佳Java项目路径...
2025-07-14 14:29:06 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 目标服务名: 确权开立服务
2025-07-14 14:29:06 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-14 14:29:06 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 发现Java项目: crcl-open
2025-07-14 14:29:06 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       🎯 相对路径: .
2025-07-14 14:29:06 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       📊 Java文件: 2251个
2025-07-14 14:29:06 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       📐 目录深度: 0
2025-07-14 14:29:06 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       🏆 优先级分数: 650
2025-07-14 14:29:06 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 排序后的候选路径（前3个）:
2025-07-14 14:29:06 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    1. . (优先级: 650)
2025-07-14 14:29:06 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 选择最佳Java项目路径:
2025-07-14 14:29:06 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 完整路径: D:\gitlab\create_project\链数中建一局_1752461639\crcl-open
2025-07-14 14:29:06 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📋 相对路径: .
2025-07-14 14:29:06 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    🏆 最终优先级: 650
2025-07-14 14:29:06 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 从API路径 /crcl-open-api/lsLimit/listUnitLimitByCompanyIdExport 提取关键字: lsLimit
2025-07-14 14:29:06 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 在项目中搜索关键字相关路径: lsLimit
2025-07-14 14:29:06 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 找到匹配目录: limit (得分: 25)
2025-07-14 14:29:06 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 找到匹配目录: ls (得分: 25)
2025-07-14 14:29:06 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 找到匹配目录: ls (得分: 25)
2025-07-14 14:29:06 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 找到匹配目录: ls (得分: 25)
2025-07-14 14:29:06 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 找到匹配目录: limit (得分: 25)
2025-07-14 14:29:06 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    ✅ 选择最佳匹配目录: limit (路径: src\main\java\com\yljr\crcl\limit)
2025-07-14 14:29:06 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 基于API关键字 'lsLimit' 找到现有路径: D:\gitlab\create_project\链数中建一局_1752461639\crcl-open\src\main\java\com\yljr\crcl\limit
2025-07-14 14:29:06 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -  分析目标项目: D:\gitlab\create_project\链数中建一局_1752461639\crcl-open\src\main\java\com\yljr\crcl\limit
2025-07-14 14:29:06 - src.apis.project_analysis_api - INFO - 🔍 开始分析项目用于代码生成: D:\gitlab\create_project\链数中建一局_1752461639\crcl-open\src\main\java\com\yljr\crcl\limit
2025-07-14 14:29:06 - src.apis.project_analysis_api - INFO - 📋 使用缓存的分析结果
2025-07-14 14:29:06 - src.corder_integration.code_generator.controller_interface_manager - INFO - 🚀 开始处理API接口请求: /crcl-open-api/lsLimit/listUnitLimitByCompanyIdExport
2025-07-14 14:29:06 - src.corder_integration.code_generator.controller_analyzer - INFO - 🔍 开始分析路径下的Controller文件: D:\gitlab\create_project\链数中建一局_1752461639\crcl-open\src\main\java\com\yljr\crcl\limit
2025-07-14 14:29:06 - src.corder_integration.code_generator.controller_analyzer - INFO - 🎯 匹配关键字: lsLimit
2025-07-14 14:29:06 - src.corder_integration.code_generator.controller_analyzer - INFO - 🎯 在 D:\gitlab\create_project\链数中建一局_1752461639\crcl-open\src\main\java\com\yljr\crcl\limit\interfaces\LsLimitController.java 中找到匹配的@RequestMapping: /lsLimit
2025-07-14 14:29:06 - src.corder_integration.code_generator.controller_analyzer - INFO - 📋 提取到 0 个Service依赖
2025-07-14 14:29:06 - src.corder_integration.code_generator.controller_analyzer - INFO - ✅ 找到匹配的Controller: D:\gitlab\create_project\链数中建一局_1752461639\crcl-open\src\main\java\com\yljr\crcl\limit\interfaces\LsLimitController.java
2025-07-14 14:29:06 - src.corder_integration.code_generator.controller_analyzer - INFO - 📊 总共找到 1 个匹配的Controller文件
2025-07-14 14:29:06 - src.corder_integration.code_generator.controller_analyzer - INFO - 🔧 从API路径 '/crcl-open-api/lsLimit/listUnitLimitByCompanyIdExport' 提取接口名称: 'listUnitLimitByCompanyIdExport'
2025-07-14 14:29:06 - src.corder_integration.code_generator.controller_interface_manager - INFO - 📝 处理Controller: LsLimitController
2025-07-14 14:29:06 - src.corder_integration.code_generator.service_decision_maker - INFO - 🔍 开始分析Service需求: listUnitLimitByCompanyIdExport
2025-07-14 14:29:06 - src.corder_integration.code_generator.service_decision_maker - INFO - 📂 扫描项目Service文件: D:\gitlab\create_project\链数中建一局_1752461639\crcl-open
2025-07-14 14:29:07 - src.corder_integration.code_generator.service_decision_maker - INFO - 📊 找到 336 个Service文件
2025-07-14 14:29:07 - src.corder_integration.code_generator.service_decision_maker - INFO - 📂 扫描Application文件: D:\gitlab\create_project\链数中建一局_1752461639\crcl-open
2025-07-14 14:29:07 - src.corder_integration.code_generator.service_decision_maker - INFO - 📊 找到 35 个Application文件
2025-07-14 14:29:07 - src.corder_integration.code_generator.service_decision_maker - INFO - 🤔 进行Service决策: listUnitLimitByCompanyIdExport
2025-07-14 14:29:07 - src.corder_integration.code_generator.service_decision_maker - ERROR - ❌ LLM决策失败: 'VolcengineClient' object has no attribute 'chat_completion'
2025-07-14 14:29:07 - src.corder_integration.code_generator.interface_adder - INFO - ➕ 开始在Controller中添加新接口: listUnitLimitByCompanyIdExport
2025-07-14 14:29:07 - src.corder_integration.code_generator.interface_adder - INFO - ✅ 成功添加接口方法到Controller
2025-07-14 14:29:07 - src.corder_integration.code_generator.interface_adder - INFO - 📝 已备份原始文件: D:\gitlab\create_project\链数中建一局_1752461639\crcl-open\src\main\java\com\yljr\crcl\limit\interfaces\LsLimitController.java.backup
2025-07-14 14:29:07 - src.corder_integration.code_generator.interface_adder - INFO - ✅ 已保存更新后的Controller文件: D:\gitlab\create_project\链数中建一局_1752461639\crcl-open\src\main\java\com\yljr\crcl\limit\interfaces\LsLimitController.java
2025-07-14 14:29:07 - src.corder_integration.code_generator.controller_interface_manager - INFO - ✅ Controller LsLimitController 处理完成
2025-07-14 14:29:07 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功在现有Controller中添加接口: listUnitLimitByCompanyIdExport
2025-07-14 14:29:07 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔧 使用现有模块处理Service和Mapper层: UnitLimitByCompanyIdExport
2025-07-14 14:29:07 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 Service决策结果: use_existing
2025-07-14 14:29:07 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_010 状态更新为 completed
2025-07-14 14:29:07 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 任务 task_010 执行成功
2025-07-14 14:29:07 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 第3轮执行完成，处理了 1 个任务
2025-07-14 14:29:07 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第4轮任务检查...
2025-07-14 14:29:07 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第4轮没有可执行的智能编码任务
2025-07-14 14:29:07 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 3 个任务，共4轮
2025-07-14 14:29:07 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 3 个任务
2025-07-14 14:29:07 - src.corder_integration.langgraph.workflow_orchestrator - WARNING - 没有识别到任何服务，结束编码流程
2025-07-14 14:29:07 - src.corder_integration.langgraph.workflow_orchestrator - INFO - 工作流执行成功: 链数中建一局_1752474365, 完成服务数: 0
2025-07-14 14:29:07 - werkzeug - INFO - 127.0.0.1 - - [14/Jul/2025 14:29:07] "POST /api/coder-agent/process-document HTTP/1.1" 200 -
2025-07-14 14:35:30 - werkzeug - INFO -  * Detected change in 'D:\\ai_project\\document_analyzer\\src\\corder_integration\\code_generator\\service_decision_maker.py', reloading
2025-07-14 14:35:32 - werkzeug - INFO -  * Restarting with stat
2025-07-14 14:35:33 - system - INFO - ==================================================
2025-07-14 14:35:33 - system - INFO - 🚀 智能分析系统日志系统初始化完成
2025-07-14 14:35:33 - system - INFO - 📁 日志根目录: D:\ai_project\document_analyzer\logs
2025-07-14 14:35:33 - system - INFO - 📊 日志级别: INFO
2025-07-14 14:35:33 - system - INFO - 📅 按日期轮转: 每天午夜自动轮转
2025-07-14 14:35:33 - system - INFO - 📂 按月分目录: logs/YYYY-MM/
2025-07-14 14:35:33 - system - INFO - 📝 主日志: logs/2025-07/app.log
2025-07-14 14:35:33 - system - INFO - 🔧 API日志: logs/2025-07/api_server.log
2025-07-14 14:35:33 - system - INFO - 🗂️ 保留天数: 7 天
2025-07-14 14:35:33 - system - INFO - ==================================================
2025-07-14 14:35:42 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-14 14:35:42 - root - WARNING - 智能编码节点不可用: cannot import name 'IntelligentCodingAgent' from partially initialized module 'src.corder_integration.langgraph.nodes.intelligent_coding_node' (most likely due to a circular import) (D:\ai_project\document_analyzer\src\corder_integration\langgraph\nodes\intelligent_coding_node.py)
2025-07-14 14:35:42 - src.utils.task_storage - INFO - 数据库初始化成功
2025-07-14 14:35:42 - markdown_storage - INFO - Markdown存储管理器初始化完成
2025-07-14 14:35:42 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-14 14:35:42 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 14:35:43 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-14 14:35:43 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-14 14:35:44 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-14 14:35:44 - WeaviateVectorDatabase - INFO - ✅ Weaviate连接成功: http://localhost:8080 (gRPC: 50051)
2025-07-14 14:35:44 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/schema/AnalyDesignDocuments "HTTP/1.1 200 OK"
2025-07-14 14:35:44 - WeaviateVectorDatabase - INFO - ✅ Weaviate集合已存在: AnalyDesignDocuments
2025-07-14 14:35:44 - AnalysisServiceManager - INFO - 初始化向量数据库: weaviate
2025-07-14 14:35:44 - sentence_transformers.SentenceTransformer - INFO - Use pytorch device_name: cpu
2025-07-14 14:35:44 - sentence_transformers.SentenceTransformer - INFO - Load pretrained SentenceTransformer: BAAI/bge-large-zh
2025-07-14 14:35:49 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-14 14:35:50 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-14 14:35:50 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-14 14:35:50 - src.utils.weaviate_helper - INFO - 成功连接到 Weaviate: localhost:8080
2025-07-14 14:35:50 - AnalysisServiceManager - INFO - 分析服务管理器初始化完成
2025-07-14 14:35:50 - src.utils.enhanced_analyzer - INFO - 增强分析器初始化完成
2025-07-14 14:35:50 - werkzeug - WARNING -  * Debugger is active!
2025-07-14 14:35:50 - werkzeug - INFO -  * Debugger PIN: 887-537-592
2025-07-14 14:45:08 - werkzeug - INFO -  * Detected change in 'D:\\ai_project\\document_analyzer\\src\\corder_integration\\code_generator\\interface_adder.py', reloading
2025-07-14 14:45:10 - werkzeug - INFO -  * Restarting with stat
2025-07-14 14:45:10 - system - INFO - ==================================================
2025-07-14 14:45:10 - system - INFO - 🚀 智能分析系统日志系统初始化完成
2025-07-14 14:45:10 - system - INFO - 📁 日志根目录: D:\ai_project\document_analyzer\logs
2025-07-14 14:45:10 - system - INFO - 📊 日志级别: INFO
2025-07-14 14:45:10 - system - INFO - 📅 按日期轮转: 每天午夜自动轮转
2025-07-14 14:45:10 - system - INFO - 📂 按月分目录: logs/YYYY-MM/
2025-07-14 14:45:10 - system - INFO - 📝 主日志: logs/2025-07/app.log
2025-07-14 14:45:10 - system - INFO - 🔧 API日志: logs/2025-07/api_server.log
2025-07-14 14:45:10 - system - INFO - 🗂️ 保留天数: 7 天
2025-07-14 14:45:10 - system - INFO - ==================================================
2025-07-14 14:45:23 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-14 14:45:23 - root - WARNING - 智能编码节点不可用: cannot import name 'IntelligentCodingAgent' from partially initialized module 'src.corder_integration.langgraph.nodes.intelligent_coding_node' (most likely due to a circular import) (D:\ai_project\document_analyzer\src\corder_integration\langgraph\nodes\intelligent_coding_node.py)
2025-07-14 14:45:23 - src.utils.task_storage - INFO - 数据库初始化成功
2025-07-14 14:45:23 - markdown_storage - INFO - Markdown存储管理器初始化完成
2025-07-14 14:45:23 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-14 14:45:24 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 14:45:24 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-14 14:45:25 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-14 14:45:25 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-14 14:45:25 - WeaviateVectorDatabase - INFO - ✅ Weaviate连接成功: http://localhost:8080 (gRPC: 50051)
2025-07-14 14:45:25 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/schema/AnalyDesignDocuments "HTTP/1.1 200 OK"
2025-07-14 14:45:25 - WeaviateVectorDatabase - INFO - ✅ Weaviate集合已存在: AnalyDesignDocuments
2025-07-14 14:45:25 - AnalysisServiceManager - INFO - 初始化向量数据库: weaviate
2025-07-14 14:45:25 - sentence_transformers.SentenceTransformer - INFO - Use pytorch device_name: cpu
2025-07-14 14:45:25 - sentence_transformers.SentenceTransformer - INFO - Load pretrained SentenceTransformer: BAAI/bge-large-zh
2025-07-14 14:45:30 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-14 14:45:31 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-14 14:45:31 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-14 14:45:31 - src.utils.weaviate_helper - INFO - 成功连接到 Weaviate: localhost:8080
2025-07-14 14:45:31 - AnalysisServiceManager - INFO - 分析服务管理器初始化完成
2025-07-14 14:45:31 - src.utils.enhanced_analyzer - INFO - 增强分析器初始化完成
2025-07-14 14:45:31 - werkzeug - WARNING -  * Debugger is active!
2025-07-14 14:45:31 - werkzeug - INFO -  * Debugger PIN: 887-537-592
2025-07-14 14:46:06 - werkzeug - INFO -  * Detected change in 'D:\\ai_project\\document_analyzer\\src\\corder_integration\\code_generator\\interface_adder.py', reloading
2025-07-14 14:46:07 - werkzeug - INFO -  * Restarting with stat
2025-07-14 14:46:08 - system - INFO - ==================================================
2025-07-14 14:46:08 - system - INFO - 🚀 智能分析系统日志系统初始化完成
2025-07-14 14:46:08 - system - INFO - 📁 日志根目录: D:\ai_project\document_analyzer\logs
2025-07-14 14:46:08 - system - INFO - 📊 日志级别: INFO
2025-07-14 14:46:08 - system - INFO - 📅 按日期轮转: 每天午夜自动轮转
2025-07-14 14:46:08 - system - INFO - 📂 按月分目录: logs/YYYY-MM/
2025-07-14 14:46:08 - system - INFO - 📝 主日志: logs/2025-07/app.log
2025-07-14 14:46:08 - system - INFO - 🔧 API日志: logs/2025-07/api_server.log
2025-07-14 14:46:08 - system - INFO - 🗂️ 保留天数: 7 天
2025-07-14 14:46:08 - system - INFO - ==================================================
2025-07-14 14:46:14 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-14 14:46:15 - root - WARNING - 智能编码节点不可用: cannot import name 'IntelligentCodingAgent' from partially initialized module 'src.corder_integration.langgraph.nodes.intelligent_coding_node' (most likely due to a circular import) (D:\ai_project\document_analyzer\src\corder_integration\langgraph\nodes\intelligent_coding_node.py)
2025-07-14 14:46:15 - src.utils.task_storage - INFO - 数据库初始化成功
2025-07-14 14:46:15 - markdown_storage - INFO - Markdown存储管理器初始化完成
2025-07-14 14:46:15 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-14 14:46:15 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 14:46:15 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-14 14:46:16 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-14 14:46:16 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-14 14:46:16 - WeaviateVectorDatabase - INFO - ✅ Weaviate连接成功: http://localhost:8080 (gRPC: 50051)
2025-07-14 14:46:16 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/schema/AnalyDesignDocuments "HTTP/1.1 200 OK"
2025-07-14 14:46:16 - WeaviateVectorDatabase - INFO - ✅ Weaviate集合已存在: AnalyDesignDocuments
2025-07-14 14:46:16 - AnalysisServiceManager - INFO - 初始化向量数据库: weaviate
2025-07-14 14:46:16 - sentence_transformers.SentenceTransformer - INFO - Use pytorch device_name: cpu
2025-07-14 14:46:16 - sentence_transformers.SentenceTransformer - INFO - Load pretrained SentenceTransformer: BAAI/bge-large-zh
2025-07-14 14:46:22 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-14 14:46:22 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-14 14:46:23 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-14 14:46:23 - src.utils.weaviate_helper - INFO - 成功连接到 Weaviate: localhost:8080
2025-07-14 14:46:23 - AnalysisServiceManager - INFO - 分析服务管理器初始化完成
2025-07-14 14:46:23 - src.utils.enhanced_analyzer - INFO - 增强分析器初始化完成
2025-07-14 14:46:23 - werkzeug - WARNING -  * Debugger is active!
2025-07-14 14:46:23 - werkzeug - INFO -  * Debugger PIN: 887-537-592
2025-07-14 14:49:47 - src.apis.coder_agent_api - INFO - 开始处理文档: 链数中建一局_1752475787
2025-07-14 14:49:47 - src.apis.coder_agent_api - INFO - 文档长度: 4931 字符
2025-07-14 14:49:47 - src.apis.coder_agent_api - INFO - 使用LangGraph: True
2025-07-14 14:49:47 - src.apis.coder_agent_api - INFO - 代码输出路径: D:\gitlab\create_project
2025-07-14 14:49:47 - src.apis.coder_agent_api - INFO - 使用LangGraph工作流处理项目: 链数中建一局_1752475787
2025-07-14 14:49:47 - src.corder_integration.langgraph.workflow_orchestrator - INFO - 准备使用异步SQLite检查点: D:\ai_project\document_analyzer\workflow_checkpoints.db
2025-07-14 14:49:47 - src.corder_integration.langgraph.workflow_orchestrator - INFO - 生成目标分支名称: 链数中建一局_1752475787 -> D_20250714_链数中建一局_1752475787
2025-07-14 14:49:47 - src.corder_integration.langgraph.workflow_orchestrator - INFO - 开始执行编码工作流: 链数中建一局_1752475787 -> D:\gitlab\create_project
2025-07-14 14:49:47 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🚀 Git管理节点开始执行...
2025-07-14 14:49:47 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 14:49:47 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🎯 git_management_node 开始执行任务...
2025-07-14 14:49:47 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ℹ️ 没有可执行的Git管理任务
2025-07-14 14:49:47 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ Git管理节点完成 - 提取: 0 个仓库, 克隆: 0 个仓库, 仓库初始化状态: False
2025-07-14 14:49:47 - src.corder_integration.langgraph.workflow_orchestrator - WARNING - 没有识别到任何服务，Git设置阶段结束
2025-07-14 14:49:47 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 14:49:47 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 14:49:47 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: config.yaml
2025-07-14 14:49:48 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 14:49:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 14:49:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 14:49:48 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 14:49:48 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 14:49:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-14 14:49:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 14:49:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 14:49:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 第1轮找到 1 个可执行任务
2025-07-14 14:49:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 开始执行任务: task_008 (api)
2025-07-14 14:49:48 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_008 已被 intelligent_coding_node 领取
2025-07-14 14:49:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🌐 执行API接口生成任务: task_008
2025-07-14 14:49:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 解析的接口信息:
2025-07-14 14:49:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 接口名称: CompanyUnitList
2025-07-14 14:49:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - API路径: /general/multiorgManage/queryCompanyUnitList
2025-07-14 14:49:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - HTTP方法: GET
2025-07-14 14:49:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 输入参数: 3个
2025-07-14 14:49:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 输出参数: 6个
2025-07-14 14:49:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 业务描述: 根据查询条件查询组织单元信息，支持按编码、状态等条件筛选
2025-07-14 14:49:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 在 D:\gitlab\create_project/链数中建一局_1752461639/zqyl-user-center-service 中查找最佳Java项目路径...
2025-07-14 14:49:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 目标服务名: 用户服务
2025-07-14 14:49:49 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-14 14:49:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 发现Java项目: user-basic-general
2025-07-14 14:49:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       🎯 相对路径: user-basic-service\user-basic-general
2025-07-14 14:49:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       📊 Java文件: 36个
2025-07-14 14:49:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       📐 目录深度: 2
2025-07-14 14:49:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       🏆 优先级分数: 750
2025-07-14 14:49:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 排序后的候选路径（前3个）:
2025-07-14 14:49:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    1. user-basic-service\user-basic-general (优先级: 750)
2025-07-14 14:49:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 选择最佳Java项目路径:
2025-07-14 14:49:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 完整路径: D:\gitlab\create_project\链数中建一局_1752461639\zqyl-user-center-service\user-basic-service\user-basic-general
2025-07-14 14:49:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📋 相对路径: user-basic-service\user-basic-general
2025-07-14 14:49:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    🏆 最终优先级: 750
2025-07-14 14:49:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 从API路径 /general/multiorgManage/queryCompanyUnitList 提取关键字: multiorgManage
2025-07-14 14:49:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 在项目中搜索关键字相关路径: multiorgManage
2025-07-14 14:49:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    ❌ 未找到包含关键字 'multiorgManage' 的相关目录
2025-07-14 14:49:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -  分析目标项目: D:\gitlab\create_project\链数中建一局_1752461639\zqyl-user-center-service\user-basic-service\user-basic-general
2025-07-14 14:49:50 - src.apis.project_analysis_api - INFO - 🔍 开始分析项目用于代码生成: D:\gitlab\create_project\链数中建一局_1752461639\zqyl-user-center-service\user-basic-service\user-basic-general
2025-07-14 14:49:50 - src.apis.project_analysis_api - INFO - 🔍 在 D:\gitlab\create_project\链数中建一局_1752461639\zqyl-user-center-service\user-basic-service\user-basic-general 中查找最佳Java项目路径...
2025-07-14 14:49:50 - src.apis.project_analysis_api - INFO - 🎯 目标服务名: 用户服务
2025-07-14 14:49:50 - src.apis.project_analysis_api - INFO -    📐 中等深度结构 (深度7) -> +100
2025-07-14 14:49:50 - src.apis.project_analysis_api - INFO -    📦 服务模块匹配: user-basic-service -> +120
2025-07-14 14:49:50 - src.apis.project_analysis_api - INFO -    🏢 业务域匹配: user -> +60
2025-07-14 14:49:50 - src.apis.project_analysis_api - INFO -    🏗️ 架构层级匹配: service -> +100
2025-07-14 14:49:50 - src.apis.project_analysis_api - INFO -    🎯🎯🎯 深层服务模块路径匹配 -> +800
2025-07-14 14:49:50 - src.apis.project_analysis_api - INFO -    📁 发现Java项目: user-basic-general
2025-07-14 14:49:50 - src.apis.project_analysis_api - INFO -       🎯 相对路径: .
2025-07-14 14:49:50 - src.apis.project_analysis_api - INFO -       📊 Java文件: 36个
2025-07-14 14:49:50 - src.apis.project_analysis_api - INFO -       📐 目录深度: 0
2025-07-14 14:49:50 - src.apis.project_analysis_api - INFO -       🏆 优先级分数: 1181
2025-07-14 14:49:50 - src.apis.project_analysis_api - INFO - 📋 排序后的候选路径（前3个）:
2025-07-14 14:49:50 - src.apis.project_analysis_api - INFO -    1. . (优先级: 1181)
2025-07-14 14:49:50 - src.apis.project_analysis_api - INFO - ✅ 选择最佳Java项目路径:
2025-07-14 14:49:50 - src.apis.project_analysis_api - INFO -    📁 完整路径: D:\gitlab\create_project\链数中建一局_1752461639\zqyl-user-center-service\user-basic-service\user-basic-general
2025-07-14 14:49:50 - src.apis.project_analysis_api - INFO -    📋 相对路径: .
2025-07-14 14:49:50 - src.apis.project_analysis_api - INFO -    🏆 最终优先级: 1181
2025-07-14 14:49:50 - src.apis.project_analysis_api - INFO - 📂 实际分析路径: D:\gitlab\create_project\链数中建一局_1752461639\zqyl-user-center-service\user-basic-service\user-basic-general
2025-07-14 14:49:50 - src.utils.java_code_analyzer - INFO - 🔍 开始分析企业级Java项目: D:\gitlab\create_project\链数中建一局_1752461639\zqyl-user-center-service\user-basic-service\user-basic-general
2025-07-14 14:49:50 - src.utils.java_code_analyzer - WARNING - ⚠️ 解析Java文件失败 D:\gitlab\create_project\链数中建一局_1752461639\zqyl-user-center-service\user-basic-service\user-basic-general\src\main\java\com\yljr\user\basicgeneral\interfaces\dto\CompanyUnitListReq.java: 
2025-07-14 14:49:50 - src.utils.java_code_analyzer - INFO - ✅ 企业级项目分析完成，共分析 36 个Java文件
2025-07-14 14:49:50 - src.apis.project_analysis_api - INFO - 📦 动态检测到基础包: com.yljr.user.basicgeneral (出现36次)
2025-07-14 14:49:50 - src.apis.project_analysis_api - INFO - 📦 动态检测到基础包: com.yljr.user.basicgeneral (出现36次)
2025-07-14 14:49:50 - src.apis.project_analysis_api - INFO - 📦 动态检测到基础包: com.yljr.user.basicgeneral (出现36次)
2025-07-14 14:49:50 - src.apis.project_analysis_api - INFO - ✅ 项目分析完成，已提取代码生成上下文
2025-07-14 14:49:50 - src.corder_integration.code_generator.controller_interface_manager - INFO - 🚀 开始处理API接口请求: /general/multiorgManage/queryCompanyUnitList
2025-07-14 14:49:50 - src.corder_integration.code_generator.controller_analyzer - INFO - 🔍 开始分析路径下的Controller文件: D:\gitlab\create_project\链数中建一局_1752461639\zqyl-user-center-service\user-basic-service\user-basic-general
2025-07-14 14:49:50 - src.corder_integration.code_generator.controller_analyzer - INFO - 🎯 匹配关键字: multiorgManage
2025-07-14 14:49:50 - src.corder_integration.code_generator.controller_analyzer - INFO - 📊 总共找到 0 个匹配的Controller文件
2025-07-14 14:49:50 - src.corder_integration.code_generator.controller_interface_manager - INFO - ⚠️ 未找到匹配关键字 'multiorgManage' 的Controller文件
2025-07-14 14:49:50 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ⚠️ 未能在现有Controller中添加接口，将生成新文件
2025-07-14 14:49:50 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -  调用volcengine大模型生成代码...
2025-07-14 14:49:50 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 开始代码生成...
2025-07-14 14:49:50 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎨 使用模板+AI混合模式生成代码
2025-07-14 14:49:50 - src.corder_integration.code_generator.template_ai_generator - INFO - 🎨 开始模板+AI混合代码生成: CompanyUnitList
2025-07-14 14:49:50 - src.corder_integration.code_generator.template_ai_generator - INFO - 🤖 使用unknown增强模板代码...
2025-07-14 14:49:50 - src.corder_integration.code_generator.template_ai_generator - INFO - 增强模板代码入参：[{'role': 'system', 'content': '你是Java代码优化专家。请根据业务需求优化给定的模板代码，保持代码结构清晰，添加必要的业务逻辑。重要：请使用具体的类名，不要使用{{}}模板变量语法。只返回优化后的Java代码，不要添加额外说明。'}, {'role': 'user', 'content': '\n请优化以下service_impl代码模板，重点关注：\n- 实现完整的业务逻辑\n- 添加数据验证和转换\n- 处理异常情况\n- 添加事务管理\n- 优化数据库查询逻辑\n\n## 当前模板代码：\n```java\npackage com.yljr.user.basicgeneral.application.service.impl;\n\nimport com.yljr.user.basicgeneral.application.service.CompanyUnitListService;\nimport com.yljr.user.basicgeneral.domain.entity.CompanyUnitList;\nimport com.yljr.user.basicgeneral.domain.mapper.CompanyUnitListMapper;\nimport com.yljr.user.basicgeneral.interfaces.dto.CompanyUnitListReq;\nimport com.yljr.user.basicgeneral.interfaces.dto.CompanyUnitListResp;\nimport org.springframework.stereotype.Service;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.transaction.annotation.Transactional;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\n/**\n * CompanyUnitList Service - 根据查询条件查询组织单元信息，支持按编码、状态等条件筛选\n * Generated by Template + AI\n */\n@Service\n@Transactional\npublic class CompanyUnitListServiceImpl implements CompanyUnitListService {\n    \n    private static final Logger logger = LoggerFactory.getLogger(CompanyUnitListServiceImpl.class);\n    \n    @Autowired\n    private CompanyUnitListMapper companyUnitListMapper;\n    \n    @Override\n    public CompanyUnitListResp CompanyUnitList(CompanyUnitListReq request) {\n        logger.info("Executing CompanyUnitList with parameters: {}", request);\n        \n        try {\n            // TODO: 实现根据查询条件查询组织单元信息，支持按编码、状态等条件筛选业务逻辑\n            \n            logger.info("CompanyUnitList completed successfully");\n            return new CompanyUnitListResp();\n        } catch (Exception e) {\n            logger.error("Error in CompanyUnitList: ", e);\n            throw new RuntimeException("CompanyUnitList failed", e);\n        }\n    }\n}\n```\n\n## 业务需求：\n- 接口名称：CompanyUnitList\n- 功能描述：根据查询条件查询组织单元信息，支持按编码、状态等条件筛选\n- 业务逻辑：根据查询条件查询组织单元信息，支持按编码、状态等条件筛选\n\n## 输入参数：\n- unitCode (String): 组织单元编码(可选) [可选]\n- openStatus (String): 开通状态(可选) [可选]\n- unitList (String): 组织单元列表(可选) [可选]\n\n## 输出参数：\n- unitId (String): 组织单元ID\n- unitTypeDicType (String): 组织单元类型字典类型\n- unitTypeId (String): 组织单元类型ID\n- openStatus (String): 开通状态\n- unitCode (String): 组织单元编码\n- unitName (String): 组织单元名称\n\n## 技术要求：\n- 基础包名：com.yljr.user.basicgeneral\n- 使用Spring Boot + MyBatis Plus\n- 遵循DDD分层架构\n- 保持原有类名和包结构\n- 请求DTO类名：CompanyUnitListReq\n- 响应DTO类名：CompanyUnitListResp\n- Service类名：CompanyUnitListService\n\n**重要：请使用具体的类名（如 CompanyUnitListReq），不要使用模板变量语法（如 {{REQUEST_DTO_NAME}}）**\n\n请返回优化后的完整Java代码（只要代码，不要额外说明）：\n'}]
2025-07-14 14:50:21 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-14 14:50:21 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ service_impl AI增强完成
2025-07-14 14:50:21 - src.corder_integration.code_generator.template_ai_generator - INFO - 增强模板代码入参：[{'role': 'system', 'content': '你是Java代码优化专家。请根据业务需求优化给定的模板代码，保持代码结构清晰，添加必要的业务逻辑。重要：请使用具体的类名，不要使用{{}}模板变量语法。只返回优化后的Java代码，不要添加额外说明。'}, {'role': 'user', 'content': '\n请优化以下controller代码模板，重点关注：\n- 完善参数验证\n- 统一响应格式\n- 添加API文档注解\n- 改进错误处理\n- 优化日志记录\n\n## 当前模板代码：\n```java\npackage com.yljr.user.basicgeneral.interfaces.rest;\n\nimport com.yljr.user.basicgeneral.application.service.CompanyUnitListService;\nimport com.yljr.user.basicgeneral.interfaces.dto.CompanyUnitListReq;\nimport com.yljr.user.basicgeneral.interfaces.dto.CompanyUnitListResp;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.*;\nimport org.springframework.http.ResponseEntity;\nimport javax.validation.Valid;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport io.swagger.annotations.Api;\nimport io.swagger.annotations.ApiOperation;\n\n/**\n * CompanyUnitList Controller - 根据查询条件查询组织单元信息，支持按编码、状态等条件筛选\n * Generated by Template + AI\n */\n@Api(tags = "CompanyUnitList Controller - 根据查询条件查询组织单元信息，支持按编码、状态等条件筛选")\n@RestController\n@RequestMapping("/general/multiorgManage/queryCompanyUnitList")\n@CrossOrigin(origins = "*")\npublic class CompanyUnitListController {\n    \n    private static final Logger logger = LoggerFactory.getLogger(CompanyUnitListController.class);\n    \n    @Autowired\n    private CompanyUnitListService companyUnitListService;\n    \n    /**\n     * 根据查询条件查询组织单元信息，支持按编码、状态等条件筛选\n     */\n    @ApiOperation("根据查询条件查询组织单元信息，支持按编码、状态等条件筛选")\n    @GetMapping\n    public ResponseEntity<CompanyUnitListResp> CompanyUnitList(@Valid @RequestBody CompanyUnitListReq request) {\n        try {\n            logger.info("Processing CompanyUnitList request: {}", request);\n            \n            CompanyUnitListResp response = companyUnitListService.CompanyUnitList(request);\n            \n            logger.info("CompanyUnitList completed successfully");\n            return ResponseEntity.ok(response);\n        } catch (Exception e) {\n            logger.error("Error in CompanyUnitList: ", e);\n            return ResponseEntity.internalServerError().build();\n        }\n    }\n}\n```\n\n## 业务需求：\n- 接口名称：CompanyUnitList\n- 功能描述：根据查询条件查询组织单元信息，支持按编码、状态等条件筛选\n- 业务逻辑：根据查询条件查询组织单元信息，支持按编码、状态等条件筛选\n\n## 输入参数：\n- unitCode (String): 组织单元编码(可选) [可选]\n- openStatus (String): 开通状态(可选) [可选]\n- unitList (String): 组织单元列表(可选) [可选]\n\n## 输出参数：\n- unitId (String): 组织单元ID\n- unitTypeDicType (String): 组织单元类型字典类型\n- unitTypeId (String): 组织单元类型ID\n- openStatus (String): 开通状态\n- unitCode (String): 组织单元编码\n- unitName (String): 组织单元名称\n\n## 技术要求：\n- 基础包名：com.yljr.user.basicgeneral\n- 使用Spring Boot + MyBatis Plus\n- 遵循DDD分层架构\n- 保持原有类名和包结构\n- 请求DTO类名：CompanyUnitListReq\n- 响应DTO类名：CompanyUnitListResp\n- Service类名：CompanyUnitListService\n\n**重要：请使用具体的类名（如 CompanyUnitListReq），不要使用模板变量语法（如 {{REQUEST_DTO_NAME}}）**\n\n请返回优化后的完整Java代码（只要代码，不要额外说明）：\n'}]
2025-07-14 14:50:48 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-14 14:50:48 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ controller AI增强完成
2025-07-14 14:50:48 - src.corder_integration.code_generator.template_ai_generator - INFO - 增强模板代码入参：[{'role': 'system', 'content': '你是Java代码优化专家。请根据业务需求优化给定的模板代码，保持代码结构清晰，添加必要的业务逻辑。重要：请使用具体的类名，不要使用{{}}模板变量语法。只返回优化后的Java代码，不要添加额外说明。'}, {'role': 'user', 'content': '\n请优化以下service_interface代码模板，重点关注：\n- 改进代码结构\n- 添加必要注释\n- 优化实现逻辑\n\n## 当前模板代码：\n```java\npackage com.yljr.user.basicgeneral.application.service;\n\nimport com.yljr.user.basicgeneral.interfaces.dto.CompanyUnitListReq;\nimport com.yljr.user.basicgeneral.interfaces.dto.CompanyUnitListResp;\nimport java.util.List;\n\n/**\n * CompanyUnitList Service - 根据查询条件查询组织单元信息，支持按编码、状态等条件筛选\n * Generated by Template + AI\n */\npublic interface CompanyUnitListService {\n    \n    /**\n     * 根据查询条件查询组织单元信息，支持按编码、状态等条件筛选\n     */\n    CompanyUnitListResp CompanyUnitList(CompanyUnitListReq request);\n}\n```\n\n## 业务需求：\n- 接口名称：CompanyUnitList\n- 功能描述：根据查询条件查询组织单元信息，支持按编码、状态等条件筛选\n- 业务逻辑：根据查询条件查询组织单元信息，支持按编码、状态等条件筛选\n\n## 输入参数：\n- unitCode (String): 组织单元编码(可选) [可选]\n- openStatus (String): 开通状态(可选) [可选]\n- unitList (String): 组织单元列表(可选) [可选]\n\n## 输出参数：\n- unitId (String): 组织单元ID\n- unitTypeDicType (String): 组织单元类型字典类型\n- unitTypeId (String): 组织单元类型ID\n- openStatus (String): 开通状态\n- unitCode (String): 组织单元编码\n- unitName (String): 组织单元名称\n\n## 技术要求：\n- 基础包名：com.yljr.user.basicgeneral\n- 使用Spring Boot + MyBatis Plus\n- 遵循DDD分层架构\n- 保持原有类名和包结构\n- 请求DTO类名：CompanyUnitListReq\n- 响应DTO类名：CompanyUnitListResp\n- Service类名：CompanyUnitListService\n\n**重要：请使用具体的类名（如 CompanyUnitListReq），不要使用模板变量语法（如 {{REQUEST_DTO_NAME}}）**\n\n请返回优化后的完整Java代码（只要代码，不要额外说明）：\n'}]
2025-07-14 14:51:00 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-14 14:51:00 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ service_interface AI增强完成
2025-07-14 14:51:00 - src.corder_integration.code_generator.template_ai_generator - INFO - 增强模板代码入参：[{'role': 'system', 'content': '你是Java代码优化专家。请根据业务需求优化给定的模板代码，保持代码结构清晰，添加必要的业务逻辑。重要：请使用具体的类名，不要使用{{}}模板变量语法。只返回优化后的Java代码，不要添加额外说明。'}, {'role': 'user', 'content': '\n请优化以下request_dto代码模板，重点关注：\n- 添加详细的字段验证\n- 完善API文档注解\n- 优化字段类型选择\n- 添加字段描述\n\n## 当前模板代码：\n```java\npackage com.yljr.user.basicgeneral.interfaces.dto;\n\nimport javax.validation.constraints.*;\nimport lombok.Data;\nimport io.swagger.annotations.ApiModel;\nimport io.swagger.annotations.ApiModelProperty;\n\n/**\n * CompanyUnitList Request DTO\n * Generated by Template + AI\n */\n@Data\n@ApiModel(description = "CompanyUnitList Request DTO")\npublic class CompanyUnitListReq {\n    \n    @ApiModelProperty(value = "组织单元编码(可选)", required = false)\n    private String unitCode;\n\n    @ApiModelProperty(value = "开通状态(可选)", required = false)\n    private String openStatus;\n\n    @ApiModelProperty(value = "组织单元列表(可选)", required = false)\n    private String unitList;\n}\n```\n\n## 业务需求：\n- 接口名称：CompanyUnitList\n- 功能描述：根据查询条件查询组织单元信息，支持按编码、状态等条件筛选\n- 业务逻辑：根据查询条件查询组织单元信息，支持按编码、状态等条件筛选\n\n## 输入参数：\n- unitCode (String): 组织单元编码(可选) [可选]\n- openStatus (String): 开通状态(可选) [可选]\n- unitList (String): 组织单元列表(可选) [可选]\n\n## 输出参数：\n- unitId (String): 组织单元ID\n- unitTypeDicType (String): 组织单元类型字典类型\n- unitTypeId (String): 组织单元类型ID\n- openStatus (String): 开通状态\n- unitCode (String): 组织单元编码\n- unitName (String): 组织单元名称\n\n## 技术要求：\n- 基础包名：com.yljr.user.basicgeneral\n- 使用Spring Boot + MyBatis Plus\n- 遵循DDD分层架构\n- 保持原有类名和包结构\n- 请求DTO类名：CompanyUnitListReq\n- 响应DTO类名：CompanyUnitListResp\n- Service类名：CompanyUnitListService\n\n**重要：请使用具体的类名（如 CompanyUnitListReq），不要使用模板变量语法（如 {{REQUEST_DTO_NAME}}）**\n\n请返回优化后的完整Java代码（只要代码，不要额外说明）：\n'}]
2025-07-14 14:51:22 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-14 14:51:22 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ request_dto AI增强完成
2025-07-14 14:51:22 - src.corder_integration.code_generator.template_ai_generator - INFO - 增强模板代码入参：[{'role': 'system', 'content': '你是Java代码优化专家。请根据业务需求优化给定的模板代码，保持代码结构清晰，添加必要的业务逻辑。重要：请使用具体的类名，不要使用{{}}模板变量语法。只返回优化后的Java代码，不要添加额外说明。'}, {'role': 'user', 'content': '\n请优化以下response_dto代码模板，重点关注：\n- 添加详细的字段验证\n- 完善API文档注解\n- 优化字段类型选择\n- 添加字段描述\n\n## 当前模板代码：\n```java\npackage com.yljr.user.basicgeneral.interfaces.dto;\n\nimport lombok.Data;\nimport io.swagger.annotations.ApiModel;\nimport io.swagger.annotations.ApiModelProperty;\n\n/**\n * CompanyUnitList Response DTO\n * Generated by Template + AI\n */\n@Data\n@ApiModel(description = "CompanyUnitList Response DTO")\npublic class CompanyUnitListResp {\n    \n    @ApiModelProperty("组织单元ID")\n    private String unitId;\n\n    @ApiModelProperty("组织单元类型字典类型")\n    private String unitTypeDicType;\n\n    @ApiModelProperty("组织单元类型ID")\n    private String unitTypeId;\n\n    @ApiModelProperty("开通状态")\n    private String openStatus;\n\n    @ApiModelProperty("组织单元编码")\n    private String unitCode;\n\n    @ApiModelProperty("组织单元名称")\n    private String unitName;\n}\n```\n\n## 业务需求：\n- 接口名称：CompanyUnitList\n- 功能描述：根据查询条件查询组织单元信息，支持按编码、状态等条件筛选\n- 业务逻辑：根据查询条件查询组织单元信息，支持按编码、状态等条件筛选\n\n## 输入参数：\n- unitCode (String): 组织单元编码(可选) [可选]\n- openStatus (String): 开通状态(可选) [可选]\n- unitList (String): 组织单元列表(可选) [可选]\n\n## 输出参数：\n- unitId (String): 组织单元ID\n- unitTypeDicType (String): 组织单元类型字典类型\n- unitTypeId (String): 组织单元类型ID\n- openStatus (String): 开通状态\n- unitCode (String): 组织单元编码\n- unitName (String): 组织单元名称\n\n## 技术要求：\n- 基础包名：com.yljr.user.basicgeneral\n- 使用Spring Boot + MyBatis Plus\n- 遵循DDD分层架构\n- 保持原有类名和包结构\n- 请求DTO类名：CompanyUnitListReq\n- 响应DTO类名：CompanyUnitListResp\n- Service类名：CompanyUnitListService\n\n**重要：请使用具体的类名（如 CompanyUnitListReq），不要使用模板变量语法（如 {{REQUEST_DTO_NAME}}）**\n\n请返回优化后的完整Java代码（只要代码，不要额外说明）：\n'}]
2025-07-14 14:51:42 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-14 14:51:42 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ response_dto AI增强完成
2025-07-14 14:51:42 - src.corder_integration.code_generator.template_ai_generator - INFO - 增强模板代码入参：[{'role': 'system', 'content': '你是Java代码优化专家。请根据业务需求优化给定的模板代码，保持代码结构清晰，添加必要的业务逻辑。重要：请使用具体的类名，不要使用{{}}模板变量语法。只返回优化后的Java代码，不要添加额外说明。'}, {'role': 'user', 'content': '\n请优化以下entity代码模板，重点关注：\n- 改进代码结构\n- 添加必要注释\n- 优化实现逻辑\n\n## 当前模板代码：\n```java\npackage com.yljr.user.basicgeneral.domain.entity;\n\nimport com.baomidou.mybatisplus.annotation.*;\nimport lombok.Data;\nimport io.swagger.annotations.ApiModel;\nimport io.swagger.annotations.ApiModelProperty;\nimport java.time.LocalDateTime;\n\n/**\n * CompanyUnitList Entity\n * Generated by Template + AI\n */\n@Data\n@ApiModel(description = "CompanyUnitList Entity")\n@TableName("companyunitlist")\npublic class CompanyUnitList {\n    \n    @ApiModelProperty("主键ID")\n    @TableId(type = IdType.AUTO)\n    private Long id;\n    \n    @ApiModelProperty("组织单元编码(可选)")\n    @TableField("unitCode")\n    private String unitCode;\n\n    @ApiModelProperty("开通状态(可选)")\n    @TableField("openStatus")\n    private String openStatus;\n\n    @ApiModelProperty("组织单元列表(可选)")\n    @TableField("unitList")\n    private String unitList;\n\n    @ApiModelProperty("组织单元ID")\n    @TableField("unitId")\n    private String unitId;\n\n    @ApiModelProperty("组织单元类型字典类型")\n    @TableField("unitTypeDicType")\n    private String unitTypeDicType;\n\n    @ApiModelProperty("组织单元类型ID")\n    @TableField("unitTypeId")\n    private String unitTypeId;\n\n    @ApiModelProperty("组织单元名称")\n    @TableField("unitName")\n    private String unitName;\n    \n    @ApiModelProperty("创建时间")\n    @TableField(fill = FieldFill.INSERT)\n    private LocalDateTime createTime;\n    \n    @ApiModelProperty("更新时间")\n    @TableField(fill = FieldFill.INSERT_UPDATE)\n    private LocalDateTime updateTime;\n}\n```\n\n## 业务需求：\n- 接口名称：CompanyUnitList\n- 功能描述：根据查询条件查询组织单元信息，支持按编码、状态等条件筛选\n- 业务逻辑：根据查询条件查询组织单元信息，支持按编码、状态等条件筛选\n\n## 输入参数：\n- unitCode (String): 组织单元编码(可选) [可选]\n- openStatus (String): 开通状态(可选) [可选]\n- unitList (String): 组织单元列表(可选) [可选]\n\n## 输出参数：\n- unitId (String): 组织单元ID\n- unitTypeDicType (String): 组织单元类型字典类型\n- unitTypeId (String): 组织单元类型ID\n- openStatus (String): 开通状态\n- unitCode (String): 组织单元编码\n- unitName (String): 组织单元名称\n\n## 技术要求：\n- 基础包名：com.yljr.user.basicgeneral\n- 使用Spring Boot + MyBatis Plus\n- 遵循DDD分层架构\n- 保持原有类名和包结构\n- 请求DTO类名：CompanyUnitListReq\n- 响应DTO类名：CompanyUnitListResp\n- Service类名：CompanyUnitListService\n\n**重要：请使用具体的类名（如 CompanyUnitListReq），不要使用模板变量语法（如 {{REQUEST_DTO_NAME}}）**\n\n请返回优化后的完整Java代码（只要代码，不要额外说明）：\n'}]
2025-07-14 14:52:06 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-14 14:52:06 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ entity AI增强完成
2025-07-14 14:52:06 - src.corder_integration.code_generator.template_ai_generator - INFO - 增强模板代码入参：[{'role': 'system', 'content': '你是Java代码优化专家。请根据业务需求优化给定的模板代码，保持代码结构清晰，添加必要的业务逻辑。重要：请使用具体的类名，不要使用{{}}模板变量语法。只返回优化后的Java代码，不要添加额外说明。'}, {'role': 'user', 'content': '\n请优化以下mapper代码模板，重点关注：\n- 改进代码结构\n- 添加必要注释\n- 优化实现逻辑\n\n## 当前模板代码：\n```java\npackage com.yljr.user.basicgeneral.domain.mapper;\n\nimport com.yljr.user.basicgeneral.domain.entity.CompanyUnitList;\nimport com.baomidou.mybatisplus.core.mapper.BaseMapper;\nimport org.apache.ibatis.annotations.Mapper;\nimport org.apache.ibatis.annotations.Param;\nimport java.util.List;\n\n/**\n * CompanyUnitListMapper Mapper\n * Generated by Template + AI\n */\n@Mapper\npublic interface CompanyUnitListMapper extends BaseMapper<CompanyUnitList> {\n    \n    /**\n     * Custom query for CompanyUnitList\n     */\n    List<CompanyUnitList> selectCompanyUnitListList(@Param("unitCode") String unitCode, @Param("openStatus") String openStatus, @Param("unitList") String unitList);\n}\n```\n\n## 业务需求：\n- 接口名称：CompanyUnitList\n- 功能描述：根据查询条件查询组织单元信息，支持按编码、状态等条件筛选\n- 业务逻辑：根据查询条件查询组织单元信息，支持按编码、状态等条件筛选\n\n## 输入参数：\n- unitCode (String): 组织单元编码(可选) [可选]\n- openStatus (String): 开通状态(可选) [可选]\n- unitList (String): 组织单元列表(可选) [可选]\n\n## 输出参数：\n- unitId (String): 组织单元ID\n- unitTypeDicType (String): 组织单元类型字典类型\n- unitTypeId (String): 组织单元类型ID\n- openStatus (String): 开通状态\n- unitCode (String): 组织单元编码\n- unitName (String): 组织单元名称\n\n## 技术要求：\n- 基础包名：com.yljr.user.basicgeneral\n- 使用Spring Boot + MyBatis Plus\n- 遵循DDD分层架构\n- 保持原有类名和包结构\n- 请求DTO类名：CompanyUnitListReq\n- 响应DTO类名：CompanyUnitListResp\n- Service类名：CompanyUnitListService\n\n**重要：请使用具体的类名（如 CompanyUnitListReq），不要使用模板变量语法（如 {{REQUEST_DTO_NAME}}）**\n\n请返回优化后的完整Java代码（只要代码，不要额外说明）：\n'}]
2025-07-14 14:52:24 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-14 14:52:24 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ mapper AI增强完成
2025-07-14 14:52:24 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI生成成功，生成代码类型: ['service_impl', 'controller', 'service_interface', 'request_dto', 'response_dto', 'entity', 'mapper', 'mapper_xml']
2025-07-14 14:52:24 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 开始写入生成的代码文件...
2025-07-14 14:52:24 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔧 统一类名基础: CompanyUnitList
2025-07-14 14:52:24 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ service_impl 类名: CompanyUnitListServiceImpl
2025-07-14 14:52:24 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ controller 类名: CompanyUnitListController
2025-07-14 14:52:24 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ request_dto 类名: CompanyUnitListReq
2025-07-14 14:52:24 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ response_dto 类名: CompanyUnitListResp
2025-07-14 14:52:24 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ entity 类名: CompanyUnitListEntity
2025-07-14 14:52:24 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 检测到service_impl但缺少service，这是正常的（接口会被自动生成）
2025-07-14 14:52:24 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 标准化后的代码类型: ['service_impl', 'controller', 'service_interface', 'request_dto', 'response_dto', 'entity', 'mapper', 'mapper_xml']
2025-07-14 14:52:24 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🤖 调用volcengine判断Java文件输出路径...
2025-07-14 14:52:58 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-14 14:52:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM路径判断成功，配置了 8 个Java文件路径
2025-07-14 14:52:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 controller: CompanyUnitListController.java
2025-07-14 14:52:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 service_interface: CompanyUnitListService.java
2025-07-14 14:52:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 service_impl: CompanyUnitListServiceImpl.java
2025-07-14 14:52:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 request_dto: CompanyUnitListReq.java
2025-07-14 14:52:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 response_dto: CompanyUnitListResp.java
2025-07-14 14:52:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 entity: CompanyUnitListEntity.java
2025-07-14 14:52:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 mapper: CompanyUnitListMapper.java
2025-07-14 14:52:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 mapper_xml: CompanyUnitListMapper.xml
2025-07-14 14:52:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: D:\gitlab\create_project\链数中建一局_1752461639\zqyl-user-center-service\user-basic-service\user-basic-general\src\main\java\com\yljr\user\basicgeneral\application\service\impl\CompanyUnitListServiceImpl.java
2025-07-14 14:52:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: D:\gitlab\create_project\链数中建一局_1752461639\zqyl-user-center-service\user-basic-service\user-basic-general\src\main\java\com\yljr\user\basicgeneral\application\service\impl\CompanyUnitListServiceImpl.java
2025-07-14 14:52:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: D:\gitlab\create_project\链数中建一局_1752461639\zqyl-user-center-service\user-basic-service\user-basic-general\src\main\java\com\yljr\user\basicgeneral\interfaces\rest\CompanyUnitListController.java
2025-07-14 14:52:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: D:\gitlab\create_project\链数中建一局_1752461639\zqyl-user-center-service\user-basic-service\user-basic-general\src\main\java\com\yljr\user\basicgeneral\interfaces\rest\CompanyUnitListController.java
2025-07-14 14:52:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: D:\gitlab\create_project\链数中建一局_1752461639\zqyl-user-center-service\user-basic-service\user-basic-general\src\main\java\com\yljr\user\basicgeneral\application\service\CompanyUnitListService.java
2025-07-14 14:52:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: D:\gitlab\create_project\链数中建一局_1752461639\zqyl-user-center-service\user-basic-service\user-basic-general\src\main\java\com\yljr\user\basicgeneral\application\service\CompanyUnitListService.java
2025-07-14 14:52:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: D:\gitlab\create_project\链数中建一局_1752461639\zqyl-user-center-service\user-basic-service\user-basic-general\src\main\java\com\yljr\user\basicgeneral\interfaces\dto\CompanyUnitListReq.java
2025-07-14 14:52:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: D:\gitlab\create_project\链数中建一局_1752461639\zqyl-user-center-service\user-basic-service\user-basic-general\src\main\java\com\yljr\user\basicgeneral\interfaces\dto\CompanyUnitListReq.java
2025-07-14 14:52:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: D:\gitlab\create_project\链数中建一局_1752461639\zqyl-user-center-service\user-basic-service\user-basic-general\src\main\java\com\yljr\user\basicgeneral\interfaces\dto\CompanyUnitListResp.java
2025-07-14 14:52:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: D:\gitlab\create_project\链数中建一局_1752461639\zqyl-user-center-service\user-basic-service\user-basic-general\src\main\java\com\yljr\user\basicgeneral\interfaces\dto\CompanyUnitListResp.java
2025-07-14 14:52:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: D:\gitlab\create_project\链数中建一局_1752461639\zqyl-user-center-service\user-basic-service\user-basic-general\src\main\java\com\yljr\user\basicgeneral\domain\entity\CompanyUnitListEntity.java
2025-07-14 14:52:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: D:\gitlab\create_project\链数中建一局_1752461639\zqyl-user-center-service\user-basic-service\user-basic-general\src\main\java\com\yljr\user\basicgeneral\domain\entity\CompanyUnitListEntity.java
2025-07-14 14:52:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: D:\gitlab\create_project\链数中建一局_1752461639\zqyl-user-center-service\user-basic-service\user-basic-general\src\main\java\com\yljr\user\basicgeneral\domain\mapper\CompanyUnitListMapper.java
2025-07-14 14:52:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: D:\gitlab\create_project\链数中建一局_1752461639\zqyl-user-center-service\user-basic-service\user-basic-general\src\main\java\com\yljr\user\basicgeneral\domain\mapper\CompanyUnitListMapper.java
2025-07-14 14:52:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: D:\gitlab\create_project\链数中建一局_1752461639\zqyl-user-center-service\user-basic-service\user-basic-general\src\main\resources\mapper\CompanyUnitListMapper.xml
2025-07-14 14:52:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: D:\gitlab\create_project\链数中建一局_1752461639\zqyl-user-center-service\user-basic-service\user-basic-general\src\main\resources\mapper\CompanyUnitListMapper.xml
2025-07-14 14:52:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📊 代码生成完成，共写入 8 个文件到项目中
2025-07-14 14:52:58 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_008 状态更新为 completed
2025-07-14 14:52:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 任务 task_008 执行成功
2025-07-14 14:52:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 第1轮执行完成，处理了 1 个任务
2025-07-14 14:52:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第2轮任务检查...
2025-07-14 14:52:59 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 第2轮找到 1 个可执行任务
2025-07-14 14:52:59 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 开始执行任务: task_009 (api)
2025-07-14 14:52:59 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_009 已被 intelligent_coding_node 领取
2025-07-14 14:52:59 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🌐 执行API接口生成任务: task_009
2025-07-14 14:52:59 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 解析的接口信息:
2025-07-14 14:52:59 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 接口名称: UnitLimitByCompanyId
2025-07-14 14:52:59 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - API路径: /crcl-open-api/lsLimit/listUnitLimitByCompanyId
2025-07-14 14:52:59 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - HTTP方法: GET
2025-07-14 14:52:59 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 输入参数: 6个
2025-07-14 14:52:59 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 输出参数: 4个
2025-07-14 14:52:59 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 业务描述: 根据公司ID和筛选条件查询组织单元额度信息，调用用户服务获取组织单元基础信息
2025-07-14 14:52:59 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 在 D:\gitlab\create_project/链数中建一局_1752461639/crcl-open 中查找最佳Java项目路径...
2025-07-14 14:52:59 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 目标服务名: 确权开立服务
2025-07-14 14:53:00 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-14 14:53:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 发现Java项目: crcl-open
2025-07-14 14:53:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       🎯 相对路径: .
2025-07-14 14:53:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       📊 Java文件: 2251个
2025-07-14 14:53:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       📐 目录深度: 0
2025-07-14 14:53:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       🏆 优先级分数: 650
2025-07-14 14:53:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 排序后的候选路径（前3个）:
2025-07-14 14:53:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    1. . (优先级: 650)
2025-07-14 14:53:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 选择最佳Java项目路径:
2025-07-14 14:53:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 完整路径: D:\gitlab\create_project\链数中建一局_1752461639\crcl-open
2025-07-14 14:53:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📋 相对路径: .
2025-07-14 14:53:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    🏆 最终优先级: 650
2025-07-14 14:53:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 从API路径 /crcl-open-api/lsLimit/listUnitLimitByCompanyId 提取关键字: lsLimit
2025-07-14 14:53:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 在项目中搜索关键字相关路径: lsLimit
2025-07-14 14:53:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 找到匹配目录: limit (得分: 25)
2025-07-14 14:53:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 找到匹配目录: ls (得分: 25)
2025-07-14 14:53:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 找到匹配目录: ls (得分: 25)
2025-07-14 14:53:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 找到匹配目录: ls (得分: 25)
2025-07-14 14:53:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 找到匹配目录: limit (得分: 25)
2025-07-14 14:53:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    ✅ 选择最佳匹配目录: limit (路径: src\main\java\com\yljr\crcl\limit)
2025-07-14 14:53:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 基于API关键字 'lsLimit' 找到现有路径: D:\gitlab\create_project\链数中建一局_1752461639\crcl-open\src\main\java\com\yljr\crcl\limit
2025-07-14 14:53:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -  分析目标项目: D:\gitlab\create_project\链数中建一局_1752461639\crcl-open\src\main\java\com\yljr\crcl\limit
2025-07-14 14:53:00 - src.apis.project_analysis_api - INFO - 🔍 开始分析项目用于代码生成: D:\gitlab\create_project\链数中建一局_1752461639\crcl-open\src\main\java\com\yljr\crcl\limit
2025-07-14 14:53:00 - src.apis.project_analysis_api - INFO - 🔍 在 D:\gitlab\create_project\链数中建一局_1752461639\crcl-open\src\main\java\com\yljr\crcl\limit 中查找最佳Java项目路径...
2025-07-14 14:53:00 - src.apis.project_analysis_api - INFO - 🎯 目标服务名: 确权开立服务
2025-07-14 14:53:00 - src.apis.project_analysis_api - WARNING - ⚠️ 在 D:\gitlab\create_project\链数中建一局_1752461639\crcl-open\src\main\java\com\yljr\crcl\limit 中未找到包含Java文件的src/main/java结构
2025-07-14 14:53:00 - src.apis.project_analysis_api - INFO - 📂 实际分析路径: D:\gitlab\create_project\链数中建一局_1752461639\crcl-open\src\main\java\com\yljr\crcl\limit
2025-07-14 14:53:00 - src.utils.java_code_analyzer - INFO - 🔍 开始分析企业级Java项目: D:\gitlab\create_project\链数中建一局_1752461639\crcl-open\src\main\java\com\yljr\crcl\limit
2025-07-14 14:53:05 - src.utils.java_code_analyzer - INFO - ✅ 企业级项目分析完成，共分析 533 个Java文件
2025-07-14 14:53:05 - src.apis.project_analysis_api - INFO - 📦 动态检测到基础包: com.yljr.crcl.limit (出现533次)
2025-07-14 14:53:05 - src.apis.project_analysis_api - INFO - 📦 动态检测到基础包: com.yljr.crcl.limit (出现533次)
2025-07-14 14:53:05 - src.apis.project_analysis_api - INFO - 📦 动态检测到基础包: com.yljr.crcl.limit (出现533次)
2025-07-14 14:53:05 - src.apis.project_analysis_api - INFO - ✅ 项目分析完成，已提取代码生成上下文
2025-07-14 14:53:05 - src.corder_integration.code_generator.controller_interface_manager - INFO - 🚀 开始处理API接口请求: /crcl-open-api/lsLimit/listUnitLimitByCompanyId
2025-07-14 14:53:05 - src.corder_integration.code_generator.controller_analyzer - INFO - 🔍 开始分析路径下的Controller文件: D:\gitlab\create_project\链数中建一局_1752461639\crcl-open\src\main\java\com\yljr\crcl\limit
2025-07-14 14:53:05 - src.corder_integration.code_generator.controller_analyzer - INFO - 🎯 匹配关键字: lsLimit
2025-07-14 14:53:05 - src.corder_integration.code_generator.controller_analyzer - INFO - 🎯 在 D:\gitlab\create_project\链数中建一局_1752461639\crcl-open\src\main\java\com\yljr\crcl\limit\interfaces\LsLimitController.java 中找到匹配的@RequestMapping: /lsLimit
2025-07-14 14:53:05 - src.corder_integration.code_generator.controller_analyzer - INFO - 📋 提取到 0 个Service依赖
2025-07-14 14:53:05 - src.corder_integration.code_generator.controller_analyzer - INFO - ✅ 找到匹配的Controller: D:\gitlab\create_project\链数中建一局_1752461639\crcl-open\src\main\java\com\yljr\crcl\limit\interfaces\LsLimitController.java
2025-07-14 14:53:05 - src.corder_integration.code_generator.controller_analyzer - INFO - 📊 总共找到 1 个匹配的Controller文件
2025-07-14 14:53:05 - src.corder_integration.code_generator.controller_analyzer - INFO - 🔧 从API路径 '/crcl-open-api/lsLimit/listUnitLimitByCompanyId' 提取接口名称: 'listUnitLimitByCompanyId'
2025-07-14 14:53:05 - src.corder_integration.code_generator.controller_interface_manager - INFO - 📝 处理Controller: LsLimitController
2025-07-14 14:53:05 - src.corder_integration.code_generator.service_decision_maker - INFO - 🔍 开始分析Service需求: listUnitLimitByCompanyId
2025-07-14 14:53:05 - src.corder_integration.code_generator.service_decision_maker - INFO - 📂 扫描项目Service文件: D:\gitlab\create_project\链数中建一局_1752461639\crcl-open
2025-07-14 14:53:06 - src.corder_integration.code_generator.service_decision_maker - INFO - 📊 找到 336 个Service文件
2025-07-14 14:53:06 - src.corder_integration.code_generator.service_decision_maker - INFO - 📂 扫描Application文件: D:\gitlab\create_project\链数中建一局_1752461639\crcl-open
2025-07-14 14:53:06 - src.corder_integration.code_generator.service_decision_maker - INFO - 📊 找到 35 个Application文件
2025-07-14 14:53:06 - src.corder_integration.code_generator.service_decision_maker - INFO - 🤔 进行Service决策: listUnitLimitByCompanyId
2025-07-14 14:53:10 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-14 14:53:10 - src.corder_integration.code_generator.service_decision_maker - INFO - 🤖 LLM决策完成: {'action': 'create_new', 'target_service': None, 'reason': '现有Service中没有与信用额度查询直接相关的服务，且listUnitLimitByCompanyId是一个独立的业务功能，应该创建一个新的Service来专门处理信用额度相关的查询逻辑。', 'need_new_service': True, 'modify_existing': False}
2025-07-14 14:53:10 - src.corder_integration.code_generator.interface_adder - INFO - ➕ 开始在Controller中添加新接口: listUnitLimitByCompanyId
2025-07-14 14:53:10 - src.corder_integration.code_generator.interface_adder - INFO - ✅ 成功添加接口方法到Controller
2025-07-14 14:53:10 - src.corder_integration.code_generator.interface_adder - INFO - 📝 已备份原始文件: D:\gitlab\create_project\链数中建一局_1752461639\crcl-open\src\main\java\com\yljr\crcl\limit\interfaces\LsLimitController.java.backup
2025-07-14 14:53:10 - src.corder_integration.code_generator.interface_adder - INFO - ✅ 已保存更新后的Controller文件: D:\gitlab\create_project\链数中建一局_1752461639\crcl-open\src\main\java\com\yljr\crcl\limit\interfaces\LsLimitController.java
2025-07-14 14:53:10 - src.corder_integration.code_generator.controller_interface_manager - INFO - ✅ Controller LsLimitController 处理完成
2025-07-14 14:53:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功在现有Controller中添加接口: listUnitLimitByCompanyId
2025-07-14 14:53:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔧 使用现有模块处理Service和Mapper层: UnitLimitByCompanyId
2025-07-14 14:53:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 Service决策结果: create_new
2025-07-14 14:53:11 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_009 状态更新为 completed
2025-07-14 14:53:11 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 任务 task_009 执行成功
2025-07-14 14:53:11 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 第2轮执行完成，处理了 1 个任务
2025-07-14 14:53:11 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第3轮任务检查...
2025-07-14 14:53:11 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 第3轮找到 1 个可执行任务
2025-07-14 14:53:11 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 开始执行任务: task_010 (api)
2025-07-14 14:53:11 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_010 已被 intelligent_coding_node 领取
2025-07-14 14:53:11 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🌐 执行API接口生成任务: task_010
2025-07-14 14:53:11 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 解析的接口信息:
2025-07-14 14:53:11 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 接口名称: UnitLimitByCompanyIdExport
2025-07-14 14:53:11 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - API路径: /crcl-open-api/lsLimit/listUnitLimitByCompanyIdExport
2025-07-14 14:53:11 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - HTTP方法: GET
2025-07-14 14:53:11 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 输入参数: 4个
2025-07-14 14:53:11 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 输出参数: 3个
2025-07-14 14:53:11 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 业务描述: 复用listUnitLimitByCompanyId接口的查询逻辑，将结果导出为Excel格式
2025-07-14 14:53:11 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 在 D:\gitlab\create_project/链数中建一局_1752461639/crcl-open 中查找最佳Java项目路径...
2025-07-14 14:53:11 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 目标服务名: 确权开立服务
2025-07-14 14:53:13 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-14 14:53:13 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 发现Java项目: crcl-open
2025-07-14 14:53:13 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       🎯 相对路径: .
2025-07-14 14:53:13 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       📊 Java文件: 2251个
2025-07-14 14:53:13 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       📐 目录深度: 0
2025-07-14 14:53:13 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       🏆 优先级分数: 650
2025-07-14 14:53:13 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 排序后的候选路径（前3个）:
2025-07-14 14:53:13 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    1. . (优先级: 650)
2025-07-14 14:53:13 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 选择最佳Java项目路径:
2025-07-14 14:53:13 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 完整路径: D:\gitlab\create_project\链数中建一局_1752461639\crcl-open
2025-07-14 14:53:13 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📋 相对路径: .
2025-07-14 14:53:13 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    🏆 最终优先级: 650
2025-07-14 14:53:13 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 从API路径 /crcl-open-api/lsLimit/listUnitLimitByCompanyIdExport 提取关键字: lsLimit
2025-07-14 14:53:13 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 在项目中搜索关键字相关路径: lsLimit
2025-07-14 14:53:13 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 找到匹配目录: limit (得分: 25)
2025-07-14 14:53:13 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 找到匹配目录: ls (得分: 25)
2025-07-14 14:53:13 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 找到匹配目录: ls (得分: 25)
2025-07-14 14:53:13 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 找到匹配目录: ls (得分: 25)
2025-07-14 14:53:13 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 找到匹配目录: limit (得分: 25)
2025-07-14 14:53:13 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    ✅ 选择最佳匹配目录: limit (路径: src\main\java\com\yljr\crcl\limit)
2025-07-14 14:53:13 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 基于API关键字 'lsLimit' 找到现有路径: D:\gitlab\create_project\链数中建一局_1752461639\crcl-open\src\main\java\com\yljr\crcl\limit
2025-07-14 14:53:13 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -  分析目标项目: D:\gitlab\create_project\链数中建一局_1752461639\crcl-open\src\main\java\com\yljr\crcl\limit
2025-07-14 14:53:13 - src.apis.project_analysis_api - INFO - 🔍 开始分析项目用于代码生成: D:\gitlab\create_project\链数中建一局_1752461639\crcl-open\src\main\java\com\yljr\crcl\limit
2025-07-14 14:53:13 - src.apis.project_analysis_api - INFO - 📋 使用缓存的分析结果
2025-07-14 14:53:13 - src.corder_integration.code_generator.controller_interface_manager - INFO - 🚀 开始处理API接口请求: /crcl-open-api/lsLimit/listUnitLimitByCompanyIdExport
2025-07-14 14:53:13 - src.corder_integration.code_generator.controller_analyzer - INFO - 🔍 开始分析路径下的Controller文件: D:\gitlab\create_project\链数中建一局_1752461639\crcl-open\src\main\java\com\yljr\crcl\limit
2025-07-14 14:53:13 - src.corder_integration.code_generator.controller_analyzer - INFO - 🎯 匹配关键字: lsLimit
2025-07-14 14:53:13 - src.corder_integration.code_generator.controller_analyzer - INFO - 🎯 在 D:\gitlab\create_project\链数中建一局_1752461639\crcl-open\src\main\java\com\yljr\crcl\limit\interfaces\LsLimitController.java 中找到匹配的@RequestMapping: /lsLimit
2025-07-14 14:53:13 - src.corder_integration.code_generator.controller_analyzer - INFO - 📋 提取到 0 个Service依赖
2025-07-14 14:53:13 - src.corder_integration.code_generator.controller_analyzer - INFO - ✅ 找到匹配的Controller: D:\gitlab\create_project\链数中建一局_1752461639\crcl-open\src\main\java\com\yljr\crcl\limit\interfaces\LsLimitController.java
2025-07-14 14:53:13 - src.corder_integration.code_generator.controller_analyzer - INFO - 📊 总共找到 1 个匹配的Controller文件
2025-07-14 14:53:13 - src.corder_integration.code_generator.controller_analyzer - INFO - 🔧 从API路径 '/crcl-open-api/lsLimit/listUnitLimitByCompanyIdExport' 提取接口名称: 'listUnitLimitByCompanyIdExport'
2025-07-14 14:53:13 - src.corder_integration.code_generator.controller_interface_manager - INFO - 📝 处理Controller: LsLimitController
2025-07-14 14:53:13 - src.corder_integration.code_generator.service_decision_maker - INFO - 🔍 开始分析Service需求: listUnitLimitByCompanyIdExport
2025-07-14 14:53:13 - src.corder_integration.code_generator.service_decision_maker - INFO - 📂 扫描项目Service文件: D:\gitlab\create_project\链数中建一局_1752461639\crcl-open
2025-07-14 14:53:13 - src.corder_integration.code_generator.service_decision_maker - INFO - 📊 找到 336 个Service文件
2025-07-14 14:53:13 - src.corder_integration.code_generator.service_decision_maker - INFO - 📂 扫描Application文件: D:\gitlab\create_project\链数中建一局_1752461639\crcl-open
2025-07-14 14:53:13 - src.corder_integration.code_generator.service_decision_maker - INFO - 📊 找到 35 个Application文件
2025-07-14 14:53:13 - src.corder_integration.code_generator.service_decision_maker - INFO - 🤔 进行Service决策: listUnitLimitByCompanyIdExport
2025-07-14 14:53:20 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-14 14:53:20 - src.corder_integration.code_generator.service_decision_maker - INFO - 🤖 LLM决策完成: {'action': 'create_new', 'target_service': None, 'reason': '现有Service中没有与信用额度限制直接相关的服务，且该接口功能（按公司ID列出单位限额）是一个独立的业务功能，适合封装在专门的Service中。CustCompanyCreditFeignApi和CustUnitCreditFeignApi虽然与信用相关，但更偏向客户信用而非限额管理。创建一个新的Service能更好地遵循单一职责原则。', 'need_new_service': True, 'modify_existing': False}
2025-07-14 14:53:20 - src.corder_integration.code_generator.interface_adder - INFO - ➕ 开始在Controller中添加新接口: listUnitLimitByCompanyIdExport
2025-07-14 14:53:20 - src.corder_integration.code_generator.interface_adder - INFO - ✅ 成功添加接口方法到Controller
2025-07-14 14:53:20 - src.corder_integration.code_generator.interface_adder - INFO - 📝 已备份原始文件: D:\gitlab\create_project\链数中建一局_1752461639\crcl-open\src\main\java\com\yljr\crcl\limit\interfaces\LsLimitController.java.backup
2025-07-14 14:53:20 - src.corder_integration.code_generator.interface_adder - INFO - ✅ 已保存更新后的Controller文件: D:\gitlab\create_project\链数中建一局_1752461639\crcl-open\src\main\java\com\yljr\crcl\limit\interfaces\LsLimitController.java
2025-07-14 14:53:20 - src.corder_integration.code_generator.controller_interface_manager - INFO - ✅ Controller LsLimitController 处理完成
2025-07-14 14:53:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功在现有Controller中添加接口: listUnitLimitByCompanyIdExport
2025-07-14 14:53:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔧 使用现有模块处理Service和Mapper层: UnitLimitByCompanyIdExport
2025-07-14 14:53:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 Service决策结果: create_new
2025-07-14 14:53:20 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_010 状态更新为 completed
2025-07-14 14:53:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 任务 task_010 执行成功
2025-07-14 14:53:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 第3轮执行完成，处理了 1 个任务
2025-07-14 14:53:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第4轮任务检查...
2025-07-14 14:53:21 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第4轮没有可执行的智能编码任务
2025-07-14 14:53:21 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 3 个任务，共4轮
2025-07-14 14:53:21 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 3 个任务
2025-07-14 14:53:21 - src.corder_integration.langgraph.workflow_orchestrator - WARNING - 没有识别到任何服务，结束编码流程
2025-07-14 14:53:21 - src.corder_integration.langgraph.workflow_orchestrator - INFO - 工作流执行成功: 链数中建一局_1752475787, 完成服务数: 0
2025-07-14 14:53:21 - werkzeug - INFO - 127.0.0.1 - - [14/Jul/2025 14:53:21] "POST /api/coder-agent/process-document HTTP/1.1" 200 -
2025-07-14 15:58:16 - system - INFO - ==================================================
2025-07-14 15:58:16 - system - INFO - 🚀 智能分析系统日志系统初始化完成
2025-07-14 15:58:16 - system - INFO - 📁 日志根目录: D:\ai_project\document_analyzer\logs
2025-07-14 15:58:16 - system - INFO - 📊 日志级别: INFO
2025-07-14 15:58:16 - system - INFO - 📅 按日期轮转: 每天午夜自动轮转
2025-07-14 15:58:16 - system - INFO - 📂 按月分目录: logs/YYYY-MM/
2025-07-14 15:58:16 - system - INFO - 📝 主日志: logs/2025-07/app.log
2025-07-14 15:58:16 - system - INFO - 🔧 API日志: logs/2025-07/api_server.log
2025-07-14 15:58:16 - system - INFO - 🗂️ 保留天数: 7 天
2025-07-14 15:58:16 - system - INFO - ==================================================
2025-07-14 15:58:28 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-14 15:58:29 - root - WARNING - 智能编码节点不可用: cannot import name 'IntelligentCodingAgent' from partially initialized module 'src.corder_integration.langgraph.nodes.intelligent_coding_node' (most likely due to a circular import) (D:\ai_project\document_analyzer\src\corder_integration\langgraph\nodes\intelligent_coding_node.py)
2025-07-14 15:58:29 - src.utils.task_storage - INFO - 数据库初始化成功
2025-07-14 15:58:29 - markdown_storage - INFO - Markdown存储管理器初始化完成
2025-07-14 15:58:29 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-14 15:58:29 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 15:58:29 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-14 15:58:30 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-14 15:58:30 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-14 15:58:30 - WeaviateVectorDatabase - INFO - ✅ Weaviate连接成功: http://localhost:8080 (gRPC: 50051)
2025-07-14 15:58:30 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/schema/AnalyDesignDocuments "HTTP/1.1 200 OK"
2025-07-14 15:58:30 - WeaviateVectorDatabase - INFO - ✅ Weaviate集合已存在: AnalyDesignDocuments
2025-07-14 15:58:30 - AnalysisServiceManager - INFO - 初始化向量数据库: weaviate
2025-07-14 15:58:30 - sentence_transformers.SentenceTransformer - INFO - Use pytorch device_name: cpu
2025-07-14 15:58:30 - sentence_transformers.SentenceTransformer - INFO - Load pretrained SentenceTransformer: BAAI/bge-large-zh
2025-07-14 15:58:38 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-14 15:58:39 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-14 15:58:39 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-14 15:58:39 - src.utils.weaviate_helper - INFO - 成功连接到 Weaviate: localhost:8080
2025-07-14 15:58:39 - AnalysisServiceManager - INFO - 分析服务管理器初始化完成
2025-07-14 15:58:39 - src.utils.enhanced_analyzer - INFO - 增强分析器初始化完成
2025-07-14 15:58:39 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:8082
 * Running on http://26.26.26.1:8082
2025-07-14 15:58:39 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-07-14 15:58:39 - werkzeug - INFO -  * Restarting with stat
2025-07-14 15:58:40 - system - INFO - ==================================================
2025-07-14 15:58:40 - system - INFO - 🚀 智能分析系统日志系统初始化完成
2025-07-14 15:58:40 - system - INFO - 📁 日志根目录: D:\ai_project\document_analyzer\logs
2025-07-14 15:58:40 - system - INFO - 📊 日志级别: INFO
2025-07-14 15:58:40 - system - INFO - 📅 按日期轮转: 每天午夜自动轮转
2025-07-14 15:58:40 - system - INFO - 📂 按月分目录: logs/YYYY-MM/
2025-07-14 15:58:40 - system - INFO - 📝 主日志: logs/2025-07/app.log
2025-07-14 15:58:40 - system - INFO - 🔧 API日志: logs/2025-07/api_server.log
2025-07-14 15:58:40 - system - INFO - 🗂️ 保留天数: 7 天
2025-07-14 15:58:40 - system - INFO - ==================================================
2025-07-14 15:58:49 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-14 15:58:50 - root - WARNING - 智能编码节点不可用: cannot import name 'IntelligentCodingAgent' from partially initialized module 'src.corder_integration.langgraph.nodes.intelligent_coding_node' (most likely due to a circular import) (D:\ai_project\document_analyzer\src\corder_integration\langgraph\nodes\intelligent_coding_node.py)
2025-07-14 15:58:50 - src.utils.task_storage - INFO - 数据库初始化成功
2025-07-14 15:58:50 - markdown_storage - INFO - Markdown存储管理器初始化完成
2025-07-14 15:58:50 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-14 15:58:50 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 15:58:51 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-14 15:58:53 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-14 15:58:53 - WeaviateVectorDatabase - INFO - ✅ Weaviate连接成功: http://localhost:8080 (gRPC: 50051)
2025-07-14 15:58:55 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/schema/AnalyDesignDocuments "HTTP/1.1 200 OK"
2025-07-14 15:58:55 - WeaviateVectorDatabase - INFO - ✅ Weaviate集合已存在: AnalyDesignDocuments
2025-07-14 15:58:55 - AnalysisServiceManager - INFO - 初始化向量数据库: weaviate
2025-07-14 15:58:55 - sentence_transformers.SentenceTransformer - INFO - Use pytorch device_name: cpu
2025-07-14 15:58:55 - sentence_transformers.SentenceTransformer - INFO - Load pretrained SentenceTransformer: BAAI/bge-large-zh
2025-07-14 15:59:12 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-14 15:59:14 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-14 15:59:14 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-14 15:59:14 - src.utils.weaviate_helper - INFO - 成功连接到 Weaviate: localhost:8080
2025-07-14 15:59:14 - AnalysisServiceManager - INFO - 分析服务管理器初始化完成
2025-07-14 15:59:14 - src.utils.enhanced_analyzer - INFO - 增强分析器初始化完成
2025-07-14 15:59:14 - werkzeug - WARNING -  * Debugger is active!
2025-07-14 15:59:14 - werkzeug - INFO -  * Debugger PIN: 887-537-592
2025-07-14 16:07:39 - src.apis.coder_agent_api - INFO - 开始处理文档: 链数中建一局_1752480459
2025-07-14 16:07:39 - src.apis.coder_agent_api - INFO - 文档长度: 4931 字符
2025-07-14 16:07:39 - src.apis.coder_agent_api - INFO - 使用LangGraph: True
2025-07-14 16:07:39 - src.apis.coder_agent_api - INFO - 代码输出路径: D:\gitlab\create_project
2025-07-14 16:07:39 - src.apis.coder_agent_api - INFO - 使用LangGraph工作流处理项目: 链数中建一局_1752480459
2025-07-14 16:07:39 - src.corder_integration.langgraph.workflow_orchestrator - INFO - 准备使用异步SQLite检查点: D:\ai_project\document_analyzer\workflow_checkpoints.db
2025-07-14 16:07:39 - src.corder_integration.langgraph.workflow_orchestrator - INFO - 生成目标分支名称: 链数中建一局_1752480459 -> D_20250714_链数中建一局_1752480459
2025-07-14 16:07:39 - src.corder_integration.langgraph.workflow_orchestrator - INFO - 开始执行编码工作流: 链数中建一局_1752480459 -> D:\gitlab\create_project
2025-07-14 16:07:39 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🚀 Git管理节点开始执行...
2025-07-14 16:07:39 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 16:07:39 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🎯 git_management_node 开始执行任务...
2025-07-14 16:07:39 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ℹ️ 没有可执行的Git管理任务
2025-07-14 16:07:39 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ Git管理节点完成 - 提取: 0 个仓库, 克隆: 0 个仓库, 仓库初始化状态: False
2025-07-14 16:07:39 - src.corder_integration.langgraph.workflow_orchestrator - WARNING - 没有识别到任何服务，Git设置阶段结束
2025-07-14 16:07:39 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 16:07:39 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 16:07:39 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: config.yaml
2025-07-14 16:07:39 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 16:07:39 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 16:07:39 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 16:07:39 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 16:07:39 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 16:07:39 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-14 16:07:39 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 16:07:39 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 16:07:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 第1轮找到 1 个可执行任务
2025-07-14 16:07:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 开始执行任务: task_008 (api)
2025-07-14 16:07:40 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_008 已被 intelligent_coding_node 领取
2025-07-14 16:07:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🌐 执行API接口生成任务: task_008
2025-07-14 16:07:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 解析的接口信息:
2025-07-14 16:07:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 接口名称: CompanyUnitList
2025-07-14 16:07:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - API路径: /general/multiorgManage/queryCompanyUnitList
2025-07-14 16:07:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - HTTP方法: GET
2025-07-14 16:07:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 输入参数: 3个
2025-07-14 16:07:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 输出参数: 6个
2025-07-14 16:07:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 业务描述: 根据查询条件查询组织单元信息，支持按编码、状态等条件筛选
2025-07-14 16:07:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 在 D:\gitlab\create_project/链数中建一局_1752461639/zqyl-user-center-service 中查找最佳Java项目路径...
2025-07-14 16:07:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 目标服务名: 用户服务
2025-07-14 16:07:41 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-14 16:07:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 发现Java项目: user-basic-general
2025-07-14 16:07:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       🎯 相对路径: user-basic-service\user-basic-general
2025-07-14 16:07:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       📊 Java文件: 36个
2025-07-14 16:07:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       📐 目录深度: 2
2025-07-14 16:07:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       🏆 优先级分数: 750
2025-07-14 16:07:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 排序后的候选路径（前3个）:
2025-07-14 16:07:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    1. user-basic-service\user-basic-general (优先级: 750)
2025-07-14 16:07:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 选择最佳Java项目路径:
2025-07-14 16:07:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 完整路径: D:\gitlab\create_project\链数中建一局_1752461639\zqyl-user-center-service\user-basic-service\user-basic-general
2025-07-14 16:07:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📋 相对路径: user-basic-service\user-basic-general
2025-07-14 16:07:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    🏆 最终优先级: 750
2025-07-14 16:07:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 从API路径 /general/multiorgManage/queryCompanyUnitList 提取关键字: multiorgManage
2025-07-14 16:07:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 在项目中搜索关键字相关路径: multiorgManage
2025-07-14 16:07:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    ❌ 未找到包含关键字 'multiorgManage' 的相关目录
2025-07-14 16:07:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -  分析目标项目: D:\gitlab\create_project\链数中建一局_1752461639\zqyl-user-center-service\user-basic-service\user-basic-general
2025-07-14 16:07:41 - src.apis.project_analysis_api - INFO - 🔍 开始分析项目用于代码生成: D:\gitlab\create_project\链数中建一局_1752461639\zqyl-user-center-service\user-basic-service\user-basic-general
2025-07-14 16:07:41 - src.apis.project_analysis_api - INFO - 🔍 在 D:\gitlab\create_project\链数中建一局_1752461639\zqyl-user-center-service\user-basic-service\user-basic-general 中查找最佳Java项目路径...
2025-07-14 16:07:41 - src.apis.project_analysis_api - INFO - 🎯 目标服务名: 用户服务
2025-07-14 16:07:41 - src.apis.project_analysis_api - INFO -    📐 中等深度结构 (深度7) -> +100
2025-07-14 16:07:41 - src.apis.project_analysis_api - INFO -    📦 服务模块匹配: user-basic-service -> +120
2025-07-14 16:07:41 - src.apis.project_analysis_api - INFO -    🏢 业务域匹配: user -> +60
2025-07-14 16:07:41 - src.apis.project_analysis_api - INFO -    🏗️ 架构层级匹配: service -> +100
2025-07-14 16:07:41 - src.apis.project_analysis_api - INFO -    🎯🎯🎯 深层服务模块路径匹配 -> +800
2025-07-14 16:07:41 - src.apis.project_analysis_api - INFO -    📁 发现Java项目: user-basic-general
2025-07-14 16:07:41 - src.apis.project_analysis_api - INFO -       🎯 相对路径: .
2025-07-14 16:07:41 - src.apis.project_analysis_api - INFO -       📊 Java文件: 36个
2025-07-14 16:07:41 - src.apis.project_analysis_api - INFO -       📐 目录深度: 0
2025-07-14 16:07:41 - src.apis.project_analysis_api - INFO -       🏆 优先级分数: 1181
2025-07-14 16:07:41 - src.apis.project_analysis_api - INFO - 📋 排序后的候选路径（前3个）:
2025-07-14 16:07:41 - src.apis.project_analysis_api - INFO -    1. . (优先级: 1181)
2025-07-14 16:07:41 - src.apis.project_analysis_api - INFO - ✅ 选择最佳Java项目路径:
2025-07-14 16:07:41 - src.apis.project_analysis_api - INFO -    📁 完整路径: D:\gitlab\create_project\链数中建一局_1752461639\zqyl-user-center-service\user-basic-service\user-basic-general
2025-07-14 16:07:41 - src.apis.project_analysis_api - INFO -    📋 相对路径: .
2025-07-14 16:07:41 - src.apis.project_analysis_api - INFO -    🏆 最终优先级: 1181
2025-07-14 16:07:41 - src.apis.project_analysis_api - INFO - 📂 实际分析路径: D:\gitlab\create_project\链数中建一局_1752461639\zqyl-user-center-service\user-basic-service\user-basic-general
2025-07-14 16:07:41 - src.utils.java_code_analyzer - INFO - 🔍 开始分析企业级Java项目: D:\gitlab\create_project\链数中建一局_1752461639\zqyl-user-center-service\user-basic-service\user-basic-general
2025-07-14 16:07:41 - src.utils.java_code_analyzer - WARNING - ⚠️ 解析Java文件失败 D:\gitlab\create_project\链数中建一局_1752461639\zqyl-user-center-service\user-basic-service\user-basic-general\src\main\java\com\yljr\user\basicgeneral\interfaces\dto\CompanyUnitListReq.java: 
2025-07-14 16:07:41 - src.utils.java_code_analyzer - INFO - ✅ 企业级项目分析完成，共分析 36 个Java文件
2025-07-14 16:07:41 - src.apis.project_analysis_api - INFO - 📦 动态检测到基础包: com.yljr.user.basicgeneral (出现36次)
2025-07-14 16:07:41 - src.apis.project_analysis_api - INFO - 📦 动态检测到基础包: com.yljr.user.basicgeneral (出现36次)
2025-07-14 16:07:41 - src.apis.project_analysis_api - INFO - 📦 动态检测到基础包: com.yljr.user.basicgeneral (出现36次)
2025-07-14 16:07:41 - src.apis.project_analysis_api - INFO - ✅ 项目分析完成，已提取代码生成上下文
2025-07-14 16:07:41 - src.corder_integration.code_generator.controller_interface_manager - INFO - 🚀 开始处理API接口请求: /general/multiorgManage/queryCompanyUnitList
2025-07-14 16:07:41 - src.corder_integration.code_generator.controller_analyzer - INFO - 🔍 开始分析路径下的Controller文件: D:\gitlab\create_project\链数中建一局_1752461639\zqyl-user-center-service\user-basic-service\user-basic-general
2025-07-14 16:07:41 - src.corder_integration.code_generator.controller_analyzer - INFO - 🎯 匹配关键字: multiorgManage
2025-07-14 16:07:41 - src.corder_integration.code_generator.controller_analyzer - INFO - 📊 总共找到 0 个匹配的Controller文件
2025-07-14 16:07:41 - src.corder_integration.code_generator.controller_interface_manager - INFO - ⚠️ 未找到匹配关键字 'multiorgManage' 的Controller文件
2025-07-14 16:07:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ⚠️ 未能在现有Controller中添加接口，将生成新文件
2025-07-14 16:07:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -  调用volcengine大模型生成代码...
2025-07-14 16:07:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 开始代码生成...
2025-07-14 16:07:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎨 使用模板+AI混合模式生成代码
2025-07-14 16:07:41 - src.corder_integration.code_generator.template_ai_generator - INFO - 🎨 开始模板+AI混合代码生成: CompanyUnitList
2025-07-14 16:07:41 - src.corder_integration.code_generator.template_ai_generator - INFO - 🤖 使用unknown增强模板代码...
2025-07-14 16:07:41 - src.corder_integration.code_generator.template_ai_generator - INFO - 增强模板代码入参：[{'role': 'system', 'content': '你是Java代码优化专家。请根据业务需求优化给定的模板代码，保持代码结构清晰，添加必要的业务逻辑。重要：请使用具体的类名，不要使用{{}}模板变量语法。只返回优化后的Java代码，不要添加额外说明。'}, {'role': 'user', 'content': '\n请优化以下service_impl代码模板，重点关注：\n- 实现完整的业务逻辑\n- 添加数据验证和转换\n- 处理异常情况\n- 添加事务管理\n- 优化数据库查询逻辑\n\n## 当前模板代码：\n```java\npackage com.yljr.user.basicgeneral.application.service.impl;\n\nimport com.yljr.user.basicgeneral.application.service.CompanyUnitListService;\nimport com.yljr.user.basicgeneral.domain.entity.CompanyUnitList;\nimport com.yljr.user.basicgeneral.domain.mapper.CompanyUnitListMapper;\nimport com.yljr.user.basicgeneral.interfaces.dto.CompanyUnitListReq;\nimport com.yljr.user.basicgeneral.interfaces.dto.CompanyUnitListResp;\nimport org.springframework.stereotype.Service;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.transaction.annotation.Transactional;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\n/**\n * CompanyUnitList Service - 根据查询条件查询组织单元信息，支持按编码、状态等条件筛选\n * Generated by Template + AI\n */\n@Service\n@Transactional\npublic class CompanyUnitListServiceImpl implements CompanyUnitListService {\n    \n    private static final Logger logger = LoggerFactory.getLogger(CompanyUnitListServiceImpl.class);\n    \n    @Autowired\n    private CompanyUnitListMapper companyUnitListMapper;\n    \n    @Override\n    public CompanyUnitListResp CompanyUnitList(CompanyUnitListReq request) {\n        logger.info("Executing CompanyUnitList with parameters: {}", request);\n        \n        try {\n            // TODO: 实现根据查询条件查询组织单元信息，支持按编码、状态等条件筛选业务逻辑\n            \n            logger.info("CompanyUnitList completed successfully");\n            return new CompanyUnitListResp();\n        } catch (Exception e) {\n            logger.error("Error in CompanyUnitList: ", e);\n            throw new RuntimeException("CompanyUnitList failed", e);\n        }\n    }\n}\n```\n\n## 业务需求：\n- 接口名称：CompanyUnitList\n- 功能描述：根据查询条件查询组织单元信息，支持按编码、状态等条件筛选\n- 业务逻辑：根据查询条件查询组织单元信息，支持按编码、状态等条件筛选\n\n## 输入参数：\n- unitCode (String): 组织单元编码(可选) [可选]\n- openStatus (String): 开通状态(可选) [可选]\n- unitList (String): 组织单元列表(可选) [可选]\n\n## 输出参数：\n- unitId (String): 组织单元ID\n- unitTypeDicType (String): 组织单元类型字典类型\n- unitTypeId (String): 组织单元类型ID\n- openStatus (String): 开通状态\n- unitCode (String): 组织单元编码\n- unitName (String): 组织单元名称\n\n## 技术要求：\n- 基础包名：com.yljr.user.basicgeneral\n- 使用Spring Boot + MyBatis Plus\n- 遵循DDD分层架构\n- 保持原有类名和包结构\n- 请求DTO类名：CompanyUnitListReq\n- 响应DTO类名：CompanyUnitListResp\n- Service类名：CompanyUnitListService\n\n**重要：请使用具体的类名（如 CompanyUnitListReq），不要使用模板变量语法（如 {{REQUEST_DTO_NAME}}）**\n\n请返回优化后的完整Java代码（只要代码，不要额外说明）：\n'}]
2025-07-14 16:08:12 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-14 16:08:12 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ service_impl AI增强完成
2025-07-14 16:08:12 - src.corder_integration.code_generator.template_ai_generator - INFO - 增强模板代码入参：[{'role': 'system', 'content': '你是Java代码优化专家。请根据业务需求优化给定的模板代码，保持代码结构清晰，添加必要的业务逻辑。重要：请使用具体的类名，不要使用{{}}模板变量语法。只返回优化后的Java代码，不要添加额外说明。'}, {'role': 'user', 'content': '\n请优化以下controller代码模板，重点关注：\n- 完善参数验证\n- 统一响应格式\n- 添加API文档注解\n- 改进错误处理\n- 优化日志记录\n\n## 当前模板代码：\n```java\npackage com.yljr.user.basicgeneral.interfaces.rest;\n\nimport com.yljr.user.basicgeneral.application.service.CompanyUnitListService;\nimport com.yljr.user.basicgeneral.interfaces.dto.CompanyUnitListReq;\nimport com.yljr.user.basicgeneral.interfaces.dto.CompanyUnitListResp;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.*;\nimport org.springframework.http.ResponseEntity;\nimport javax.validation.Valid;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport io.swagger.annotations.Api;\nimport io.swagger.annotations.ApiOperation;\n\n/**\n * CompanyUnitList Controller - 根据查询条件查询组织单元信息，支持按编码、状态等条件筛选\n * Generated by Template + AI\n */\n@Api(tags = "CompanyUnitList Controller - 根据查询条件查询组织单元信息，支持按编码、状态等条件筛选")\n@RestController\n@RequestMapping("/general/multiorgManage/queryCompanyUnitList")\n@CrossOrigin(origins = "*")\npublic class CompanyUnitListController {\n    \n    private static final Logger logger = LoggerFactory.getLogger(CompanyUnitListController.class);\n    \n    @Autowired\n    private CompanyUnitListService companyUnitListService;\n    \n    /**\n     * 根据查询条件查询组织单元信息，支持按编码、状态等条件筛选\n     */\n    @ApiOperation("根据查询条件查询组织单元信息，支持按编码、状态等条件筛选")\n    @GetMapping\n    public ResponseEntity<CompanyUnitListResp> CompanyUnitList(@Valid @RequestBody CompanyUnitListReq request) {\n        try {\n            logger.info("Processing CompanyUnitList request: {}", request);\n            \n            CompanyUnitListResp response = companyUnitListService.CompanyUnitList(request);\n            \n            logger.info("CompanyUnitList completed successfully");\n            return ResponseEntity.ok(response);\n        } catch (Exception e) {\n            logger.error("Error in CompanyUnitList: ", e);\n            return ResponseEntity.internalServerError().build();\n        }\n    }\n}\n```\n\n## 业务需求：\n- 接口名称：CompanyUnitList\n- 功能描述：根据查询条件查询组织单元信息，支持按编码、状态等条件筛选\n- 业务逻辑：根据查询条件查询组织单元信息，支持按编码、状态等条件筛选\n\n## 输入参数：\n- unitCode (String): 组织单元编码(可选) [可选]\n- openStatus (String): 开通状态(可选) [可选]\n- unitList (String): 组织单元列表(可选) [可选]\n\n## 输出参数：\n- unitId (String): 组织单元ID\n- unitTypeDicType (String): 组织单元类型字典类型\n- unitTypeId (String): 组织单元类型ID\n- openStatus (String): 开通状态\n- unitCode (String): 组织单元编码\n- unitName (String): 组织单元名称\n\n## 技术要求：\n- 基础包名：com.yljr.user.basicgeneral\n- 使用Spring Boot + MyBatis Plus\n- 遵循DDD分层架构\n- 保持原有类名和包结构\n- 请求DTO类名：CompanyUnitListReq\n- 响应DTO类名：CompanyUnitListResp\n- Service类名：CompanyUnitListService\n\n**重要：请使用具体的类名（如 CompanyUnitListReq），不要使用模板变量语法（如 {{REQUEST_DTO_NAME}}）**\n\n请返回优化后的完整Java代码（只要代码，不要额外说明）：\n'}]
2025-07-14 16:08:36 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-14 16:08:36 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ controller AI增强完成
2025-07-14 16:08:36 - src.corder_integration.code_generator.template_ai_generator - INFO - 增强模板代码入参：[{'role': 'system', 'content': '你是Java代码优化专家。请根据业务需求优化给定的模板代码，保持代码结构清晰，添加必要的业务逻辑。重要：请使用具体的类名，不要使用{{}}模板变量语法。只返回优化后的Java代码，不要添加额外说明。'}, {'role': 'user', 'content': '\n请优化以下service_interface代码模板，重点关注：\n- 改进代码结构\n- 添加必要注释\n- 优化实现逻辑\n\n## 当前模板代码：\n```java\npackage com.yljr.user.basicgeneral.application.service;\n\nimport com.yljr.user.basicgeneral.interfaces.dto.CompanyUnitListReq;\nimport com.yljr.user.basicgeneral.interfaces.dto.CompanyUnitListResp;\nimport java.util.List;\n\n/**\n * CompanyUnitList Service - 根据查询条件查询组织单元信息，支持按编码、状态等条件筛选\n * Generated by Template + AI\n */\npublic interface CompanyUnitListService {\n    \n    /**\n     * 根据查询条件查询组织单元信息，支持按编码、状态等条件筛选\n     */\n    CompanyUnitListResp CompanyUnitList(CompanyUnitListReq request);\n}\n```\n\n## 业务需求：\n- 接口名称：CompanyUnitList\n- 功能描述：根据查询条件查询组织单元信息，支持按编码、状态等条件筛选\n- 业务逻辑：根据查询条件查询组织单元信息，支持按编码、状态等条件筛选\n\n## 输入参数：\n- unitCode (String): 组织单元编码(可选) [可选]\n- openStatus (String): 开通状态(可选) [可选]\n- unitList (String): 组织单元列表(可选) [可选]\n\n## 输出参数：\n- unitId (String): 组织单元ID\n- unitTypeDicType (String): 组织单元类型字典类型\n- unitTypeId (String): 组织单元类型ID\n- openStatus (String): 开通状态\n- unitCode (String): 组织单元编码\n- unitName (String): 组织单元名称\n\n## 技术要求：\n- 基础包名：com.yljr.user.basicgeneral\n- 使用Spring Boot + MyBatis Plus\n- 遵循DDD分层架构\n- 保持原有类名和包结构\n- 请求DTO类名：CompanyUnitListReq\n- 响应DTO类名：CompanyUnitListResp\n- Service类名：CompanyUnitListService\n\n**重要：请使用具体的类名（如 CompanyUnitListReq），不要使用模板变量语法（如 {{REQUEST_DTO_NAME}}）**\n\n请返回优化后的完整Java代码（只要代码，不要额外说明）：\n'}]
2025-07-14 16:08:47 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-14 16:08:47 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ service_interface AI增强完成
2025-07-14 16:08:47 - src.corder_integration.code_generator.template_ai_generator - INFO - 增强模板代码入参：[{'role': 'system', 'content': '你是Java代码优化专家。请根据业务需求优化给定的模板代码，保持代码结构清晰，添加必要的业务逻辑。重要：请使用具体的类名，不要使用{{}}模板变量语法。只返回优化后的Java代码，不要添加额外说明。'}, {'role': 'user', 'content': '\n请优化以下request_dto代码模板，重点关注：\n- 添加详细的字段验证\n- 完善API文档注解\n- 优化字段类型选择\n- 添加字段描述\n\n## 当前模板代码：\n```java\npackage com.yljr.user.basicgeneral.interfaces.dto;\n\nimport javax.validation.constraints.*;\nimport lombok.Data;\nimport io.swagger.annotations.ApiModel;\nimport io.swagger.annotations.ApiModelProperty;\n\n/**\n * CompanyUnitList Request DTO\n * Generated by Template + AI\n */\n@Data\n@ApiModel(description = "CompanyUnitList Request DTO")\npublic class CompanyUnitListReq {\n    \n    @ApiModelProperty(value = "组织单元编码(可选)", required = false)\n    private String unitCode;\n\n    @ApiModelProperty(value = "开通状态(可选)", required = false)\n    private String openStatus;\n\n    @ApiModelProperty(value = "组织单元列表(可选)", required = false)\n    private String unitList;\n}\n```\n\n## 业务需求：\n- 接口名称：CompanyUnitList\n- 功能描述：根据查询条件查询组织单元信息，支持按编码、状态等条件筛选\n- 业务逻辑：根据查询条件查询组织单元信息，支持按编码、状态等条件筛选\n\n## 输入参数：\n- unitCode (String): 组织单元编码(可选) [可选]\n- openStatus (String): 开通状态(可选) [可选]\n- unitList (String): 组织单元列表(可选) [可选]\n\n## 输出参数：\n- unitId (String): 组织单元ID\n- unitTypeDicType (String): 组织单元类型字典类型\n- unitTypeId (String): 组织单元类型ID\n- openStatus (String): 开通状态\n- unitCode (String): 组织单元编码\n- unitName (String): 组织单元名称\n\n## 技术要求：\n- 基础包名：com.yljr.user.basicgeneral\n- 使用Spring Boot + MyBatis Plus\n- 遵循DDD分层架构\n- 保持原有类名和包结构\n- 请求DTO类名：CompanyUnitListReq\n- 响应DTO类名：CompanyUnitListResp\n- Service类名：CompanyUnitListService\n\n**重要：请使用具体的类名（如 CompanyUnitListReq），不要使用模板变量语法（如 {{REQUEST_DTO_NAME}}）**\n\n请返回优化后的完整Java代码（只要代码，不要额外说明）：\n'}]
2025-07-14 16:09:07 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-14 16:09:07 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ request_dto AI增强完成
2025-07-14 16:09:07 - src.corder_integration.code_generator.template_ai_generator - INFO - 增强模板代码入参：[{'role': 'system', 'content': '你是Java代码优化专家。请根据业务需求优化给定的模板代码，保持代码结构清晰，添加必要的业务逻辑。重要：请使用具体的类名，不要使用{{}}模板变量语法。只返回优化后的Java代码，不要添加额外说明。'}, {'role': 'user', 'content': '\n请优化以下response_dto代码模板，重点关注：\n- 添加详细的字段验证\n- 完善API文档注解\n- 优化字段类型选择\n- 添加字段描述\n\n## 当前模板代码：\n```java\npackage com.yljr.user.basicgeneral.interfaces.dto;\n\nimport lombok.Data;\nimport io.swagger.annotations.ApiModel;\nimport io.swagger.annotations.ApiModelProperty;\n\n/**\n * CompanyUnitList Response DTO\n * Generated by Template + AI\n */\n@Data\n@ApiModel(description = "CompanyUnitList Response DTO")\npublic class CompanyUnitListResp {\n    \n    @ApiModelProperty("组织单元ID")\n    private String unitId;\n\n    @ApiModelProperty("组织单元类型字典类型")\n    private String unitTypeDicType;\n\n    @ApiModelProperty("组织单元类型ID")\n    private String unitTypeId;\n\n    @ApiModelProperty("开通状态")\n    private String openStatus;\n\n    @ApiModelProperty("组织单元编码")\n    private String unitCode;\n\n    @ApiModelProperty("组织单元名称")\n    private String unitName;\n}\n```\n\n## 业务需求：\n- 接口名称：CompanyUnitList\n- 功能描述：根据查询条件查询组织单元信息，支持按编码、状态等条件筛选\n- 业务逻辑：根据查询条件查询组织单元信息，支持按编码、状态等条件筛选\n\n## 输入参数：\n- unitCode (String): 组织单元编码(可选) [可选]\n- openStatus (String): 开通状态(可选) [可选]\n- unitList (String): 组织单元列表(可选) [可选]\n\n## 输出参数：\n- unitId (String): 组织单元ID\n- unitTypeDicType (String): 组织单元类型字典类型\n- unitTypeId (String): 组织单元类型ID\n- openStatus (String): 开通状态\n- unitCode (String): 组织单元编码\n- unitName (String): 组织单元名称\n\n## 技术要求：\n- 基础包名：com.yljr.user.basicgeneral\n- 使用Spring Boot + MyBatis Plus\n- 遵循DDD分层架构\n- 保持原有类名和包结构\n- 请求DTO类名：CompanyUnitListReq\n- 响应DTO类名：CompanyUnitListResp\n- Service类名：CompanyUnitListService\n\n**重要：请使用具体的类名（如 CompanyUnitListReq），不要使用模板变量语法（如 {{REQUEST_DTO_NAME}}）**\n\n请返回优化后的完整Java代码（只要代码，不要额外说明）：\n'}]
2025-07-14 16:09:30 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-14 16:09:30 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ response_dto AI增强完成
2025-07-14 16:09:30 - src.corder_integration.code_generator.template_ai_generator - INFO - 增强模板代码入参：[{'role': 'system', 'content': '你是Java代码优化专家。请根据业务需求优化给定的模板代码，保持代码结构清晰，添加必要的业务逻辑。重要：请使用具体的类名，不要使用{{}}模板变量语法。只返回优化后的Java代码，不要添加额外说明。'}, {'role': 'user', 'content': '\n请优化以下entity代码模板，重点关注：\n- 改进代码结构\n- 添加必要注释\n- 优化实现逻辑\n\n## 当前模板代码：\n```java\npackage com.yljr.user.basicgeneral.domain.entity;\n\nimport com.baomidou.mybatisplus.annotation.*;\nimport lombok.Data;\nimport io.swagger.annotations.ApiModel;\nimport io.swagger.annotations.ApiModelProperty;\nimport java.time.LocalDateTime;\n\n/**\n * CompanyUnitList Entity\n * Generated by Template + AI\n */\n@Data\n@ApiModel(description = "CompanyUnitList Entity")\n@TableName("companyunitlist")\npublic class CompanyUnitList {\n    \n    @ApiModelProperty("主键ID")\n    @TableId(type = IdType.AUTO)\n    private Long id;\n    \n    @ApiModelProperty("组织单元编码(可选)")\n    @TableField("unitCode")\n    private String unitCode;\n\n    @ApiModelProperty("开通状态(可选)")\n    @TableField("openStatus")\n    private String openStatus;\n\n    @ApiModelProperty("组织单元列表(可选)")\n    @TableField("unitList")\n    private String unitList;\n\n    @ApiModelProperty("组织单元ID")\n    @TableField("unitId")\n    private String unitId;\n\n    @ApiModelProperty("组织单元类型字典类型")\n    @TableField("unitTypeDicType")\n    private String unitTypeDicType;\n\n    @ApiModelProperty("组织单元类型ID")\n    @TableField("unitTypeId")\n    private String unitTypeId;\n\n    @ApiModelProperty("组织单元名称")\n    @TableField("unitName")\n    private String unitName;\n    \n    @ApiModelProperty("创建时间")\n    @TableField(fill = FieldFill.INSERT)\n    private LocalDateTime createTime;\n    \n    @ApiModelProperty("更新时间")\n    @TableField(fill = FieldFill.INSERT_UPDATE)\n    private LocalDateTime updateTime;\n}\n```\n\n## 业务需求：\n- 接口名称：CompanyUnitList\n- 功能描述：根据查询条件查询组织单元信息，支持按编码、状态等条件筛选\n- 业务逻辑：根据查询条件查询组织单元信息，支持按编码、状态等条件筛选\n\n## 输入参数：\n- unitCode (String): 组织单元编码(可选) [可选]\n- openStatus (String): 开通状态(可选) [可选]\n- unitList (String): 组织单元列表(可选) [可选]\n\n## 输出参数：\n- unitId (String): 组织单元ID\n- unitTypeDicType (String): 组织单元类型字典类型\n- unitTypeId (String): 组织单元类型ID\n- openStatus (String): 开通状态\n- unitCode (String): 组织单元编码\n- unitName (String): 组织单元名称\n\n## 技术要求：\n- 基础包名：com.yljr.user.basicgeneral\n- 使用Spring Boot + MyBatis Plus\n- 遵循DDD分层架构\n- 保持原有类名和包结构\n- 请求DTO类名：CompanyUnitListReq\n- 响应DTO类名：CompanyUnitListResp\n- Service类名：CompanyUnitListService\n\n**重要：请使用具体的类名（如 CompanyUnitListReq），不要使用模板变量语法（如 {{REQUEST_DTO_NAME}}）**\n\n请返回优化后的完整Java代码（只要代码，不要额外说明）：\n'}]
2025-07-14 16:09:50 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-14 16:09:50 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ entity AI增强完成
2025-07-14 16:09:50 - src.corder_integration.code_generator.template_ai_generator - INFO - 增强模板代码入参：[{'role': 'system', 'content': '你是Java代码优化专家。请根据业务需求优化给定的模板代码，保持代码结构清晰，添加必要的业务逻辑。重要：请使用具体的类名，不要使用{{}}模板变量语法。只返回优化后的Java代码，不要添加额外说明。'}, {'role': 'user', 'content': '\n请优化以下mapper代码模板，重点关注：\n- 改进代码结构\n- 添加必要注释\n- 优化实现逻辑\n\n## 当前模板代码：\n```java\npackage com.yljr.user.basicgeneral.domain.mapper;\n\nimport com.yljr.user.basicgeneral.domain.entity.CompanyUnitList;\nimport com.baomidou.mybatisplus.core.mapper.BaseMapper;\nimport org.apache.ibatis.annotations.Mapper;\nimport org.apache.ibatis.annotations.Param;\nimport java.util.List;\n\n/**\n * CompanyUnitListMapper Mapper\n * Generated by Template + AI\n */\n@Mapper\npublic interface CompanyUnitListMapper extends BaseMapper<CompanyUnitList> {\n    \n    /**\n     * Custom query for CompanyUnitList\n     */\n    List<CompanyUnitList> selectCompanyUnitListList(@Param("unitCode") String unitCode, @Param("openStatus") String openStatus, @Param("unitList") String unitList);\n}\n```\n\n## 业务需求：\n- 接口名称：CompanyUnitList\n- 功能描述：根据查询条件查询组织单元信息，支持按编码、状态等条件筛选\n- 业务逻辑：根据查询条件查询组织单元信息，支持按编码、状态等条件筛选\n\n## 输入参数：\n- unitCode (String): 组织单元编码(可选) [可选]\n- openStatus (String): 开通状态(可选) [可选]\n- unitList (String): 组织单元列表(可选) [可选]\n\n## 输出参数：\n- unitId (String): 组织单元ID\n- unitTypeDicType (String): 组织单元类型字典类型\n- unitTypeId (String): 组织单元类型ID\n- openStatus (String): 开通状态\n- unitCode (String): 组织单元编码\n- unitName (String): 组织单元名称\n\n## 技术要求：\n- 基础包名：com.yljr.user.basicgeneral\n- 使用Spring Boot + MyBatis Plus\n- 遵循DDD分层架构\n- 保持原有类名和包结构\n- 请求DTO类名：CompanyUnitListReq\n- 响应DTO类名：CompanyUnitListResp\n- Service类名：CompanyUnitListService\n\n**重要：请使用具体的类名（如 CompanyUnitListReq），不要使用模板变量语法（如 {{REQUEST_DTO_NAME}}）**\n\n请返回优化后的完整Java代码（只要代码，不要额外说明）：\n'}]
2025-07-14 16:10:04 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-14 16:10:04 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ mapper AI增强完成
2025-07-14 16:10:04 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI生成成功，生成代码类型: ['service_impl', 'controller', 'service_interface', 'request_dto', 'response_dto', 'entity', 'mapper', 'mapper_xml']
2025-07-14 16:10:04 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 开始写入生成的代码文件...
2025-07-14 16:10:04 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔧 统一类名基础: CompanyUnitList
2025-07-14 16:10:04 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ service_impl 类名: CompanyUnitListServiceImpl
2025-07-14 16:10:04 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ controller 类名: CompanyUnitListController
2025-07-14 16:10:04 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ request_dto 类名: CompanyUnitListReq
2025-07-14 16:10:04 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ response_dto 类名: CompanyUnitListResp
2025-07-14 16:10:04 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ entity 类名: CompanyUnitListEntity
2025-07-14 16:10:04 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 检测到service_impl但缺少service，这是正常的（接口会被自动生成）
2025-07-14 16:10:04 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 标准化后的代码类型: ['service_impl', 'controller', 'service_interface', 'request_dto', 'response_dto', 'entity', 'mapper', 'mapper_xml']
2025-07-14 16:10:04 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🤖 调用volcengine判断Java文件输出路径...
2025-07-14 16:10:29 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-14 16:10:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM路径判断成功，配置了 8 个Java文件路径
2025-07-14 16:10:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 controller: CompanyUnitListController.java
2025-07-14 16:10:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 service_interface: CompanyUnitListService.java
2025-07-14 16:10:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 service_impl: CompanyUnitListServiceImpl.java
2025-07-14 16:10:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 request_dto: CompanyUnitListReq.java
2025-07-14 16:10:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 response_dto: CompanyUnitListResp.java
2025-07-14 16:10:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 entity: CompanyUnitListEntity.java
2025-07-14 16:10:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 mapper: CompanyUnitListMapper.java
2025-07-14 16:10:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 mapper_xml: CompanyUnitListMapper.xml
2025-07-14 16:10:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: D:\gitlab\create_project\链数中建一局_1752461639\zqyl-user-center-service\user-basic-service\user-basic-general\src\main\java\com\yljr\user\basicgeneral\application\service\impl\CompanyUnitListServiceImpl.java
2025-07-14 16:10:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: D:\gitlab\create_project\链数中建一局_1752461639\zqyl-user-center-service\user-basic-service\user-basic-general\src\main\java\com\yljr\user\basicgeneral\application\service\impl\CompanyUnitListServiceImpl.java
2025-07-14 16:10:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: D:\gitlab\create_project\链数中建一局_1752461639\zqyl-user-center-service\user-basic-service\user-basic-general\src\main\java\com\yljr\user\basicgeneral\interfaces\rest\CompanyUnitListController.java
2025-07-14 16:10:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: D:\gitlab\create_project\链数中建一局_1752461639\zqyl-user-center-service\user-basic-service\user-basic-general\src\main\java\com\yljr\user\basicgeneral\interfaces\rest\CompanyUnitListController.java
2025-07-14 16:10:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: D:\gitlab\create_project\链数中建一局_1752461639\zqyl-user-center-service\user-basic-service\user-basic-general\src\main\java\com\yljr\user\basicgeneral\application\service\CompanyUnitListService.java
2025-07-14 16:10:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: D:\gitlab\create_project\链数中建一局_1752461639\zqyl-user-center-service\user-basic-service\user-basic-general\src\main\java\com\yljr\user\basicgeneral\application\service\CompanyUnitListService.java
2025-07-14 16:10:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: D:\gitlab\create_project\链数中建一局_1752461639\zqyl-user-center-service\user-basic-service\user-basic-general\src\main\java\com\yljr\user\basicgeneral\interfaces\dto\CompanyUnitListReq.java
2025-07-14 16:10:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: D:\gitlab\create_project\链数中建一局_1752461639\zqyl-user-center-service\user-basic-service\user-basic-general\src\main\java\com\yljr\user\basicgeneral\interfaces\dto\CompanyUnitListReq.java
2025-07-14 16:10:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: D:\gitlab\create_project\链数中建一局_1752461639\zqyl-user-center-service\user-basic-service\user-basic-general\src\main\java\com\yljr\user\basicgeneral\interfaces\dto\CompanyUnitListResp.java
2025-07-14 16:10:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: D:\gitlab\create_project\链数中建一局_1752461639\zqyl-user-center-service\user-basic-service\user-basic-general\src\main\java\com\yljr\user\basicgeneral\interfaces\dto\CompanyUnitListResp.java
2025-07-14 16:10:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: D:\gitlab\create_project\链数中建一局_1752461639\zqyl-user-center-service\user-basic-service\user-basic-general\src\main\java\com\yljr\user\basicgeneral\domain\entity\CompanyUnitListEntity.java
2025-07-14 16:10:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: D:\gitlab\create_project\链数中建一局_1752461639\zqyl-user-center-service\user-basic-service\user-basic-general\src\main\java\com\yljr\user\basicgeneral\domain\entity\CompanyUnitListEntity.java
2025-07-14 16:10:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: D:\gitlab\create_project\链数中建一局_1752461639\zqyl-user-center-service\user-basic-service\user-basic-general\src\main\java\com\yljr\user\basicgeneral\domain\mapper\CompanyUnitListMapper.java
2025-07-14 16:10:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: D:\gitlab\create_project\链数中建一局_1752461639\zqyl-user-center-service\user-basic-service\user-basic-general\src\main\java\com\yljr\user\basicgeneral\domain\mapper\CompanyUnitListMapper.java
2025-07-14 16:10:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: D:\gitlab\create_project\链数中建一局_1752461639\zqyl-user-center-service\user-basic-service\user-basic-general\src\main\resources\mapper\CompanyUnitListMapper.xml
2025-07-14 16:10:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: D:\gitlab\create_project\链数中建一局_1752461639\zqyl-user-center-service\user-basic-service\user-basic-general\src\main\resources\mapper\CompanyUnitListMapper.xml
2025-07-14 16:10:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📊 代码生成完成，共写入 8 个文件到项目中
2025-07-14 16:10:29 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_008 状态更新为 completed
2025-07-14 16:10:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 任务 task_008 执行成功
2025-07-14 16:10:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 第1轮执行完成，处理了 1 个任务
2025-07-14 16:10:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第2轮任务检查...
2025-07-14 16:10:30 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 第2轮找到 1 个可执行任务
2025-07-14 16:10:30 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 开始执行任务: task_009 (api)
2025-07-14 16:10:30 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_009 已被 intelligent_coding_node 领取
2025-07-14 16:10:30 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🌐 执行API接口生成任务: task_009
2025-07-14 16:10:30 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 解析的接口信息:
2025-07-14 16:10:30 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 接口名称: UnitLimitByCompanyId
2025-07-14 16:10:30 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - API路径: /crcl-open-api/lsLimit/listUnitLimitByCompanyId
2025-07-14 16:10:30 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - HTTP方法: GET
2025-07-14 16:10:30 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 输入参数: 6个
2025-07-14 16:10:30 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 输出参数: 4个
2025-07-14 16:10:30 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 业务描述: 根据公司ID和筛选条件查询组织单元额度信息，调用用户服务获取组织单元基础信息
2025-07-14 16:10:30 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 在 D:\gitlab\create_project/链数中建一局_1752461639/crcl-open 中查找最佳Java项目路径...
2025-07-14 16:10:30 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 目标服务名: 确权开立服务
2025-07-14 16:10:30 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-14 16:10:30 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 发现Java项目: crcl-open
2025-07-14 16:10:30 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       🎯 相对路径: .
2025-07-14 16:10:30 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       📊 Java文件: 2251个
2025-07-14 16:10:30 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       📐 目录深度: 0
2025-07-14 16:10:30 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       🏆 优先级分数: 650
2025-07-14 16:10:30 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 排序后的候选路径（前3个）:
2025-07-14 16:10:30 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    1. . (优先级: 650)
2025-07-14 16:10:30 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 选择最佳Java项目路径:
2025-07-14 16:10:30 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 完整路径: D:\gitlab\create_project\链数中建一局_1752461639\crcl-open
2025-07-14 16:10:30 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📋 相对路径: .
2025-07-14 16:10:30 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    🏆 最终优先级: 650
2025-07-14 16:10:30 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 从API路径 /crcl-open-api/lsLimit/listUnitLimitByCompanyId 提取关键字: lsLimit
2025-07-14 16:10:30 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 在项目中搜索关键字相关路径: lsLimit
2025-07-14 16:10:30 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 找到匹配目录: limit (得分: 25)
2025-07-14 16:10:30 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 找到匹配目录: ls (得分: 25)
2025-07-14 16:10:30 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 找到匹配目录: ls (得分: 25)
2025-07-14 16:10:30 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 找到匹配目录: ls (得分: 25)
2025-07-14 16:10:30 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 找到匹配目录: limit (得分: 25)
2025-07-14 16:10:30 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    ✅ 选择最佳匹配目录: limit (路径: src\main\java\com\yljr\crcl\limit)
2025-07-14 16:10:30 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 基于API关键字 'lsLimit' 找到现有路径: D:\gitlab\create_project\链数中建一局_1752461639\crcl-open\src\main\java\com\yljr\crcl\limit
2025-07-14 16:10:30 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -  分析目标项目: D:\gitlab\create_project\链数中建一局_1752461639\crcl-open\src\main\java\com\yljr\crcl\limit
2025-07-14 16:10:30 - src.apis.project_analysis_api - INFO - 🔍 开始分析项目用于代码生成: D:\gitlab\create_project\链数中建一局_1752461639\crcl-open\src\main\java\com\yljr\crcl\limit
2025-07-14 16:10:30 - src.apis.project_analysis_api - INFO - 🔍 在 D:\gitlab\create_project\链数中建一局_1752461639\crcl-open\src\main\java\com\yljr\crcl\limit 中查找最佳Java项目路径...
2025-07-14 16:10:30 - src.apis.project_analysis_api - INFO - 🎯 目标服务名: 确权开立服务
2025-07-14 16:10:30 - src.apis.project_analysis_api - WARNING - ⚠️ 在 D:\gitlab\create_project\链数中建一局_1752461639\crcl-open\src\main\java\com\yljr\crcl\limit 中未找到包含Java文件的src/main/java结构
2025-07-14 16:10:30 - src.apis.project_analysis_api - INFO - 📂 实际分析路径: D:\gitlab\create_project\链数中建一局_1752461639\crcl-open\src\main\java\com\yljr\crcl\limit
2025-07-14 16:10:30 - src.utils.java_code_analyzer - INFO - 🔍 开始分析企业级Java项目: D:\gitlab\create_project\链数中建一局_1752461639\crcl-open\src\main\java\com\yljr\crcl\limit
2025-07-14 16:10:33 - src.utils.java_code_analyzer - INFO - ✅ 企业级项目分析完成，共分析 533 个Java文件
2025-07-14 16:10:33 - src.apis.project_analysis_api - INFO - 📦 动态检测到基础包: com.yljr.crcl.limit (出现533次)
2025-07-14 16:10:33 - src.apis.project_analysis_api - INFO - 📦 动态检测到基础包: com.yljr.crcl.limit (出现533次)
2025-07-14 16:10:33 - src.apis.project_analysis_api - INFO - 📦 动态检测到基础包: com.yljr.crcl.limit (出现533次)
2025-07-14 16:10:33 - src.apis.project_analysis_api - INFO - ✅ 项目分析完成，已提取代码生成上下文
2025-07-14 16:10:33 - src.corder_integration.code_generator.controller_interface_manager - INFO - 🚀 开始处理API接口请求: /crcl-open-api/lsLimit/listUnitLimitByCompanyId
2025-07-14 16:10:33 - src.corder_integration.code_generator.controller_analyzer - INFO - 🔍 开始分析路径下的Controller文件: D:\gitlab\create_project\链数中建一局_1752461639\crcl-open\src\main\java\com\yljr\crcl\limit
2025-07-14 16:10:33 - src.corder_integration.code_generator.controller_analyzer - INFO - 🎯 匹配关键字: lsLimit
2025-07-14 16:10:34 - src.corder_integration.code_generator.controller_analyzer - INFO - 🎯 在 D:\gitlab\create_project\链数中建一局_1752461639\crcl-open\src\main\java\com\yljr\crcl\limit\interfaces\LsLimitController.java 中找到匹配的@RequestMapping: /lsLimit
2025-07-14 16:10:34 - src.corder_integration.code_generator.controller_analyzer - INFO - 📋 提取到 0 个Service依赖
2025-07-14 16:10:34 - src.corder_integration.code_generator.controller_analyzer - INFO - ✅ 找到匹配的Controller: D:\gitlab\create_project\链数中建一局_1752461639\crcl-open\src\main\java\com\yljr\crcl\limit\interfaces\LsLimitController.java
2025-07-14 16:10:34 - src.corder_integration.code_generator.controller_analyzer - INFO - 📊 总共找到 1 个匹配的Controller文件
2025-07-14 16:10:34 - src.corder_integration.code_generator.controller_analyzer - INFO - 🔧 从API路径 '/crcl-open-api/lsLimit/listUnitLimitByCompanyId' 提取接口名称: 'listUnitLimitByCompanyId'
2025-07-14 16:10:34 - src.corder_integration.code_generator.controller_interface_manager - INFO - 📝 处理Controller: LsLimitController
2025-07-14 16:10:34 - src.corder_integration.code_generator.service_decision_maker - INFO - 🔍 开始分析Service需求: listUnitLimitByCompanyId
2025-07-14 16:10:34 - src.corder_integration.code_generator.service_decision_maker - INFO - 📂 扫描项目Service文件: D:\gitlab\create_project\链数中建一局_1752461639\crcl-open
2025-07-14 16:10:34 - src.corder_integration.code_generator.service_decision_maker - INFO - 📊 找到 336 个Service文件
2025-07-14 16:10:34 - src.corder_integration.code_generator.service_decision_maker - INFO - 📂 扫描Application文件: D:\gitlab\create_project\链数中建一局_1752461639\crcl-open
2025-07-14 16:10:34 - src.corder_integration.code_generator.service_decision_maker - INFO - 📊 找到 35 个Application文件
2025-07-14 16:10:34 - src.corder_integration.code_generator.service_decision_maker - INFO - 🤔 进行Service决策: listUnitLimitByCompanyId
2025-07-14 16:10:40 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-14 16:10:40 - src.corder_integration.code_generator.service_decision_maker - INFO - 🤖 LLM决策完成: {'action': 'create_new', 'target_service': None, 'reason': '根据提供的Service文件信息，现有Service（CustCompanyCreditFeignApi, CustUnitCreditFeignApi等）似乎都是特定领域的接口，而listUnitLimitByCompanyId是一个查询单位限额的功能，与现有Service的职责不直接匹配。创建一个新的Service可以保持功能职责单一，避免污染现有Service的职责边界。', 'need_new_service': True, 'modify_existing': False}
2025-07-14 16:10:40 - src.corder_integration.code_generator.interface_adder - INFO - ➕ 开始在Controller中添加新接口: listUnitLimitByCompanyId
2025-07-14 16:10:40 - src.corder_integration.code_generator.interface_adder - INFO - ✅ 成功添加接口方法到Controller
2025-07-14 16:10:40 - src.corder_integration.code_generator.interface_adder - INFO - 📝 已备份原始文件: D:\gitlab\create_project\链数中建一局_1752461639\crcl-open\src\main\java\com\yljr\crcl\limit\interfaces\LsLimitController.java.backup
2025-07-14 16:10:40 - src.corder_integration.code_generator.interface_adder - INFO - ✅ 已保存更新后的Controller文件: D:\gitlab\create_project\链数中建一局_1752461639\crcl-open\src\main\java\com\yljr\crcl\limit\interfaces\LsLimitController.java
2025-07-14 16:10:40 - src.corder_integration.code_generator.controller_interface_manager - INFO - ✅ Controller LsLimitController 处理完成
2025-07-14 16:10:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功在现有Controller中添加接口: listUnitLimitByCompanyId
2025-07-14 16:10:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔧 使用现有模块处理Service和Mapper层: UnitLimitByCompanyId
2025-07-14 16:10:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 Service决策结果: create_new
2025-07-14 16:10:40 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_009 状态更新为 completed
2025-07-14 16:10:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 任务 task_009 执行成功
2025-07-14 16:10:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 第2轮执行完成，处理了 1 个任务
2025-07-14 16:10:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第3轮任务检查...
2025-07-14 16:10:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 第3轮找到 1 个可执行任务
2025-07-14 16:10:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 开始执行任务: task_010 (api)
2025-07-14 16:10:41 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_010 已被 intelligent_coding_node 领取
2025-07-14 16:10:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🌐 执行API接口生成任务: task_010
2025-07-14 16:10:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 解析的接口信息:
2025-07-14 16:10:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 接口名称: UnitLimitByCompanyIdExport
2025-07-14 16:10:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - API路径: /crcl-open-api/lsLimit/listUnitLimitByCompanyIdExport
2025-07-14 16:10:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - HTTP方法: GET
2025-07-14 16:10:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 输入参数: 4个
2025-07-14 16:10:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 输出参数: 3个
2025-07-14 16:10:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 业务描述: 复用listUnitLimitByCompanyId接口的查询逻辑，将结果导出为Excel格式
2025-07-14 16:10:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 在 D:\gitlab\create_project/链数中建一局_1752461639/crcl-open 中查找最佳Java项目路径...
2025-07-14 16:10:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 目标服务名: 确权开立服务
2025-07-14 16:10:42 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-14 16:10:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 发现Java项目: crcl-open
2025-07-14 16:10:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       🎯 相对路径: .
2025-07-14 16:10:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       📊 Java文件: 2251个
2025-07-14 16:10:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       📐 目录深度: 0
2025-07-14 16:10:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       🏆 优先级分数: 650
2025-07-14 16:10:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 排序后的候选路径（前3个）:
2025-07-14 16:10:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    1. . (优先级: 650)
2025-07-14 16:10:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 选择最佳Java项目路径:
2025-07-14 16:10:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 完整路径: D:\gitlab\create_project\链数中建一局_1752461639\crcl-open
2025-07-14 16:10:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📋 相对路径: .
2025-07-14 16:10:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    🏆 最终优先级: 650
2025-07-14 16:10:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 从API路径 /crcl-open-api/lsLimit/listUnitLimitByCompanyIdExport 提取关键字: lsLimit
2025-07-14 16:10:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 在项目中搜索关键字相关路径: lsLimit
2025-07-14 16:10:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 找到匹配目录: limit (得分: 25)
2025-07-14 16:10:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 找到匹配目录: ls (得分: 25)
2025-07-14 16:10:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 找到匹配目录: ls (得分: 25)
2025-07-14 16:10:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 找到匹配目录: ls (得分: 25)
2025-07-14 16:10:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 找到匹配目录: limit (得分: 25)
2025-07-14 16:10:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    ✅ 选择最佳匹配目录: limit (路径: src\main\java\com\yljr\crcl\limit)
2025-07-14 16:10:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 基于API关键字 'lsLimit' 找到现有路径: D:\gitlab\create_project\链数中建一局_1752461639\crcl-open\src\main\java\com\yljr\crcl\limit
2025-07-14 16:10:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -  分析目标项目: D:\gitlab\create_project\链数中建一局_1752461639\crcl-open\src\main\java\com\yljr\crcl\limit
2025-07-14 16:10:42 - src.apis.project_analysis_api - INFO - 🔍 开始分析项目用于代码生成: D:\gitlab\create_project\链数中建一局_1752461639\crcl-open\src\main\java\com\yljr\crcl\limit
2025-07-14 16:10:42 - src.apis.project_analysis_api - INFO - 📋 使用缓存的分析结果
2025-07-14 16:10:42 - src.corder_integration.code_generator.controller_interface_manager - INFO - 🚀 开始处理API接口请求: /crcl-open-api/lsLimit/listUnitLimitByCompanyIdExport
2025-07-14 16:10:42 - src.corder_integration.code_generator.controller_analyzer - INFO - 🔍 开始分析路径下的Controller文件: D:\gitlab\create_project\链数中建一局_1752461639\crcl-open\src\main\java\com\yljr\crcl\limit
2025-07-14 16:10:42 - src.corder_integration.code_generator.controller_analyzer - INFO - 🎯 匹配关键字: lsLimit
2025-07-14 16:10:42 - src.corder_integration.code_generator.controller_analyzer - INFO - 🎯 在 D:\gitlab\create_project\链数中建一局_1752461639\crcl-open\src\main\java\com\yljr\crcl\limit\interfaces\LsLimitController.java 中找到匹配的@RequestMapping: /lsLimit
2025-07-14 16:10:42 - src.corder_integration.code_generator.controller_analyzer - INFO - 📋 提取到 0 个Service依赖
2025-07-14 16:10:42 - src.corder_integration.code_generator.controller_analyzer - INFO - ✅ 找到匹配的Controller: D:\gitlab\create_project\链数中建一局_1752461639\crcl-open\src\main\java\com\yljr\crcl\limit\interfaces\LsLimitController.java
2025-07-14 16:10:42 - src.corder_integration.code_generator.controller_analyzer - INFO - 📊 总共找到 1 个匹配的Controller文件
2025-07-14 16:10:42 - src.corder_integration.code_generator.controller_analyzer - INFO - 🔧 从API路径 '/crcl-open-api/lsLimit/listUnitLimitByCompanyIdExport' 提取接口名称: 'listUnitLimitByCompanyIdExport'
2025-07-14 16:10:42 - src.corder_integration.code_generator.controller_interface_manager - INFO - 📝 处理Controller: LsLimitController
2025-07-14 16:10:42 - src.corder_integration.code_generator.service_decision_maker - INFO - 🔍 开始分析Service需求: listUnitLimitByCompanyIdExport
2025-07-14 16:10:42 - src.corder_integration.code_generator.service_decision_maker - INFO - 📂 扫描项目Service文件: D:\gitlab\create_project\链数中建一局_1752461639\crcl-open
2025-07-14 16:10:42 - src.corder_integration.code_generator.service_decision_maker - INFO - 📊 找到 336 个Service文件
2025-07-14 16:10:42 - src.corder_integration.code_generator.service_decision_maker - INFO - 📂 扫描Application文件: D:\gitlab\create_project\链数中建一局_1752461639\crcl-open
2025-07-14 16:10:42 - src.corder_integration.code_generator.service_decision_maker - INFO - 📊 找到 35 个Application文件
2025-07-14 16:10:42 - src.corder_integration.code_generator.service_decision_maker - INFO - 🤔 进行Service决策: listUnitLimitByCompanyIdExport
2025-07-14 16:10:51 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-14 16:10:51 - src.corder_integration.code_generator.service_decision_maker - INFO - 🤖 LLM决策完成: {'action': 'create_new', 'target_service': None, 'reason': '现有Service中没有与信用额度查询直接相关的服务，且该接口功能（按公司ID列出单位限额）是一个独立的业务功能，适合封装在专用Service中。CustCompanyCreditFeignApi和CustUnitCreditFeignApi虽然与信用相关，但更偏向客户/单位信用而非限额管理。LetterCreditFeignApi专注于信用证业务。CreditConsumer和CreditBuilderApplication与消息消费和构建逻辑相关，不匹配此功能。', 'need_new_service': True, 'modify_existing': False}
2025-07-14 16:10:51 - src.corder_integration.code_generator.interface_adder - INFO - ➕ 开始在Controller中添加新接口: listUnitLimitByCompanyIdExport
2025-07-14 16:10:51 - src.corder_integration.code_generator.interface_adder - INFO - ✅ 成功添加接口方法到Controller
2025-07-14 16:10:51 - src.corder_integration.code_generator.interface_adder - INFO - 📝 已备份原始文件: D:\gitlab\create_project\链数中建一局_1752461639\crcl-open\src\main\java\com\yljr\crcl\limit\interfaces\LsLimitController.java.backup
2025-07-14 16:10:51 - src.corder_integration.code_generator.interface_adder - INFO - ✅ 已保存更新后的Controller文件: D:\gitlab\create_project\链数中建一局_1752461639\crcl-open\src\main\java\com\yljr\crcl\limit\interfaces\LsLimitController.java
2025-07-14 16:10:51 - src.corder_integration.code_generator.controller_interface_manager - INFO - ✅ Controller LsLimitController 处理完成
2025-07-14 16:10:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功在现有Controller中添加接口: listUnitLimitByCompanyIdExport
2025-07-14 16:10:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔧 使用现有模块处理Service和Mapper层: UnitLimitByCompanyIdExport
2025-07-14 16:10:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 Service决策结果: create_new
2025-07-14 16:10:51 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_010 状态更新为 completed
2025-07-14 16:10:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 任务 task_010 执行成功
2025-07-14 16:10:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 第3轮执行完成，处理了 1 个任务
2025-07-14 16:10:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第4轮任务检查...
2025-07-14 16:10:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第4轮没有可执行的智能编码任务
2025-07-14 16:10:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 3 个任务，共4轮
2025-07-14 16:10:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 3 个任务
2025-07-14 16:10:51 - src.corder_integration.langgraph.workflow_orchestrator - WARNING - 没有识别到任何服务，结束编码流程
2025-07-14 16:10:51 - src.corder_integration.langgraph.workflow_orchestrator - INFO - 工作流执行成功: 链数中建一局_1752480459, 完成服务数: 0
2025-07-14 16:10:51 - werkzeug - INFO - 127.0.0.1 - - [14/Jul/2025 16:10:51] "POST /api/coder-agent/process-document HTTP/1.1" 200 -
2025-07-14 16:27:08 - werkzeug - INFO -  * Detected change in 'D:\\ai_project\\document_analyzer\\src\\corder_integration\\langgraph\\workflow_orchestrator.py', reloading
2025-07-14 16:27:09 - werkzeug - INFO -  * Restarting with stat
2025-07-14 16:27:10 - system - INFO - ==================================================
2025-07-14 16:27:10 - system - INFO - 🚀 智能分析系统日志系统初始化完成
2025-07-14 16:27:10 - system - INFO - 📁 日志根目录: D:\ai_project\document_analyzer\logs
2025-07-14 16:27:10 - system - INFO - 📊 日志级别: INFO
2025-07-14 16:27:10 - system - INFO - 📅 按日期轮转: 每天午夜自动轮转
2025-07-14 16:27:10 - system - INFO - 📂 按月分目录: logs/YYYY-MM/
2025-07-14 16:27:10 - system - INFO - 📝 主日志: logs/2025-07/app.log
2025-07-14 16:27:10 - system - INFO - 🔧 API日志: logs/2025-07/api_server.log
2025-07-14 16:27:10 - system - INFO - 🗂️ 保留天数: 7 天
2025-07-14 16:27:10 - system - INFO - ==================================================
2025-07-14 16:27:18 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-14 16:27:19 - root - WARNING - 智能编码节点不可用: cannot import name 'IntelligentCodingAgent' from partially initialized module 'src.corder_integration.langgraph.nodes.intelligent_coding_node' (most likely due to a circular import) (D:\ai_project\document_analyzer\src\corder_integration\langgraph\nodes\intelligent_coding_node.py)
2025-07-14 16:27:19 - src.utils.task_storage - INFO - 数据库初始化成功
2025-07-14 16:27:19 - markdown_storage - INFO - Markdown存储管理器初始化完成
2025-07-14 16:27:19 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-14 16:27:19 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 16:27:19 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-14 16:27:20 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-14 16:27:20 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-14 16:27:20 - WeaviateVectorDatabase - INFO - ✅ Weaviate连接成功: http://localhost:8080 (gRPC: 50051)
2025-07-14 16:27:20 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/schema/AnalyDesignDocuments "HTTP/1.1 200 OK"
2025-07-14 16:27:20 - WeaviateVectorDatabase - INFO - ✅ Weaviate集合已存在: AnalyDesignDocuments
2025-07-14 16:27:20 - AnalysisServiceManager - INFO - 初始化向量数据库: weaviate
2025-07-14 16:27:20 - sentence_transformers.SentenceTransformer - INFO - Use pytorch device_name: cpu
2025-07-14 16:27:20 - sentence_transformers.SentenceTransformer - INFO - Load pretrained SentenceTransformer: BAAI/bge-large-zh
2025-07-14 16:27:25 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-14 16:27:26 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-14 16:27:26 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-14 16:27:26 - src.utils.weaviate_helper - INFO - 成功连接到 Weaviate: localhost:8080
2025-07-14 16:27:26 - AnalysisServiceManager - INFO - 分析服务管理器初始化完成
2025-07-14 16:27:26 - src.utils.enhanced_analyzer - INFO - 增强分析器初始化完成
2025-07-14 16:27:26 - werkzeug - WARNING -  * Debugger is active!
2025-07-14 16:27:26 - werkzeug - INFO -  * Debugger PIN: 887-537-592
2025-07-14 16:28:50 - werkzeug - INFO -  * Detected change in 'D:\\ai_project\\document_analyzer\\src\\corder_integration\\langgraph\\workflow_orchestrator.py', reloading
2025-07-14 16:28:51 - werkzeug - INFO -  * Restarting with stat
2025-07-14 16:28:51 - system - INFO - ==================================================
2025-07-14 16:28:51 - system - INFO - 🚀 智能分析系统日志系统初始化完成
2025-07-14 16:28:51 - system - INFO - 📁 日志根目录: D:\ai_project\document_analyzer\logs
2025-07-14 16:28:51 - system - INFO - 📊 日志级别: INFO
2025-07-14 16:28:51 - system - INFO - 📅 按日期轮转: 每天午夜自动轮转
2025-07-14 16:28:51 - system - INFO - 📂 按月分目录: logs/YYYY-MM/
2025-07-14 16:28:51 - system - INFO - 📝 主日志: logs/2025-07/app.log
2025-07-14 16:28:51 - system - INFO - 🔧 API日志: logs/2025-07/api_server.log
2025-07-14 16:28:51 - system - INFO - 🗂️ 保留天数: 7 天
2025-07-14 16:28:51 - system - INFO - ==================================================
2025-07-14 16:28:58 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-14 16:28:58 - root - WARNING - 智能编码节点不可用: cannot import name 'IntelligentCodingAgent' from partially initialized module 'src.corder_integration.langgraph.nodes.intelligent_coding_node' (most likely due to a circular import) (D:\ai_project\document_analyzer\src\corder_integration\langgraph\nodes\intelligent_coding_node.py)
2025-07-14 16:28:58 - src.utils.task_storage - INFO - 数据库初始化成功
2025-07-14 16:28:58 - markdown_storage - INFO - Markdown存储管理器初始化完成
2025-07-14 16:28:58 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-14 16:28:58 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 16:28:58 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-14 16:28:59 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-14 16:28:59 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-14 16:28:59 - WeaviateVectorDatabase - INFO - ✅ Weaviate连接成功: http://localhost:8080 (gRPC: 50051)
2025-07-14 16:28:59 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/schema/AnalyDesignDocuments "HTTP/1.1 200 OK"
2025-07-14 16:28:59 - WeaviateVectorDatabase - INFO - ✅ Weaviate集合已存在: AnalyDesignDocuments
2025-07-14 16:28:59 - AnalysisServiceManager - INFO - 初始化向量数据库: weaviate
2025-07-14 16:28:59 - sentence_transformers.SentenceTransformer - INFO - Use pytorch device_name: cpu
2025-07-14 16:28:59 - sentence_transformers.SentenceTransformer - INFO - Load pretrained SentenceTransformer: BAAI/bge-large-zh
2025-07-14 16:29:04 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-14 16:29:05 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-14 16:29:05 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-14 16:29:05 - src.utils.weaviate_helper - INFO - 成功连接到 Weaviate: localhost:8080
2025-07-14 16:29:05 - AnalysisServiceManager - INFO - 分析服务管理器初始化完成
2025-07-14 16:29:05 - src.utils.enhanced_analyzer - INFO - 增强分析器初始化完成
2025-07-14 16:29:05 - werkzeug - WARNING -  * Debugger is active!
2025-07-14 16:29:05 - werkzeug - INFO -  * Debugger PIN: 887-537-592
2025-07-14 16:29:27 - src.apis.coder_agent_api - INFO - 开始处理文档: 链数中建一局_1752481767
2025-07-14 16:29:27 - src.apis.coder_agent_api - INFO - 文档长度: 4931 字符
2025-07-14 16:29:27 - src.apis.coder_agent_api - INFO - 使用LangGraph: True
2025-07-14 16:29:27 - src.apis.coder_agent_api - INFO - 代码输出路径: D:\gitlab\create_project
2025-07-14 16:29:27 - src.apis.coder_agent_api - INFO - 使用LangGraph工作流处理项目: 链数中建一局_1752481767
2025-07-14 16:29:27 - src.corder_integration.langgraph.workflow_orchestrator - INFO - 准备使用异步SQLite检查点: D:\ai_project\document_analyzer\workflow_checkpoints.db
2025-07-14 16:29:27 - src.corder_integration.langgraph.workflow_orchestrator - INFO - 生成目标分支名称: 链数中建一局_1752481767 -> D_20250714_链数中建一局_1752481767
2025-07-14 16:29:27 - src.corder_integration.langgraph.workflow_orchestrator - INFO - 开始执行编码工作流: 链数中建一局_1752481767 -> D:\gitlab\create_project
2025-07-14 16:29:27 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 🚀 开始执行任务拆分: 链数中建一局_1752481767
2025-07-14 16:29:27 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📥 输入状态键: ['design_doc', 'project_name', 'identified_services', 'service_dependencies', 'task_execution_plan', 'parallel_tasks', 'git_repo_url', 'target_branch', 'project_paths', 'output_path', 'repo_initialized', 'generated_services', 'generated_apis', 'generated_sql', 'service_interconnections', 'unit_test_results', 'test_coverage', 'interface_compatibility', 'code_review_results', 'static_analysis_results', 'security_scan_results', 'commit_hashes', 'push_results', 'pr_urls', 'current_phase', 'completed_services', 'failed_services', 'retry_count', 'execution_errors']
2025-07-14 16:29:27 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📄 设计文档长度: 4930
2025-07-14 16:29:27 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 🔄 当前阶段: task_splitting
2025-07-14 16:29:27 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📁 计算的基础项目路径: D:\gitlab\create_project/链数中建一局_1752481767
2025-07-14 16:29:27 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 16:29:27 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 模板 task_splitting/design_analysis_prompts.jinja2 加载成功
2025-07-14 16:29:27 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 模板 task_splitting/service_boundary_prompts.jinja2 加载成功
2025-07-14 16:29:27 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 模板 task_splitting/dependency_analysis_prompts.jinja2 加载成功
2025-07-14 16:29:27 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 模板 task_splitting/task_scheduling_prompts.jinja2 加载成功
2025-07-14 16:29:28 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 模板 task_splitting/generate_sqlite_tasks_prompts.jinja2 加载成功
2025-07-14 16:29:28 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 任务数据库初始化完成
2025-07-14 16:29:28 - src.corder_integration.langgraph.nodes.task_splitting_node - WARNING - ⚠️ 无法删除文件 coding_agent_workflow.db-wal，可能被其他进程占用
2025-07-14 16:29:28 - src.corder_integration.langgraph.nodes.task_splitting_node - WARNING - ⚠️ 无法删除文件 coding_agent_workflow.db-shm，可能被其他进程占用
2025-07-14 16:29:28 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 数据库WAL检查点和优化完成
2025-07-14 16:29:28 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 数据库表结构重置完成
2025-07-14 16:29:28 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📋 步骤1：开始设计文档分析...
2025-07-14 16:29:28 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📄 文档分割完成：4930 字符 -> 3 个窗口
2025-07-14 16:29:28 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📄 设计文档分割成 3 个窗口
2025-07-14 16:29:28 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 分析窗口 1/3 (字符: 0-1926)
2025-07-14 16:29:45 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-14 16:29:45 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 窗口 1 分析完成
2025-07-14 16:29:45 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 分析窗口 2/3 (字符: 1626-3553)
2025-07-14 16:30:00 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-14 16:30:00 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 窗口 2 分析完成
2025-07-14 16:30:00 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 分析窗口 3/3 (字符: 3253-4930)
2025-07-14 16:30:14 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-14 16:30:14 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 窗口 3 分析完成
2025-07-14 16:30:14 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 🔄 合并 3 个设计分析分析结果...
2025-07-14 16:30:14 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📊 合并后的设计分析结果: {'architecture_style': '微服务', 'technology_stack': ['Spring Boot 2.7.x', 'RabbitMQ 3.8', 'pageHelper', 'Spring Boot', 'Redis', 'PageHelper', 'Nacos', 'MyBatis Plus 3.5.x', 'RESTful API', 'Excel导出工具', 'Spring Cloud 2021.x', 'Redis 6.0', 'MySQL 8.0', 'MySQL'], 'functional_modules': [{'name': '用户服务', 'description': '处理用户管理、权限控制和角色管理', 'responsibilities': ['组织单元管理', '用户认证与授权']}, {'name': '确权开立服务', 'description': '处理业务数据的推送和校验逻辑', 'responsibilities': ['业务数据校验', '额度管理', '数据推送']}, {'name': '多组织单元管理', 'description': '管理组织单元的基本信息和状态', 'responsibilities': ['组织单元CRUD', '状态管理', '多组织关联']}, {'name': '确权开立服务', 'description': '处理确权开立和额度管理', 'responsibilities': ['额度分配', '额度查询', '业务类型管理']}, {'name': '额度管理模块', 'description': '处理组织单元额度的查询和导出功能', 'responsibilities': ['额度信息查询', '额度信息导出']}, {'name': '组织单元信息获取模块', 'description': '从用户服务获取组织单元详细信息', 'responsibilities': ['调用外部API获取组织单元信息']}], 'system_components': ['API Gateway', 'Service Discovery', 'crcl-open', 'Database Cluster', 'Redis', 'zqyl-user-center-service', 'MySQL'], 'data_flow': ['组织单元变更 -> 数据库 -> 多组织单元管理服务', 'Redis缓存 -> 用户服务 -> 前端展示', '业务数据 -> 确权开立服务 -> 平台推送', '客户端请求 -> API Gateway -> 确权开立服务 -> 数据库', '用户请求 -> 用户服务 -> 数据库', '客户端请求 -> crcl-open服务 -> 调用zqyl-user-center-service获取组织单元信息 -> 查询数据库 -> 处理数据 -> 返回结果/生成Excel文件', 'Excel文件生成 -> 本地存储 -> 返回文件下载链接'], 'integration_points': ['zqyl-user-center-service的/queryCompanyUnitList接口', 'MySQL数据库连接', 'RabbitMQ消息队列通信', '额度计算引擎(通过bizType集成)', '用户服务与确权开立服务间的API调用', '企业认证系统(通过company_id集成)', 'Redis缓存连接', 'Nacos服务发现与配置中心'], 'summary': '该设计采用微服务架构，分为用户服务和确权开立服务，使用Spring Cloud和Nacos实现服务治理。技术栈成熟且全面，包含MySQL、Redis和RabbitMQ，支持高并发和分布式场景。主要优化点在于接口校验逻辑调整，支持核心企业数据重推，并通过新增组织单元额度功能提升管理灵活性。 该设计采用微服务架构，包含组织单元管理和确权开立两个核心服务。技术栈基于Spring Boot和MySQL，通'}
2025-07-14 16:30:14 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 设计概要: 该设计采用微服务架构，分为用户服务和确权开立服务，使用Spring Cloud和Nacos实现服务治理。技术栈成熟且全面，包含MySQL、Redis和RabbitMQ，支持高并发和分布式场景。主要优化点在于接口校验逻辑调整，支持核心企业数据重推，并通过新增组织单元额度功能提升管理灵活性。 该设计采用微服务架构，包含组织单元管理和确权开立两个核心服务。技术栈基于Spring Boot和MySQL，通
2025-07-14 16:30:14 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 🏗️ 步骤2：开始技术架构分析...
2025-07-14 16:30:14 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 技术架构概要: 该设计采用微服务架构，分为用户服务和确权开立服务，使用Spring Cloud和Nacos实现服务治理。技术栈成熟且全面，包含MySQL、Redis和RabbitMQ，支持高并发和分布式场景。主要优化点在于接口校验逻辑调整，支持核心企业数据重推，并通过新增组织单元额度功能提升管理灵活性。 该设计采用微服务架构，包含组织单元管理和确权开立两个核心服务。技术栈基于Spring Boot和MySQL，通
2025-07-14 16:30:14 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 🔍 步骤3：开始服务边界识别...
2025-07-14 16:30:14 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 输入 - 设计概要: 该设计采用微服务架构，分为用户服务和确权开立服务，使用Spring Cloud和Nacos实现服务治理。技术栈成熟且全面，包含MySQL、Redis和RabbitMQ，支持高并发和分布式场景。主要优化点在于接口校验逻辑调整，支持核心企业数据重推，并通过新增组织单元额度功能提升管理灵活性。 该设计采用微服务架构，包含组织单元管理和确权开立两个核心服务。技术栈基于Spring Boot和MySQL，通
2025-07-14 16:30:14 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 输入 - 架构概要: 该设计采用微服务架构，分为用户服务和确权开立服务，使用Spring Cloud和Nacos实现服务治理。技术栈成熟且全面，包含MySQL、Redis和RabbitMQ，支持高并发和分布式场景。主要优化点在于接口校验逻辑调整，支持核心企业数据重推，并通过新增组织单元额度功能提升管理灵活性。 该设计采用微服务架构，包含组织单元管理和确权开立两个核心服务。技术栈基于Spring Boot和MySQL，通
2025-07-14 16:30:14 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 服务拆分提示词长度: 2333
2025-07-14 16:30:44 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-14 16:30:44 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 服务拆分LLM响应长度: 2806
2025-07-14 16:30:44 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📊 服务拆分解析结果: {'identified_services': [{'name': '用户服务', 'description': '处理用户相关功能的服务', 'git_repository': '设计文档中未提供具体git地址', 'responsibilities': ['用户管理', '权限控制'], 'api_endpoints': [{'method': 'GET', 'path': '/api/users/{id}', 'description': '获取用户信息', 'request_params': 'id: 用户ID', 'response_fields': 'id, name, role', 'special_requirements': '无'}], 'database_tables': [{'table_name': 'users', 'create_sql': '设计文档中未提供具体建表语句', 'description': '存储用户信息'}], 'external_service_calls': [], 'config_requirements': ['MySQL连接配置', 'Redis连接配置']}, {'name': '确权开立服务', 'description': '处理确权开立相关功能的服务', 'git_repository': '设计文档中未提供具体git地址', 'responsibilities': ['确权管理', '额度管理'], 'api_endpoints': [{'method': 'POST', 'path': '/api/rights', 'description': '创建确权', 'request_params': 'orgUnitId: 组织单元ID, amount: 金额', 'response_fields': 'rightId, status', 'special_requirements': '需要调用组织单元管理服务验证组织单元'}], 'database_tables': [{'table_name': 'rights', 'create_sql': '设计文档中未提供具体建表语句', 'description': '存储确权信息'}, {'table_name': 'org_unit_limits', 'create_sql': '设计文档中未提供具体建表语句', 'description': '存储组织单元额度信息'}], 'external_service_calls': [{'target_service': '组织单元管理服务', 'endpoint': '/api/orgUnits/{id}', 'purpose': '验证组织单元有效性'}], 'config_requirements': ['MySQL连接配置', 'RabbitMQ连接配置']}, {'name': '组织单元管理服务', 'description': '管理组织单元的服务', 'git_repository': '设计文档中未提供具体git地址', 'responsibilities': ['组织单元管理'], 'api_endpoints': [{'method': 'GET', 'path': '/api/orgUnits/{id}', 'description': '获取组织单元信息', 'request_params': 'id: 组织单元ID', 'response_fields': 'id, name, status', 'special_requirements': '无'}], 'database_tables': [{'table_name': 'org_units', 'create_sql': '设计文档中未提供具体建表语句', 'description': '存储组织单元信息'}], 'external_service_calls': [], 'config_requirements': ['MySQL连接配置']}], 'service_call_relationships': {'dependencies': [{'caller': '确权开立服务', 'called': '组织单元管理服务', 'interface': '/api/orgUnits/{id}', 'purpose': '验证组织单元有效性'}]}, 'summary': '基于设计文档的服务分析概要，确认涉及3个服务（用户服务、确权开立服务、组织单元管理服务），3个新增接口，4个数据库表'}
2025-07-14 16:30:44 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 🎯 识别的服务列表: [{'name': '用户服务', 'description': '处理用户相关功能的服务', 'git_repository': '设计文档中未提供具体git地址', 'responsibilities': ['用户管理', '权限控制'], 'api_endpoints': [{'method': 'GET', 'path': '/api/users/{id}', 'description': '获取用户信息', 'request_params': 'id: 用户ID', 'response_fields': 'id, name, role', 'special_requirements': '无'}], 'database_tables': [{'table_name': 'users', 'create_sql': '设计文档中未提供具体建表语句', 'description': '存储用户信息'}], 'external_service_calls': [], 'config_requirements': ['MySQL连接配置', 'Redis连接配置']}, {'name': '确权开立服务', 'description': '处理确权开立相关功能的服务', 'git_repository': '设计文档中未提供具体git地址', 'responsibilities': ['确权管理', '额度管理'], 'api_endpoints': [{'method': 'POST', 'path': '/api/rights', 'description': '创建确权', 'request_params': 'orgUnitId: 组织单元ID, amount: 金额', 'response_fields': 'rightId, status', 'special_requirements': '需要调用组织单元管理服务验证组织单元'}], 'database_tables': [{'table_name': 'rights', 'create_sql': '设计文档中未提供具体建表语句', 'description': '存储确权信息'}, {'table_name': 'org_unit_limits', 'create_sql': '设计文档中未提供具体建表语句', 'description': '存储组织单元额度信息'}], 'external_service_calls': [{'target_service': '组织单元管理服务', 'endpoint': '/api/orgUnits/{id}', 'purpose': '验证组织单元有效性'}], 'config_requirements': ['MySQL连接配置', 'RabbitMQ连接配置']}, {'name': '组织单元管理服务', 'description': '管理组织单元的服务', 'git_repository': '设计文档中未提供具体git地址', 'responsibilities': ['组织单元管理'], 'api_endpoints': [{'method': 'GET', 'path': '/api/orgUnits/{id}', 'description': '获取组织单元信息', 'request_params': 'id: 组织单元ID', 'response_fields': 'id, name, status', 'special_requirements': '无'}], 'database_tables': [{'table_name': 'org_units', 'create_sql': '设计文档中未提供具体建表语句', 'description': '存储组织单元信息'}], 'external_service_calls': [], 'config_requirements': ['MySQL连接配置']}]
2025-07-14 16:30:44 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 🔢 识别的服务数量: 3
2025-07-14 16:30:44 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 服务拆分概要: 基于设计文档的服务分析概要，确认涉及3个服务（用户服务、确权开立服务、组织单元管理服务），3个新增接口，4个数据库表
2025-07-14 16:30:44 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 🌐 步骤4：开始依赖分析...
2025-07-14 16:30:44 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 依赖分析提示词长度: 2354
2025-07-14 16:31:22 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-14 16:31:22 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 依赖分析LLM响应长度: 2611
2025-07-14 16:31:22 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📊 依赖分析解析结果: {'service_dependencies': {'用户服务': {'database_dependencies': [{'database_type': 'MySQL', 'config_info': '用户信息存储', 'tables_needed': ['user_info'], 'description': '存储用户基础信息'}], 'api_call_dependencies': [], 'provides_apis': [{'endpoint': '/api/user/{userId}', 'used_by': ['确权开立服务']}]}, '组织单元管理服务': {'database_dependencies': [{'database_type': 'MySQL', 'config_info': '组织单元信息存储', 'tables_needed': ['org_unit', 'org_unit_quota'], 'description': '存储组织单元信息及额度配置'}], 'api_call_dependencies': [], 'provides_apis': [{'endpoint': '/api/org-unit/{orgUnitId}', 'used_by': ['确权开立服务']}, {'endpoint': '/api/org-unit/quota/{orgUnitId}', 'used_by': ['确权开立服务']}]}, '确权开立服务': {'database_dependencies': [{'database_type': 'MySQL', 'config_info': '确权信息存储', 'tables_needed': ['entitlement'], 'description': '存储确权开立记录'}], 'api_call_dependencies': [{'target_service': '用户服务', 'target_endpoint': '/api/user/{userId}', 'call_purpose': '获取用户信息', 'dependency_type': '强依赖'}, {'target_service': '组织单元管理服务', 'target_endpoint': '/api/org-unit/{orgUnitId}', 'call_purpose': '获取组织单元信息', 'dependency_type': '强依赖'}, {'target_service': '组织单元管理服务', 'target_endpoint': '/api/org-unit/quota/{orgUnitId}', 'call_purpose': '获取组织单元额度', 'dependency_type': '强依赖'}], 'provides_apis': []}}, 'development_order': [{'phase': 1, 'services': ['用户服务', '组织单元管理服务'], 'tasks': ['创建user_info表', '创建org_unit和org_unit_quota表', '实现用户信息查询接口', '实现组织单元信息及额度查询接口'], 'reason': '确权开立服务强依赖这两个服务的接口'}, {'phase': 2, 'services': ['确权开立服务'], 'tasks': ['创建entitlement表', '实现确权开立业务逻辑', '集成用户服务和组织单元管理服务接口'], 'reason': '依赖第一阶段服务的接口'}], 'critical_path': ['用户服务 -> 确权开立服务', '组织单元管理服务 -> 确权开立服务'], 'parallel_development': [{'phase': '阶段1', 'parallel_services': ['用户服务', '组织单元管理服务'], 'reason': '这两个服务之间没有直接依赖关系'}], 'summary': '分析了3个服务的依赖关系，建议分2个阶段开发，关键路径为用户服务和组织单元管理服务到确权开立服务的依赖'}
2025-07-14 16:31:22 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 依赖分析概要: 分析了3个服务的依赖关系，建议分2个阶段开发，关键路径为用户服务和组织单元管理服务到确权开立服务的依赖
2025-07-14 16:31:22 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📅 步骤5：开始制定执行计划...
2025-07-14 16:31:22 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 任务调度提示词长度: 6255
2025-07-14 16:33:02 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-14 16:33:02 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 任务调度LLM响应长度: 9635
2025-07-14 16:33:02 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📊 执行计划解析结果: {'execution_phases': [{'phase_name': '基础设施搭建阶段', 'phase_order': 1, 'description': '搭建项目基础设施，包括数据库、配置服务、监控等', 'estimated_duration': '3天', 'services_involved': ['全部服务'], 'task_categories': [{'category': 'database', 'description': '数据库基础设施', 'tasks': [{'task_name': '创建MySQL数据库实例', 'service': '基础设施', 'deliverable': '3个服务的数据库实例', 'estimated_hours': 4, 'prerequisites': [], 'assignee_role': 'DBA'}, {'task_name': '设计用户服务表结构', 'service': '用户服务', 'deliverable': '用户表SQL脚本', 'estimated_hours': 6, 'prerequisites': ['数据库实例'], 'assignee_role': '后端开发'}, {'task_name': '设计确权开立服务表结构', 'service': '确权开立服务', 'deliverable': '确权表SQL脚本', 'estimated_hours': 8, 'prerequisites': ['数据库实例'], 'assignee_role': '后端开发'}, {'task_name': '设计组织单元管理表结构', 'service': '组织单元管理服务', 'deliverable': '组织单元表SQL脚本', 'estimated_hours': 6, 'prerequisites': ['数据库实例'], 'assignee_role': '后端开发'}]}, {'category': 'config', 'description': '配置管理服务', 'tasks': [{'task_name': '搭建Nacos配置中心', 'service': '基础设施', 'deliverable': 'Nacos服务', 'estimated_hours': 4, 'prerequisites': [], 'assignee_role': '运维工程师'}, {'task_name': '配置服务注册发现', 'service': '基础设施', 'deliverable': '服务注册配置', 'estimated_hours': 3, 'prerequisites': ['Nacos配置中心'], 'assignee_role': '运维工程师'}]}, {'category': 'monitoring', 'description': '监控配置', 'tasks': [{'task_name': '搭建Prometheus监控', 'service': '基础设施', 'deliverable': '监控系统', 'estimated_hours': 4, 'prerequisites': [], 'assignee_role': '运维工程师'}]}], 'success_criteria': ['数据库正常连接', '配置中心可用', '监控系统就绪', '基础环境验证通过'], 'parallel_execution': True}, {'phase_name': '核心服务开发阶段', 'phase_order': 2, 'description': '开发核心业务服务，按依赖关系分阶段实施', 'estimated_duration': '7天', 'services_involved': ['用户服务', '组织单元管理服务', '确权开立服务'], 'task_categories': [{'category': 'api', 'description': 'API接口开发', 'tasks': [{'task_name': '实现用户服务接口', 'service': '用户服务', 'deliverable': '用户服务API', 'estimated_hours': 8, 'prerequisites': ['用户表创建'], 'assignee_role': '后端开发'}, {'task_name': '实现组织单元管理接口', 'service': '组织单元管理服务', 'deliverable': '组织单元API', 'estimated_hours': 10, 'prerequisites': ['组织单元表创建'], 'assignee_role': '后端开发'}, {'task_name': '实现确权开立接口', 'service': '确权开立服务', 'deliverable': '确权API', 'estimated_hours': 12, 'prerequisites': ['确权表创建', '用户服务API完成', '组织单元API完成'], 'assignee_role': '后端开发'}]}, {'category': 'service', 'description': '业务逻辑实现', 'tasks': [{'task_name': '用户服务业务逻辑', 'service': '用户服务', 'deliverable': '用户服务实现', 'estimated_hours': 12, 'prerequisites': ['用户接口'], 'assignee_role': '后端开发'}, {'task_name': '组织单元管理业务逻辑', 'service': '组织单元管理服务', 'deliverable': '组织单元服务实现', 'estimated_hours': 16, 'prerequisites': ['组织单元接口'], 'assignee_role': '后端开发'}, {'task_name': '确权开立业务逻辑', 'service': '确权开立服务', 'deliverable': '确权服务实现', 'estimated_hours': 20, 'prerequisites': ['确权接口', '用户服务完成', '组织单元服务完成'], 'assignee_role': '后端开发'}]}, {'category': 'test', 'description': '单元测试', 'tasks': [{'task_name': '用户服务单元测试', 'service': '用户服务', 'deliverable': '单元测试报告', 'estimated_hours': 6, 'prerequisites': ['用户服务实现'], 'assignee_role': '测试工程师'}, {'task_name': '组织单元单元测试', 'service': '组织单元管理服务', 'deliverable': '单元测试报告', 'estimated_hours': 8, 'prerequisites': ['组织单元服务实现'], 'assignee_role': '测试工程师'}, {'task_name': '确权开立单元测试', 'service': '确权开立服务', 'deliverable': '单元测试报告', 'estimated_hours': 10, 'prerequisites': ['确权服务实现'], 'assignee_role': '测试工程师'}]}], 'success_criteria': ['核心API开发完成', '业务逻辑测试通过', '单元测试覆盖率达标'], 'parallel_execution': True}, {'phase_name': '服务集成阶段', 'phase_order': 3, 'description': '服务间集成、联调测试', 'estimated_duration': '4天', 'services_involved': ['用户服务', '组织单元管理服务', '确权开立服务'], 'task_categories': [{'category': 'integration', 'description': '服务集成', 'tasks': [{'task_name': '用户服务与确权服务集成', 'service': '集成', 'deliverable': '集成测试用例', 'estimated_hours': 8, 'prerequisites': ['所有服务开发完成'], 'assignee_role': '测试工程师'}, {'task_name': '组织单元与确权服务集成', 'service': '集成', 'deliverable': '集成测试用例', 'estimated_hours': 8, 'prerequisites': ['所有服务开发完成'], 'assignee_role': '测试工程师'}]}, {'category': 'e2e', 'description': '端到端测试', 'tasks': [{'task_name': '全链路测试', 'service': '测试', 'deliverable': '端到端测试报告', 'estimated_hours': 12, 'prerequisites': ['服务集成完成'], 'assignee_role': '测试工程师'}]}], 'success_criteria': ['服务间调用正常', '端到端测试通过', '数据一致性验证'], 'parallel_execution': False}, {'phase_name': '部署上线阶段', 'phase_order': 4, 'description': '生产环境部署、监控配置', 'estimated_duration': '3天', 'services_involved': ['全部服务'], 'task_categories': [{'category': 'deployment', 'description': '部署配置', 'tasks': [{'task_name': '容器化部署配置', 'service': '基础设施', 'deliverable': 'Docker配置文件', 'estimated_hours': 8, 'prerequisites': ['集成测试通过'], 'assignee_role': '运维工程师'}, {'task_name': '生产环境部署', 'service': '部署', 'deliverable': '生产环境服务', 'estimated_hours': 8, 'prerequisites': ['容器化配置完成'], 'assignee_role': '运维工程师'}]}, {'category': 'monitoring', 'description': '生产监控', 'tasks': [{'task_name': '生产监控配置', 'service': '监控', 'deliverable': '生产监控仪表盘', 'estimated_hours': 6, 'prerequisites': ['生产环境部署'], 'assignee_role': '运维工程师'}]}], 'success_criteria': ['生产环境稳定运行', '监控告警正常', '服务SLA达标'], 'parallel_execution': False}], 'parallel_groups': [{'group_name': '独立服务并行组', 'group_order': 1, 'services': ['用户服务', '组织单元管理服务'], 'estimated_duration': '7天', 'description': '无依赖关系的服务可并行开发', 'coordination_points': ['API设计评审', '数据模型确认']}, {'group_name': '依赖服务组', 'group_order': 2, 'services': ['确权开立服务'], 'estimated_duration': '7天', 'description': '依赖前两个服务的开发', 'coordination_points': ['用户服务API稳定', '组织单元API稳定']}], 'execution_order': ['基础设施搭建', '用户服务开发(并行)', '组织单元服务开发(并行)', '确权服务开发', '服务集成测试', '生产环境部署'], 'resource_allocation': {'backend_developers': 4, 'test_engineers': 2, 'devops_engineers': 2, 'dba': 1, 'total_estimated_time': '17天'}, 'risk_management': {'critical_dependencies': [{'task': '确权服务开发', 'risk': '关键路径依赖', 'mitigation': '预留20%缓冲时间'}, {'task': '数据库设计', 'risk': '设计变更影响', 'mitigation': '提前评审数据模型'}], 'buffer_time': '20%', 'contingency_plans': ['关键开发人员备份', '紧急回滚方案', '备用环境准备']}, 'summary': '项目分为4个阶段，预计17天完成。关键路径为确权服务开发，需重点关注用户服务和组织单元服务的进度。'}
2025-07-14 16:33:02 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 💾 步骤6：开始生成SQLite任务...
2025-07-14 16:33:02 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📄 执行计划较长(10479字符)，使用滑动窗口处理
2025-07-14 16:33:02 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📄 文档分割完成：10479 字符 -> 7 个窗口
2025-07-14 16:33:02 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 处理计划窗口 1/7
2025-07-14 16:35:26 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-14 16:35:26 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 窗口 1 任务生成完成
2025-07-14 16:35:26 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 处理计划窗口 2/7
2025-07-14 16:37:56 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-14 16:37:56 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 窗口 2 任务生成完成
2025-07-14 16:37:56 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 处理计划窗口 3/7
2025-07-14 16:40:35 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-14 16:40:35 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 窗口 3 任务生成完成
2025-07-14 16:40:35 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 处理计划窗口 4/7
2025-07-14 16:43:09 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-14 16:43:09 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 窗口 4 任务生成完成
2025-07-14 16:43:09 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 处理计划窗口 5/7
2025-07-14 16:45:48 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-14 16:45:48 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 窗口 5 任务生成完成
2025-07-14 16:45:48 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 处理计划窗口 6/7
2025-07-14 16:48:22 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-14 16:48:22 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 窗口 6 任务生成完成
2025-07-14 16:48:22 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 处理计划窗口 7/7
2025-07-14 16:50:49 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-14 16:50:49 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 窗口 7 任务生成完成
2025-07-14 16:50:49 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 🔄 合并 7 个任务生成分析结果...
2025-07-14 16:50:49 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📊 任务生成解析结果: {'tasks': [{'task_id': 'task_001', 'service_name': '系统', 'task_type': 'git_extraction', 'priority': 1, 'dependencies': [], 'estimated_duration': '5分钟', 'description': '从设计文档提取GitLab仓库地址', 'implementation_details': '解析设计文档，提取用户服务 http://gitlab.local/ls/zqyl-user-center-service.git 和确权开立服务 http://gitlab.local/ls/crcl-open.git 仓库地址', 'deliverables': ['GitLab仓库地址清单', '仓库访问验证报告'], 'completion_criteria': '成功提取并验证两个GitLab仓库地址可访问性', 'parameters': {'repositories': ['zqyl-user-center-service', 'crcl-open']}}, {'task_id': 'task_002', 'service_name': '用户服务', 'task_type': 'git_clone', 'priority': 2, 'dependencies': ['task_001'], 'estimated_duration': '10分钟', 'description': '下载用户服务代码到D:\\gitlab\\create_project/链数中建一局_1752481767/zqyl-user-center-service', 'implementation_details': '使用git clone命令下载用户服务代码到指定目录，确保项目结构完整可编译', 'deliverables': ['用户服务源码目录'], 'completion_criteria': '代码下载完成，项目目录存在且包含pom.xml文件', 'parameters': {'git_url': 'http://gitlab.local/ls/zqyl-user-center-service.git', 'local_path': 'D:\\gitlab\\create_project/链数中建一局_1752481767/zqyl-user-center-service'}}, {'task_id': 'task_003', 'service_name': '确权开立服务', 'task_type': 'git_clone', 'priority': 2, 'dependencies': ['task_001'], 'estimated_duration': '10分钟', 'description': '下载确权开立服务代码到D:\\gitlab\\create_project/链数中建一局_1752481767/crcl-open', 'implementation_details': '使用git clone命令下载确权开立服务代码到指定目录，确保项目结构完整可编译', 'deliverables': ['确权开立服务源码目录'], 'completion_criteria': '代码下载完成，项目目录存在且包含pom.xml文件', 'parameters': {'git_url': 'http://gitlab.local/ls/crcl-open.git', 'local_path': 'D:\\gitlab\\create_project/链数中建一局_1752481767/crcl-open'}}, {'task_id': 'task_004', 'service_name': '用户服务', 'task_type': 'code_analysis', 'priority': 3, 'dependencies': ['task_002'], 'estimated_duration': '20分钟', 'description': '分析用户服务代码结构，确定MultiorgManageController添加位置', 'implementation_details': '分析项目package结构和controller层，找到或创建MultiorgManageController类的最佳位置', 'deliverables': ['代码结构从Controller层开始到数据获取的完整路径'], 'completion_criteria': '确定MultiorgManageController的包路径和文件位置，明确依赖的Service层结构', 'parameters': {'project_path': 'D:\\gitlab\\create_project/链数中建一局_1752481767/zqyl-user-center-service', 'target_controller': 'MultiorgManageController', 'target_api': '/general/multiorgManage/queryCompanyUnitList'}}, {'task_id': 'task_005', 'service_name': '确权开立服务', 'task_type': 'code_analysis', 'priority': 3, 'dependencies': ['task_003'], 'estimated_duration': '20分钟', 'description': '分析确权开立服务代码结构，确定LsLimitController添加位置', 'implementation_details': '分析项目package结构和controller层，找到或创建LsLimitController类的最佳位置，支持两个接口开发', 'deliverables': ['代码结构从Controller层开始到数据获取的完整路径', 'Feign客户端配置方案'], 'completion_criteria': '确定LsLimitController的包路径和文件位置，明确服务间调用的Feign配置', 'parameters': {'project_path': 'D:\\gitlab\\create_project/链数中建一局_1752481767/crcl-open', 'target_controller': 'LsLimitController', 'target_apis': ['/crcl-open-api/lsLimit/listUnitLimitByCompanyId', '/crcl-open-api/lsLimit/listUnitLimitByCompanyIdExport']}}, {'task_id': 'task_006', 'service_name': '用户服务', 'task_type': 'config', 'priority': 4, 'dependencies': ['task_004'], 'estimated_duration': '15分钟', 'description': '配置用户服务数据库连接：jdbc:mysql://localhost:6446/dbwebappdb', 'implementation_details': '修改application.yml文件，配置数据库连接信息包括URL、用户名密码和连接池设置', 'deliverables': ['数据库配置文件', '连接测试报告'], 'completion_criteria': 'application.yml文件已更新，数据库连接配置正确且可连通', 'parameters': {'config_file': 'D:\\gitlab\\create_project/链数中建一局_1752481767/zqyl-user-center-service/src/main/resources/application.yml', 'database_url': 'jdbc:mysql://localhost:6446/dbwebappdb?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC&characterEncoding=utf8&useUnicode=true', 'username': 'dbwebapp', 'password': 'dbwebapp'}}, {'task_id': 'task_007', 'service_name': '用户服务', 'task_type': 'database', 'priority': 5, 'dependencies': ['task_006'], 'estimated_duration': '15分钟', 'description': '创建t_cust_multiorg_unit表，包含id,company_id,unit_code,unit_name等字段', 'implementation_details': '编写建表SQL脚本，定义主键、索引和字段约束，创建对应的Entity和Mapper文件', 'deliverables': ['建表SQL脚本', 'Entity实体类', 'Mapper接口文件'], 'completion_criteria': '表结构创建成功，Entity和Mapper文件可正常编译，支持基本CRUD操作', 'parameters': {'table_name': 't_cust_multiorg_unit', 'sql_location': 'src/main/resources/sql/t_cust_multiorg_unit.sql'}}, {'task_id': 'task_008', 'service_name': '用户服务', 'task_type': 'api', 'priority': 6, 'dependencies': ['task_007'], 'estimated_duration': '60分钟', 'description': '实现GET /general/multiorgManage/queryCompanyUnitList接口', 'implementation_details': '在MultiorgManageController中实现查询接口，支持条件查询和分页，返回规定的字段格式', 'deliverables': ['MultiorgManageController类', 'Service业务逻辑层', '接口文档'], 'completion_criteria': '接口可正常访问，返回数据格式符合规范，支持条件查询和分页功能', 'parameters': {'project_path': 'D:\\gitlab\\create_project/链数中建一局_1752481767/zqyl-user-center-service', 'api_path': '/general/multiorgManage/queryCompanyUnitList', 'http_method': 'GET', 'content_type': 'application/json', 'request_params': {'unitCode': '组织单元编码(可选)', 'openStatus': '开通状态(可选)', 'unitList': '组织单元列表(可选)'}, 'response_params': {'unitId': '组织单元ID', 'unitTypeDicType': '组织单元类型字典类型', 'unitTypeId': '组织单元类型ID', 'openStatus': '开通状态', 'unitCode': '组织单元编码', 'unitName': '组织单元名称'}, 'business_logic': '根据查询条件查询组织单元信息，支持按编码、状态等条件筛选', 'data_source': 't_cust_multiorg_unit表', 'validation_rules': {'unitCode': '长度不超过50字符', 'openStatus': '取值范围0-1'}}}, {'task_id': 'task_009', 'service_name': '确权开立服务', 'task_type': 'api', 'priority': 7, 'dependencies': ['task_008'], 'estimated_duration': '90分钟', 'description': '实现GET /crcl-open-api/lsLimit/listUnitLimitByCompanyId接口，调用用户服务', 'implementation_details': '在LsLimitController中实现额度查询接口，配置Feign客户端调用用户服务接口获取组织单元信息', 'deliverables': ['LsLimitController类', 'Feign客户端配置', '业务逻辑层'], 'completion_criteria': '接口可正常访问，能成功调用用户服务，返回额度数据格式正确', 'parameters': {'project_path': 'D:\\gitlab\\create_project/链数中建一局_1752481767/crcl-open', 'api_path': '/crcl-open-api/lsLimit/listUnitLimitByCompanyId', 'http_method': 'GET', 'content_type': 'application/json', 'request_params': {'gwCompanyId': '公司ID(必填)', 'unitName': '组织单元名称(可选)', 'limitSource': '额度来源(可选)', 'bizType': '业务类型(必填)', 'page': '页码(可选,默认1)', 'pageRow': '每页行数(可选,默认10)'}, 'response_params': {'totalLimitAmt': '总额度金额', 'usedLimitAmt': '已用额度金额', 'usableLimitAmt': '可用额度金额', 'unitLimitListDetail': '单元额度详情列表'}, 'business_logic': '根据公司ID和筛选条件查询组织单元额度信息，调用用户服务获取组织单元基础信息', 'data_source': '本地额度表 + 用户服务接口', 'external_call': '/general/multiorgManage/queryCompanyUnitList', 'validation_rules': {'gwCompanyId': '必填，数值类型', 'bizType': '必填，业务类型枚举值', 'page': '正整数，默认1', 'pageRow': '正整数，范围1-100'}}}, {'task_id': 'task_010', 'service_name': '确权开立服务', 'task_type': 'api', 'priority': 8, 'dependencies': ['task_009'], 'estimated_duration': '45分钟', 'description': '实现GET /crcl-open-api/lsLimit/listUnitLimitByCompanyIdExport导出接口', 'implementation_details': '在LsLimitController中实现Excel导出接口，复用listUnitLimitByCompanyId的数据逻辑', 'deliverables': ['导出接口方法', 'Excel工具类', '导出模板文件'], 'completion_criteria': '接口可正常访问，能成功导出Excel文件，表头和数据格式正确', 'parameters': {'project_path': 'D:\\gitlab\\create_project/链数中建一局_1752481767/crcl-open', 'api_path': '/crcl-open-api/lsLimit/listUnitLimitByCompanyIdExport', 'http_method': 'GET', 'content_type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'request_params': {'gwCompanyId': '公司ID(必填)', 'unitName': '组织单元名称(可选)', 'limitSource': '额度来源(可选)', 'bizType': '业务类型(必填)'}, 'response_params': {'file': 'Excel文件流', 'filename': '导出文件名', 'contentType': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'}, 'business_logic': '复用listUnitLimitByCompanyId接口的查询逻辑，将结果导出为Excel格式', 'data_source': '调用listUnitLimitByCompanyId接口获取数据', 'export_format': 'xlsx', 'export_headers': ['组织单元名称', '额度名称', '额度类型', '已分配额度', '已用额度', '可用额度'], 'validation_rules': {'gwCompanyId': '必填，数值类型', 'bizType': '必填，业务类型枚举值'}}}, {'task_id': 'task_011', 'service_name': '系统', 'task_type': 'integration_test', 'priority': 9, 'dependencies': ['task_008', 'task_009', 'task_010'], 'estimated_duration': '30分钟', 'description': '测试确权开立服务调用用户服务接口的完整流程', 'implementation_details': '编写集成测试用例，验证服务间调用正确性和数据完整性', 'deliverables': ['集成测试用例', '测试数据脚本', '测试报告'], 'completion_criteria': '所有测试用例通过，接口调用链路正常，数据返回格式正确', 'parameters': {'test_scenarios': ['组织单元额度查询测试'], 'test_data': {'gwCompanyId': 1, 'unitName': '测试单元', 'bizType': 80}}}, {'task_id': 'task_012', 'service_name': '系统', 'task_type': 'deployment', 'priority': 10, 'dependencies': ['task_011'], 'estimated_duration': '20分钟', 'description': '提交代码到GitLab仓库，commit message: feat: 新增组织单元额度管理功能', 'implementation_details': '执行git add、git commit和git push命令，提交所有新增和修改的代码文件', 'deliverables': ['Git提交记录', '代码合并报告', '部署文档'], 'completion_criteria': '代码成功提交到GitLab仓库，commit信息清晰，无冲突', 'parameters': {'repositories': [{'path': 'D:\\gitlab\\create_project/链数中建一局_1752481767/zqyl-user-center-service', 'changes': '新增组织单元查询接口'}, {'path': 'D:\\gitlab\\create_project/链数中建一局_1752481767/crcl-open', 'changes': '新增组织单元额度列表和导出接口'}]}}], 'total_tasks': 12, 'summary': '生成12个任务：GitLab代码下载->结构分析->环境配置->接口开发->测试部署。严格使用设计文档中的真实接口路径和参数，确保先开发用户服务接口，再开发依赖它的确权开立服务接口。 生成12个任务：GitLab代码下载->结构分析->环境配置->接口开发->测试部署。严格使用设计文档中的真实接口路径和参数，确保先开发用户服务接口，再开发依赖它的确权开立服务接口。 生成12个任务：GitLab代码'}
2025-07-14 16:50:49 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 🎯 生成的任务列表: [{'task_id': 'task_001', 'service_name': '系统', 'task_type': 'git_extraction', 'priority': 1, 'dependencies': [], 'estimated_duration': '5分钟', 'description': '从设计文档提取GitLab仓库地址', 'implementation_details': '解析设计文档，提取用户服务 http://gitlab.local/ls/zqyl-user-center-service.git 和确权开立服务 http://gitlab.local/ls/crcl-open.git 仓库地址', 'deliverables': ['GitLab仓库地址清单', '仓库访问验证报告'], 'completion_criteria': '成功提取并验证两个GitLab仓库地址可访问性', 'parameters': {'repositories': ['zqyl-user-center-service', 'crcl-open']}}, {'task_id': 'task_002', 'service_name': '用户服务', 'task_type': 'git_clone', 'priority': 2, 'dependencies': ['task_001'], 'estimated_duration': '10分钟', 'description': '下载用户服务代码到D:\\gitlab\\create_project/链数中建一局_1752481767/zqyl-user-center-service', 'implementation_details': '使用git clone命令下载用户服务代码到指定目录，确保项目结构完整可编译', 'deliverables': ['用户服务源码目录'], 'completion_criteria': '代码下载完成，项目目录存在且包含pom.xml文件', 'parameters': {'git_url': 'http://gitlab.local/ls/zqyl-user-center-service.git', 'local_path': 'D:\\gitlab\\create_project/链数中建一局_1752481767/zqyl-user-center-service'}}, {'task_id': 'task_003', 'service_name': '确权开立服务', 'task_type': 'git_clone', 'priority': 2, 'dependencies': ['task_001'], 'estimated_duration': '10分钟', 'description': '下载确权开立服务代码到D:\\gitlab\\create_project/链数中建一局_1752481767/crcl-open', 'implementation_details': '使用git clone命令下载确权开立服务代码到指定目录，确保项目结构完整可编译', 'deliverables': ['确权开立服务源码目录'], 'completion_criteria': '代码下载完成，项目目录存在且包含pom.xml文件', 'parameters': {'git_url': 'http://gitlab.local/ls/crcl-open.git', 'local_path': 'D:\\gitlab\\create_project/链数中建一局_1752481767/crcl-open'}}, {'task_id': 'task_004', 'service_name': '用户服务', 'task_type': 'code_analysis', 'priority': 3, 'dependencies': ['task_002'], 'estimated_duration': '20分钟', 'description': '分析用户服务代码结构，确定MultiorgManageController添加位置', 'implementation_details': '分析项目package结构和controller层，找到或创建MultiorgManageController类的最佳位置', 'deliverables': ['代码结构从Controller层开始到数据获取的完整路径'], 'completion_criteria': '确定MultiorgManageController的包路径和文件位置，明确依赖的Service层结构', 'parameters': {'project_path': 'D:\\gitlab\\create_project/链数中建一局_1752481767/zqyl-user-center-service', 'target_controller': 'MultiorgManageController', 'target_api': '/general/multiorgManage/queryCompanyUnitList'}}, {'task_id': 'task_005', 'service_name': '确权开立服务', 'task_type': 'code_analysis', 'priority': 3, 'dependencies': ['task_003'], 'estimated_duration': '20分钟', 'description': '分析确权开立服务代码结构，确定LsLimitController添加位置', 'implementation_details': '分析项目package结构和controller层，找到或创建LsLimitController类的最佳位置，支持两个接口开发', 'deliverables': ['代码结构从Controller层开始到数据获取的完整路径', 'Feign客户端配置方案'], 'completion_criteria': '确定LsLimitController的包路径和文件位置，明确服务间调用的Feign配置', 'parameters': {'project_path': 'D:\\gitlab\\create_project/链数中建一局_1752481767/crcl-open', 'target_controller': 'LsLimitController', 'target_apis': ['/crcl-open-api/lsLimit/listUnitLimitByCompanyId', '/crcl-open-api/lsLimit/listUnitLimitByCompanyIdExport']}}, {'task_id': 'task_006', 'service_name': '用户服务', 'task_type': 'config', 'priority': 4, 'dependencies': ['task_004'], 'estimated_duration': '15分钟', 'description': '配置用户服务数据库连接：jdbc:mysql://localhost:6446/dbwebappdb', 'implementation_details': '修改application.yml文件，配置数据库连接信息包括URL、用户名密码和连接池设置', 'deliverables': ['数据库配置文件', '连接测试报告'], 'completion_criteria': 'application.yml文件已更新，数据库连接配置正确且可连通', 'parameters': {'config_file': 'D:\\gitlab\\create_project/链数中建一局_1752481767/zqyl-user-center-service/src/main/resources/application.yml', 'database_url': 'jdbc:mysql://localhost:6446/dbwebappdb?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC&characterEncoding=utf8&useUnicode=true', 'username': 'dbwebapp', 'password': 'dbwebapp'}}, {'task_id': 'task_007', 'service_name': '用户服务', 'task_type': 'database', 'priority': 5, 'dependencies': ['task_006'], 'estimated_duration': '15分钟', 'description': '创建t_cust_multiorg_unit表，包含id,company_id,unit_code,unit_name等字段', 'implementation_details': '编写建表SQL脚本，定义主键、索引和字段约束，创建对应的Entity和Mapper文件', 'deliverables': ['建表SQL脚本', 'Entity实体类', 'Mapper接口文件'], 'completion_criteria': '表结构创建成功，Entity和Mapper文件可正常编译，支持基本CRUD操作', 'parameters': {'table_name': 't_cust_multiorg_unit', 'sql_location': 'src/main/resources/sql/t_cust_multiorg_unit.sql'}}, {'task_id': 'task_008', 'service_name': '用户服务', 'task_type': 'api', 'priority': 6, 'dependencies': ['task_007'], 'estimated_duration': '60分钟', 'description': '实现GET /general/multiorgManage/queryCompanyUnitList接口', 'implementation_details': '在MultiorgManageController中实现查询接口，支持条件查询和分页，返回规定的字段格式', 'deliverables': ['MultiorgManageController类', 'Service业务逻辑层', '接口文档'], 'completion_criteria': '接口可正常访问，返回数据格式符合规范，支持条件查询和分页功能', 'parameters': {'project_path': 'D:\\gitlab\\create_project/链数中建一局_1752481767/zqyl-user-center-service', 'api_path': '/general/multiorgManage/queryCompanyUnitList', 'http_method': 'GET', 'content_type': 'application/json', 'request_params': {'unitCode': '组织单元编码(可选)', 'openStatus': '开通状态(可选)', 'unitList': '组织单元列表(可选)'}, 'response_params': {'unitId': '组织单元ID', 'unitTypeDicType': '组织单元类型字典类型', 'unitTypeId': '组织单元类型ID', 'openStatus': '开通状态', 'unitCode': '组织单元编码', 'unitName': '组织单元名称'}, 'business_logic': '根据查询条件查询组织单元信息，支持按编码、状态等条件筛选', 'data_source': 't_cust_multiorg_unit表', 'validation_rules': {'unitCode': '长度不超过50字符', 'openStatus': '取值范围0-1'}}}, {'task_id': 'task_009', 'service_name': '确权开立服务', 'task_type': 'api', 'priority': 7, 'dependencies': ['task_008'], 'estimated_duration': '90分钟', 'description': '实现GET /crcl-open-api/lsLimit/listUnitLimitByCompanyId接口，调用用户服务', 'implementation_details': '在LsLimitController中实现额度查询接口，配置Feign客户端调用用户服务接口获取组织单元信息', 'deliverables': ['LsLimitController类', 'Feign客户端配置', '业务逻辑层'], 'completion_criteria': '接口可正常访问，能成功调用用户服务，返回额度数据格式正确', 'parameters': {'project_path': 'D:\\gitlab\\create_project/链数中建一局_1752481767/crcl-open', 'api_path': '/crcl-open-api/lsLimit/listUnitLimitByCompanyId', 'http_method': 'GET', 'content_type': 'application/json', 'request_params': {'gwCompanyId': '公司ID(必填)', 'unitName': '组织单元名称(可选)', 'limitSource': '额度来源(可选)', 'bizType': '业务类型(必填)', 'page': '页码(可选,默认1)', 'pageRow': '每页行数(可选,默认10)'}, 'response_params': {'totalLimitAmt': '总额度金额', 'usedLimitAmt': '已用额度金额', 'usableLimitAmt': '可用额度金额', 'unitLimitListDetail': '单元额度详情列表'}, 'business_logic': '根据公司ID和筛选条件查询组织单元额度信息，调用用户服务获取组织单元基础信息', 'data_source': '本地额度表 + 用户服务接口', 'external_call': '/general/multiorgManage/queryCompanyUnitList', 'validation_rules': {'gwCompanyId': '必填，数值类型', 'bizType': '必填，业务类型枚举值', 'page': '正整数，默认1', 'pageRow': '正整数，范围1-100'}}}, {'task_id': 'task_010', 'service_name': '确权开立服务', 'task_type': 'api', 'priority': 8, 'dependencies': ['task_009'], 'estimated_duration': '45分钟', 'description': '实现GET /crcl-open-api/lsLimit/listUnitLimitByCompanyIdExport导出接口', 'implementation_details': '在LsLimitController中实现Excel导出接口，复用listUnitLimitByCompanyId的数据逻辑', 'deliverables': ['导出接口方法', 'Excel工具类', '导出模板文件'], 'completion_criteria': '接口可正常访问，能成功导出Excel文件，表头和数据格式正确', 'parameters': {'project_path': 'D:\\gitlab\\create_project/链数中建一局_1752481767/crcl-open', 'api_path': '/crcl-open-api/lsLimit/listUnitLimitByCompanyIdExport', 'http_method': 'GET', 'content_type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'request_params': {'gwCompanyId': '公司ID(必填)', 'unitName': '组织单元名称(可选)', 'limitSource': '额度来源(可选)', 'bizType': '业务类型(必填)'}, 'response_params': {'file': 'Excel文件流', 'filename': '导出文件名', 'contentType': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'}, 'business_logic': '复用listUnitLimitByCompanyId接口的查询逻辑，将结果导出为Excel格式', 'data_source': '调用listUnitLimitByCompanyId接口获取数据', 'export_format': 'xlsx', 'export_headers': ['组织单元名称', '额度名称', '额度类型', '已分配额度', '已用额度', '可用额度'], 'validation_rules': {'gwCompanyId': '必填，数值类型', 'bizType': '必填，业务类型枚举值'}}}, {'task_id': 'task_011', 'service_name': '系统', 'task_type': 'integration_test', 'priority': 9, 'dependencies': ['task_008', 'task_009', 'task_010'], 'estimated_duration': '30分钟', 'description': '测试确权开立服务调用用户服务接口的完整流程', 'implementation_details': '编写集成测试用例，验证服务间调用正确性和数据完整性', 'deliverables': ['集成测试用例', '测试数据脚本', '测试报告'], 'completion_criteria': '所有测试用例通过，接口调用链路正常，数据返回格式正确', 'parameters': {'test_scenarios': ['组织单元额度查询测试'], 'test_data': {'gwCompanyId': 1, 'unitName': '测试单元', 'bizType': 80}}}, {'task_id': 'task_012', 'service_name': '系统', 'task_type': 'deployment', 'priority': 10, 'dependencies': ['task_011'], 'estimated_duration': '20分钟', 'description': '提交代码到GitLab仓库，commit message: feat: 新增组织单元额度管理功能', 'implementation_details': '执行git add、git commit和git push命令，提交所有新增和修改的代码文件', 'deliverables': ['Git提交记录', '代码合并报告', '部署文档'], 'completion_criteria': '代码成功提交到GitLab仓库，commit信息清晰，无冲突', 'parameters': {'repositories': [{'path': 'D:\\gitlab\\create_project/链数中建一局_1752481767/zqyl-user-center-service', 'changes': '新增组织单元查询接口'}, {'path': 'D:\\gitlab\\create_project/链数中建一局_1752481767/crcl-open', 'changes': '新增组织单元额度列表和导出接口'}]}}]
2025-07-14 16:50:49 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 🔢 生成的任务数量: 12
2025-07-14 16:50:49 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 已保存 12 个任务到数据库
2025-07-14 16:50:49 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 已生成并保存 12 个任务到数据库
2025-07-14 16:50:49 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📤 最终服务列表: ['用户服务', '确权开立服务', '组织单元管理服务']
2025-07-14 16:50:49 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📤 生成并行任务批次: [{'batch_id': 'batch_1', 'services': ['用户服务', '确权开立服务', '组织单元管理服务'], 'dependencies': []}]
2025-07-14 16:50:49 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📤 输出状态键: ['design_doc', 'project_name', 'identified_services', 'service_dependencies', 'task_execution_plan', 'parallel_tasks', 'git_repo_url', 'target_branch', 'project_paths', 'output_path', 'repo_initialized', 'generated_services', 'generated_apis', 'generated_sql', 'service_interconnections', 'unit_test_results', 'test_coverage', 'interface_compatibility', 'code_review_results', 'static_analysis_results', 'security_scan_results', 'commit_hashes', 'push_results', 'pr_urls', 'current_phase', 'completed_services', 'failed_services', 'retry_count', 'execution_errors', 'generated_tasks']
2025-07-14 16:50:49 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📤 输出 - 识别服务: ['用户服务', '确权开立服务', '组织单元管理服务']
2025-07-14 16:50:49 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📤 输出 - 当前阶段: intelligent_coding
2025-07-14 16:50:49 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 任务拆分完成，识别 3 个服务，生成 12 个任务
2025-07-14 16:50:49 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🚀 Git管理节点开始执行...
2025-07-14 16:50:49 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 16:50:49 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🎯 git_management_node 开始执行任务...
2025-07-14 16:50:49 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 📋 找到 1 个可执行任务
2025-07-14 16:50:49 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🚀 开始执行任务: task_001 (git_extraction)
2025-07-14 16:50:49 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_001 已被 git_management_node 领取
2025-07-14 16:50:49 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🔍 执行Git提取任务: task_001
2025-07-14 16:50:49 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 📄 提取源文本: 解析设计文档，提取用户服务 http://gitlab.local/ls/zqyl-user-center-service.git 和确权开立服务 http://gitlab.local/ls/crcl-open.git 仓库地址 从设计文档提取GitLab仓库地址...
2025-07-14 16:50:49 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🔍 开始从文本提取Git URL...
2025-07-14 16:50:49 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🔗 找到Git仓库: http://gitlab.local/ls/zqyl-user-center-service.git
2025-07-14 16:50:49 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🔗 找到Git仓库: http://gitlab.local/ls/crcl-open.git
2025-07-14 16:50:49 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 提取到 2 个Git仓库
2025-07-14 16:50:49 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_001 状态更新为 completed
2025-07-14 16:50:49 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 任务 task_001 执行成功
2025-07-14 16:50:49 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ Git管理任务执行完成，共处理 1 个任务
2025-07-14 16:50:49 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🚀 基于提取结果自动克隆 2 个仓库...
2025-07-14 16:50:49 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 📥 自动克隆仓库: http://gitlab.local/ls/zqyl-user-center-service.git -> D:\gitlab\create_project/链数中建一局_1752481767/zqyl-user-center-service
2025-07-14 16:50:49 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 📥 开始克隆仓库: http://gitlab.local/ls/zqyl-user-center-service.git -> D:\gitlab\create_project/链数中建一局_1752481767/zqyl-user-center-service
2025-07-14 16:50:52 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 已切换到分支: master
2025-07-14 16:50:52 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 仓库克隆成功: D:\gitlab\create_project/链数中建一局_1752481767/zqyl-user-center-service
2025-07-14 16:50:52 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 自动克隆成功: zqyl-user-center-service
2025-07-14 16:50:52 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 已标记任务 task_002 为完成状态
2025-07-14 16:50:52 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 📥 自动克隆仓库: http://gitlab.local/ls/crcl-open.git -> D:\gitlab\create_project/链数中建一局_1752481767/crcl-open
2025-07-14 16:50:52 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 📥 开始克隆仓库: http://gitlab.local/ls/crcl-open.git -> D:\gitlab\create_project/链数中建一局_1752481767/crcl-open
2025-07-14 16:50:53 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 已切换到分支: master
2025-07-14 16:50:53 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 仓库克隆成功: D:\gitlab\create_project/链数中建一局_1752481767/crcl-open
2025-07-14 16:50:53 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 自动克隆成功: crcl-open
2025-07-14 16:50:53 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 已标记任务 task_003 为完成状态
2025-07-14 16:50:53 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ Git管理节点完成 - 提取: 2 个仓库, 克隆: 2 个仓库, 仓库初始化状态: True
2025-07-14 16:50:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 16:50:53 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 16:50:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 16:50:54 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 16:50:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 16:50:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 16:50:54 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 16:50:54 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 16:50:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-14 16:50:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 16:50:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 16:50:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 第1轮找到 2 个可执行任务
2025-07-14 16:50:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 开始执行任务: task_004 (code_analysis)
2025-07-14 16:50:54 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_004 已被 intelligent_coding_node 领取
2025-07-14 16:50:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行代码分析任务: task_004
2025-07-14 16:50:54 - src.utils.java_code_analyzer - INFO - 🔍 开始分析企业级Java项目: D:\gitlab\create_project/链数中建一局_1752481767/zqyl-user-center-service
2025-07-14 16:50:54 - src.utils.java_code_analyzer - INFO - ✅ 企业级项目分析完成，共分析 29 个Java文件
2025-07-14 16:50:54 - src.utils.java_code_analyzer - INFO - 📄 企业级分析报告已导出: outputs\用户服务_java_analysis_20250714_165054.md
2025-07-14 16:50:54 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_004 状态更新为 completed
2025-07-14 16:50:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 任务 task_004 执行成功
2025-07-14 16:50:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 开始执行任务: task_005 (code_analysis)
2025-07-14 16:50:54 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_005 已被 intelligent_coding_node 领取
2025-07-14 16:50:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行代码分析任务: task_005
2025-07-14 16:50:54 - src.utils.java_code_analyzer - INFO - 🔍 开始分析企业级Java项目: D:\gitlab\create_project/链数中建一局_1752481767/crcl-open
2025-07-14 16:51:17 - src.utils.java_code_analyzer - INFO - ✅ 企业级项目分析完成，共分析 2262 个Java文件
2025-07-14 16:51:18 - src.utils.java_code_analyzer - INFO - 📄 企业级分析报告已导出: outputs\确权开立服务_java_analysis_20250714_165117.md
2025-07-14 16:51:19 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_005 状态更新为 completed
2025-07-14 16:51:19 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 任务 task_005 执行成功
2025-07-14 16:51:19 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 第1轮执行完成，处理了 2 个任务
2025-07-14 16:51:19 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第2轮任务检查...
2025-07-14 16:51:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 第2轮找到 1 个可执行任务
2025-07-14 16:51:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 开始执行任务: task_006 (config)
2025-07-14 16:51:20 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_006 已被 intelligent_coding_node 领取
2025-07-14 16:51:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ⚙️ 执行配置生成任务: task_006
2025-07-14 16:51:20 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_006 状态更新为 completed
2025-07-14 16:51:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 任务 task_006 执行成功
2025-07-14 16:51:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 第2轮执行完成，处理了 1 个任务
2025-07-14 16:51:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第3轮任务检查...
2025-07-14 16:51:21 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 第3轮找到 1 个可执行任务
2025-07-14 16:51:21 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 开始执行任务: task_007 (database)
2025-07-14 16:51:21 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_007 已被 intelligent_coding_node 领取
2025-07-14 16:51:21 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🗄️ 执行数据库设计任务: task_007
2025-07-14 16:51:21 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_007 状态更新为 completed
2025-07-14 16:51:21 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 任务 task_007 执行成功
2025-07-14 16:51:21 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 第3轮执行完成，处理了 1 个任务
2025-07-14 16:51:21 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第4轮任务检查...
2025-07-14 16:51:21 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 第4轮找到 1 个可执行任务
2025-07-14 16:51:21 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 开始执行任务: task_008 (api)
2025-07-14 16:51:21 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_008 已被 intelligent_coding_node 领取
2025-07-14 16:51:21 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🌐 执行API接口生成任务: task_008
2025-07-14 16:51:21 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 解析的接口信息:
2025-07-14 16:51:21 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 接口名称: CompanyUnitList
2025-07-14 16:51:21 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - API路径: /general/multiorgManage/queryCompanyUnitList
2025-07-14 16:51:21 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - HTTP方法: GET
2025-07-14 16:51:21 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 输入参数: 3个
2025-07-14 16:51:21 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 输出参数: 6个
2025-07-14 16:51:21 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 业务描述: 根据查询条件查询组织单元信息，支持按编码、状态等条件筛选
2025-07-14 16:51:21 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 在 D:\gitlab\create_project/链数中建一局_1752481767/zqyl-user-center-service 中查找最佳Java项目路径...
2025-07-14 16:51:21 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 目标服务名: 用户服务
2025-07-14 16:51:22 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-14 16:51:22 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 发现Java项目: user-basic-general
2025-07-14 16:51:22 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       🎯 相对路径: user-basic-service\user-basic-general
2025-07-14 16:51:22 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       📊 Java文件: 29个
2025-07-14 16:51:22 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       📐 目录深度: 2
2025-07-14 16:51:22 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       🏆 优先级分数: 750
2025-07-14 16:51:22 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 排序后的候选路径（前3个）:
2025-07-14 16:51:22 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    1. user-basic-service\user-basic-general (优先级: 750)
2025-07-14 16:51:22 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 选择最佳Java项目路径:
2025-07-14 16:51:22 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 完整路径: D:\gitlab\create_project\链数中建一局_1752481767\zqyl-user-center-service\user-basic-service\user-basic-general
2025-07-14 16:51:22 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📋 相对路径: user-basic-service\user-basic-general
2025-07-14 16:51:22 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    🏆 最终优先级: 750
2025-07-14 16:51:22 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 从API路径 /general/multiorgManage/queryCompanyUnitList 提取关键字: multiorgManage
2025-07-14 16:51:22 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 在项目中搜索关键字相关路径: multiorgManage
2025-07-14 16:51:22 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    ❌ 未找到包含关键字 'multiorgManage' 的相关目录
2025-07-14 16:51:22 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -  分析目标项目: D:\gitlab\create_project\链数中建一局_1752481767\zqyl-user-center-service\user-basic-service\user-basic-general
2025-07-14 16:51:22 - src.apis.project_analysis_api - INFO - 🔍 开始分析项目用于代码生成: D:\gitlab\create_project\链数中建一局_1752481767\zqyl-user-center-service\user-basic-service\user-basic-general
2025-07-14 16:51:22 - src.apis.project_analysis_api - INFO - 🔍 在 D:\gitlab\create_project\链数中建一局_1752481767\zqyl-user-center-service\user-basic-service\user-basic-general 中查找最佳Java项目路径...
2025-07-14 16:51:22 - src.apis.project_analysis_api - INFO - 🎯 目标服务名: 用户服务
2025-07-14 16:51:22 - src.apis.project_analysis_api - INFO -    📐 中等深度结构 (深度7) -> +100
2025-07-14 16:51:22 - src.apis.project_analysis_api - INFO -    📦 服务模块匹配: user-basic-service -> +120
2025-07-14 16:51:22 - src.apis.project_analysis_api - INFO -    🏢 业务域匹配: user -> +60
2025-07-14 16:51:22 - src.apis.project_analysis_api - INFO -    🏗️ 架构层级匹配: service -> +100
2025-07-14 16:51:22 - src.apis.project_analysis_api - INFO -    🎯🎯🎯 深层服务模块路径匹配 -> +800
2025-07-14 16:51:22 - src.apis.project_analysis_api - INFO -    📁 发现Java项目: user-basic-general
2025-07-14 16:51:22 - src.apis.project_analysis_api - INFO -       🎯 相对路径: .
2025-07-14 16:51:22 - src.apis.project_analysis_api - INFO -       📊 Java文件: 29个
2025-07-14 16:51:22 - src.apis.project_analysis_api - INFO -       📐 目录深度: 0
2025-07-14 16:51:22 - src.apis.project_analysis_api - INFO -       🏆 优先级分数: 1181
2025-07-14 16:51:22 - src.apis.project_analysis_api - INFO - 📋 排序后的候选路径（前3个）:
2025-07-14 16:51:22 - src.apis.project_analysis_api - INFO -    1. . (优先级: 1181)
2025-07-14 16:51:22 - src.apis.project_analysis_api - INFO - ✅ 选择最佳Java项目路径:
2025-07-14 16:51:22 - src.apis.project_analysis_api - INFO -    📁 完整路径: D:\gitlab\create_project\链数中建一局_1752481767\zqyl-user-center-service\user-basic-service\user-basic-general
2025-07-14 16:51:22 - src.apis.project_analysis_api - INFO -    📋 相对路径: .
2025-07-14 16:51:22 - src.apis.project_analysis_api - INFO -    🏆 最终优先级: 1181
2025-07-14 16:51:22 - src.apis.project_analysis_api - INFO - 📂 实际分析路径: D:\gitlab\create_project\链数中建一局_1752481767\zqyl-user-center-service\user-basic-service\user-basic-general
2025-07-14 16:51:22 - src.utils.java_code_analyzer - INFO - 🔍 开始分析企业级Java项目: D:\gitlab\create_project\链数中建一局_1752481767\zqyl-user-center-service\user-basic-service\user-basic-general
2025-07-14 16:51:22 - src.utils.java_code_analyzer - INFO - ✅ 企业级项目分析完成，共分析 29 个Java文件
2025-07-14 16:51:22 - src.apis.project_analysis_api - INFO - 📦 动态检测到基础包: com.yljr.user.basicgeneral (出现29次)
2025-07-14 16:51:22 - src.apis.project_analysis_api - INFO - 📦 动态检测到基础包: com.yljr.user.basicgeneral (出现29次)
2025-07-14 16:51:22 - src.apis.project_analysis_api - INFO - 📦 动态检测到基础包: com.yljr.user.basicgeneral (出现29次)
2025-07-14 16:51:22 - src.apis.project_analysis_api - INFO - ✅ 项目分析完成，已提取代码生成上下文
2025-07-14 16:51:22 - src.corder_integration.code_generator.controller_interface_manager - INFO - 🚀 开始处理API接口请求: /general/multiorgManage/queryCompanyUnitList
2025-07-14 16:51:22 - src.corder_integration.code_generator.controller_analyzer - INFO - 🔍 开始分析路径下的Controller文件: D:\gitlab\create_project\链数中建一局_1752481767\zqyl-user-center-service\user-basic-service\user-basic-general
2025-07-14 16:51:22 - src.corder_integration.code_generator.controller_analyzer - INFO - 🎯 匹配关键字: multiorgManage
2025-07-14 16:51:22 - src.corder_integration.code_generator.controller_analyzer - INFO - 📊 总共找到 0 个匹配的Controller文件
2025-07-14 16:51:22 - src.corder_integration.code_generator.controller_interface_manager - INFO - ⚠️ 未找到匹配关键字 'multiorgManage' 的Controller文件
2025-07-14 16:51:22 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ⚠️ 未能在现有Controller中添加接口，将生成新文件
2025-07-14 16:51:22 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -  调用volcengine大模型生成代码...
2025-07-14 16:51:22 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 开始代码生成...
2025-07-14 16:51:22 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎨 使用模板+AI混合模式生成代码
2025-07-14 16:51:22 - src.corder_integration.code_generator.template_ai_generator - INFO - 🎨 开始模板+AI混合代码生成: CompanyUnitList
2025-07-14 16:51:22 - src.corder_integration.code_generator.template_ai_generator - INFO - 🤖 使用unknown增强模板代码...
2025-07-14 16:51:22 - src.corder_integration.code_generator.template_ai_generator - INFO - 增强模板代码入参：[{'role': 'system', 'content': '你是Java代码优化专家。请根据业务需求优化给定的模板代码，保持代码结构清晰，添加必要的业务逻辑。重要：请使用具体的类名，不要使用{{}}模板变量语法。只返回优化后的Java代码，不要添加额外说明。'}, {'role': 'user', 'content': '\n请优化以下service_impl代码模板，重点关注：\n- 实现完整的业务逻辑\n- 添加数据验证和转换\n- 处理异常情况\n- 添加事务管理\n- 优化数据库查询逻辑\n\n## 当前模板代码：\n```java\npackage com.yljr.user.basicgeneral.application.service.impl;\n\nimport com.yljr.user.basicgeneral.application.service.CompanyUnitListService;\nimport com.yljr.user.basicgeneral.domain.entity.CompanyUnitList;\nimport com.yljr.user.basicgeneral.domain.mapper.CompanyUnitListMapper;\nimport com.yljr.user.basicgeneral.interfaces.dto.CompanyUnitListReq;\nimport com.yljr.user.basicgeneral.interfaces.dto.CompanyUnitListResp;\nimport org.springframework.stereotype.Service;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.transaction.annotation.Transactional;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\n/**\n * CompanyUnitList Service - 根据查询条件查询组织单元信息，支持按编码、状态等条件筛选\n * Generated by Template + AI\n */\n@Service\n@Transactional\npublic class CompanyUnitListServiceImpl implements CompanyUnitListService {\n    \n    private static final Logger logger = LoggerFactory.getLogger(CompanyUnitListServiceImpl.class);\n    \n    @Autowired\n    private CompanyUnitListMapper companyUnitListMapper;\n    \n    @Override\n    public CompanyUnitListResp CompanyUnitList(CompanyUnitListReq request) {\n        logger.info("Executing CompanyUnitList with parameters: {}", request);\n        \n        try {\n            // TODO: 实现根据查询条件查询组织单元信息，支持按编码、状态等条件筛选业务逻辑\n            \n            logger.info("CompanyUnitList completed successfully");\n            return new CompanyUnitListResp();\n        } catch (Exception e) {\n            logger.error("Error in CompanyUnitList: ", e);\n            throw new RuntimeException("CompanyUnitList failed", e);\n        }\n    }\n}\n```\n\n## 业务需求：\n- 接口名称：CompanyUnitList\n- 功能描述：根据查询条件查询组织单元信息，支持按编码、状态等条件筛选\n- 业务逻辑：根据查询条件查询组织单元信息，支持按编码、状态等条件筛选\n\n## 输入参数：\n- unitCode (String): 组织单元编码(可选) [可选]\n- openStatus (String): 开通状态(可选) [可选]\n- unitList (String): 组织单元列表(可选) [可选]\n\n## 输出参数：\n- unitId (String): 组织单元ID\n- unitTypeDicType (String): 组织单元类型字典类型\n- unitTypeId (String): 组织单元类型ID\n- openStatus (String): 开通状态\n- unitCode (String): 组织单元编码\n- unitName (String): 组织单元名称\n\n## 技术要求：\n- 基础包名：com.yljr.user.basicgeneral\n- 使用Spring Boot + MyBatis Plus\n- 遵循DDD分层架构\n- 保持原有类名和包结构\n- 请求DTO类名：CompanyUnitListReq\n- 响应DTO类名：CompanyUnitListResp\n- Service类名：CompanyUnitListService\n\n**重要：请使用具体的类名（如 CompanyUnitListReq），不要使用模板变量语法（如 {{REQUEST_DTO_NAME}}）**\n\n请返回优化后的完整Java代码（只要代码，不要额外说明）：\n'}]
2025-07-14 16:51:55 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-14 16:51:55 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ service_impl AI增强完成
2025-07-14 16:51:55 - src.corder_integration.code_generator.template_ai_generator - INFO - 增强模板代码入参：[{'role': 'system', 'content': '你是Java代码优化专家。请根据业务需求优化给定的模板代码，保持代码结构清晰，添加必要的业务逻辑。重要：请使用具体的类名，不要使用{{}}模板变量语法。只返回优化后的Java代码，不要添加额外说明。'}, {'role': 'user', 'content': '\n请优化以下controller代码模板，重点关注：\n- 完善参数验证\n- 统一响应格式\n- 添加API文档注解\n- 改进错误处理\n- 优化日志记录\n\n## 当前模板代码：\n```java\npackage com.yljr.user.basicgeneral.interfaces.rest;\n\nimport com.yljr.user.basicgeneral.application.service.CompanyUnitListService;\nimport com.yljr.user.basicgeneral.interfaces.dto.CompanyUnitListReq;\nimport com.yljr.user.basicgeneral.interfaces.dto.CompanyUnitListResp;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.*;\nimport org.springframework.http.ResponseEntity;\nimport javax.validation.Valid;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport io.swagger.annotations.Api;\nimport io.swagger.annotations.ApiOperation;\n\n/**\n * CompanyUnitList Controller - 根据查询条件查询组织单元信息，支持按编码、状态等条件筛选\n * Generated by Template + AI\n */\n@Api(tags = "CompanyUnitList Controller - 根据查询条件查询组织单元信息，支持按编码、状态等条件筛选")\n@RestController\n@RequestMapping("/general/multiorgManage/queryCompanyUnitList")\n@CrossOrigin(origins = "*")\npublic class CompanyUnitListController {\n    \n    private static final Logger logger = LoggerFactory.getLogger(CompanyUnitListController.class);\n    \n    @Autowired\n    private CompanyUnitListService companyUnitListService;\n    \n    /**\n     * 根据查询条件查询组织单元信息，支持按编码、状态等条件筛选\n     */\n    @ApiOperation("根据查询条件查询组织单元信息，支持按编码、状态等条件筛选")\n    @GetMapping\n    public ResponseEntity<CompanyUnitListResp> CompanyUnitList(@Valid @RequestBody CompanyUnitListReq request) {\n        try {\n            logger.info("Processing CompanyUnitList request: {}", request);\n            \n            CompanyUnitListResp response = companyUnitListService.CompanyUnitList(request);\n            \n            logger.info("CompanyUnitList completed successfully");\n            return ResponseEntity.ok(response);\n        } catch (Exception e) {\n            logger.error("Error in CompanyUnitList: ", e);\n            return ResponseEntity.internalServerError().build();\n        }\n    }\n}\n```\n\n## 业务需求：\n- 接口名称：CompanyUnitList\n- 功能描述：根据查询条件查询组织单元信息，支持按编码、状态等条件筛选\n- 业务逻辑：根据查询条件查询组织单元信息，支持按编码、状态等条件筛选\n\n## 输入参数：\n- unitCode (String): 组织单元编码(可选) [可选]\n- openStatus (String): 开通状态(可选) [可选]\n- unitList (String): 组织单元列表(可选) [可选]\n\n## 输出参数：\n- unitId (String): 组织单元ID\n- unitTypeDicType (String): 组织单元类型字典类型\n- unitTypeId (String): 组织单元类型ID\n- openStatus (String): 开通状态\n- unitCode (String): 组织单元编码\n- unitName (String): 组织单元名称\n\n## 技术要求：\n- 基础包名：com.yljr.user.basicgeneral\n- 使用Spring Boot + MyBatis Plus\n- 遵循DDD分层架构\n- 保持原有类名和包结构\n- 请求DTO类名：CompanyUnitListReq\n- 响应DTO类名：CompanyUnitListResp\n- Service类名：CompanyUnitListService\n\n**重要：请使用具体的类名（如 CompanyUnitListReq），不要使用模板变量语法（如 {{REQUEST_DTO_NAME}}）**\n\n请返回优化后的完整Java代码（只要代码，不要额外说明）：\n'}]
2025-07-14 16:52:26 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-14 16:52:26 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ controller AI增强完成
2025-07-14 16:52:26 - src.corder_integration.code_generator.template_ai_generator - INFO - 增强模板代码入参：[{'role': 'system', 'content': '你是Java代码优化专家。请根据业务需求优化给定的模板代码，保持代码结构清晰，添加必要的业务逻辑。重要：请使用具体的类名，不要使用{{}}模板变量语法。只返回优化后的Java代码，不要添加额外说明。'}, {'role': 'user', 'content': '\n请优化以下service_interface代码模板，重点关注：\n- 改进代码结构\n- 添加必要注释\n- 优化实现逻辑\n\n## 当前模板代码：\n```java\npackage com.yljr.user.basicgeneral.application.service;\n\nimport com.yljr.user.basicgeneral.interfaces.dto.CompanyUnitListReq;\nimport com.yljr.user.basicgeneral.interfaces.dto.CompanyUnitListResp;\nimport java.util.List;\n\n/**\n * CompanyUnitList Service - 根据查询条件查询组织单元信息，支持按编码、状态等条件筛选\n * Generated by Template + AI\n */\npublic interface CompanyUnitListService {\n    \n    /**\n     * 根据查询条件查询组织单元信息，支持按编码、状态等条件筛选\n     */\n    CompanyUnitListResp CompanyUnitList(CompanyUnitListReq request);\n}\n```\n\n## 业务需求：\n- 接口名称：CompanyUnitList\n- 功能描述：根据查询条件查询组织单元信息，支持按编码、状态等条件筛选\n- 业务逻辑：根据查询条件查询组织单元信息，支持按编码、状态等条件筛选\n\n## 输入参数：\n- unitCode (String): 组织单元编码(可选) [可选]\n- openStatus (String): 开通状态(可选) [可选]\n- unitList (String): 组织单元列表(可选) [可选]\n\n## 输出参数：\n- unitId (String): 组织单元ID\n- unitTypeDicType (String): 组织单元类型字典类型\n- unitTypeId (String): 组织单元类型ID\n- openStatus (String): 开通状态\n- unitCode (String): 组织单元编码\n- unitName (String): 组织单元名称\n\n## 技术要求：\n- 基础包名：com.yljr.user.basicgeneral\n- 使用Spring Boot + MyBatis Plus\n- 遵循DDD分层架构\n- 保持原有类名和包结构\n- 请求DTO类名：CompanyUnitListReq\n- 响应DTO类名：CompanyUnitListResp\n- Service类名：CompanyUnitListService\n\n**重要：请使用具体的类名（如 CompanyUnitListReq），不要使用模板变量语法（如 {{REQUEST_DTO_NAME}}）**\n\n请返回优化后的完整Java代码（只要代码，不要额外说明）：\n'}]
2025-07-14 16:52:36 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-14 16:52:36 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ service_interface AI增强完成
2025-07-14 16:52:36 - src.corder_integration.code_generator.template_ai_generator - INFO - 增强模板代码入参：[{'role': 'system', 'content': '你是Java代码优化专家。请根据业务需求优化给定的模板代码，保持代码结构清晰，添加必要的业务逻辑。重要：请使用具体的类名，不要使用{{}}模板变量语法。只返回优化后的Java代码，不要添加额外说明。'}, {'role': 'user', 'content': '\n请优化以下request_dto代码模板，重点关注：\n- 添加详细的字段验证\n- 完善API文档注解\n- 优化字段类型选择\n- 添加字段描述\n\n## 当前模板代码：\n```java\npackage com.yljr.user.basicgeneral.interfaces.dto;\n\nimport javax.validation.constraints.*;\nimport lombok.Data;\nimport io.swagger.annotations.ApiModel;\nimport io.swagger.annotations.ApiModelProperty;\n\n/**\n * CompanyUnitList Request DTO\n * Generated by Template + AI\n */\n@Data\n@ApiModel(description = "CompanyUnitList Request DTO")\npublic class CompanyUnitListReq {\n    \n    @ApiModelProperty(value = "组织单元编码(可选)", required = false)\n    private String unitCode;\n\n    @ApiModelProperty(value = "开通状态(可选)", required = false)\n    private String openStatus;\n\n    @ApiModelProperty(value = "组织单元列表(可选)", required = false)\n    private String unitList;\n}\n```\n\n## 业务需求：\n- 接口名称：CompanyUnitList\n- 功能描述：根据查询条件查询组织单元信息，支持按编码、状态等条件筛选\n- 业务逻辑：根据查询条件查询组织单元信息，支持按编码、状态等条件筛选\n\n## 输入参数：\n- unitCode (String): 组织单元编码(可选) [可选]\n- openStatus (String): 开通状态(可选) [可选]\n- unitList (String): 组织单元列表(可选) [可选]\n\n## 输出参数：\n- unitId (String): 组织单元ID\n- unitTypeDicType (String): 组织单元类型字典类型\n- unitTypeId (String): 组织单元类型ID\n- openStatus (String): 开通状态\n- unitCode (String): 组织单元编码\n- unitName (String): 组织单元名称\n\n## 技术要求：\n- 基础包名：com.yljr.user.basicgeneral\n- 使用Spring Boot + MyBatis Plus\n- 遵循DDD分层架构\n- 保持原有类名和包结构\n- 请求DTO类名：CompanyUnitListReq\n- 响应DTO类名：CompanyUnitListResp\n- Service类名：CompanyUnitListService\n\n**重要：请使用具体的类名（如 CompanyUnitListReq），不要使用模板变量语法（如 {{REQUEST_DTO_NAME}}）**\n\n请返回优化后的完整Java代码（只要代码，不要额外说明）：\n'}]
2025-07-14 16:52:52 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-14 16:52:52 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ request_dto AI增强完成
2025-07-14 16:52:52 - src.corder_integration.code_generator.template_ai_generator - INFO - 增强模板代码入参：[{'role': 'system', 'content': '你是Java代码优化专家。请根据业务需求优化给定的模板代码，保持代码结构清晰，添加必要的业务逻辑。重要：请使用具体的类名，不要使用{{}}模板变量语法。只返回优化后的Java代码，不要添加额外说明。'}, {'role': 'user', 'content': '\n请优化以下response_dto代码模板，重点关注：\n- 添加详细的字段验证\n- 完善API文档注解\n- 优化字段类型选择\n- 添加字段描述\n\n## 当前模板代码：\n```java\npackage com.yljr.user.basicgeneral.interfaces.dto;\n\nimport lombok.Data;\nimport io.swagger.annotations.ApiModel;\nimport io.swagger.annotations.ApiModelProperty;\n\n/**\n * CompanyUnitList Response DTO\n * Generated by Template + AI\n */\n@Data\n@ApiModel(description = "CompanyUnitList Response DTO")\npublic class CompanyUnitListResp {\n    \n    @ApiModelProperty("组织单元ID")\n    private String unitId;\n\n    @ApiModelProperty("组织单元类型字典类型")\n    private String unitTypeDicType;\n\n    @ApiModelProperty("组织单元类型ID")\n    private String unitTypeId;\n\n    @ApiModelProperty("开通状态")\n    private String openStatus;\n\n    @ApiModelProperty("组织单元编码")\n    private String unitCode;\n\n    @ApiModelProperty("组织单元名称")\n    private String unitName;\n}\n```\n\n## 业务需求：\n- 接口名称：CompanyUnitList\n- 功能描述：根据查询条件查询组织单元信息，支持按编码、状态等条件筛选\n- 业务逻辑：根据查询条件查询组织单元信息，支持按编码、状态等条件筛选\n\n## 输入参数：\n- unitCode (String): 组织单元编码(可选) [可选]\n- openStatus (String): 开通状态(可选) [可选]\n- unitList (String): 组织单元列表(可选) [可选]\n\n## 输出参数：\n- unitId (String): 组织单元ID\n- unitTypeDicType (String): 组织单元类型字典类型\n- unitTypeId (String): 组织单元类型ID\n- openStatus (String): 开通状态\n- unitCode (String): 组织单元编码\n- unitName (String): 组织单元名称\n\n## 技术要求：\n- 基础包名：com.yljr.user.basicgeneral\n- 使用Spring Boot + MyBatis Plus\n- 遵循DDD分层架构\n- 保持原有类名和包结构\n- 请求DTO类名：CompanyUnitListReq\n- 响应DTO类名：CompanyUnitListResp\n- Service类名：CompanyUnitListService\n\n**重要：请使用具体的类名（如 CompanyUnitListReq），不要使用模板变量语法（如 {{REQUEST_DTO_NAME}}）**\n\n请返回优化后的完整Java代码（只要代码，不要额外说明）：\n'}]
2025-07-14 16:53:11 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-14 16:53:11 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ response_dto AI增强完成
2025-07-14 16:53:12 - src.corder_integration.code_generator.template_ai_generator - INFO - 增强模板代码入参：[{'role': 'system', 'content': '你是Java代码优化专家。请根据业务需求优化给定的模板代码，保持代码结构清晰，添加必要的业务逻辑。重要：请使用具体的类名，不要使用{{}}模板变量语法。只返回优化后的Java代码，不要添加额外说明。'}, {'role': 'user', 'content': '\n请优化以下entity代码模板，重点关注：\n- 改进代码结构\n- 添加必要注释\n- 优化实现逻辑\n\n## 当前模板代码：\n```java\npackage com.yljr.user.basicgeneral.domain.entity;\n\nimport com.baomidou.mybatisplus.annotation.*;\nimport lombok.Data;\nimport io.swagger.annotations.ApiModel;\nimport io.swagger.annotations.ApiModelProperty;\nimport java.time.LocalDateTime;\n\n/**\n * CompanyUnitList Entity\n * Generated by Template + AI\n */\n@Data\n@ApiModel(description = "CompanyUnitList Entity")\n@TableName("companyunitlist")\npublic class CompanyUnitList {\n    \n    @ApiModelProperty("主键ID")\n    @TableId(type = IdType.AUTO)\n    private Long id;\n    \n    @ApiModelProperty("组织单元编码(可选)")\n    @TableField("unitCode")\n    private String unitCode;\n\n    @ApiModelProperty("开通状态(可选)")\n    @TableField("openStatus")\n    private String openStatus;\n\n    @ApiModelProperty("组织单元列表(可选)")\n    @TableField("unitList")\n    private String unitList;\n\n    @ApiModelProperty("组织单元ID")\n    @TableField("unitId")\n    private String unitId;\n\n    @ApiModelProperty("组织单元类型字典类型")\n    @TableField("unitTypeDicType")\n    private String unitTypeDicType;\n\n    @ApiModelProperty("组织单元类型ID")\n    @TableField("unitTypeId")\n    private String unitTypeId;\n\n    @ApiModelProperty("组织单元名称")\n    @TableField("unitName")\n    private String unitName;\n    \n    @ApiModelProperty("创建时间")\n    @TableField(fill = FieldFill.INSERT)\n    private LocalDateTime createTime;\n    \n    @ApiModelProperty("更新时间")\n    @TableField(fill = FieldFill.INSERT_UPDATE)\n    private LocalDateTime updateTime;\n}\n```\n\n## 业务需求：\n- 接口名称：CompanyUnitList\n- 功能描述：根据查询条件查询组织单元信息，支持按编码、状态等条件筛选\n- 业务逻辑：根据查询条件查询组织单元信息，支持按编码、状态等条件筛选\n\n## 输入参数：\n- unitCode (String): 组织单元编码(可选) [可选]\n- openStatus (String): 开通状态(可选) [可选]\n- unitList (String): 组织单元列表(可选) [可选]\n\n## 输出参数：\n- unitId (String): 组织单元ID\n- unitTypeDicType (String): 组织单元类型字典类型\n- unitTypeId (String): 组织单元类型ID\n- openStatus (String): 开通状态\n- unitCode (String): 组织单元编码\n- unitName (String): 组织单元名称\n\n## 技术要求：\n- 基础包名：com.yljr.user.basicgeneral\n- 使用Spring Boot + MyBatis Plus\n- 遵循DDD分层架构\n- 保持原有类名和包结构\n- 请求DTO类名：CompanyUnitListReq\n- 响应DTO类名：CompanyUnitListResp\n- Service类名：CompanyUnitListService\n\n**重要：请使用具体的类名（如 CompanyUnitListReq），不要使用模板变量语法（如 {{REQUEST_DTO_NAME}}）**\n\n请返回优化后的完整Java代码（只要代码，不要额外说明）：\n'}]
2025-07-14 16:53:35 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-14 16:53:35 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ entity AI增强完成
2025-07-14 16:53:35 - src.corder_integration.code_generator.template_ai_generator - INFO - 增强模板代码入参：[{'role': 'system', 'content': '你是Java代码优化专家。请根据业务需求优化给定的模板代码，保持代码结构清晰，添加必要的业务逻辑。重要：请使用具体的类名，不要使用{{}}模板变量语法。只返回优化后的Java代码，不要添加额外说明。'}, {'role': 'user', 'content': '\n请优化以下mapper代码模板，重点关注：\n- 改进代码结构\n- 添加必要注释\n- 优化实现逻辑\n\n## 当前模板代码：\n```java\npackage com.yljr.user.basicgeneral.domain.mapper;\n\nimport com.yljr.user.basicgeneral.domain.entity.CompanyUnitList;\nimport com.baomidou.mybatisplus.core.mapper.BaseMapper;\nimport org.apache.ibatis.annotations.Mapper;\nimport org.apache.ibatis.annotations.Param;\nimport java.util.List;\n\n/**\n * CompanyUnitListMapper Mapper\n * Generated by Template + AI\n */\n@Mapper\npublic interface CompanyUnitListMapper extends BaseMapper<CompanyUnitList> {\n    \n    /**\n     * Custom query for CompanyUnitList\n     */\n    List<CompanyUnitList> selectCompanyUnitListList(@Param("unitCode") String unitCode, @Param("openStatus") String openStatus, @Param("unitList") String unitList);\n}\n```\n\n## 业务需求：\n- 接口名称：CompanyUnitList\n- 功能描述：根据查询条件查询组织单元信息，支持按编码、状态等条件筛选\n- 业务逻辑：根据查询条件查询组织单元信息，支持按编码、状态等条件筛选\n\n## 输入参数：\n- unitCode (String): 组织单元编码(可选) [可选]\n- openStatus (String): 开通状态(可选) [可选]\n- unitList (String): 组织单元列表(可选) [可选]\n\n## 输出参数：\n- unitId (String): 组织单元ID\n- unitTypeDicType (String): 组织单元类型字典类型\n- unitTypeId (String): 组织单元类型ID\n- openStatus (String): 开通状态\n- unitCode (String): 组织单元编码\n- unitName (String): 组织单元名称\n\n## 技术要求：\n- 基础包名：com.yljr.user.basicgeneral\n- 使用Spring Boot + MyBatis Plus\n- 遵循DDD分层架构\n- 保持原有类名和包结构\n- 请求DTO类名：CompanyUnitListReq\n- 响应DTO类名：CompanyUnitListResp\n- Service类名：CompanyUnitListService\n\n**重要：请使用具体的类名（如 CompanyUnitListReq），不要使用模板变量语法（如 {{REQUEST_DTO_NAME}}）**\n\n请返回优化后的完整Java代码（只要代码，不要额外说明）：\n'}]
2025-07-14 16:53:51 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-14 16:53:51 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ mapper AI增强完成
2025-07-14 16:53:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI生成成功，生成代码类型: ['service_impl', 'controller', 'service_interface', 'request_dto', 'response_dto', 'entity', 'mapper', 'mapper_xml']
2025-07-14 16:53:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 开始写入生成的代码文件...
2025-07-14 16:53:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔧 统一类名基础: CompanyUnitList
2025-07-14 16:53:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ service_impl 类名: CompanyUnitListServiceImpl
2025-07-14 16:53:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ controller 类名: CompanyUnitListController
2025-07-14 16:53:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ request_dto 类名: CompanyUnitListReq
2025-07-14 16:53:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ response_dto 类名: CompanyUnitListResp
2025-07-14 16:53:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ entity 类名: CompanyUnitListEntity
2025-07-14 16:53:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 检测到service_impl但缺少service，这是正常的（接口会被自动生成）
2025-07-14 16:53:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 标准化后的代码类型: ['service_impl', 'controller', 'service_interface', 'request_dto', 'response_dto', 'entity', 'mapper', 'mapper_xml']
2025-07-14 16:53:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🤖 调用volcengine判断Java文件输出路径...
2025-07-14 16:54:22 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-14 16:54:22 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM路径判断成功，配置了 8 个Java文件路径
2025-07-14 16:54:22 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 controller: CompanyUnitListController.java
2025-07-14 16:54:22 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 service_interface: CompanyUnitListService.java
2025-07-14 16:54:22 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 service_impl: CompanyUnitListServiceImpl.java
2025-07-14 16:54:22 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 request_dto: CompanyUnitListReq.java
2025-07-14 16:54:22 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 response_dto: CompanyUnitListResp.java
2025-07-14 16:54:22 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 entity: CompanyUnitListEntity.java
2025-07-14 16:54:22 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 mapper: CompanyUnitListMapper.java
2025-07-14 16:54:22 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 mapper_xml: CompanyUnitListMapper.xml
2025-07-14 16:54:22 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: D:\gitlab\create_project\链数中建一局_1752481767\zqyl-user-center-service\user-basic-service\user-basic-general\src\main\java\com\yljr\user\basicgeneral\application\service\impl\CompanyUnitListServiceImpl.java
2025-07-14 16:54:22 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: D:\gitlab\create_project\链数中建一局_1752481767\zqyl-user-center-service\user-basic-service\user-basic-general\src\main\java\com\yljr\user\basicgeneral\application\service\impl\CompanyUnitListServiceImpl.java
2025-07-14 16:54:22 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: D:\gitlab\create_project\链数中建一局_1752481767\zqyl-user-center-service\user-basic-service\user-basic-general\src\main\java\com\yljr\user\basicgeneral\interfaces\rest\CompanyUnitListController.java
2025-07-14 16:54:22 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: D:\gitlab\create_project\链数中建一局_1752481767\zqyl-user-center-service\user-basic-service\user-basic-general\src\main\java\com\yljr\user\basicgeneral\interfaces\rest\CompanyUnitListController.java
2025-07-14 16:54:22 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: D:\gitlab\create_project\链数中建一局_1752481767\zqyl-user-center-service\user-basic-service\user-basic-general\src\main\java\com\yljr\user\basicgeneral\application\service\CompanyUnitListService.java
2025-07-14 16:54:22 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: D:\gitlab\create_project\链数中建一局_1752481767\zqyl-user-center-service\user-basic-service\user-basic-general\src\main\java\com\yljr\user\basicgeneral\application\service\CompanyUnitListService.java
2025-07-14 16:54:22 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: D:\gitlab\create_project\链数中建一局_1752481767\zqyl-user-center-service\user-basic-service\user-basic-general\src\main\java\com\yljr\user\basicgeneral\interfaces\dto\CompanyUnitListReq.java
2025-07-14 16:54:22 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: D:\gitlab\create_project\链数中建一局_1752481767\zqyl-user-center-service\user-basic-service\user-basic-general\src\main\java\com\yljr\user\basicgeneral\interfaces\dto\CompanyUnitListReq.java
2025-07-14 16:54:22 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: D:\gitlab\create_project\链数中建一局_1752481767\zqyl-user-center-service\user-basic-service\user-basic-general\src\main\java\com\yljr\user\basicgeneral\interfaces\dto\CompanyUnitListResp.java
2025-07-14 16:54:22 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: D:\gitlab\create_project\链数中建一局_1752481767\zqyl-user-center-service\user-basic-service\user-basic-general\src\main\java\com\yljr\user\basicgeneral\interfaces\dto\CompanyUnitListResp.java
2025-07-14 16:54:22 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: D:\gitlab\create_project\链数中建一局_1752481767\zqyl-user-center-service\user-basic-service\user-basic-general\src\main\java\com\yljr\user\basicgeneral\domain\entity\CompanyUnitListEntity.java
2025-07-14 16:54:22 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: D:\gitlab\create_project\链数中建一局_1752481767\zqyl-user-center-service\user-basic-service\user-basic-general\src\main\java\com\yljr\user\basicgeneral\domain\entity\CompanyUnitListEntity.java
2025-07-14 16:54:22 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: D:\gitlab\create_project\链数中建一局_1752481767\zqyl-user-center-service\user-basic-service\user-basic-general\src\main\java\com\yljr\user\basicgeneral\domain\mapper\CompanyUnitListMapper.java
2025-07-14 16:54:22 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: D:\gitlab\create_project\链数中建一局_1752481767\zqyl-user-center-service\user-basic-service\user-basic-general\src\main\java\com\yljr\user\basicgeneral\domain\mapper\CompanyUnitListMapper.java
2025-07-14 16:54:22 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: D:\gitlab\create_project\链数中建一局_1752481767\zqyl-user-center-service\user-basic-service\user-basic-general\src\main\resources\mapper\CompanyUnitListMapper.xml
2025-07-14 16:54:22 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: D:\gitlab\create_project\链数中建一局_1752481767\zqyl-user-center-service\user-basic-service\user-basic-general\src\main\resources\mapper\CompanyUnitListMapper.xml
2025-07-14 16:54:22 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📊 代码生成完成，共写入 8 个文件到项目中
2025-07-14 16:54:22 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_008 状态更新为 completed
2025-07-14 16:54:22 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 任务 task_008 执行成功
2025-07-14 16:54:22 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 第4轮执行完成，处理了 1 个任务
2025-07-14 16:54:22 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第5轮任务检查...
2025-07-14 16:54:22 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 第5轮找到 1 个可执行任务
2025-07-14 16:54:22 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 开始执行任务: task_009 (api)
2025-07-14 16:54:22 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_009 已被 intelligent_coding_node 领取
2025-07-14 16:54:22 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🌐 执行API接口生成任务: task_009
2025-07-14 16:54:22 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 解析的接口信息:
2025-07-14 16:54:22 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 接口名称: UnitLimitByCompanyId
2025-07-14 16:54:22 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - API路径: /crcl-open-api/lsLimit/listUnitLimitByCompanyId
2025-07-14 16:54:22 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - HTTP方法: GET
2025-07-14 16:54:22 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 输入参数: 6个
2025-07-14 16:54:22 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 输出参数: 4个
2025-07-14 16:54:22 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 业务描述: 根据公司ID和筛选条件查询组织单元额度信息，调用用户服务获取组织单元基础信息
2025-07-14 16:54:22 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 在 D:\gitlab\create_project/链数中建一局_1752481767/crcl-open 中查找最佳Java项目路径...
2025-07-14 16:54:22 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 目标服务名: 确权开立服务
2025-07-14 16:54:23 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-14 16:54:23 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 发现Java项目: crcl-open
2025-07-14 16:54:23 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       🎯 相对路径: .
2025-07-14 16:54:23 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       📊 Java文件: 2251个
2025-07-14 16:54:23 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       📐 目录深度: 0
2025-07-14 16:54:23 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       🏆 优先级分数: 650
2025-07-14 16:54:23 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 排序后的候选路径（前3个）:
2025-07-14 16:54:23 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    1. . (优先级: 650)
2025-07-14 16:54:23 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 选择最佳Java项目路径:
2025-07-14 16:54:23 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 完整路径: D:\gitlab\create_project\链数中建一局_1752481767\crcl-open
2025-07-14 16:54:23 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📋 相对路径: .
2025-07-14 16:54:23 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    🏆 最终优先级: 650
2025-07-14 16:54:23 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 从API路径 /crcl-open-api/lsLimit/listUnitLimitByCompanyId 提取关键字: lsLimit
2025-07-14 16:54:23 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 在项目中搜索关键字相关路径: lsLimit
2025-07-14 16:54:23 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 找到匹配目录: limit (得分: 25)
2025-07-14 16:54:24 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 找到匹配目录: ls (得分: 25)
2025-07-14 16:54:24 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 找到匹配目录: ls (得分: 25)
2025-07-14 16:54:24 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 找到匹配目录: ls (得分: 25)
2025-07-14 16:54:24 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 找到匹配目录: limit (得分: 25)
2025-07-14 16:54:24 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    ✅ 选择最佳匹配目录: limit (路径: src\main\java\com\yljr\crcl\limit)
2025-07-14 16:54:24 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 基于API关键字 'lsLimit' 找到现有路径: D:\gitlab\create_project\链数中建一局_1752481767\crcl-open\src\main\java\com\yljr\crcl\limit
2025-07-14 16:54:24 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -  分析目标项目: D:\gitlab\create_project\链数中建一局_1752481767\crcl-open\src\main\java\com\yljr\crcl\limit
2025-07-14 16:54:24 - src.apis.project_analysis_api - INFO - 🔍 开始分析项目用于代码生成: D:\gitlab\create_project\链数中建一局_1752481767\crcl-open\src\main\java\com\yljr\crcl\limit
2025-07-14 16:54:24 - src.apis.project_analysis_api - INFO - 🔍 在 D:\gitlab\create_project\链数中建一局_1752481767\crcl-open\src\main\java\com\yljr\crcl\limit 中查找最佳Java项目路径...
2025-07-14 16:54:24 - src.apis.project_analysis_api - INFO - 🎯 目标服务名: 确权开立服务
2025-07-14 16:54:24 - src.apis.project_analysis_api - WARNING - ⚠️ 在 D:\gitlab\create_project\链数中建一局_1752481767\crcl-open\src\main\java\com\yljr\crcl\limit 中未找到包含Java文件的src/main/java结构
2025-07-14 16:54:24 - src.apis.project_analysis_api - INFO - 📂 实际分析路径: D:\gitlab\create_project\链数中建一局_1752481767\crcl-open\src\main\java\com\yljr\crcl\limit
2025-07-14 16:54:24 - src.utils.java_code_analyzer - INFO - 🔍 开始分析企业级Java项目: D:\gitlab\create_project\链数中建一局_1752481767\crcl-open\src\main\java\com\yljr\crcl\limit
2025-07-14 16:54:30 - src.utils.java_code_analyzer - INFO - ✅ 企业级项目分析完成，共分析 533 个Java文件
2025-07-14 16:54:30 - src.apis.project_analysis_api - INFO - 📦 动态检测到基础包: com.yljr.crcl.limit (出现533次)
2025-07-14 16:54:30 - src.apis.project_analysis_api - INFO - 📦 动态检测到基础包: com.yljr.crcl.limit (出现533次)
2025-07-14 16:54:30 - src.apis.project_analysis_api - INFO - 📦 动态检测到基础包: com.yljr.crcl.limit (出现533次)
2025-07-14 16:54:30 - src.apis.project_analysis_api - INFO - ✅ 项目分析完成，已提取代码生成上下文
2025-07-14 16:54:30 - src.corder_integration.code_generator.controller_interface_manager - INFO - 🚀 开始处理API接口请求: /crcl-open-api/lsLimit/listUnitLimitByCompanyId
2025-07-14 16:54:30 - src.corder_integration.code_generator.controller_analyzer - INFO - 🔍 开始分析路径下的Controller文件: D:\gitlab\create_project\链数中建一局_1752481767\crcl-open\src\main\java\com\yljr\crcl\limit
2025-07-14 16:54:30 - src.corder_integration.code_generator.controller_analyzer - INFO - 🎯 匹配关键字: lsLimit
2025-07-14 16:54:30 - src.corder_integration.code_generator.controller_analyzer - INFO - 🎯 在 D:\gitlab\create_project\链数中建一局_1752481767\crcl-open\src\main\java\com\yljr\crcl\limit\interfaces\LsLimitController.java 中找到匹配的@RequestMapping: /lsLimit
2025-07-14 16:54:30 - src.corder_integration.code_generator.controller_analyzer - INFO - 📋 提取到 0 个Service依赖
2025-07-14 16:54:30 - src.corder_integration.code_generator.controller_analyzer - INFO - ✅ 找到匹配的Controller: D:\gitlab\create_project\链数中建一局_1752481767\crcl-open\src\main\java\com\yljr\crcl\limit\interfaces\LsLimitController.java
2025-07-14 16:54:30 - src.corder_integration.code_generator.controller_analyzer - INFO - 📊 总共找到 1 个匹配的Controller文件
2025-07-14 16:54:30 - src.corder_integration.code_generator.controller_analyzer - INFO - 🔧 从API路径 '/crcl-open-api/lsLimit/listUnitLimitByCompanyId' 提取接口名称: 'listUnitLimitByCompanyId'
2025-07-14 16:54:30 - src.corder_integration.code_generator.controller_interface_manager - INFO - 📝 处理Controller: LsLimitController
2025-07-14 16:54:30 - src.corder_integration.code_generator.service_decision_maker - INFO - 🔍 开始分析Service需求: listUnitLimitByCompanyId
2025-07-14 16:54:30 - src.corder_integration.code_generator.service_decision_maker - INFO - 📂 扫描项目Service文件: D:\gitlab\create_project\链数中建一局_1752481767\crcl-open
2025-07-14 16:54:30 - src.corder_integration.code_generator.service_decision_maker - INFO - 📊 找到 336 个Service文件
2025-07-14 16:54:30 - src.corder_integration.code_generator.service_decision_maker - INFO - 📂 扫描Application文件: D:\gitlab\create_project\链数中建一局_1752481767\crcl-open
2025-07-14 16:54:31 - src.corder_integration.code_generator.service_decision_maker - INFO - 📊 找到 35 个Application文件
2025-07-14 16:54:31 - src.corder_integration.code_generator.service_decision_maker - INFO - 🤔 进行Service决策: listUnitLimitByCompanyId
2025-07-14 16:54:35 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-14 16:54:35 - src.corder_integration.code_generator.service_decision_maker - INFO - 🤖 LLM决策完成: {'action': 'create_new', 'target_service': None, 'reason': '现有Service文件中没有明显与信用额度查询直接相关的服务，且CustUnitCreditFeignApi和CustCompanyCreditFeignApi看起来是Feign客户端接口而非业务逻辑实现类。建议创建一个新的Service类专门处理信用额度相关业务逻辑，保持职责单一。', 'need_new_service': True, 'modify_existing': False}
2025-07-14 16:54:35 - src.corder_integration.code_generator.interface_adder - INFO - ➕ 开始在Controller中添加新接口: listUnitLimitByCompanyId
2025-07-14 16:54:35 - src.corder_integration.code_generator.interface_adder - INFO - ✅ 成功添加接口方法到Controller
2025-07-14 16:54:35 - src.corder_integration.code_generator.interface_adder - INFO - 📝 已备份原始文件: D:\gitlab\create_project\链数中建一局_1752481767\crcl-open\src\main\java\com\yljr\crcl\limit\interfaces\LsLimitController.java.backup
2025-07-14 16:54:35 - src.corder_integration.code_generator.interface_adder - INFO - ✅ 已保存更新后的Controller文件: D:\gitlab\create_project\链数中建一局_1752481767\crcl-open\src\main\java\com\yljr\crcl\limit\interfaces\LsLimitController.java
2025-07-14 16:54:35 - src.corder_integration.code_generator.controller_interface_manager - INFO - ✅ Controller LsLimitController 处理完成
2025-07-14 16:54:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功在现有Controller中添加接口: listUnitLimitByCompanyId
2025-07-14 16:54:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔧 使用现有模块处理Service和Mapper层: UnitLimitByCompanyId
2025-07-14 16:54:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 Service决策结果: create_new
2025-07-14 16:54:35 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_009 状态更新为 completed
2025-07-14 16:54:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 任务 task_009 执行成功
2025-07-14 16:54:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 第5轮执行完成，处理了 1 个任务
2025-07-14 16:54:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第6轮任务检查...
2025-07-14 16:54:36 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 第6轮找到 1 个可执行任务
2025-07-14 16:54:36 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 开始执行任务: task_010 (api)
2025-07-14 16:54:36 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_010 已被 intelligent_coding_node 领取
2025-07-14 16:54:36 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🌐 执行API接口生成任务: task_010
2025-07-14 16:54:36 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 解析的接口信息:
2025-07-14 16:54:36 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 接口名称: UnitLimitByCompanyIdExport
2025-07-14 16:54:36 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - API路径: /crcl-open-api/lsLimit/listUnitLimitByCompanyIdExport
2025-07-14 16:54:36 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - HTTP方法: GET
2025-07-14 16:54:36 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 输入参数: 4个
2025-07-14 16:54:36 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 输出参数: 3个
2025-07-14 16:54:36 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 业务描述: 复用listUnitLimitByCompanyId接口的查询逻辑，将结果导出为Excel格式
2025-07-14 16:54:36 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 在 D:\gitlab\create_project/链数中建一局_1752481767/crcl-open 中查找最佳Java项目路径...
2025-07-14 16:54:36 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 目标服务名: 确权开立服务
2025-07-14 16:54:38 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-14 16:54:38 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 发现Java项目: crcl-open
2025-07-14 16:54:38 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       🎯 相对路径: .
2025-07-14 16:54:38 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       📊 Java文件: 2251个
2025-07-14 16:54:38 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       📐 目录深度: 0
2025-07-14 16:54:38 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       🏆 优先级分数: 750
2025-07-14 16:54:38 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 排序后的候选路径（前3个）:
2025-07-14 16:54:38 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    1. . (优先级: 750)
2025-07-14 16:54:38 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 选择最佳Java项目路径:
2025-07-14 16:54:38 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 完整路径: D:\gitlab\create_project\链数中建一局_1752481767\crcl-open
2025-07-14 16:54:38 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📋 相对路径: .
2025-07-14 16:54:38 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    🏆 最终优先级: 750
2025-07-14 16:54:38 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 从API路径 /crcl-open-api/lsLimit/listUnitLimitByCompanyIdExport 提取关键字: lsLimit
2025-07-14 16:54:38 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 在项目中搜索关键字相关路径: lsLimit
2025-07-14 16:54:38 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 找到匹配目录: limit (得分: 25)
2025-07-14 16:54:38 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 找到匹配目录: ls (得分: 25)
2025-07-14 16:54:38 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 找到匹配目录: ls (得分: 25)
2025-07-14 16:54:38 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 找到匹配目录: ls (得分: 25)
2025-07-14 16:54:38 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 找到匹配目录: limit (得分: 25)
2025-07-14 16:54:38 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    ✅ 选择最佳匹配目录: limit (路径: src\main\java\com\yljr\crcl\limit)
2025-07-14 16:54:38 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 基于API关键字 'lsLimit' 找到现有路径: D:\gitlab\create_project\链数中建一局_1752481767\crcl-open\src\main\java\com\yljr\crcl\limit
2025-07-14 16:54:38 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -  分析目标项目: D:\gitlab\create_project\链数中建一局_1752481767\crcl-open\src\main\java\com\yljr\crcl\limit
2025-07-14 16:54:38 - src.apis.project_analysis_api - INFO - 🔍 开始分析项目用于代码生成: D:\gitlab\create_project\链数中建一局_1752481767\crcl-open\src\main\java\com\yljr\crcl\limit
2025-07-14 16:54:38 - src.apis.project_analysis_api - INFO - 📋 使用缓存的分析结果
2025-07-14 16:54:38 - src.corder_integration.code_generator.controller_interface_manager - INFO - 🚀 开始处理API接口请求: /crcl-open-api/lsLimit/listUnitLimitByCompanyIdExport
2025-07-14 16:54:38 - src.corder_integration.code_generator.controller_analyzer - INFO - 🔍 开始分析路径下的Controller文件: D:\gitlab\create_project\链数中建一局_1752481767\crcl-open\src\main\java\com\yljr\crcl\limit
2025-07-14 16:54:38 - src.corder_integration.code_generator.controller_analyzer - INFO - 🎯 匹配关键字: lsLimit
2025-07-14 16:54:38 - src.corder_integration.code_generator.controller_analyzer - INFO - 🎯 在 D:\gitlab\create_project\链数中建一局_1752481767\crcl-open\src\main\java\com\yljr\crcl\limit\interfaces\LsLimitController.java 中找到匹配的@RequestMapping: /lsLimit
2025-07-14 16:54:38 - src.corder_integration.code_generator.controller_analyzer - INFO - 📋 提取到 0 个Service依赖
2025-07-14 16:54:38 - src.corder_integration.code_generator.controller_analyzer - INFO - ✅ 找到匹配的Controller: D:\gitlab\create_project\链数中建一局_1752481767\crcl-open\src\main\java\com\yljr\crcl\limit\interfaces\LsLimitController.java
2025-07-14 16:54:38 - src.corder_integration.code_generator.controller_analyzer - INFO - 📊 总共找到 1 个匹配的Controller文件
2025-07-14 16:54:38 - src.corder_integration.code_generator.controller_analyzer - INFO - 🔧 从API路径 '/crcl-open-api/lsLimit/listUnitLimitByCompanyIdExport' 提取接口名称: 'listUnitLimitByCompanyIdExport'
2025-07-14 16:54:38 - src.corder_integration.code_generator.controller_interface_manager - INFO - 📝 处理Controller: LsLimitController
2025-07-14 16:54:38 - src.corder_integration.code_generator.service_decision_maker - INFO - 🔍 开始分析Service需求: listUnitLimitByCompanyIdExport
2025-07-14 16:54:38 - src.corder_integration.code_generator.service_decision_maker - INFO - 📂 扫描项目Service文件: D:\gitlab\create_project\链数中建一局_1752481767\crcl-open
2025-07-14 16:54:39 - src.corder_integration.code_generator.service_decision_maker - INFO - 📊 找到 336 个Service文件
2025-07-14 16:54:39 - src.corder_integration.code_generator.service_decision_maker - INFO - 📂 扫描Application文件: D:\gitlab\create_project\链数中建一局_1752481767\crcl-open
2025-07-14 16:54:39 - src.corder_integration.code_generator.service_decision_maker - INFO - 📊 找到 35 个Application文件
2025-07-14 16:54:39 - src.corder_integration.code_generator.service_decision_maker - INFO - 🤔 进行Service决策: listUnitLimitByCompanyIdExport
2025-07-14 16:54:45 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-14 16:54:45 - src.corder_integration.code_generator.service_decision_maker - INFO - 🤖 LLM决策完成: {'action': 'create_new', 'target_service': None, 'reason': '现有Service中没有与信用额度查询直接相关的服务，且该接口功能（按公司ID查询单位限额并导出）是一个独立的业务功能，适合封装为新的Service。CustUnitCreditFeignApi虽然名称相关，但可能是Feign客户端而非业务逻辑层。建议创建新的Service如UnitLimitService来保持职责单一。', 'need_new_service': True, 'modify_existing': False}
2025-07-14 16:54:45 - src.corder_integration.code_generator.interface_adder - INFO - ➕ 开始在Controller中添加新接口: listUnitLimitByCompanyIdExport
2025-07-14 16:54:45 - src.corder_integration.code_generator.interface_adder - INFO - ✅ 成功添加接口方法到Controller
2025-07-14 16:54:45 - src.corder_integration.code_generator.interface_adder - INFO - 📝 已备份原始文件: D:\gitlab\create_project\链数中建一局_1752481767\crcl-open\src\main\java\com\yljr\crcl\limit\interfaces\LsLimitController.java.backup
2025-07-14 16:54:45 - src.corder_integration.code_generator.interface_adder - INFO - ✅ 已保存更新后的Controller文件: D:\gitlab\create_project\链数中建一局_1752481767\crcl-open\src\main\java\com\yljr\crcl\limit\interfaces\LsLimitController.java
2025-07-14 16:54:45 - src.corder_integration.code_generator.controller_interface_manager - INFO - ✅ Controller LsLimitController 处理完成
2025-07-14 16:54:45 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功在现有Controller中添加接口: listUnitLimitByCompanyIdExport
2025-07-14 16:54:45 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔧 使用现有模块处理Service和Mapper层: UnitLimitByCompanyIdExport
2025-07-14 16:54:45 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 Service决策结果: create_new
2025-07-14 16:54:45 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_010 状态更新为 completed
2025-07-14 16:54:45 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 任务 task_010 执行成功
2025-07-14 16:54:45 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 第6轮执行完成，处理了 1 个任务
2025-07-14 16:54:45 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第7轮任务检查...
2025-07-14 16:54:46 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第7轮没有可执行的智能编码任务
2025-07-14 16:54:46 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 7 个任务，共7轮
2025-07-14 16:54:46 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 7 个任务
2025-07-14 16:54:46 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 16:54:46 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 16:54:46 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 16:54:46 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 16:54:46 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 16:54:46 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 16:54:46 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 16:54:46 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 16:54:46 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-14 16:54:46 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 16:54:46 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 16:54:47 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 16:54:47 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 16:54:47 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 16:54:47 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 16:54:47 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 16:54:47 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 16:54:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 16:54:48 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 16:54:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 16:54:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 16:54:48 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 16:54:48 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 16:54:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-14 16:54:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 16:54:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 16:54:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 16:54:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 16:54:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 16:54:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 16:54:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 16:54:49 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 16:54:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 16:54:49 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 16:54:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 16:54:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 16:54:49 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 16:54:49 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 16:54:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-14 16:54:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 16:54:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 16:54:50 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 16:54:50 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 16:54:50 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 16:54:50 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 16:54:50 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 16:54:50 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 16:54:50 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 16:54:50 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 16:54:50 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 16:54:50 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 16:54:50 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 16:54:50 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 16:54:50 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-14 16:54:50 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 16:54:50 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 16:54:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 16:54:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 16:54:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 16:54:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 16:54:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 16:54:51 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 16:54:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 16:54:51 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 16:54:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 16:54:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 16:54:51 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 16:54:51 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 16:54:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-14 16:54:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 16:54:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 16:54:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 16:54:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 16:54:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 16:54:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 16:54:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 16:54:52 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 16:54:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 16:54:52 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 16:54:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 16:54:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 16:54:52 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 16:54:52 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 16:54:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-14 16:54:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 16:54:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 16:54:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 16:54:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 16:54:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 16:54:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 16:54:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 16:54:53 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 16:54:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 16:54:53 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 16:54:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 16:54:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 16:54:53 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 16:54:53 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 16:54:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-14 16:54:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 16:54:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 16:54:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 16:54:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 16:54:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 16:54:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 16:54:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 16:54:54 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 16:54:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 16:54:55 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 16:54:55 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 16:54:55 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 16:54:55 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 16:54:55 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 16:54:55 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-14 16:54:55 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 16:54:55 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 16:54:55 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 16:54:55 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 16:54:55 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 16:54:55 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 16:54:55 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 16:54:55 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 16:54:55 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 16:54:56 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 16:54:56 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 16:54:56 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 16:54:56 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 16:54:56 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 16:54:56 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-14 16:54:56 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 16:54:56 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 16:54:56 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 16:54:56 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 16:54:56 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 16:54:56 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 16:54:56 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 16:54:56 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 16:54:56 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 16:54:57 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 16:54:57 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 16:54:57 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 16:54:57 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 16:54:57 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 16:54:57 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-14 16:54:57 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 16:54:57 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 16:54:57 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 16:54:57 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 16:54:57 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 16:54:57 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 16:54:57 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 16:54:57 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 16:54:57 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 16:54:58 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 16:54:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 16:54:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 16:54:58 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 16:54:58 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 16:54:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-14 16:54:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 16:54:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 16:54:59 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 16:54:59 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 16:54:59 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 16:54:59 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 16:54:59 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 16:54:59 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 16:54:59 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 16:54:59 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 16:54:59 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 16:54:59 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 16:54:59 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 16:54:59 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 16:54:59 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-14 16:54:59 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 16:54:59 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 16:55:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 16:55:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 16:55:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 16:55:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 16:55:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 16:55:00 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 16:55:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 16:55:00 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 16:55:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 16:55:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 16:55:00 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 16:55:00 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 16:55:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-14 16:55:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 16:55:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 16:55:01 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 16:55:01 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 16:55:01 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 16:55:01 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 16:55:01 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 16:55:01 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 16:55:01 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 16:55:01 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 16:55:01 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 16:55:01 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 16:55:01 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 16:55:01 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 16:55:01 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-14 16:55:01 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 16:55:01 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 16:55:02 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 16:55:02 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 16:55:02 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 16:55:02 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 16:55:02 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 16:55:02 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 16:55:02 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 16:55:03 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 16:55:03 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 16:55:03 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 16:55:03 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 16:55:03 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 16:55:03 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-14 16:55:03 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 16:55:03 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 16:55:03 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 16:55:03 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 16:55:03 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 16:55:03 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 16:55:03 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 16:55:03 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 16:55:03 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 16:55:04 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 16:55:04 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 16:55:04 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 16:55:04 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 16:55:04 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 16:55:04 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-14 16:55:04 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 16:55:04 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 16:55:04 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 16:55:04 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 16:55:04 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 16:55:04 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 16:55:04 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 16:55:04 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 16:55:04 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 16:55:05 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 16:55:05 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 16:55:05 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 16:55:05 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 16:55:05 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 16:55:05 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-14 16:55:05 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 16:55:05 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 16:55:05 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 16:55:05 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 16:55:05 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 16:55:05 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 16:55:05 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 16:55:05 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 16:55:05 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 16:55:06 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 16:55:06 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 16:55:06 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 16:55:06 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 16:55:06 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 16:55:06 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-14 16:55:06 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 16:55:06 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 16:55:07 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 16:55:07 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 16:55:07 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 16:55:07 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 16:55:07 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 16:55:07 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 16:55:07 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 16:55:07 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 16:55:07 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 16:55:07 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 16:55:07 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 16:55:07 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 16:55:07 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-14 16:55:07 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 16:55:07 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 16:55:08 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 16:55:08 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 16:55:08 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 16:55:08 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 16:55:08 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 16:55:08 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 16:55:08 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 16:55:08 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 16:55:08 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 16:55:08 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 16:55:08 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 16:55:08 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 16:55:08 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-14 16:55:08 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 16:55:08 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 16:55:09 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 16:55:09 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 16:55:09 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 16:55:09 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 16:55:09 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 16:55:09 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 16:55:09 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 16:55:09 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 16:55:09 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 16:55:09 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 16:55:09 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 16:55:09 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 16:55:09 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-14 16:55:09 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 16:55:09 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 16:55:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 16:55:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 16:55:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 16:55:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 16:55:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 16:55:10 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 16:55:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 16:55:10 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 16:55:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 16:55:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 16:55:10 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 16:55:10 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 16:55:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-14 16:55:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 16:55:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 16:55:11 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 16:55:11 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 16:55:11 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 16:55:11 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 16:55:11 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 16:55:11 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 16:55:11 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 16:55:12 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 16:55:12 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 16:55:12 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 16:55:12 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 16:55:12 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 16:55:12 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-14 16:55:12 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 16:55:12 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 16:55:12 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 16:55:12 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 16:55:12 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 16:55:12 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 16:55:12 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 16:55:12 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 16:55:12 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 16:55:13 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 16:55:13 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 16:55:13 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 16:55:13 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 16:55:13 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 16:55:13 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-14 16:55:13 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 16:55:13 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 16:55:13 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 16:55:13 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 16:55:13 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 16:55:13 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 16:55:13 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 16:55:13 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 16:55:13 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 16:55:14 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 16:55:14 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 16:55:14 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 16:55:14 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 16:55:14 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 16:55:14 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-14 16:55:14 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 16:55:14 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 16:55:14 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 16:55:14 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 16:55:14 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 16:55:14 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 16:55:14 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 16:55:14 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 16:55:14 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 16:55:15 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 16:55:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 16:55:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 16:55:15 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 16:55:15 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 16:55:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-14 16:55:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 16:55:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 16:55:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 16:55:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 16:55:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 16:55:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 16:55:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 16:55:15 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 16:55:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 16:55:16 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 16:55:16 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 16:55:16 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 16:55:16 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 16:55:16 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 16:55:16 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-14 16:55:16 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 16:55:16 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 16:55:17 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 16:55:17 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 16:55:17 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 16:55:17 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 16:55:17 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 16:55:17 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 16:55:17 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 16:55:17 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 16:55:17 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 16:55:17 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 16:55:17 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 16:55:17 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 16:55:17 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-14 16:55:17 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 16:55:17 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 16:55:18 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 16:55:18 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 16:55:18 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 16:55:18 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 16:55:18 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 16:55:18 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 16:55:18 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 16:55:18 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 16:55:18 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 16:55:18 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 16:55:18 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 16:55:18 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 16:55:18 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-14 16:55:18 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 16:55:18 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 16:55:19 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 16:55:19 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 16:55:19 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 16:55:19 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 16:55:19 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 16:55:19 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 16:55:19 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 16:55:19 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 16:55:19 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 16:55:19 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 16:55:19 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 16:55:19 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 16:55:19 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-14 16:55:19 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 16:55:19 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 16:55:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 16:55:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 16:55:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 16:55:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 16:55:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 16:55:20 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 16:55:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 16:55:20 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 16:55:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 16:55:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 16:55:20 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 16:55:20 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 16:55:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-14 16:55:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 16:55:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 16:55:21 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 16:55:21 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 16:55:21 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 16:55:21 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 16:55:21 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 16:55:21 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 16:55:21 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 16:55:22 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 16:55:22 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 16:55:22 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 16:55:22 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 16:55:22 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 16:55:22 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-14 16:55:22 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 16:55:22 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 16:55:22 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 16:55:22 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 16:55:22 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 16:55:22 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 16:55:22 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 16:55:22 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 16:55:22 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 16:55:23 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 16:55:23 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 16:55:23 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 16:55:23 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 16:55:23 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 16:55:23 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-14 16:55:23 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 16:55:23 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 16:55:23 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 16:55:23 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 16:55:23 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 16:55:23 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 16:55:23 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 16:55:23 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 16:55:23 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 16:55:24 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 16:55:24 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 16:55:24 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 16:55:24 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 16:55:24 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 16:55:24 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-14 16:55:24 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 16:55:24 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 16:55:24 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 16:55:24 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 16:55:24 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 16:55:24 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 16:55:24 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 16:55:24 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 16:55:24 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 16:55:25 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 16:55:25 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 16:55:25 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 16:55:25 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 16:55:25 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 16:55:25 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-14 16:55:25 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 16:55:25 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 16:55:26 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 16:55:26 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 16:55:26 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 16:55:26 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 16:55:26 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 16:55:26 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 16:55:26 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 16:55:26 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 16:55:26 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 16:55:26 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 16:55:26 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 16:55:26 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 16:55:26 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-14 16:55:26 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 16:55:26 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 16:55:27 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 16:55:27 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 16:55:27 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 16:55:27 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 16:55:27 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 16:55:27 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 16:55:27 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 16:55:27 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 16:55:27 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 16:55:27 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 16:55:27 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 16:55:27 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 16:55:27 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-14 16:55:27 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 16:55:27 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 16:55:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 16:55:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 16:55:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 16:55:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 16:55:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 16:55:28 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 16:55:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 16:55:28 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 16:55:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 16:55:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 16:55:28 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 16:55:28 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 16:55:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-14 16:55:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 16:55:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 16:55:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 16:55:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 16:55:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 16:55:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 16:55:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 16:55:29 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 16:55:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 16:55:29 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 16:55:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 16:55:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 16:55:29 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 16:55:29 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 16:55:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-14 16:55:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 16:55:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 16:55:30 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 16:55:30 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 16:55:30 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 16:55:30 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 16:55:30 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 16:55:30 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 16:55:30 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 16:55:30 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 16:55:30 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 16:55:30 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 16:55:30 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 16:55:30 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 16:55:30 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-14 16:55:30 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 16:55:30 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 16:55:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 16:55:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 16:55:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 16:55:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 16:55:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 16:55:31 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 16:55:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 16:55:31 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 16:55:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 16:55:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 16:55:31 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 16:55:31 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 16:55:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-14 16:55:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 16:55:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 16:55:32 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 16:55:32 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 16:55:32 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 16:55:32 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 16:55:32 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 16:55:32 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 16:55:32 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 16:55:33 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 16:55:33 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 16:55:33 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 16:55:33 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 16:55:33 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 16:55:33 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-14 16:55:33 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 16:55:33 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 16:55:33 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 16:55:33 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 16:55:33 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 16:55:33 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 16:55:33 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 16:55:33 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 16:55:33 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 16:55:34 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 16:55:34 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 16:55:34 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 16:55:34 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 16:55:34 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 16:55:34 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-14 16:55:34 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 16:55:34 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 16:55:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 16:55:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 16:55:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 16:55:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 16:55:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 16:55:35 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 16:55:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 16:55:35 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 16:55:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 16:55:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 16:55:35 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 16:55:35 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 16:55:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-14 16:55:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 16:55:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 16:55:36 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 16:55:36 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 16:55:36 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 16:55:36 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 16:55:36 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 16:55:36 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 16:55:36 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 16:55:36 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 16:55:36 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 16:55:36 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 16:55:36 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 16:55:36 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 16:55:36 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-14 16:55:36 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 16:55:36 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 16:55:37 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 16:55:37 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 16:55:37 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 16:55:37 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 16:55:37 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 16:55:37 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 16:55:37 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 16:55:37 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 16:55:37 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 16:55:37 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 16:55:37 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 16:55:37 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 16:55:37 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-14 16:55:37 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 16:55:37 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 16:55:38 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 16:55:38 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 16:55:38 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 16:55:38 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 16:55:38 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 16:55:38 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 16:55:38 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 16:55:38 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 16:55:38 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 16:55:38 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 16:55:38 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 16:55:38 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 16:55:38 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-14 16:55:38 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 16:55:38 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 16:55:39 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 16:55:39 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 16:55:39 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 16:55:39 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 16:55:39 - src.corder_integration.langgraph.workflow_orchestrator - ERROR - 工作流执行失败: Recursion limit of 50 reached without hitting a stop condition. You can increase the limit by setting the `recursion_limit` config key.
For troubleshooting, visit: https://python.langchain.com/docs/troubleshooting/errors/GRAPH_RECURSION_LIMIT
2025-07-14 16:55:39 - werkzeug - INFO - 127.0.0.1 - - [14/Jul/2025 16:55:39] "POST /api/coder-agent/process-document HTTP/1.1" 200 -
2025-07-14 17:56:28 - system - INFO - ==================================================
2025-07-14 17:56:28 - system - INFO - 🚀 智能分析系统日志系统初始化完成
2025-07-14 17:56:28 - system - INFO - 📁 日志根目录: D:\ai_project\document_analyzer\logs
2025-07-14 17:56:28 - system - INFO - 📊 日志级别: INFO
2025-07-14 17:56:28 - system - INFO - 📅 按日期轮转: 每天午夜自动轮转
2025-07-14 17:56:28 - system - INFO - 📂 按月分目录: logs/YYYY-MM/
2025-07-14 17:56:28 - system - INFO - 📝 主日志: logs/2025-07/app.log
2025-07-14 17:56:28 - system - INFO - 🔧 API日志: logs/2025-07/api_server.log
2025-07-14 17:56:28 - system - INFO - 🗂️ 保留天数: 7 天
2025-07-14 17:56:28 - system - INFO - ==================================================
2025-07-14 17:56:45 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-14 17:56:46 - root - WARNING - 智能编码节点不可用: cannot import name 'IntelligentCodingAgent' from partially initialized module 'src.corder_integration.langgraph.nodes.intelligent_coding_node' (most likely due to a circular import) (D:\ai_project\document_analyzer\src\corder_integration\langgraph\nodes\intelligent_coding_node.py)
2025-07-14 17:56:46 - src.utils.task_storage - INFO - 数据库初始化成功
2025-07-14 17:56:46 - markdown_storage - INFO - Markdown存储管理器初始化完成
2025-07-14 17:56:46 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-14 17:56:47 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 17:56:47 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-14 17:56:48 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-14 17:56:49 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-14 17:56:49 - WeaviateVectorDatabase - INFO - ✅ Weaviate连接成功: http://localhost:8080 (gRPC: 50051)
2025-07-14 17:56:49 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/schema/AnalyDesignDocuments "HTTP/1.1 200 OK"
2025-07-14 17:56:49 - WeaviateVectorDatabase - INFO - ✅ Weaviate集合已存在: AnalyDesignDocuments
2025-07-14 17:56:49 - AnalysisServiceManager - INFO - 初始化向量数据库: weaviate
2025-07-14 17:56:49 - sentence_transformers.SentenceTransformer - INFO - Use pytorch device_name: cpu
2025-07-14 17:56:49 - sentence_transformers.SentenceTransformer - INFO - Load pretrained SentenceTransformer: BAAI/bge-large-zh
2025-07-14 17:56:57 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-14 17:56:58 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-14 17:56:58 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-14 17:56:58 - src.utils.weaviate_helper - INFO - 成功连接到 Weaviate: localhost:8080
2025-07-14 17:56:58 - AnalysisServiceManager - INFO - 分析服务管理器初始化完成
2025-07-14 17:56:58 - src.utils.enhanced_analyzer - INFO - 增强分析器初始化完成
2025-07-14 17:56:58 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:8082
 * Running on http://26.26.26.1:8082
2025-07-14 17:56:58 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-07-14 17:56:58 - werkzeug - INFO -  * Restarting with stat
2025-07-14 17:57:00 - system - INFO - ==================================================
2025-07-14 17:57:00 - system - INFO - 🚀 智能分析系统日志系统初始化完成
2025-07-14 17:57:00 - system - INFO - 📁 日志根目录: D:\ai_project\document_analyzer\logs
2025-07-14 17:57:00 - system - INFO - 📊 日志级别: INFO
2025-07-14 17:57:00 - system - INFO - 📅 按日期轮转: 每天午夜自动轮转
2025-07-14 17:57:00 - system - INFO - 📂 按月分目录: logs/YYYY-MM/
2025-07-14 17:57:00 - system - INFO - 📝 主日志: logs/2025-07/app.log
2025-07-14 17:57:00 - system - INFO - 🔧 API日志: logs/2025-07/api_server.log
2025-07-14 17:57:00 - system - INFO - 🗂️ 保留天数: 7 天
2025-07-14 17:57:00 - system - INFO - ==================================================
2025-07-14 17:57:17 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-14 17:57:17 - root - WARNING - 智能编码节点不可用: cannot import name 'IntelligentCodingAgent' from partially initialized module 'src.corder_integration.langgraph.nodes.intelligent_coding_node' (most likely due to a circular import) (D:\ai_project\document_analyzer\src\corder_integration\langgraph\nodes\intelligent_coding_node.py)
2025-07-14 17:57:17 - src.utils.task_storage - INFO - 数据库初始化成功
2025-07-14 17:57:17 - markdown_storage - INFO - Markdown存储管理器初始化完成
2025-07-14 17:57:17 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-14 17:57:18 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 17:57:18 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-14 17:57:19 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-14 17:57:20 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-14 17:57:20 - WeaviateVectorDatabase - INFO - ✅ Weaviate连接成功: http://localhost:8080 (gRPC: 50051)
2025-07-14 17:57:20 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/schema/AnalyDesignDocuments "HTTP/1.1 200 OK"
2025-07-14 17:57:20 - WeaviateVectorDatabase - INFO - ✅ Weaviate集合已存在: AnalyDesignDocuments
2025-07-14 17:57:20 - AnalysisServiceManager - INFO - 初始化向量数据库: weaviate
2025-07-14 17:57:20 - sentence_transformers.SentenceTransformer - INFO - Use pytorch device_name: cpu
2025-07-14 17:57:20 - sentence_transformers.SentenceTransformer - INFO - Load pretrained SentenceTransformer: BAAI/bge-large-zh
2025-07-14 17:57:29 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-14 17:57:31 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-14 17:57:31 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-14 17:57:31 - src.utils.weaviate_helper - INFO - 成功连接到 Weaviate: localhost:8080
2025-07-14 17:57:31 - AnalysisServiceManager - INFO - 分析服务管理器初始化完成
2025-07-14 17:57:31 - src.utils.enhanced_analyzer - INFO - 增强分析器初始化完成
2025-07-14 17:57:31 - werkzeug - WARNING -  * Debugger is active!
2025-07-14 17:57:31 - werkzeug - INFO -  * Debugger PIN: 887-537-592
2025-07-14 17:57:31 - src.apis.coder_agent_api - INFO - 开始处理文档: 链数中建一局_1752487028
2025-07-14 17:57:31 - src.apis.coder_agent_api - INFO - 文档长度: 4931 字符
2025-07-14 17:57:31 - src.apis.coder_agent_api - INFO - 使用LangGraph: True
2025-07-14 17:57:31 - src.apis.coder_agent_api - INFO - 代码输出路径: D:\gitlab\create_project
2025-07-14 17:57:31 - src.apis.coder_agent_api - INFO - 使用LangGraph工作流处理项目: 链数中建一局_1752487028
2025-07-14 17:57:31 - src.corder_integration.langgraph.workflow_orchestrator - INFO - 准备使用异步SQLite检查点: D:\ai_project\document_analyzer\workflow_checkpoints.db
2025-07-14 17:57:31 - src.corder_integration.langgraph.workflow_orchestrator - INFO - 生成目标分支名称: 链数中建一局_1752487028 -> D_20250714_链数中建一局_1752487028
2025-07-14 17:57:31 - src.corder_integration.langgraph.workflow_orchestrator - INFO - 开始执行编码工作流: 链数中建一局_1752487028 -> D:\gitlab\create_project
2025-07-14 17:57:31 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 🚀 开始执行任务拆分: 链数中建一局_1752487028
2025-07-14 17:57:31 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📥 输入状态键: ['design_doc', 'project_name', 'identified_services', 'service_dependencies', 'task_execution_plan', 'parallel_tasks', 'git_repo_url', 'target_branch', 'project_paths', 'output_path', 'repo_initialized', 'generated_services', 'generated_apis', 'generated_sql', 'service_interconnections', 'unit_test_results', 'test_coverage', 'interface_compatibility', 'code_review_results', 'static_analysis_results', 'security_scan_results', 'commit_hashes', 'push_results', 'pr_urls', 'current_phase', 'completed_services', 'failed_services', 'retry_count', 'execution_errors']
2025-07-14 17:57:31 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📄 设计文档长度: 4930
2025-07-14 17:57:31 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 🔄 当前阶段: task_splitting
2025-07-14 17:57:31 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📁 计算的基础项目路径: D:\gitlab\create_project/链数中建一局_1752487028
2025-07-14 17:57:32 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 17:57:32 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 模板 task_splitting/design_analysis_prompts.jinja2 加载成功
2025-07-14 17:57:32 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 模板 task_splitting/service_boundary_prompts.jinja2 加载成功
2025-07-14 17:57:32 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 模板 task_splitting/dependency_analysis_prompts.jinja2 加载成功
2025-07-14 17:57:32 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 模板 task_splitting/task_scheduling_prompts.jinja2 加载成功
2025-07-14 17:57:32 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 模板 task_splitting/generate_sqlite_tasks_prompts.jinja2 加载成功
2025-07-14 17:57:32 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 任务数据库初始化完成
2025-07-14 17:57:32 - src.corder_integration.langgraph.nodes.task_splitting_node - WARNING - ⚠️ 无法删除文件 coding_agent_workflow.db-wal，可能被其他进程占用
2025-07-14 17:57:32 - src.corder_integration.langgraph.nodes.task_splitting_node - WARNING - ⚠️ 无法删除文件 coding_agent_workflow.db-shm，可能被其他进程占用
2025-07-14 17:57:32 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 数据库WAL检查点和优化完成
2025-07-14 17:57:33 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 数据库表结构重置完成
2025-07-14 17:57:33 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📋 步骤1：开始设计文档分析...
2025-07-14 17:57:33 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📄 文档分割完成：4930 字符 -> 3 个窗口
2025-07-14 17:57:33 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📄 设计文档分割成 3 个窗口
2025-07-14 17:57:33 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 分析窗口 1/3 (字符: 0-1926)
2025-07-14 17:57:49 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-14 17:57:49 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 窗口 1 分析完成
2025-07-14 17:57:49 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 分析窗口 2/3 (字符: 1626-3553)
2025-07-14 17:58:01 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-14 17:58:01 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 窗口 2 分析完成
2025-07-14 17:58:01 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 分析窗口 3/3 (字符: 3253-4930)
2025-07-14 17:58:14 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-14 17:58:14 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 窗口 3 分析完成
2025-07-14 17:58:14 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 🔄 合并 3 个设计分析分析结果...
2025-07-14 17:58:14 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📊 合并后的设计分析结果: {'architecture_style': '微服务', 'technology_stack': ['MySQL', 'Redis', 'Nacos', 'RESTful API', 'Spring Boot', 'MySQL 8.0', 'Spring Boot 2.7.x', 'Excel导出工具（如Apache POI或EasyExcel）', 'PageHelper', 'MyBatis Plus 3.5.x', 'pageHelper', 'Spring Cloud 2021.x', 'RabbitMQ 3.8', 'Redis 6.0'], 'functional_modules': [{'name': '用户服务', 'description': '处理用户管理、权限控制和角色管理', 'responsibilities': ['组织单元管理', '用户认证与授权']}, {'name': '确权开立服务', 'description': '处理业务数据的推送和校验逻辑', 'responsibilities': ['业务数据校验', '额度管理']}, {'name': '多组织单元管理', 'description': '管理组织单元的基本信息', 'responsibilities': ['组织单元创建与维护', '组织单元状态管理']}, {'name': '确权开立服务', 'description': '处理确权开立和额度管理', 'responsibilities': ['确权开立处理', '额度分配与管理']}, {'name': '额度管理模块', 'description': '处理组织单元额度的查询和导出功能', 'responsibilities': ['查询组织单元额度信息', '生成Excel报表并导出']}], 'system_components': ['Redis缓存', 'MySQL数据库', 'zqyl-user-center-service', 'crcl-open（确权开立服务）', '多组织单元表(t_cust_multiorg_unit)', 'zqyl-user-center-service（用户服务）', 'crcl-open', '确权开立服务(crcl-open)'], 'data_flow': ['额度查询 → 额度使用统计 → 额度调整', '企业信息 → 组织单元创建 → 额度分配', '前端请求 -> crcl-open服务 -> 调用zqyl-user-center-service获取组织单元信息 -> 查询数据库获取额度信息 -> 生成Excel文件 -> 返回文件下载地址', '用户请求 -> 用户服务 -> 组织单元查询', '业务数据 -> 确权开立服务 -> 数据校验 -> 平台推送', '额度信息查询 -> 使用PageHelper分页 -> 返回分页结果'], 'integration_points': ['用户服务与确权开立服务间的API调用', '组织单元管理API', '服务与Redis的缓存交互', 'Redis缓存连接', '确权开立服务API(/crcl-open-api/lsLimit/listUnitLimitByCompanyId)', 'MySQL数据库连接', 'zqyl-user-center-service的/queryCompanyUnitList接口', '服务与Nacos的注册与发现'], 'summary': '该设计采用微服务架构，技术栈成熟且全面，包含用户服务和确权开立服务两个核心模块。系统通过Nacos实现服务发现，Redis提供缓存支持，MySQL存储持久化数据。主要优化点在于调整接口校验逻辑以支持业务数据重推，并新增组织单元额度管理功能。整体架构松耦合、可扩展性强，但需注意服务间调用的性能和数据一致性。 该设计采用微服务架构，包含多组织单元管理和确权开立两大核心模块。使用MySQL存储组织单元信'}
2025-07-14 17:58:14 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 设计概要: 该设计采用微服务架构，技术栈成熟且全面，包含用户服务和确权开立服务两个核心模块。系统通过Nacos实现服务发现，Redis提供缓存支持，MySQL存储持久化数据。主要优化点在于调整接口校验逻辑以支持业务数据重推，并新增组织单元额度管理功能。整体架构松耦合、可扩展性强，但需注意服务间调用的性能和数据一致性。 该设计采用微服务架构，包含多组织单元管理和确权开立两大核心模块。使用MySQL存储组织单元信
2025-07-14 17:58:14 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 🏗️ 步骤2：开始技术架构分析...
2025-07-14 17:58:14 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 技术架构概要: 该设计采用微服务架构，技术栈成熟且全面，包含用户服务和确权开立服务两个核心模块。系统通过Nacos实现服务发现，Redis提供缓存支持，MySQL存储持久化数据。主要优化点在于调整接口校验逻辑以支持业务数据重推，并新增组织单元额度管理功能。整体架构松耦合、可扩展性强，但需注意服务间调用的性能和数据一致性。 该设计采用微服务架构，包含多组织单元管理和确权开立两大核心模块。使用MySQL存储组织单元信
2025-07-14 17:58:14 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 🔍 步骤3：开始服务边界识别...
2025-07-14 17:58:14 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 输入 - 设计概要: 该设计采用微服务架构，技术栈成熟且全面，包含用户服务和确权开立服务两个核心模块。系统通过Nacos实现服务发现，Redis提供缓存支持，MySQL存储持久化数据。主要优化点在于调整接口校验逻辑以支持业务数据重推，并新增组织单元额度管理功能。整体架构松耦合、可扩展性强，但需注意服务间调用的性能和数据一致性。 该设计采用微服务架构，包含多组织单元管理和确权开立两大核心模块。使用MySQL存储组织单元信
2025-07-14 17:58:14 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 输入 - 架构概要: 该设计采用微服务架构，技术栈成熟且全面，包含用户服务和确权开立服务两个核心模块。系统通过Nacos实现服务发现，Redis提供缓存支持，MySQL存储持久化数据。主要优化点在于调整接口校验逻辑以支持业务数据重推，并新增组织单元额度管理功能。整体架构松耦合、可扩展性强，但需注意服务间调用的性能和数据一致性。 该设计采用微服务架构，包含多组织单元管理和确权开立两大核心模块。使用MySQL存储组织单元信
2025-07-14 17:58:14 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 服务拆分提示词长度: 2333
2025-07-14 17:58:27 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-14 17:58:27 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 服务拆分LLM响应长度: 1065
2025-07-14 17:58:27 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📊 服务拆分解析结果: {'identified_services': [{'name': '用户服务', 'description': '处理用户相关功能的核心服务', 'git_repository': '', 'responsibilities': ['用户管理', '权限控制'], 'api_endpoints': [], 'database_tables': [], 'external_service_calls': [], 'config_requirements': ['MySQL数据库连接', 'Redis缓存配置', 'Nacos服务注册发现']}, {'name': '确权开立服务', 'description': '处理确权开立业务的核心服务', 'git_repository': '', 'responsibilities': ['确权业务处理', '组织单元额度管理'], 'api_endpoints': [], 'database_tables': [{'table_name': '组织单元信息表', 'create_sql': '', 'description': '存储组织单元基础信息'}], 'external_service_calls': [], 'config_requirements': ['MySQL数据库连接', 'Redis缓存配置', 'Nacos服务注册发现']}], 'service_call_relationships': {'dependencies': []}, 'summary': '基于设计文档的服务分析概要，确认涉及2个服务（用户服务和确权开立服务），未明确新增接口数量，1个数据库表（组织单元信息表）。注意：设计文档中未提供具体的API端点、SQL语句和明确的调用关系细节。'}
2025-07-14 17:58:27 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 🎯 识别的服务列表: [{'name': '用户服务', 'description': '处理用户相关功能的核心服务', 'git_repository': '', 'responsibilities': ['用户管理', '权限控制'], 'api_endpoints': [], 'database_tables': [], 'external_service_calls': [], 'config_requirements': ['MySQL数据库连接', 'Redis缓存配置', 'Nacos服务注册发现']}, {'name': '确权开立服务', 'description': '处理确权开立业务的核心服务', 'git_repository': '', 'responsibilities': ['确权业务处理', '组织单元额度管理'], 'api_endpoints': [], 'database_tables': [{'table_name': '组织单元信息表', 'create_sql': '', 'description': '存储组织单元基础信息'}], 'external_service_calls': [], 'config_requirements': ['MySQL数据库连接', 'Redis缓存配置', 'Nacos服务注册发现']}]
2025-07-14 17:58:27 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 🔢 识别的服务数量: 2
2025-07-14 17:58:27 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 服务拆分概要: 基于设计文档的服务分析概要，确认涉及2个服务（用户服务和确权开立服务），未明确新增接口数量，1个数据库表（组织单元信息表）。注意：设计文档中未提供具体的API端点、SQL语句和明确的调用关系细节。
2025-07-14 17:58:27 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 🌐 步骤4：开始依赖分析...
2025-07-14 17:58:27 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 依赖分析提示词长度: 2434
2025-07-14 17:58:42 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-14 17:58:42 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 依赖分析LLM响应长度: 1225
2025-07-14 17:58:42 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📊 依赖分析解析结果: {'service_dependencies': {'用户服务': {'database_dependencies': [{'database_type': 'MySQL', 'config_info': '组织单元信息表', 'tables_needed': ['组织单元信息表'], 'description': '存储组织单元信息，用于多组织单元管理'}], 'api_call_dependencies': [], 'provides_apis': [{'endpoint': '未明确', 'used_by': ['确权开立服务']}]}, '确权开立服务': {'database_dependencies': [], 'api_call_dependencies': [{'target_service': '用户服务', 'target_endpoint': '未明确', 'call_purpose': '获取组织单元信息', 'dependency_type': '强依赖'}], 'provides_apis': []}}, 'development_order': [{'phase': 1, 'services': ['用户服务'], 'tasks': ['创建组织单元信息表', '实现组织单元管理相关接口'], 'reason': '确权开立服务需要调用用户服务的接口获取组织单元信息'}, {'phase': 2, 'services': ['确权开立服务'], 'tasks': ['实现业务接口', '调用用户服务接口获取组织单元信息'], 'reason': '依赖用户服务的接口'}], 'critical_path': ['用户服务 -> 确权开立服务'], 'parallel_development': [], 'summary': '分析了2个服务的依赖关系，建议分2个阶段开发，关键路径为用户服务 -> 确权开立服务'}
2025-07-14 17:58:42 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 依赖分析概要: 分析了2个服务的依赖关系，建议分2个阶段开发，关键路径为用户服务 -> 确权开立服务
2025-07-14 17:58:42 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📅 步骤5：开始制定执行计划...
2025-07-14 17:58:42 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 任务调度提示词长度: 6326
2025-07-14 17:59:42 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-14 17:59:42 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 任务调度LLM响应长度: 6153
2025-07-14 17:59:42 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📊 执行计划解析结果: {'execution_phases': [{'phase_name': '基础设施搭建阶段', 'phase_order': 1, 'description': '搭建基础环境和服务依赖', 'estimated_duration': '2天', 'services_involved': ['全部服务'], 'task_categories': [{'category': 'database', 'description': '数据库相关任务', 'tasks': [{'task_name': '创建组织单元信息表', 'service': '基础设施', 'deliverable': 'CREATE TABLE语句', 'estimated_hours': 4, 'prerequisites': [], 'assignee_role': 'DBA'}, {'task_name': '设计索引和约束', 'service': '基础设施', 'deliverable': 'ALTER TABLE语句', 'estimated_hours': 2, 'prerequisites': ['组织单元信息表创建'], 'assignee_role': 'DBA'}]}, {'category': 'config', 'description': '配置管理', 'tasks': [{'task_name': '搭建Nacos服务发现', 'service': '基础设施', 'deliverable': 'Nacos运行实例', 'estimated_hours': 3, 'prerequisites': [], 'assignee_role': '运维工程师'}, {'task_name': '配置Redis缓存', 'service': '基础设施', 'deliverable': 'Redis连接配置', 'estimated_hours': 2, 'prerequisites': [], 'assignee_role': '运维工程师'}]}], 'success_criteria': ['数据库表可正常访问', 'Nacos服务注册正常', 'Redis连接正常'], 'parallel_execution': True}, {'phase_name': '核心服务开发阶段', 'phase_order': 2, 'description': '按依赖顺序开发用户服务和确权开立服务', 'estimated_duration': '6天', 'services_involved': ['用户服务', '确权开立服务'], 'task_categories': [{'category': 'api', 'description': 'API接口开发', 'tasks': [{'task_name': '用户服务API设计', 'service': '用户服务', 'deliverable': 'API文档初稿', 'estimated_hours': 8, 'prerequisites': ['基础设施就绪'], 'assignee_role': '架构师'}, {'task_name': '确权开立服务API设计', 'service': '确权开立服务', 'deliverable': 'API文档初稿', 'estimated_hours': 8, 'prerequisites': ['用户服务API设计'], 'assignee_role': '架构师'}]}, {'category': 'service', 'description': '业务逻辑实现', 'tasks': [{'task_name': '用户服务核心逻辑', 'service': '用户服务', 'deliverable': '用户服务实现代码', 'estimated_hours': 16, 'prerequisites': ['用户服务API设计'], 'assignee_role': '后端开发'}, {'task_name': '确权开立服务核心逻辑', 'service': '确权开立服务', 'deliverable': '确权服务实现代码', 'estimated_hours': 16, 'prerequisites': ['用户服务核心逻辑完成'], 'assignee_role': '后端开发'}]}], 'success_criteria': ['核心API文档完成', '业务逻辑单元测试通过'], 'parallel_execution': False}, {'phase_name': '接口对接和联调阶段', 'phase_order': 3, 'description': '服务间API集成和测试', 'estimated_duration': '3天', 'services_involved': ['用户服务', '确权开立服务'], 'task_categories': [{'category': 'integration', 'description': '服务集成', 'tasks': [{'task_name': '用户服务API联调', 'service': '用户服务', 'deliverable': '联调测试报告', 'estimated_hours': 8, 'prerequisites': ['用户服务核心逻辑完成'], 'assignee_role': '测试工程师'}, {'task_name': '服务间调用验证', 'service': '确权开立服务', 'deliverable': '调用链路验证报告', 'estimated_hours': 8, 'prerequisites': ['确权开立服务核心逻辑完成'], 'assignee_role': '测试工程师'}]}], 'success_criteria': ['服务间调用成功率100%', '关键业务场景验证通过'], 'parallel_execution': False}, {'phase_name': '系统测试和部署阶段', 'phase_order': 4, 'description': '最终测试和生产部署', 'estimated_duration': '3天', 'services_involved': ['全部服务'], 'task_categories': [{'category': 'test', 'description': '系统测试', 'tasks': [{'task_name': '端到端测试', 'service': '测试', 'deliverable': 'E2E测试报告', 'estimated_hours': 12, 'prerequisites': ['服务集成完成'], 'assignee_role': '测试工程师'}]}, {'category': 'deployment', 'description': '部署任务', 'tasks': [{'task_name': '生产环境部署', 'service': '运维', 'deliverable': '部署清单', 'estimated_hours': 8, 'prerequisites': ['系统测试通过'], 'assignee_role': '运维工程师'}]}], 'success_criteria': ['生产环境运行稳定', '监控指标正常'], 'parallel_execution': False}], 'parallel_groups': [{'group_name': '基础设施并行组', 'group_order': 1, 'services': ['数据库', '配置中心'], 'estimated_duration': '2天', 'description': '基础设施可并行搭建', 'coordination_points': ['网络配置统一']}], 'execution_order': ['基础设施搭建', '用户服务开发', '确权开立服务开发', '服务联调', '系统测试', '生产部署'], 'resource_allocation': {'backend_developers': 2, 'test_engineers': 1, 'devops_engineers': 1, 'total_estimated_time': '14天'}, 'risk_management': {'critical_dependencies': [{'task': '用户服务开发', 'risk': '进度延迟影响确权服务开发', 'mitigation': '预留2天缓冲时间'}], 'buffer_time': '15%', 'contingency_plans': ['关键开发人员备份', '每日站会跟踪进度']}, 'summary': '项目分为4个阶段，预计14天完成，重点保障用户服务开发进度'}
2025-07-14 17:59:42 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 💾 步骤6：开始生成SQLite任务...
2025-07-14 17:59:42 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📄 执行计划较长(6549字符)，使用滑动窗口处理
2025-07-14 17:59:42 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📄 文档分割完成：6549 字符 -> 4 个窗口
2025-07-14 17:59:42 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 处理计划窗口 1/4
2025-07-14 18:02:12 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-14 18:02:12 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 窗口 1 任务生成完成
2025-07-14 18:02:12 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 处理计划窗口 2/4
2025-07-14 18:04:44 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-14 18:04:44 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 窗口 2 任务生成完成
2025-07-14 18:04:44 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 处理计划窗口 3/4
2025-07-14 18:06:57 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-14 18:06:57 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 窗口 3 任务生成完成
2025-07-14 18:06:57 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 处理计划窗口 4/4
2025-07-14 18:09:04 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-14 18:09:04 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 窗口 4 任务生成完成
2025-07-14 18:09:04 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 🔄 合并 4 个任务生成分析结果...
2025-07-14 18:09:04 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📊 任务生成解析结果: {'tasks': [{'task_id': 'task_001', 'service_name': '系统', 'task_type': 'git_extraction', 'priority': 1, 'dependencies': [], 'estimated_duration': '5分钟', 'description': '从设计文档提取GitLab仓库地址', 'implementation_details': '解析设计文档，提取用户服务 http://gitlab.local/ls/zqyl-user-center-service.git 和确权开立服务 http://gitlab.local/ls/crcl-open.git 仓库地址', 'deliverables': ['GitLab仓库地址清单', '仓库访问验证报告'], 'completion_criteria': '成功提取并验证两个GitLab仓库地址可访问性', 'parameters': {'repositories': ['zqyl-user-center-service', 'crcl-open']}}, {'task_id': 'task_002', 'service_name': '用户服务', 'task_type': 'git_clone', 'priority': 2, 'dependencies': ['task_001'], 'estimated_duration': '10分钟', 'description': '下载用户服务代码到D:\\gitlab\\create_project/链数中建一局_1752487028/zqyl-user-center-service', 'implementation_details': '使用git clone命令下载用户服务代码到指定目录，确保项目结构完整可编译', 'deliverables': ['用户服务源码目录'], 'completion_criteria': '代码下载完成，项目目录存在且包含pom.xml文件', 'parameters': {'git_url': 'http://gitlab.local/ls/zqyl-user-center-service.git', 'local_path': 'D:\\gitlab\\create_project/链数中建一局_1752487028/zqyl-user-center-service'}}, {'task_id': 'task_003', 'service_name': '确权开立服务', 'task_type': 'git_clone', 'priority': 2, 'dependencies': ['task_001'], 'estimated_duration': '10分钟', 'description': '下载确权开立服务代码到D:\\gitlab\\create_project/链数中建一局_1752487028/crcl-open', 'implementation_details': '使用git clone命令下载确权开立服务代码到指定目录，确保项目结构完整可编译', 'deliverables': ['确权开立服务源码目录'], 'completion_criteria': '代码下载完成，项目目录存在且包含pom.xml文件', 'parameters': {'git_url': 'http://gitlab.local/ls/crcl-open.git', 'local_path': 'D:\\gitlab\\create_project/链数中建一局_1752487028/crcl-open'}}, {'task_id': 'task_004', 'service_name': '用户服务', 'task_type': 'code_analysis', 'priority': 3, 'dependencies': ['task_002'], 'estimated_duration': '20分钟', 'description': '分析用户服务代码结构，确定MultiorgManageController添加位置', 'implementation_details': '分析项目package结构和controller层，找到或创建MultiorgManageController类的最佳位置', 'deliverables': ['代码结构从Controller层开始到数据获取的完整路径'], 'completion_criteria': '确定MultiorgManageController的包路径和文件位置，明确依赖的Service层结构', 'parameters': {'project_path': 'D:\\gitlab\\create_project/链数中建一局_1752487028/zqyl-user-center-service', 'target_controller': 'MultiorgManageController', 'target_api': '/general/multiorgManage/queryCompanyUnitList'}}, {'task_id': 'task_005', 'service_name': '确权开立服务', 'task_type': 'code_analysis', 'priority': 3, 'dependencies': ['task_003'], 'estimated_duration': '20分钟', 'description': '分析确权开立服务代码结构，确定LsLimitController添加位置', 'implementation_details': '分析项目package结构和controller层，找到或创建LsLimitController类的最佳位置，支持两个接口开发', 'deliverables': ['代码结构从Controller层开始到数据获取的完整路径', 'Feign客户端配置方案'], 'completion_criteria': '确定LsLimitController的包路径和文件位置，明确服务间调用的Feign配置', 'parameters': {'project_path': 'D:\\gitlab\\create_project/链数中建一局_1752487028/crcl-open', 'target_controller': 'LsLimitController', 'target_apis': ['/crcl-open-api/lsLimit/listUnitLimitByCompanyId', '/crcl-open-api/lsLimit/listUnitLimitByCompanyIdExport']}}, {'task_id': 'task_006', 'service_name': '用户服务', 'task_type': 'config', 'priority': 4, 'dependencies': ['task_004'], 'estimated_duration': '15分钟', 'description': '配置用户服务数据库连接：jdbc:mysql://localhost:6446/dbwebappdb', 'implementation_details': '修改application.yml文件，配置数据库连接信息包括URL、用户名密码和连接池设置', 'deliverables': ['数据库配置文件', '连接测试报告'], 'completion_criteria': 'application.yml文件已更新，数据库连接配置正确且可连通', 'parameters': {'config_file': 'D:\\gitlab\\create_project/链数中建一局_1752487028/zqyl-user-center-service/src/main/resources/application.yml', 'database_url': 'jdbc:mysql://localhost:6446/dbwebappdb?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC&characterEncoding=utf8&useUnicode=true', 'username': 'dbwebapp', 'password': 'dbwebapp'}}, {'task_id': 'task_007', 'service_name': '用户服务', 'task_type': 'database', 'priority': 5, 'dependencies': ['task_006'], 'estimated_duration': '15分钟', 'description': '创建t_cust_multiorg_unit表，包含id,company_id,unit_code,unit_name等字段', 'implementation_details': '编写建表SQL脚本，定义主键、索引和字段约束，创建对应的Entity和Mapper文件', 'deliverables': ['建表SQL脚本', 'Entity实体类', 'Mapper接口文件'], 'completion_criteria': '表结构创建成功，Entity和Mapper文件可正常编译，支持基本CRUD操作', 'parameters': {'table_name': 't_cust_multiorg_unit', 'sql_location': 'src/main/resources/sql/t_cust_multiorg_unit.sql'}}, {'task_id': 'task_008', 'service_name': '用户服务', 'task_type': 'api', 'priority': 6, 'dependencies': ['task_007'], 'estimated_duration': '60分钟', 'description': '实现GET /general/multiorgManage/queryCompanyUnitList接口', 'implementation_details': '在MultiorgManageController中实现查询接口，支持条件查询和分页，返回规定的字段格式', 'deliverables': ['MultiorgManageController类', 'Service业务逻辑层', '接口文档'], 'completion_criteria': '接口可正常访问，返回数据格式符合规范，支持条件查询和分页功能', 'parameters': {'project_path': 'D:\\gitlab\\create_project/链数中建一局_1752487028/zqyl-user-center-service', 'api_path': '/general/multiorgManage/queryCompanyUnitList', 'http_method': 'GET', 'content_type': 'application/json', 'request_params': {'unitCode': '组织单元编码(可选)', 'openStatus': '开通状态(可选)', 'unitList': '组织单元列表(可选)'}, 'response_params': {'unitId': '组织单元ID', 'unitTypeDicType': '组织单元类型字典类型', 'unitTypeId': '组织单元类型ID', 'openStatus': '开通状态', 'unitCode': '组织单元编码', 'unitName': '组织单元名称'}, 'business_logic': '根据查询条件查询组织单元信息，支持按编码、状态等条件筛选', 'data_source': 't_cust_multiorg_unit表', 'validation_rules': {'unitCode': '长度不超过50字符', 'openStatus': '取值范围0-1'}}}, {'task_id': 'task_009', 'service_name': '确权开立服务', 'task_type': 'api', 'priority': 7, 'dependencies': ['task_008'], 'estimated_duration': '90分钟', 'description': '实现GET /crcl-open-api/lsLimit/listUnitLimitByCompanyId接口，调用用户服务', 'implementation_details': '在LsLimitController中实现额度查询接口，配置Feign客户端调用用户服务接口获取组织单元信息', 'deliverables': ['LsLimitController类', 'Feign客户端配置', '业务逻辑层'], 'completion_criteria': '接口可正常访问，能成功调用用户服务，返回额度数据格式正确', 'parameters': {'project_path': 'D:\\gitlab\\create_project/链数中建一局_1752487028/crcl-open', 'api_path': '/crcl-open-api/lsLimit/listUnitLimitByCompanyId', 'http_method': 'GET', 'content_type': 'application/json', 'request_params': {'gwCompanyId': '公司ID(必填)', 'unitName': '组织单元名称(可选)', 'limitSource': '额度来源(可选)', 'bizType': '业务类型(必填)', 'page': '页码(可选,默认1)', 'pageRow': '每页行数(可选,默认10)'}, 'response_params': {'totalLimitAmt': '总额度金额', 'usedLimitAmt': '已用额度金额', 'usableLimitAmt': '可用额度金额', 'unitLimitListDetail': '单元额度详情列表'}, 'business_logic': '根据公司ID和筛选条件查询组织单元额度信息，调用用户服务获取组织单元基础信息', 'data_source': '本地额度表 + 用户服务接口', 'external_call': '/general/multiorgManage/queryCompanyUnitList', 'validation_rules': {'gwCompanyId': '必填，数值类型', 'bizType': '必填，业务类型枚举值', 'page': '正整数，默认1', 'pageRow': '正整数，范围1-100'}}}, {'task_id': 'task_010', 'service_name': '确权开立服务', 'task_type': 'api', 'priority': 8, 'dependencies': ['task_009'], 'estimated_duration': '45分钟', 'description': '实现GET /crcl-open-api/lsLimit/listUnitLimitByCompanyIdExport导出接口', 'implementation_details': '在LsLimitController中实现Excel导出接口，复用listUnitLimitByCompanyId的数据逻辑', 'deliverables': ['导出接口方法', 'Excel工具类', '导出模板文件'], 'completion_criteria': '接口可正常访问，能成功导出Excel文件，表头和数据格式正确', 'parameters': {'project_path': 'D:\\gitlab\\create_project/链数中建一局_1752487028/crcl-open', 'api_path': '/crcl-open-api/lsLimit/listUnitLimitByCompanyIdExport', 'http_method': 'GET', 'content_type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'request_params': {'gwCompanyId': '公司ID(必填)', 'unitName': '组织单元名称(可选)', 'limitSource': '额度来源(可选)', 'bizType': '业务类型(必填)'}, 'response_params': {'file': 'Excel文件流', 'filename': '导出文件名', 'contentType': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'}, 'business_logic': '复用listUnitLimitByCompanyId接口的查询逻辑，将结果导出为Excel格式', 'data_source': '调用listUnitLimitByCompanyId接口获取数据', 'export_format': 'xlsx', 'export_headers': ['组织单元名称', '额度名称', '额度类型', '已分配额度', '已用额度', '可用额度'], 'validation_rules': {'gwCompanyId': '必填，数值类型', 'bizType': '必填，业务类型枚举值'}}}, {'task_id': 'task_011', 'service_name': '系统', 'task_type': 'integration_test', 'priority': 9, 'dependencies': ['task_008', 'task_009', 'task_010'], 'estimated_duration': '30分钟', 'description': '测试确权开立服务调用用户服务接口的完整流程', 'implementation_details': '编写集成测试用例，验证服务间调用正确性和数据完整性', 'deliverables': ['集成测试用例', '测试数据脚本', '测试报告'], 'completion_criteria': '所有测试用例通过，接口调用链路正常，数据返回格式正确', 'parameters': {'test_scenarios': ['组织单元额度查询测试'], 'test_data': {'gwCompanyId': 1, 'unitName': '测试单元', 'bizType': 80}}}, {'task_id': 'task_012', 'service_name': '系统', 'task_type': 'deployment', 'priority': 10, 'dependencies': ['task_011'], 'estimated_duration': '20分钟', 'description': '提交代码到GitLab仓库，commit message: feat: 新增组织单元额度管理功能', 'implementation_details': '执行git add、git commit和git push命令，提交所有新增和修改的代码文件', 'deliverables': ['Git提交记录', '代码合并报告', '部署文档'], 'completion_criteria': '代码成功提交到GitLab仓库，commit信息清晰，无冲突', 'parameters': {'repositories': [{'path': 'D:\\gitlab\\create_project/链数中建一局_1752487028/zqyl-user-center-service', 'changes': '新增组织单元查询接口'}, {'path': 'D:\\gitlab\\create_project/链数中建一局_1752487028/crcl-open', 'changes': '新增组织单元额度列表和导出接口'}]}}], 'total_tasks': 12, 'summary': '生成12个任务：GitLab代码下载->结构分析->环境配置->接口开发->测试部署。严格使用设计文档中的真实接口路径和参数，确保先开发用户服务接口，再开发依赖它的确权开立服务接口。 生成12个任务：GitLab代码下载->结构分析->环境配置->接口开发->测试部署。严格使用设计文档中的真实接口路径和参数，确保先开发用户服务接口，再开发依赖它的确权开立服务接口。 生成12个任务：GitLab代码'}
2025-07-14 18:09:04 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 🎯 生成的任务列表: [{'task_id': 'task_001', 'service_name': '系统', 'task_type': 'git_extraction', 'priority': 1, 'dependencies': [], 'estimated_duration': '5分钟', 'description': '从设计文档提取GitLab仓库地址', 'implementation_details': '解析设计文档，提取用户服务 http://gitlab.local/ls/zqyl-user-center-service.git 和确权开立服务 http://gitlab.local/ls/crcl-open.git 仓库地址', 'deliverables': ['GitLab仓库地址清单', '仓库访问验证报告'], 'completion_criteria': '成功提取并验证两个GitLab仓库地址可访问性', 'parameters': {'repositories': ['zqyl-user-center-service', 'crcl-open']}}, {'task_id': 'task_002', 'service_name': '用户服务', 'task_type': 'git_clone', 'priority': 2, 'dependencies': ['task_001'], 'estimated_duration': '10分钟', 'description': '下载用户服务代码到D:\\gitlab\\create_project/链数中建一局_1752487028/zqyl-user-center-service', 'implementation_details': '使用git clone命令下载用户服务代码到指定目录，确保项目结构完整可编译', 'deliverables': ['用户服务源码目录'], 'completion_criteria': '代码下载完成，项目目录存在且包含pom.xml文件', 'parameters': {'git_url': 'http://gitlab.local/ls/zqyl-user-center-service.git', 'local_path': 'D:\\gitlab\\create_project/链数中建一局_1752487028/zqyl-user-center-service'}}, {'task_id': 'task_003', 'service_name': '确权开立服务', 'task_type': 'git_clone', 'priority': 2, 'dependencies': ['task_001'], 'estimated_duration': '10分钟', 'description': '下载确权开立服务代码到D:\\gitlab\\create_project/链数中建一局_1752487028/crcl-open', 'implementation_details': '使用git clone命令下载确权开立服务代码到指定目录，确保项目结构完整可编译', 'deliverables': ['确权开立服务源码目录'], 'completion_criteria': '代码下载完成，项目目录存在且包含pom.xml文件', 'parameters': {'git_url': 'http://gitlab.local/ls/crcl-open.git', 'local_path': 'D:\\gitlab\\create_project/链数中建一局_1752487028/crcl-open'}}, {'task_id': 'task_004', 'service_name': '用户服务', 'task_type': 'code_analysis', 'priority': 3, 'dependencies': ['task_002'], 'estimated_duration': '20分钟', 'description': '分析用户服务代码结构，确定MultiorgManageController添加位置', 'implementation_details': '分析项目package结构和controller层，找到或创建MultiorgManageController类的最佳位置', 'deliverables': ['代码结构从Controller层开始到数据获取的完整路径'], 'completion_criteria': '确定MultiorgManageController的包路径和文件位置，明确依赖的Service层结构', 'parameters': {'project_path': 'D:\\gitlab\\create_project/链数中建一局_1752487028/zqyl-user-center-service', 'target_controller': 'MultiorgManageController', 'target_api': '/general/multiorgManage/queryCompanyUnitList'}}, {'task_id': 'task_005', 'service_name': '确权开立服务', 'task_type': 'code_analysis', 'priority': 3, 'dependencies': ['task_003'], 'estimated_duration': '20分钟', 'description': '分析确权开立服务代码结构，确定LsLimitController添加位置', 'implementation_details': '分析项目package结构和controller层，找到或创建LsLimitController类的最佳位置，支持两个接口开发', 'deliverables': ['代码结构从Controller层开始到数据获取的完整路径', 'Feign客户端配置方案'], 'completion_criteria': '确定LsLimitController的包路径和文件位置，明确服务间调用的Feign配置', 'parameters': {'project_path': 'D:\\gitlab\\create_project/链数中建一局_1752487028/crcl-open', 'target_controller': 'LsLimitController', 'target_apis': ['/crcl-open-api/lsLimit/listUnitLimitByCompanyId', '/crcl-open-api/lsLimit/listUnitLimitByCompanyIdExport']}}, {'task_id': 'task_006', 'service_name': '用户服务', 'task_type': 'config', 'priority': 4, 'dependencies': ['task_004'], 'estimated_duration': '15分钟', 'description': '配置用户服务数据库连接：jdbc:mysql://localhost:6446/dbwebappdb', 'implementation_details': '修改application.yml文件，配置数据库连接信息包括URL、用户名密码和连接池设置', 'deliverables': ['数据库配置文件', '连接测试报告'], 'completion_criteria': 'application.yml文件已更新，数据库连接配置正确且可连通', 'parameters': {'config_file': 'D:\\gitlab\\create_project/链数中建一局_1752487028/zqyl-user-center-service/src/main/resources/application.yml', 'database_url': 'jdbc:mysql://localhost:6446/dbwebappdb?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC&characterEncoding=utf8&useUnicode=true', 'username': 'dbwebapp', 'password': 'dbwebapp'}}, {'task_id': 'task_007', 'service_name': '用户服务', 'task_type': 'database', 'priority': 5, 'dependencies': ['task_006'], 'estimated_duration': '15分钟', 'description': '创建t_cust_multiorg_unit表，包含id,company_id,unit_code,unit_name等字段', 'implementation_details': '编写建表SQL脚本，定义主键、索引和字段约束，创建对应的Entity和Mapper文件', 'deliverables': ['建表SQL脚本', 'Entity实体类', 'Mapper接口文件'], 'completion_criteria': '表结构创建成功，Entity和Mapper文件可正常编译，支持基本CRUD操作', 'parameters': {'table_name': 't_cust_multiorg_unit', 'sql_location': 'src/main/resources/sql/t_cust_multiorg_unit.sql'}}, {'task_id': 'task_008', 'service_name': '用户服务', 'task_type': 'api', 'priority': 6, 'dependencies': ['task_007'], 'estimated_duration': '60分钟', 'description': '实现GET /general/multiorgManage/queryCompanyUnitList接口', 'implementation_details': '在MultiorgManageController中实现查询接口，支持条件查询和分页，返回规定的字段格式', 'deliverables': ['MultiorgManageController类', 'Service业务逻辑层', '接口文档'], 'completion_criteria': '接口可正常访问，返回数据格式符合规范，支持条件查询和分页功能', 'parameters': {'project_path': 'D:\\gitlab\\create_project/链数中建一局_1752487028/zqyl-user-center-service', 'api_path': '/general/multiorgManage/queryCompanyUnitList', 'http_method': 'GET', 'content_type': 'application/json', 'request_params': {'unitCode': '组织单元编码(可选)', 'openStatus': '开通状态(可选)', 'unitList': '组织单元列表(可选)'}, 'response_params': {'unitId': '组织单元ID', 'unitTypeDicType': '组织单元类型字典类型', 'unitTypeId': '组织单元类型ID', 'openStatus': '开通状态', 'unitCode': '组织单元编码', 'unitName': '组织单元名称'}, 'business_logic': '根据查询条件查询组织单元信息，支持按编码、状态等条件筛选', 'data_source': 't_cust_multiorg_unit表', 'validation_rules': {'unitCode': '长度不超过50字符', 'openStatus': '取值范围0-1'}}}, {'task_id': 'task_009', 'service_name': '确权开立服务', 'task_type': 'api', 'priority': 7, 'dependencies': ['task_008'], 'estimated_duration': '90分钟', 'description': '实现GET /crcl-open-api/lsLimit/listUnitLimitByCompanyId接口，调用用户服务', 'implementation_details': '在LsLimitController中实现额度查询接口，配置Feign客户端调用用户服务接口获取组织单元信息', 'deliverables': ['LsLimitController类', 'Feign客户端配置', '业务逻辑层'], 'completion_criteria': '接口可正常访问，能成功调用用户服务，返回额度数据格式正确', 'parameters': {'project_path': 'D:\\gitlab\\create_project/链数中建一局_1752487028/crcl-open', 'api_path': '/crcl-open-api/lsLimit/listUnitLimitByCompanyId', 'http_method': 'GET', 'content_type': 'application/json', 'request_params': {'gwCompanyId': '公司ID(必填)', 'unitName': '组织单元名称(可选)', 'limitSource': '额度来源(可选)', 'bizType': '业务类型(必填)', 'page': '页码(可选,默认1)', 'pageRow': '每页行数(可选,默认10)'}, 'response_params': {'totalLimitAmt': '总额度金额', 'usedLimitAmt': '已用额度金额', 'usableLimitAmt': '可用额度金额', 'unitLimitListDetail': '单元额度详情列表'}, 'business_logic': '根据公司ID和筛选条件查询组织单元额度信息，调用用户服务获取组织单元基础信息', 'data_source': '本地额度表 + 用户服务接口', 'external_call': '/general/multiorgManage/queryCompanyUnitList', 'validation_rules': {'gwCompanyId': '必填，数值类型', 'bizType': '必填，业务类型枚举值', 'page': '正整数，默认1', 'pageRow': '正整数，范围1-100'}}}, {'task_id': 'task_010', 'service_name': '确权开立服务', 'task_type': 'api', 'priority': 8, 'dependencies': ['task_009'], 'estimated_duration': '45分钟', 'description': '实现GET /crcl-open-api/lsLimit/listUnitLimitByCompanyIdExport导出接口', 'implementation_details': '在LsLimitController中实现Excel导出接口，复用listUnitLimitByCompanyId的数据逻辑', 'deliverables': ['导出接口方法', 'Excel工具类', '导出模板文件'], 'completion_criteria': '接口可正常访问，能成功导出Excel文件，表头和数据格式正确', 'parameters': {'project_path': 'D:\\gitlab\\create_project/链数中建一局_1752487028/crcl-open', 'api_path': '/crcl-open-api/lsLimit/listUnitLimitByCompanyIdExport', 'http_method': 'GET', 'content_type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'request_params': {'gwCompanyId': '公司ID(必填)', 'unitName': '组织单元名称(可选)', 'limitSource': '额度来源(可选)', 'bizType': '业务类型(必填)'}, 'response_params': {'file': 'Excel文件流', 'filename': '导出文件名', 'contentType': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'}, 'business_logic': '复用listUnitLimitByCompanyId接口的查询逻辑，将结果导出为Excel格式', 'data_source': '调用listUnitLimitByCompanyId接口获取数据', 'export_format': 'xlsx', 'export_headers': ['组织单元名称', '额度名称', '额度类型', '已分配额度', '已用额度', '可用额度'], 'validation_rules': {'gwCompanyId': '必填，数值类型', 'bizType': '必填，业务类型枚举值'}}}, {'task_id': 'task_011', 'service_name': '系统', 'task_type': 'integration_test', 'priority': 9, 'dependencies': ['task_008', 'task_009', 'task_010'], 'estimated_duration': '30分钟', 'description': '测试确权开立服务调用用户服务接口的完整流程', 'implementation_details': '编写集成测试用例，验证服务间调用正确性和数据完整性', 'deliverables': ['集成测试用例', '测试数据脚本', '测试报告'], 'completion_criteria': '所有测试用例通过，接口调用链路正常，数据返回格式正确', 'parameters': {'test_scenarios': ['组织单元额度查询测试'], 'test_data': {'gwCompanyId': 1, 'unitName': '测试单元', 'bizType': 80}}}, {'task_id': 'task_012', 'service_name': '系统', 'task_type': 'deployment', 'priority': 10, 'dependencies': ['task_011'], 'estimated_duration': '20分钟', 'description': '提交代码到GitLab仓库，commit message: feat: 新增组织单元额度管理功能', 'implementation_details': '执行git add、git commit和git push命令，提交所有新增和修改的代码文件', 'deliverables': ['Git提交记录', '代码合并报告', '部署文档'], 'completion_criteria': '代码成功提交到GitLab仓库，commit信息清晰，无冲突', 'parameters': {'repositories': [{'path': 'D:\\gitlab\\create_project/链数中建一局_1752487028/zqyl-user-center-service', 'changes': '新增组织单元查询接口'}, {'path': 'D:\\gitlab\\create_project/链数中建一局_1752487028/crcl-open', 'changes': '新增组织单元额度列表和导出接口'}]}}]
2025-07-14 18:09:04 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 🔢 生成的任务数量: 12
2025-07-14 18:09:04 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 已保存 12 个任务到数据库
2025-07-14 18:09:04 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 已生成并保存 12 个任务到数据库
2025-07-14 18:09:04 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📤 最终服务列表: ['用户服务', '确权开立服务']
2025-07-14 18:09:04 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📤 生成并行任务批次: [{'batch_id': 'batch_1', 'services': ['用户服务', '确权开立服务'], 'dependencies': []}]
2025-07-14 18:09:04 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📤 输出状态键: ['design_doc', 'project_name', 'identified_services', 'service_dependencies', 'task_execution_plan', 'parallel_tasks', 'git_repo_url', 'target_branch', 'project_paths', 'output_path', 'repo_initialized', 'generated_services', 'generated_apis', 'generated_sql', 'service_interconnections', 'unit_test_results', 'test_coverage', 'interface_compatibility', 'code_review_results', 'static_analysis_results', 'security_scan_results', 'commit_hashes', 'push_results', 'pr_urls', 'current_phase', 'completed_services', 'failed_services', 'retry_count', 'execution_errors', 'generated_tasks']
2025-07-14 18:09:04 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📤 输出 - 识别服务: ['用户服务', '确权开立服务']
2025-07-14 18:09:04 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📤 输出 - 当前阶段: intelligent_coding
2025-07-14 18:09:04 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 任务拆分完成，识别 2 个服务，生成 12 个任务
2025-07-14 18:09:04 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🚀 Git管理节点开始执行...
2025-07-14 18:09:04 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 18:09:04 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🎯 git_management_node 开始执行任务...
2025-07-14 18:09:04 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 📋 找到 1 个可执行任务
2025-07-14 18:09:04 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🚀 开始执行任务: task_001 (git_extraction)
2025-07-14 18:09:04 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_001 已被 git_management_node 领取
2025-07-14 18:09:04 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🔍 执行Git提取任务: task_001
2025-07-14 18:09:04 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 📄 提取源文本: 解析设计文档，提取用户服务 http://gitlab.local/ls/zqyl-user-center-service.git 和确权开立服务 http://gitlab.local/ls/crcl-open.git 仓库地址 从设计文档提取GitLab仓库地址...
2025-07-14 18:09:04 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🔍 开始从文本提取Git URL...
2025-07-14 18:09:04 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🔗 找到Git仓库: http://gitlab.local/ls/zqyl-user-center-service.git
2025-07-14 18:09:04 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🔗 找到Git仓库: http://gitlab.local/ls/crcl-open.git
2025-07-14 18:09:04 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 提取到 2 个Git仓库
2025-07-14 18:09:04 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_001 状态更新为 completed
2025-07-14 18:09:04 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 任务 task_001 执行成功
2025-07-14 18:09:04 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ Git管理任务执行完成，共处理 1 个任务
2025-07-14 18:09:04 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🚀 基于提取结果自动克隆 2 个仓库...
2025-07-14 18:09:04 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 📥 自动克隆仓库: http://gitlab.local/ls/zqyl-user-center-service.git -> D:\gitlab\create_project/链数中建一局_1752487028/zqyl-user-center-service
2025-07-14 18:09:04 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 📥 开始克隆仓库: http://gitlab.local/ls/zqyl-user-center-service.git -> D:\gitlab\create_project/链数中建一局_1752487028/zqyl-user-center-service
2025-07-14 18:09:07 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 已切换到分支: master
2025-07-14 18:09:07 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 仓库克隆成功: D:\gitlab\create_project/链数中建一局_1752487028/zqyl-user-center-service
2025-07-14 18:09:07 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 自动克隆成功: zqyl-user-center-service
2025-07-14 18:09:07 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 已标记任务 task_002 为完成状态
2025-07-14 18:09:07 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 📥 自动克隆仓库: http://gitlab.local/ls/crcl-open.git -> D:\gitlab\create_project/链数中建一局_1752487028/crcl-open
2025-07-14 18:09:07 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 📥 开始克隆仓库: http://gitlab.local/ls/crcl-open.git -> D:\gitlab\create_project/链数中建一局_1752487028/crcl-open
2025-07-14 18:09:10 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 已切换到分支: master
2025-07-14 18:09:10 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 仓库克隆成功: D:\gitlab\create_project/链数中建一局_1752487028/crcl-open
2025-07-14 18:09:10 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 自动克隆成功: crcl-open
2025-07-14 18:09:10 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 已标记任务 task_003 为完成状态
2025-07-14 18:09:10 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ Git管理节点完成 - 提取: 2 个仓库, 克隆: 2 个仓库, 仓库初始化状态: True
2025-07-14 18:09:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 18:09:10 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 18:09:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 18:09:11 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 18:09:11 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 18:09:11 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 18:09:11 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 18:09:11 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 18:09:11 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 增强版模板+AI生成器初始化完成
2025-07-14 18:09:11 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 增强版模板+AI代码生成器初始化完成
2025-07-14 18:09:11 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 从工作流状态获取设计文档 (4930 字符)
2025-07-14 18:09:11 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 18:09:11 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 18:09:11 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 第1轮找到 2 个可执行任务
2025-07-14 18:09:11 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 开始执行任务: task_004 (code_analysis)
2025-07-14 18:09:11 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_004 已被 intelligent_coding_node 领取
2025-07-14 18:09:11 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行代码分析任务: task_004
2025-07-14 18:09:11 - src.utils.java_code_analyzer - INFO - 🔍 开始分析企业级Java项目: D:\gitlab\create_project/链数中建一局_1752487028/zqyl-user-center-service
2025-07-14 18:09:11 - src.utils.java_code_analyzer - INFO - ✅ 企业级项目分析完成，共分析 29 个Java文件
2025-07-14 18:09:11 - src.utils.java_code_analyzer - INFO - 📄 企业级分析报告已导出: outputs\用户服务_java_analysis_20250714_180911.md
2025-07-14 18:09:11 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_004 状态更新为 completed
2025-07-14 18:09:11 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 任务 task_004 执行成功
2025-07-14 18:09:11 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 开始执行任务: task_005 (code_analysis)
2025-07-14 18:09:11 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_005 已被 intelligent_coding_node 领取
2025-07-14 18:09:11 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行代码分析任务: task_005
2025-07-14 18:09:11 - src.utils.java_code_analyzer - INFO - 🔍 开始分析企业级Java项目: D:\gitlab\create_project/链数中建一局_1752487028/crcl-open
2025-07-14 18:09:28 - src.utils.java_code_analyzer - INFO - ✅ 企业级项目分析完成，共分析 2262 个Java文件
2025-07-14 18:09:29 - src.utils.java_code_analyzer - INFO - 📄 企业级分析报告已导出: outputs\确权开立服务_java_analysis_20250714_180928.md
2025-07-14 18:09:30 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_005 状态更新为 completed
2025-07-14 18:09:30 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 任务 task_005 执行成功
2025-07-14 18:09:30 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 第1轮执行完成，处理了 2 个任务
2025-07-14 18:09:30 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第2轮任务检查...
2025-07-14 18:09:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 第2轮找到 1 个可执行任务
2025-07-14 18:09:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 开始执行任务: task_006 (config)
2025-07-14 18:09:31 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_006 已被 intelligent_coding_node 领取
2025-07-14 18:09:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ⚙️ 执行配置生成任务: task_006
2025-07-14 18:09:31 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_006 状态更新为 completed
2025-07-14 18:09:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 任务 task_006 执行成功
2025-07-14 18:09:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 第2轮执行完成，处理了 1 个任务
2025-07-14 18:09:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第3轮任务检查...
2025-07-14 18:09:32 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 第3轮找到 1 个可执行任务
2025-07-14 18:09:32 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 开始执行任务: task_007 (database)
2025-07-14 18:09:32 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_007 已被 intelligent_coding_node 领取
2025-07-14 18:09:32 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🗄️ 执行数据库设计任务: task_007
2025-07-14 18:09:32 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_007 状态更新为 completed
2025-07-14 18:09:32 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 任务 task_007 执行成功
2025-07-14 18:09:32 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 第3轮执行完成，处理了 1 个任务
2025-07-14 18:09:32 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第4轮任务检查...
2025-07-14 18:09:32 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 第4轮找到 1 个可执行任务
2025-07-14 18:09:32 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 开始执行任务: task_008 (api)
2025-07-14 18:09:32 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_008 已被 intelligent_coding_node 领取
2025-07-14 18:09:32 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🌐 执行API接口生成任务: task_008
2025-07-14 18:09:32 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 解析的接口信息:
2025-07-14 18:09:32 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 接口名称: CompanyUnitList
2025-07-14 18:09:32 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - API路径: /general/multiorgManage/queryCompanyUnitList
2025-07-14 18:09:32 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - HTTP方法: GET
2025-07-14 18:09:32 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 输入参数: 3个
2025-07-14 18:09:32 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 输出参数: 6个
2025-07-14 18:09:32 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 业务描述: 根据查询条件查询组织单元信息，支持按编码、状态等条件筛选
2025-07-14 18:09:32 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 在 D:\gitlab\create_project/链数中建一局_1752487028/zqyl-user-center-service 中查找最佳Java项目路径...
2025-07-14 18:09:32 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 目标服务名: 用户服务
2025-07-14 18:09:33 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-14 18:09:33 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 发现Java项目: user-basic-general
2025-07-14 18:09:33 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       🎯 相对路径: user-basic-service\user-basic-general
2025-07-14 18:09:33 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       📊 Java文件: 29个
2025-07-14 18:09:33 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       📐 目录深度: 2
2025-07-14 18:09:33 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       🏆 优先级分数: 750
2025-07-14 18:09:33 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 排序后的候选路径（前3个）:
2025-07-14 18:09:33 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    1. user-basic-service\user-basic-general (优先级: 750)
2025-07-14 18:09:33 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 选择最佳Java项目路径:
2025-07-14 18:09:33 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 完整路径: D:\gitlab\create_project\链数中建一局_1752487028\zqyl-user-center-service\user-basic-service\user-basic-general
2025-07-14 18:09:33 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📋 相对路径: user-basic-service\user-basic-general
2025-07-14 18:09:33 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    🏆 最终优先级: 750
2025-07-14 18:09:33 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 从API路径 /general/multiorgManage/queryCompanyUnitList 提取关键字: multiorgManage
2025-07-14 18:09:33 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 在项目中搜索关键字相关路径: multiorgManage
2025-07-14 18:09:33 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    ❌ 未找到包含关键字 'multiorgManage' 的相关目录
2025-07-14 18:09:33 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -  分析目标项目: D:\gitlab\create_project\链数中建一局_1752487028\zqyl-user-center-service\user-basic-service\user-basic-general
2025-07-14 18:09:33 - src.apis.project_analysis_api - INFO - 🔍 开始分析项目用于代码生成: D:\gitlab\create_project\链数中建一局_1752487028\zqyl-user-center-service\user-basic-service\user-basic-general
2025-07-14 18:09:33 - src.apis.project_analysis_api - INFO - 🔍 在 D:\gitlab\create_project\链数中建一局_1752487028\zqyl-user-center-service\user-basic-service\user-basic-general 中查找最佳Java项目路径...
2025-07-14 18:09:33 - src.apis.project_analysis_api - INFO - 🎯 目标服务名: 用户服务
2025-07-14 18:09:33 - src.apis.project_analysis_api - INFO -    📐 中等深度结构 (深度7) -> +100
2025-07-14 18:09:33 - src.apis.project_analysis_api - INFO -    📦 服务模块匹配: user-basic-service -> +120
2025-07-14 18:09:33 - src.apis.project_analysis_api - INFO -    🏢 业务域匹配: user -> +60
2025-07-14 18:09:33 - src.apis.project_analysis_api - INFO -    🏗️ 架构层级匹配: service -> +100
2025-07-14 18:09:33 - src.apis.project_analysis_api - INFO -    🎯🎯🎯 深层服务模块路径匹配 -> +800
2025-07-14 18:09:33 - src.apis.project_analysis_api - INFO -    📁 发现Java项目: user-basic-general
2025-07-14 18:09:33 - src.apis.project_analysis_api - INFO -       🎯 相对路径: .
2025-07-14 18:09:33 - src.apis.project_analysis_api - INFO -       📊 Java文件: 29个
2025-07-14 18:09:33 - src.apis.project_analysis_api - INFO -       📐 目录深度: 0
2025-07-14 18:09:33 - src.apis.project_analysis_api - INFO -       🏆 优先级分数: 1181
2025-07-14 18:09:33 - src.apis.project_analysis_api - INFO - 📋 排序后的候选路径（前3个）:
2025-07-14 18:09:33 - src.apis.project_analysis_api - INFO -    1. . (优先级: 1181)
2025-07-14 18:09:33 - src.apis.project_analysis_api - INFO - ✅ 选择最佳Java项目路径:
2025-07-14 18:09:33 - src.apis.project_analysis_api - INFO -    📁 完整路径: D:\gitlab\create_project\链数中建一局_1752487028\zqyl-user-center-service\user-basic-service\user-basic-general
2025-07-14 18:09:33 - src.apis.project_analysis_api - INFO -    📋 相对路径: .
2025-07-14 18:09:33 - src.apis.project_analysis_api - INFO -    🏆 最终优先级: 1181
2025-07-14 18:09:33 - src.apis.project_analysis_api - INFO - 📂 实际分析路径: D:\gitlab\create_project\链数中建一局_1752487028\zqyl-user-center-service\user-basic-service\user-basic-general
2025-07-14 18:09:33 - src.utils.java_code_analyzer - INFO - 🔍 开始分析企业级Java项目: D:\gitlab\create_project\链数中建一局_1752487028\zqyl-user-center-service\user-basic-service\user-basic-general
2025-07-14 18:09:33 - src.utils.java_code_analyzer - INFO - ✅ 企业级项目分析完成，共分析 29 个Java文件
2025-07-14 18:09:33 - src.apis.project_analysis_api - INFO - 📦 动态检测到基础包: com.yljr.user.basicgeneral (出现29次)
2025-07-14 18:09:33 - src.apis.project_analysis_api - INFO - 📦 动态检测到基础包: com.yljr.user.basicgeneral (出现29次)
2025-07-14 18:09:33 - src.apis.project_analysis_api - INFO - 📦 动态检测到基础包: com.yljr.user.basicgeneral (出现29次)
2025-07-14 18:09:33 - src.apis.project_analysis_api - INFO - ✅ 项目分析完成，已提取代码生成上下文
2025-07-14 18:09:33 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 从编码代理获取设计文档内容 (4930 字符)
2025-07-14 18:09:33 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 设计文档内容已添加到项目上下文 (4930 字符)
2025-07-14 18:09:33 - src.corder_integration.code_generator.controller_interface_manager - INFO - 🚀 开始处理API接口请求: /general/multiorgManage/queryCompanyUnitList
2025-07-14 18:09:33 - src.corder_integration.code_generator.controller_analyzer - INFO - 🔍 开始分析路径下的Controller文件: D:\gitlab\create_project\链数中建一局_1752487028\zqyl-user-center-service\user-basic-service\user-basic-general
2025-07-14 18:09:33 - src.corder_integration.code_generator.controller_analyzer - INFO - 🎯 匹配关键字: multiorgManage
2025-07-14 18:09:33 - src.corder_integration.code_generator.controller_analyzer - INFO - 📊 总共找到 0 个匹配的Controller文件
2025-07-14 18:09:33 - src.corder_integration.code_generator.controller_interface_manager - INFO - ⚠️ 未找到匹配关键字 'multiorgManage' 的Controller文件
2025-07-14 18:09:33 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ⚠️ 未能在现有Controller中添加接口，将生成新文件
2025-07-14 18:09:33 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -  调用volcengine大模型生成代码...
2025-07-14 18:09:33 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 开始代码生成...
2025-07-14 18:09:33 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎨 使用模板+AI混合模式生成代码
2025-07-14 18:09:33 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - 🎨 开始增强版代码生成: CompanyUnitList
2025-07-14 18:09:33 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - 🔍 解析到表结构: t_cust_multiorg_unit (14列)
2025-07-14 18:09:33 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - 🤖 使用AI增强代码，处理特殊要求...
2025-07-14 18:10:12 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-14 18:10:12 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ AI代码增强成功
2025-07-14 18:10:57 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-14 18:10:57 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ AI代码增强成功
2025-07-14 18:10:57 - src.corder_integration.code_generator.template_ai_generator - INFO - 增强模板代码入参：[{'role': 'system', 'content': '你是Java代码优化专家。请根据业务需求优化给定的模板代码，保持代码结构清晰，添加必要的业务逻辑。重要：请使用具体的类名，不要使用{{}}模板变量语法。只返回优化后的Java代码，不要添加额外说明。'}, {'role': 'user', 'content': '\n请优化以下service_interface代码模板，重点关注：\n- 改进代码结构\n- 添加必要注释\n- 优化实现逻辑\n\n## 当前模板代码：\n```java\npackage com.yljr.user.basicgeneral.application.service;\n\nimport com.yljr.user.basicgeneral.interfaces.dto.CompanyUnitListReq;\nimport com.yljr.user.basicgeneral.interfaces.dto.CompanyUnitListResp;\nimport java.util.List;\n\n/**\n * CompanyUnitList Service - 根据查询条件查询组织单元信息，支持按编码、状态等条件筛选\n * Generated by Template + AI\n */\npublic interface CompanyUnitListService {\n    \n    /**\n     * 根据查询条件查询组织单元信息，支持按编码、状态等条件筛选\n     */\n    CompanyUnitListResp CompanyUnitList(CompanyUnitListReq request);\n}\n```\n\n## 业务需求：\n- 接口名称：CompanyUnitList\n- 功能描述：根据查询条件查询组织单元信息，支持按编码、状态等条件筛选\n- 业务逻辑：根据查询条件查询组织单元信息，支持按编码、状态等条件筛选\n\n## 输入参数：\n- unitCode (String): 组织单元编码(可选) [可选]\n- openStatus (String): 开通状态(可选) [可选]\n- unitList (String): 组织单元列表(可选) [可选]\n\n## 输出参数：\n- unitId (String): 组织单元ID\n- unitTypeDicType (String): 组织单元类型字典类型\n- unitTypeId (String): 组织单元类型ID\n- openStatus (String): 开通状态\n- unitCode (String): 组织单元编码\n- unitName (String): 组织单元名称\n\n## 技术要求：\n- 基础包名：com.yljr.user.basicgeneral\n- 使用Spring Boot + MyBatis Plus\n- 遵循DDD分层架构\n- 保持原有类名和包结构\n- 请求DTO类名：CompanyUnitListReq\n- 响应DTO类名：CompanyUnitListResp\n- Service类名：CompanyUnitListService\n\n**重要：请使用具体的类名（如 CompanyUnitListReq），不要使用模板变量语法（如 {{REQUEST_DTO_NAME}}）**\n\n请返回优化后的完整Java代码（只要代码，不要额外说明）：\n'}]
2025-07-14 18:11:08 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-14 18:11:08 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ service_interface AI增强完成
2025-07-14 18:11:08 - src.corder_integration.code_generator.template_ai_generator - INFO - 增强模板代码入参：[{'role': 'system', 'content': '你是Java代码优化专家。请根据业务需求优化给定的模板代码，保持代码结构清晰，添加必要的业务逻辑。重要：请使用具体的类名，不要使用{{}}模板变量语法。只返回优化后的Java代码，不要添加额外说明。'}, {'role': 'user', 'content': '\n请优化以下request_dto代码模板，重点关注：\n- 添加详细的字段验证\n- 完善API文档注解\n- 优化字段类型选择\n- 添加字段描述\n\n## 当前模板代码：\n```java\npackage com.yljr.user.basicgeneral.interfaces.dto;\n\nimport javax.validation.constraints.*;\nimport lombok.Data;\nimport io.swagger.annotations.ApiModel;\nimport io.swagger.annotations.ApiModelProperty;\n\n/**\n * CompanyUnitList Request DTO\n * Generated by Template + AI\n */\n@Data\n@ApiModel(description = "CompanyUnitList Request DTO")\npublic class CompanyUnitListReq {\n    \n    @ApiModelProperty(value = "组织单元编码(可选)", required = false)\n    private String unitCode;\n\n    @ApiModelProperty(value = "开通状态(可选)", required = false)\n    private String openStatus;\n\n    @ApiModelProperty(value = "组织单元列表(可选)", required = false)\n    private String unitList;\n}\n```\n\n## 业务需求：\n- 接口名称：CompanyUnitList\n- 功能描述：根据查询条件查询组织单元信息，支持按编码、状态等条件筛选\n- 业务逻辑：根据查询条件查询组织单元信息，支持按编码、状态等条件筛选\n\n## 输入参数：\n- unitCode (String): 组织单元编码(可选) [可选]\n- openStatus (String): 开通状态(可选) [可选]\n- unitList (String): 组织单元列表(可选) [可选]\n\n## 输出参数：\n- unitId (String): 组织单元ID\n- unitTypeDicType (String): 组织单元类型字典类型\n- unitTypeId (String): 组织单元类型ID\n- openStatus (String): 开通状态\n- unitCode (String): 组织单元编码\n- unitName (String): 组织单元名称\n\n## 技术要求：\n- 基础包名：com.yljr.user.basicgeneral\n- 使用Spring Boot + MyBatis Plus\n- 遵循DDD分层架构\n- 保持原有类名和包结构\n- 请求DTO类名：CompanyUnitListReq\n- 响应DTO类名：CompanyUnitListResp\n- Service类名：CompanyUnitListService\n\n**重要：请使用具体的类名（如 CompanyUnitListReq），不要使用模板变量语法（如 {{REQUEST_DTO_NAME}}）**\n\n请返回优化后的完整Java代码（只要代码，不要额外说明）：\n'}]
2025-07-14 18:11:21 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-14 18:11:21 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ request_dto AI增强完成
2025-07-14 18:11:21 - src.corder_integration.code_generator.template_ai_generator - INFO - 增强模板代码入参：[{'role': 'system', 'content': '你是Java代码优化专家。请根据业务需求优化给定的模板代码，保持代码结构清晰，添加必要的业务逻辑。重要：请使用具体的类名，不要使用{{}}模板变量语法。只返回优化后的Java代码，不要添加额外说明。'}, {'role': 'user', 'content': '\n请优化以下response_dto代码模板，重点关注：\n- 添加详细的字段验证\n- 完善API文档注解\n- 优化字段类型选择\n- 添加字段描述\n\n## 当前模板代码：\n```java\npackage com.yljr.user.basicgeneral.interfaces.dto;\n\nimport lombok.Data;\nimport io.swagger.annotations.ApiModel;\nimport io.swagger.annotations.ApiModelProperty;\n\n/**\n * CompanyUnitList Response DTO\n * Generated by Template + AI\n */\n@Data\n@ApiModel(description = "CompanyUnitList Response DTO")\npublic class CompanyUnitListResp {\n    \n    @ApiModelProperty("组织单元ID")\n    private String unitId;\n\n    @ApiModelProperty("组织单元类型字典类型")\n    private String unitTypeDicType;\n\n    @ApiModelProperty("组织单元类型ID")\n    private String unitTypeId;\n\n    @ApiModelProperty("开通状态")\n    private String openStatus;\n\n    @ApiModelProperty("组织单元编码")\n    private String unitCode;\n\n    @ApiModelProperty("组织单元名称")\n    private String unitName;\n}\n```\n\n## 业务需求：\n- 接口名称：CompanyUnitList\n- 功能描述：根据查询条件查询组织单元信息，支持按编码、状态等条件筛选\n- 业务逻辑：根据查询条件查询组织单元信息，支持按编码、状态等条件筛选\n\n## 输入参数：\n- unitCode (String): 组织单元编码(可选) [可选]\n- openStatus (String): 开通状态(可选) [可选]\n- unitList (String): 组织单元列表(可选) [可选]\n\n## 输出参数：\n- unitId (String): 组织单元ID\n- unitTypeDicType (String): 组织单元类型字典类型\n- unitTypeId (String): 组织单元类型ID\n- openStatus (String): 开通状态\n- unitCode (String): 组织单元编码\n- unitName (String): 组织单元名称\n\n## 技术要求：\n- 基础包名：com.yljr.user.basicgeneral\n- 使用Spring Boot + MyBatis Plus\n- 遵循DDD分层架构\n- 保持原有类名和包结构\n- 请求DTO类名：CompanyUnitListReq\n- 响应DTO类名：CompanyUnitListResp\n- Service类名：CompanyUnitListService\n\n**重要：请使用具体的类名（如 CompanyUnitListReq），不要使用模板变量语法（如 {{REQUEST_DTO_NAME}}）**\n\n请返回优化后的完整Java代码（只要代码，不要额外说明）：\n'}]
2025-07-14 18:11:38 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-14 18:11:38 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ response_dto AI增强完成
2025-07-14 18:11:38 - src.corder_integration.code_generator.template_ai_generator - INFO - 增强模板代码入参：[{'role': 'system', 'content': '你是Java代码优化专家。请根据业务需求优化给定的模板代码，保持代码结构清晰，添加必要的业务逻辑。重要：请使用具体的类名，不要使用{{}}模板变量语法。只返回优化后的Java代码，不要添加额外说明。'}, {'role': 'user', 'content': '\n请优化以下entity代码模板，重点关注：\n- 改进代码结构\n- 添加必要注释\n- 优化实现逻辑\n\n## 当前模板代码：\n```java\npackage com.yljr.user.basicgeneral.domain.entity;\n\nimport com.baomidou.mybatisplus.annotation.*;\nimport lombok.Data;\nimport io.swagger.annotations.ApiModel;\nimport io.swagger.annotations.ApiModelProperty;\nimport java.time.LocalDateTime;\n\n/**\n * CompanyUnitList Entity\n * Generated by Template + AI\n */\n@Data\n@ApiModel(description = "CompanyUnitList Entity")\n@TableName("t_cust_multiorg_unit")\npublic class CompanyUnitList {\n    \n    @ApiModelProperty("主键ID")\n    @TableId(type = IdType.AUTO)\n    private Long id;\n    \n    @ApiModelProperty("企业id")\n    @NotNull(message = "不能为空")\n    @TableField("company_id")\n    private Long companyId;\n\n    @ApiModelProperty("多组织id")\n    @NotNull(message = "不能为空")\n    @TableField("mutilorg_id")\n    private Long mutilorgId;\n\n    @ApiModelProperty("组织单元编号")\n    @NotNull(message = "不能为空")\n    @NotBlank(message = "不能为空白")\n    @TableField("unit_code")\n    private String unitCode;\n\n    @ApiModelProperty("组织单元名称")\n    @NotNull(message = "不能为空")\n    @NotBlank(message = "不能为空白")\n    @TableField("unit_name")\n    private String unitName;\n\n    @ApiModelProperty("备注")\n    @TableField("remark")\n    private String remark;\n\n    @ApiModelProperty("平台类型(1云信2云租3云保)")\n    @NotNull(message = "不能为空")\n    @TableField("platform_type")\n    private Integer platformType;\n\n    @ApiModelProperty("状态1正常0删除")\n    @NotNull(message = "不能为空")\n    @TableField("status")\n    private Integer status;\n\n    @ApiModelProperty("创建人id")\n    @NotNull(message = "不能为空")\n    @TableField("create_id")\n    private Long createId;\n\n    @ApiModelProperty("创建人用户名")\n    @TableField("oper_user_name")\n    private String operUserName;\n\n    @ApiModelProperty("修改人id")\n    @TableField("modify_id")\n    private Long modifyId;\n\n    @ApiModelProperty("最后修改用户名")\n    @TableField("modify_user_name")\n    private String modifyUserName;\n    \n    @ApiModelProperty("创建时间")\n    @TableField(fill = FieldFill.INSERT)\n    private LocalDateTime createTime;\n    \n    @ApiModelProperty("更新时间")\n    @TableField(fill = FieldFill.INSERT_UPDATE)\n    private LocalDateTime updateTime;\n}\n```\n\n## 业务需求：\n- 接口名称：CompanyUnitList\n- 功能描述：根据查询条件查询组织单元信息，支持按编码、状态等条件筛选\n- 业务逻辑：根据查询条件查询组织单元信息，支持按编码、状态等条件筛选\n\n## 输入参数：\n- unitCode (String): 组织单元编码(可选) [可选]\n- openStatus (String): 开通状态(可选) [可选]\n- unitList (String): 组织单元列表(可选) [可选]\n\n## 输出参数：\n- unitId (String): 组织单元ID\n- unitTypeDicType (String): 组织单元类型字典类型\n- unitTypeId (String): 组织单元类型ID\n- openStatus (String): 开通状态\n- unitCode (String): 组织单元编码\n- unitName (String): 组织单元名称\n\n## 技术要求：\n- 基础包名：com.yljr.user.basicgeneral\n- 使用Spring Boot + MyBatis Plus\n- 遵循DDD分层架构\n- 保持原有类名和包结构\n- 请求DTO类名：CompanyUnitListReq\n- 响应DTO类名：CompanyUnitListResp\n- Service类名：CompanyUnitListService\n\n**重要：请使用具体的类名（如 CompanyUnitListReq），不要使用模板变量语法（如 {{REQUEST_DTO_NAME}}）**\n\n请返回优化后的完整Java代码（只要代码，不要额外说明）：\n'}]
2025-07-14 18:12:05 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-14 18:12:05 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ entity AI增强完成
2025-07-14 18:12:05 - src.corder_integration.code_generator.template_ai_generator - INFO - 增强模板代码入参：[{'role': 'system', 'content': '你是Java代码优化专家。请根据业务需求优化给定的模板代码，保持代码结构清晰，添加必要的业务逻辑。重要：请使用具体的类名，不要使用{{}}模板变量语法。只返回优化后的Java代码，不要添加额外说明。'}, {'role': 'user', 'content': '\n请优化以下mapper代码模板，重点关注：\n- 改进代码结构\n- 添加必要注释\n- 优化实现逻辑\n\n## 当前模板代码：\n```java\npackage com.yljr.user.basicgeneral.domain.mapper;\n\nimport com.yljr.user.basicgeneral.domain.entity.CompanyUnitList;\nimport com.baomidou.mybatisplus.core.mapper.BaseMapper;\nimport org.apache.ibatis.annotations.Mapper;\nimport org.apache.ibatis.annotations.Param;\nimport java.util.List;\n\n/**\n * CompanyUnitListMapper Mapper\n * Generated by Template + AI\n */\n@Mapper\npublic interface CompanyUnitListMapper extends BaseMapper<CompanyUnitList> {\n    \n    /**\n     * Custom query for CompanyUnitList\n     */\n    List<CompanyUnitList> selectCompanyUnitListList(@Param("unitCode") String unitCode, @Param("openStatus") String openStatus, @Param("unitList") String unitList);\n}\n```\n\n## 业务需求：\n- 接口名称：CompanyUnitList\n- 功能描述：根据查询条件查询组织单元信息，支持按编码、状态等条件筛选\n- 业务逻辑：根据查询条件查询组织单元信息，支持按编码、状态等条件筛选\n\n## 输入参数：\n- unitCode (String): 组织单元编码(可选) [可选]\n- openStatus (String): 开通状态(可选) [可选]\n- unitList (String): 组织单元列表(可选) [可选]\n\n## 输出参数：\n- unitId (String): 组织单元ID\n- unitTypeDicType (String): 组织单元类型字典类型\n- unitTypeId (String): 组织单元类型ID\n- openStatus (String): 开通状态\n- unitCode (String): 组织单元编码\n- unitName (String): 组织单元名称\n\n## 技术要求：\n- 基础包名：com.yljr.user.basicgeneral\n- 使用Spring Boot + MyBatis Plus\n- 遵循DDD分层架构\n- 保持原有类名和包结构\n- 请求DTO类名：CompanyUnitListReq\n- 响应DTO类名：CompanyUnitListResp\n- Service类名：CompanyUnitListService\n\n**重要：请使用具体的类名（如 CompanyUnitListReq），不要使用模板变量语法（如 {{REQUEST_DTO_NAME}}）**\n\n请返回优化后的完整Java代码（只要代码，不要额外说明）：\n'}]
2025-07-14 18:12:18 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-14 18:12:18 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ mapper AI增强完成
2025-07-14 18:12:18 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI生成成功，生成代码类型: ['service_impl', 'controller', 'service_interface', 'request_dto', 'response_dto', 'entity', 'mapper']
2025-07-14 18:12:18 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 开始写入生成的代码文件...
2025-07-14 18:12:18 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔧 统一类名基础: CompanyUnitList
2025-07-14 18:12:18 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ service_impl 类名: CompanyUnitListServiceImpl
2025-07-14 18:12:18 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ controller 类名: CompanyUnitListController
2025-07-14 18:12:18 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ request_dto 类名: CompanyUnitListReq
2025-07-14 18:12:18 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ response_dto 类名: CompanyUnitListResp
2025-07-14 18:12:18 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ entity 类名: CompanyUnitListEntity
2025-07-14 18:12:18 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 检测到service_impl但缺少service，这是正常的（接口会被自动生成）
2025-07-14 18:12:18 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 标准化后的代码类型: ['service_impl', 'controller', 'service_interface', 'request_dto', 'response_dto', 'entity', 'mapper']
2025-07-14 18:12:18 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🤖 调用volcengine判断Java文件输出路径...
2025-07-14 18:12:46 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-14 18:12:46 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM路径判断成功，配置了 7 个Java文件路径
2025-07-14 18:12:46 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 controller: CompanyUnitListController.java
2025-07-14 18:12:46 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 service_interface: CompanyUnitListService.java
2025-07-14 18:12:46 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 service_impl: CompanyUnitListServiceImpl.java
2025-07-14 18:12:46 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 request_dto: CompanyUnitListReq.java
2025-07-14 18:12:46 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 response_dto: CompanyUnitListResp.java
2025-07-14 18:12:46 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 entity: CompanyUnitListEntity.java
2025-07-14 18:12:46 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 mapper: CompanyUnitListMapper.java
2025-07-14 18:12:46 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: D:\gitlab\create_project\链数中建一局_1752487028\zqyl-user-center-service\user-basic-service\user-basic-general\src\main\java\com\yljr\user\basicgeneral\application\service\impl\CompanyUnitListServiceImpl.java
2025-07-14 18:12:46 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: D:\gitlab\create_project\链数中建一局_1752487028\zqyl-user-center-service\user-basic-service\user-basic-general\src\main\java\com\yljr\user\basicgeneral\application\service\impl\CompanyUnitListServiceImpl.java
2025-07-14 18:12:46 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: D:\gitlab\create_project\链数中建一局_1752487028\zqyl-user-center-service\user-basic-service\user-basic-general\src\main\java\com\yljr\user\basicgeneral\interfaces\rest\CompanyUnitListController.java
2025-07-14 18:12:46 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: D:\gitlab\create_project\链数中建一局_1752487028\zqyl-user-center-service\user-basic-service\user-basic-general\src\main\java\com\yljr\user\basicgeneral\interfaces\rest\CompanyUnitListController.java
2025-07-14 18:12:46 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: D:\gitlab\create_project\链数中建一局_1752487028\zqyl-user-center-service\user-basic-service\user-basic-general\src\main\java\com\yljr\user\basicgeneral\application\service\CompanyUnitListService.java
2025-07-14 18:12:46 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: D:\gitlab\create_project\链数中建一局_1752487028\zqyl-user-center-service\user-basic-service\user-basic-general\src\main\java\com\yljr\user\basicgeneral\application\service\CompanyUnitListService.java
2025-07-14 18:12:46 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: D:\gitlab\create_project\链数中建一局_1752487028\zqyl-user-center-service\user-basic-service\user-basic-general\src\main\java\com\yljr\user\basicgeneral\interfaces\dto\CompanyUnitListReq.java
2025-07-14 18:12:46 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: D:\gitlab\create_project\链数中建一局_1752487028\zqyl-user-center-service\user-basic-service\user-basic-general\src\main\java\com\yljr\user\basicgeneral\interfaces\dto\CompanyUnitListReq.java
2025-07-14 18:12:46 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: D:\gitlab\create_project\链数中建一局_1752487028\zqyl-user-center-service\user-basic-service\user-basic-general\src\main\java\com\yljr\user\basicgeneral\interfaces\dto\CompanyUnitListResp.java
2025-07-14 18:12:46 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: D:\gitlab\create_project\链数中建一局_1752487028\zqyl-user-center-service\user-basic-service\user-basic-general\src\main\java\com\yljr\user\basicgeneral\interfaces\dto\CompanyUnitListResp.java
2025-07-14 18:12:46 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: D:\gitlab\create_project\链数中建一局_1752487028\zqyl-user-center-service\user-basic-service\user-basic-general\src\main\java\com\yljr\user\basicgeneral\domain\entity\CompanyUnitListEntity.java
2025-07-14 18:12:46 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: D:\gitlab\create_project\链数中建一局_1752487028\zqyl-user-center-service\user-basic-service\user-basic-general\src\main\java\com\yljr\user\basicgeneral\domain\entity\CompanyUnitListEntity.java
2025-07-14 18:12:46 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: D:\gitlab\create_project\链数中建一局_1752487028\zqyl-user-center-service\user-basic-service\user-basic-general\src\main\java\com\yljr\user\basicgeneral\domain\mapper\CompanyUnitListMapper.java
2025-07-14 18:12:46 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: D:\gitlab\create_project\链数中建一局_1752487028\zqyl-user-center-service\user-basic-service\user-basic-general\src\main\java\com\yljr\user\basicgeneral\domain\mapper\CompanyUnitListMapper.java
2025-07-14 18:12:46 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📊 代码生成完成，共写入 7 个文件到项目中
2025-07-14 18:12:46 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_008 状态更新为 completed
2025-07-14 18:12:46 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 任务 task_008 执行成功
2025-07-14 18:12:46 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 第4轮执行完成，处理了 1 个任务
2025-07-14 18:12:46 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第5轮任务检查...
2025-07-14 18:12:47 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 第5轮找到 1 个可执行任务
2025-07-14 18:12:47 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 开始执行任务: task_009 (api)
2025-07-14 18:12:47 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_009 已被 intelligent_coding_node 领取
2025-07-14 18:12:47 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🌐 执行API接口生成任务: task_009
2025-07-14 18:12:47 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 解析的接口信息:
2025-07-14 18:12:47 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 接口名称: UnitLimitByCompanyId
2025-07-14 18:12:47 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - API路径: /crcl-open-api/lsLimit/listUnitLimitByCompanyId
2025-07-14 18:12:47 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - HTTP方法: GET
2025-07-14 18:12:47 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 输入参数: 6个
2025-07-14 18:12:47 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 输出参数: 4个
2025-07-14 18:12:47 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 业务描述: 根据公司ID和筛选条件查询组织单元额度信息，调用用户服务获取组织单元基础信息
2025-07-14 18:12:47 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 在 D:\gitlab\create_project/链数中建一局_1752487028/crcl-open 中查找最佳Java项目路径...
2025-07-14 18:12:47 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 目标服务名: 确权开立服务
2025-07-14 18:12:48 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-14 18:12:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 发现Java项目: crcl-open
2025-07-14 18:12:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       🎯 相对路径: .
2025-07-14 18:12:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       📊 Java文件: 2251个
2025-07-14 18:12:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       📐 目录深度: 0
2025-07-14 18:12:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       🏆 优先级分数: 650
2025-07-14 18:12:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 排序后的候选路径（前3个）:
2025-07-14 18:12:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    1. . (优先级: 650)
2025-07-14 18:12:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 选择最佳Java项目路径:
2025-07-14 18:12:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 完整路径: D:\gitlab\create_project\链数中建一局_1752487028\crcl-open
2025-07-14 18:12:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📋 相对路径: .
2025-07-14 18:12:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    🏆 最终优先级: 650
2025-07-14 18:12:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 从API路径 /crcl-open-api/lsLimit/listUnitLimitByCompanyId 提取关键字: lsLimit
2025-07-14 18:12:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 在项目中搜索关键字相关路径: lsLimit
2025-07-14 18:12:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 找到匹配目录: limit (得分: 25)
2025-07-14 18:12:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 找到匹配目录: ls (得分: 25)
2025-07-14 18:12:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 找到匹配目录: ls (得分: 25)
2025-07-14 18:12:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 找到匹配目录: ls (得分: 25)
2025-07-14 18:12:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 找到匹配目录: limit (得分: 25)
2025-07-14 18:12:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    ✅ 选择最佳匹配目录: limit (路径: src\main\java\com\yljr\crcl\limit)
2025-07-14 18:12:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 基于API关键字 'lsLimit' 找到现有路径: D:\gitlab\create_project\链数中建一局_1752487028\crcl-open\src\main\java\com\yljr\crcl\limit
2025-07-14 18:12:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -  分析目标项目: D:\gitlab\create_project\链数中建一局_1752487028\crcl-open\src\main\java\com\yljr\crcl\limit
2025-07-14 18:12:48 - src.apis.project_analysis_api - INFO - 🔍 开始分析项目用于代码生成: D:\gitlab\create_project\链数中建一局_1752487028\crcl-open\src\main\java\com\yljr\crcl\limit
2025-07-14 18:12:48 - src.apis.project_analysis_api - INFO - 🔍 在 D:\gitlab\create_project\链数中建一局_1752487028\crcl-open\src\main\java\com\yljr\crcl\limit 中查找最佳Java项目路径...
2025-07-14 18:12:48 - src.apis.project_analysis_api - INFO - 🎯 目标服务名: 确权开立服务
2025-07-14 18:12:48 - src.apis.project_analysis_api - WARNING - ⚠️ 在 D:\gitlab\create_project\链数中建一局_1752487028\crcl-open\src\main\java\com\yljr\crcl\limit 中未找到包含Java文件的src/main/java结构
2025-07-14 18:12:48 - src.apis.project_analysis_api - INFO - 📂 实际分析路径: D:\gitlab\create_project\链数中建一局_1752487028\crcl-open\src\main\java\com\yljr\crcl\limit
2025-07-14 18:12:48 - src.utils.java_code_analyzer - INFO - 🔍 开始分析企业级Java项目: D:\gitlab\create_project\链数中建一局_1752487028\crcl-open\src\main\java\com\yljr\crcl\limit
2025-07-14 18:12:53 - src.utils.java_code_analyzer - INFO - ✅ 企业级项目分析完成，共分析 533 个Java文件
2025-07-14 18:12:53 - src.apis.project_analysis_api - INFO - 📦 动态检测到基础包: com.yljr.crcl.limit (出现533次)
2025-07-14 18:12:53 - src.apis.project_analysis_api - INFO - 📦 动态检测到基础包: com.yljr.crcl.limit (出现533次)
2025-07-14 18:12:53 - src.apis.project_analysis_api - INFO - 📦 动态检测到基础包: com.yljr.crcl.limit (出现533次)
2025-07-14 18:12:53 - src.apis.project_analysis_api - INFO - ✅ 项目分析完成，已提取代码生成上下文
2025-07-14 18:12:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 从编码代理获取设计文档内容 (4930 字符)
2025-07-14 18:12:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 设计文档内容已添加到项目上下文 (4930 字符)
2025-07-14 18:12:53 - src.corder_integration.code_generator.controller_interface_manager - INFO - 🚀 开始处理API接口请求: /crcl-open-api/lsLimit/listUnitLimitByCompanyId
2025-07-14 18:12:53 - src.corder_integration.code_generator.controller_analyzer - INFO - 🔍 开始分析路径下的Controller文件: D:\gitlab\create_project\链数中建一局_1752487028\crcl-open\src\main\java\com\yljr\crcl\limit
2025-07-14 18:12:53 - src.corder_integration.code_generator.controller_analyzer - INFO - 🎯 匹配关键字: lsLimit
2025-07-14 18:12:53 - src.corder_integration.code_generator.controller_analyzer - INFO - 🎯 在 D:\gitlab\create_project\链数中建一局_1752487028\crcl-open\src\main\java\com\yljr\crcl\limit\interfaces\LsLimitController.java 中找到匹配的@RequestMapping: /lsLimit
2025-07-14 18:12:53 - src.corder_integration.code_generator.controller_analyzer - INFO - 📋 提取到 0 个Service依赖
2025-07-14 18:12:53 - src.corder_integration.code_generator.controller_analyzer - INFO - ✅ 找到匹配的Controller: D:\gitlab\create_project\链数中建一局_1752487028\crcl-open\src\main\java\com\yljr\crcl\limit\interfaces\LsLimitController.java
2025-07-14 18:12:53 - src.corder_integration.code_generator.controller_analyzer - INFO - 📊 总共找到 1 个匹配的Controller文件
2025-07-14 18:12:53 - src.corder_integration.code_generator.controller_analyzer - INFO - 🔧 从API路径 '/crcl-open-api/lsLimit/listUnitLimitByCompanyId' 提取接口名称: 'listUnitLimitByCompanyId'
2025-07-14 18:12:53 - src.corder_integration.code_generator.controller_interface_manager - INFO - 📝 处理Controller: LsLimitController
2025-07-14 18:12:53 - src.corder_integration.code_generator.service_decision_maker - INFO - 🔍 开始分析Service需求: listUnitLimitByCompanyId
2025-07-14 18:12:53 - src.corder_integration.code_generator.service_decision_maker - INFO - 📂 扫描项目Service文件: D:\gitlab\create_project\链数中建一局_1752487028\crcl-open
2025-07-14 18:12:53 - src.corder_integration.code_generator.service_decision_maker - INFO - 📊 找到 336 个Service文件
2025-07-14 18:12:53 - src.corder_integration.code_generator.service_decision_maker - INFO - 📂 扫描Application文件: D:\gitlab\create_project\链数中建一局_1752487028\crcl-open
2025-07-14 18:12:53 - src.corder_integration.code_generator.service_decision_maker - INFO - 📊 找到 35 个Application文件
2025-07-14 18:12:53 - src.corder_integration.code_generator.service_decision_maker - INFO - 🤔 进行Service决策: listUnitLimitByCompanyId
2025-07-14 18:12:58 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-14 18:12:58 - src.corder_integration.code_generator.service_decision_maker - INFO - 🤖 LLM决策完成: {'action': 'create_new', 'target_service': None, 'reason': '根据提供的Service文件信息，现有Service主要涉及信用(Credit)相关功能，而listUnitLimitByCompanyId接口似乎与单位限制(Unit Limit)相关，功能领域不匹配。建议创建一个新的Service专门处理单位限制相关逻辑，保持功能的高内聚和单一职责原则。', 'need_new_service': True, 'modify_existing': False}
2025-07-14 18:12:58 - src.corder_integration.code_generator.interface_adder - INFO - ➕ 开始在Controller中添加新接口: listUnitLimitByCompanyId
2025-07-14 18:12:58 - src.corder_integration.code_generator.interface_adder - INFO - ✅ 成功添加接口方法到Controller
2025-07-14 18:12:58 - src.corder_integration.code_generator.interface_adder - INFO - 📝 已备份原始文件: D:\gitlab\create_project\链数中建一局_1752487028\crcl-open\src\main\java\com\yljr\crcl\limit\interfaces\LsLimitController.java.backup
2025-07-14 18:12:58 - src.corder_integration.code_generator.interface_adder - INFO - ✅ 已保存更新后的Controller文件: D:\gitlab\create_project\链数中建一局_1752487028\crcl-open\src\main\java\com\yljr\crcl\limit\interfaces\LsLimitController.java
2025-07-14 18:12:58 - src.corder_integration.code_generator.controller_interface_manager - INFO - ✅ Controller LsLimitController 处理完成
2025-07-14 18:12:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功在现有Controller中添加接口: listUnitLimitByCompanyId
2025-07-14 18:12:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔧 使用现有模块处理Service和Mapper层: UnitLimitByCompanyId
2025-07-14 18:12:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 Service决策结果: create_new
2025-07-14 18:12:59 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_009 状态更新为 completed
2025-07-14 18:12:59 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 任务 task_009 执行成功
2025-07-14 18:12:59 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 第5轮执行完成，处理了 1 个任务
2025-07-14 18:12:59 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第6轮任务检查...
2025-07-14 18:13:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 第6轮找到 1 个可执行任务
2025-07-14 18:13:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 开始执行任务: task_010 (api)
2025-07-14 18:13:00 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_010 已被 intelligent_coding_node 领取
2025-07-14 18:13:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🌐 执行API接口生成任务: task_010
2025-07-14 18:13:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 解析的接口信息:
2025-07-14 18:13:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 接口名称: UnitLimitByCompanyIdExport
2025-07-14 18:13:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - API路径: /crcl-open-api/lsLimit/listUnitLimitByCompanyIdExport
2025-07-14 18:13:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - HTTP方法: GET
2025-07-14 18:13:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 输入参数: 4个
2025-07-14 18:13:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 输出参数: 3个
2025-07-14 18:13:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 业务描述: 复用listUnitLimitByCompanyId接口的查询逻辑，将结果导出为Excel格式
2025-07-14 18:13:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 在 D:\gitlab\create_project/链数中建一局_1752487028/crcl-open 中查找最佳Java项目路径...
2025-07-14 18:13:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 目标服务名: 确权开立服务
2025-07-14 18:13:00 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-14 18:13:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 发现Java项目: crcl-open
2025-07-14 18:13:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       🎯 相对路径: .
2025-07-14 18:13:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       📊 Java文件: 2251个
2025-07-14 18:13:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       📐 目录深度: 0
2025-07-14 18:13:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       🏆 优先级分数: 650
2025-07-14 18:13:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 排序后的候选路径（前3个）:
2025-07-14 18:13:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    1. . (优先级: 650)
2025-07-14 18:13:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 选择最佳Java项目路径:
2025-07-14 18:13:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 完整路径: D:\gitlab\create_project\链数中建一局_1752487028\crcl-open
2025-07-14 18:13:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📋 相对路径: .
2025-07-14 18:13:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    🏆 最终优先级: 650
2025-07-14 18:13:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 从API路径 /crcl-open-api/lsLimit/listUnitLimitByCompanyIdExport 提取关键字: lsLimit
2025-07-14 18:13:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 在项目中搜索关键字相关路径: lsLimit
2025-07-14 18:13:01 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 找到匹配目录: limit (得分: 25)
2025-07-14 18:13:01 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 找到匹配目录: ls (得分: 25)
2025-07-14 18:13:01 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 找到匹配目录: ls (得分: 25)
2025-07-14 18:13:01 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 找到匹配目录: ls (得分: 25)
2025-07-14 18:13:01 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 找到匹配目录: limit (得分: 25)
2025-07-14 18:13:01 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    ✅ 选择最佳匹配目录: limit (路径: src\main\java\com\yljr\crcl\limit)
2025-07-14 18:13:01 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 基于API关键字 'lsLimit' 找到现有路径: D:\gitlab\create_project\链数中建一局_1752487028\crcl-open\src\main\java\com\yljr\crcl\limit
2025-07-14 18:13:01 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -  分析目标项目: D:\gitlab\create_project\链数中建一局_1752487028\crcl-open\src\main\java\com\yljr\crcl\limit
2025-07-14 18:13:01 - src.apis.project_analysis_api - INFO - 🔍 开始分析项目用于代码生成: D:\gitlab\create_project\链数中建一局_1752487028\crcl-open\src\main\java\com\yljr\crcl\limit
2025-07-14 18:13:01 - src.apis.project_analysis_api - INFO - 📋 使用缓存的分析结果
2025-07-14 18:13:01 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 从编码代理获取设计文档内容 (4930 字符)
2025-07-14 18:13:01 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 设计文档内容已添加到项目上下文 (4930 字符)
2025-07-14 18:13:01 - src.corder_integration.code_generator.controller_interface_manager - INFO - 🚀 开始处理API接口请求: /crcl-open-api/lsLimit/listUnitLimitByCompanyIdExport
2025-07-14 18:13:01 - src.corder_integration.code_generator.controller_analyzer - INFO - 🔍 开始分析路径下的Controller文件: D:\gitlab\create_project\链数中建一局_1752487028\crcl-open\src\main\java\com\yljr\crcl\limit
2025-07-14 18:13:01 - src.corder_integration.code_generator.controller_analyzer - INFO - 🎯 匹配关键字: lsLimit
2025-07-14 18:13:01 - src.corder_integration.code_generator.controller_analyzer - INFO - 🎯 在 D:\gitlab\create_project\链数中建一局_1752487028\crcl-open\src\main\java\com\yljr\crcl\limit\interfaces\LsLimitController.java 中找到匹配的@RequestMapping: /lsLimit
2025-07-14 18:13:01 - src.corder_integration.code_generator.controller_analyzer - INFO - 📋 提取到 0 个Service依赖
2025-07-14 18:13:01 - src.corder_integration.code_generator.controller_analyzer - INFO - ✅ 找到匹配的Controller: D:\gitlab\create_project\链数中建一局_1752487028\crcl-open\src\main\java\com\yljr\crcl\limit\interfaces\LsLimitController.java
2025-07-14 18:13:01 - src.corder_integration.code_generator.controller_analyzer - INFO - 📊 总共找到 1 个匹配的Controller文件
2025-07-14 18:13:01 - src.corder_integration.code_generator.controller_analyzer - INFO - 🔧 从API路径 '/crcl-open-api/lsLimit/listUnitLimitByCompanyIdExport' 提取接口名称: 'listUnitLimitByCompanyIdExport'
2025-07-14 18:13:01 - src.corder_integration.code_generator.controller_interface_manager - INFO - 📝 处理Controller: LsLimitController
2025-07-14 18:13:01 - src.corder_integration.code_generator.service_decision_maker - INFO - 🔍 开始分析Service需求: listUnitLimitByCompanyIdExport
2025-07-14 18:13:01 - src.corder_integration.code_generator.service_decision_maker - INFO - 📂 扫描项目Service文件: D:\gitlab\create_project\链数中建一局_1752487028\crcl-open
2025-07-14 18:13:01 - src.corder_integration.code_generator.service_decision_maker - INFO - 📊 找到 336 个Service文件
2025-07-14 18:13:01 - src.corder_integration.code_generator.service_decision_maker - INFO - 📂 扫描Application文件: D:\gitlab\create_project\链数中建一局_1752487028\crcl-open
2025-07-14 18:13:02 - src.corder_integration.code_generator.service_decision_maker - INFO - 📊 找到 35 个Application文件
2025-07-14 18:13:02 - src.corder_integration.code_generator.service_decision_maker - INFO - 🤔 进行Service决策: listUnitLimitByCompanyIdExport
2025-07-14 18:13:07 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-14 18:13:07 - src.corder_integration.code_generator.service_decision_maker - INFO - 🤖 LLM决策完成: {'action': 'create_new', 'target_service': None, 'reason': '现有Service中没有与信用额度限制直接相关的服务，且该接口功能（按公司ID列出单位限额）是一个独立的业务功能，更适合创建一个新的Service来实现。CustCompanyCreditFeignApi和CustUnitCreditFeignApi虽然与信用相关，但功能定位不匹配。LetterCreditFeignApi与信用证相关，也不适用。CreditConsumer和CreditBuilderApplication是构建器和消费者，不适合处理此类查询功能。', 'need_new_service': True, 'modify_existing': False}
2025-07-14 18:13:07 - src.corder_integration.code_generator.interface_adder - INFO - ➕ 开始在Controller中添加新接口: listUnitLimitByCompanyIdExport
2025-07-14 18:13:07 - src.corder_integration.code_generator.interface_adder - INFO - ✅ 成功添加接口方法到Controller
2025-07-14 18:13:07 - src.corder_integration.code_generator.interface_adder - INFO - 📝 已备份原始文件: D:\gitlab\create_project\链数中建一局_1752487028\crcl-open\src\main\java\com\yljr\crcl\limit\interfaces\LsLimitController.java.backup
2025-07-14 18:13:07 - src.corder_integration.code_generator.interface_adder - INFO - ✅ 已保存更新后的Controller文件: D:\gitlab\create_project\链数中建一局_1752487028\crcl-open\src\main\java\com\yljr\crcl\limit\interfaces\LsLimitController.java
2025-07-14 18:13:07 - src.corder_integration.code_generator.controller_interface_manager - INFO - ✅ Controller LsLimitController 处理完成
2025-07-14 18:13:07 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功在现有Controller中添加接口: listUnitLimitByCompanyIdExport
2025-07-14 18:13:07 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔧 使用现有模块处理Service和Mapper层: UnitLimitByCompanyIdExport
2025-07-14 18:13:07 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 Service决策结果: create_new
2025-07-14 18:13:08 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_010 状态更新为 completed
2025-07-14 18:13:08 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 任务 task_010 执行成功
2025-07-14 18:13:08 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 第6轮执行完成，处理了 1 个任务
2025-07-14 18:13:08 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第7轮任务检查...
2025-07-14 18:13:09 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第7轮没有可执行的智能编码任务
2025-07-14 18:13:09 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 7 个任务，共7轮
2025-07-14 18:13:09 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 7 个任务
2025-07-14 18:13:09 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 18:13:09 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 18:13:09 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 18:13:09 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 18:13:09 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 18:13:09 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 18:13:09 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 18:13:09 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 18:13:09 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 增强版模板+AI生成器初始化完成
2025-07-14 18:13:09 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 增强版模板+AI代码生成器初始化完成
2025-07-14 18:13:09 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 从工作流状态获取设计文档 (4930 字符)
2025-07-14 18:13:09 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 18:13:09 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 18:13:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 18:13:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 18:13:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 18:13:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 18:13:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 18:13:10 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 18:13:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 18:13:11 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 18:13:11 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 18:13:11 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 18:13:11 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 18:13:11 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 18:13:11 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 增强版模板+AI生成器初始化完成
2025-07-14 18:13:11 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 增强版模板+AI代码生成器初始化完成
2025-07-14 18:13:11 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 从工作流状态获取设计文档 (4930 字符)
2025-07-14 18:13:11 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 18:13:11 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 18:13:12 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 18:13:12 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 18:13:12 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 18:13:12 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 18:13:12 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 18:13:12 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 18:13:12 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 18:13:12 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 18:13:12 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 18:13:12 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 18:13:12 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 18:13:12 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 18:13:12 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 增强版模板+AI生成器初始化完成
2025-07-14 18:13:12 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 增强版模板+AI代码生成器初始化完成
2025-07-14 18:13:12 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 从工作流状态获取设计文档 (4930 字符)
2025-07-14 18:13:12 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 18:13:12 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 18:13:13 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 18:13:13 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 18:13:13 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 18:13:13 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 18:13:13 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 18:13:13 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 18:13:13 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 18:13:13 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 18:13:13 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 18:13:13 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 18:13:13 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 18:13:13 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 18:13:13 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 增强版模板+AI生成器初始化完成
2025-07-14 18:13:13 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 增强版模板+AI代码生成器初始化完成
2025-07-14 18:13:13 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 从工作流状态获取设计文档 (4930 字符)
2025-07-14 18:13:13 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 18:13:13 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 18:13:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 18:13:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 18:13:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 18:13:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 18:13:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 18:13:15 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 18:13:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 18:13:15 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 18:13:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 18:13:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 18:13:15 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 18:13:15 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 18:13:15 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 增强版模板+AI生成器初始化完成
2025-07-14 18:13:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 增强版模板+AI代码生成器初始化完成
2025-07-14 18:13:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 从工作流状态获取设计文档 (4930 字符)
2025-07-14 18:13:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 18:13:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 18:13:16 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 18:13:16 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 18:13:16 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 18:13:16 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 18:13:16 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 18:13:16 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 18:13:16 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 18:13:17 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 18:13:17 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 18:13:17 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 18:13:17 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 18:13:17 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 18:13:17 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 增强版模板+AI生成器初始化完成
2025-07-14 18:13:17 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 增强版模板+AI代码生成器初始化完成
2025-07-14 18:13:17 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 从工作流状态获取设计文档 (4930 字符)
2025-07-14 18:13:17 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 18:13:17 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 18:13:17 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 18:13:17 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 18:13:17 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 18:13:17 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 18:13:17 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 18:13:17 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 18:13:17 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 18:13:18 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 18:13:18 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 18:13:18 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 18:13:18 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 18:13:18 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 18:13:18 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 增强版模板+AI生成器初始化完成
2025-07-14 18:13:18 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 增强版模板+AI代码生成器初始化完成
2025-07-14 18:13:18 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 从工作流状态获取设计文档 (4930 字符)
2025-07-14 18:13:18 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 18:13:18 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 18:13:19 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 18:13:19 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 18:13:19 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 18:13:19 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 18:13:19 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 18:13:19 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 18:13:19 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 18:13:19 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 18:13:19 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 18:13:19 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 18:13:19 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 18:13:19 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 18:13:19 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 增强版模板+AI生成器初始化完成
2025-07-14 18:13:19 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 增强版模板+AI代码生成器初始化完成
2025-07-14 18:13:19 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 从工作流状态获取设计文档 (4930 字符)
2025-07-14 18:13:19 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 18:13:19 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 18:13:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 18:13:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 18:13:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 18:13:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 18:13:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 18:13:20 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 18:13:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 18:13:21 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 18:13:21 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 18:13:21 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 18:13:21 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 18:13:21 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 18:13:21 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 增强版模板+AI生成器初始化完成
2025-07-14 18:13:21 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 增强版模板+AI代码生成器初始化完成
2025-07-14 18:13:21 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 从工作流状态获取设计文档 (4930 字符)
2025-07-14 18:13:21 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 18:13:21 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 18:13:22 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 18:13:22 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 18:13:22 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 18:13:22 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 18:13:22 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 18:13:22 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 18:13:22 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 18:13:22 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 18:13:22 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 18:13:22 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 18:13:22 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 18:13:22 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 18:13:22 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 增强版模板+AI生成器初始化完成
2025-07-14 18:13:22 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 增强版模板+AI代码生成器初始化完成
2025-07-14 18:13:22 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 从工作流状态获取设计文档 (4930 字符)
2025-07-14 18:13:22 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 18:13:22 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 18:13:23 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 18:13:23 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 18:13:23 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 18:13:23 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 18:13:23 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 18:13:23 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 18:13:23 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 18:13:24 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 18:13:24 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 18:13:24 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 18:13:24 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 18:13:24 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 18:13:24 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 增强版模板+AI生成器初始化完成
2025-07-14 18:13:24 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 增强版模板+AI代码生成器初始化完成
2025-07-14 18:13:24 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 从工作流状态获取设计文档 (4930 字符)
2025-07-14 18:13:24 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 18:13:24 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 18:13:25 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 18:13:25 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 18:13:25 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 18:13:25 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 18:13:25 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 18:13:25 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 18:13:25 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 18:13:25 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 18:13:25 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 18:13:25 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 18:13:25 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 18:13:25 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 18:13:25 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 增强版模板+AI生成器初始化完成
2025-07-14 18:13:25 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 增强版模板+AI代码生成器初始化完成
2025-07-14 18:13:25 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 从工作流状态获取设计文档 (4930 字符)
2025-07-14 18:13:25 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 18:13:25 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 18:13:26 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 18:13:26 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 18:13:26 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 18:13:26 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 18:13:26 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 18:13:26 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 18:13:26 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 18:13:27 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 18:13:27 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 18:13:27 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 18:13:27 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 18:13:27 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 18:13:27 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 增强版模板+AI生成器初始化完成
2025-07-14 18:13:27 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 增强版模板+AI代码生成器初始化完成
2025-07-14 18:13:27 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 从工作流状态获取设计文档 (4930 字符)
2025-07-14 18:13:27 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 18:13:27 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 18:13:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 18:13:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 18:13:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 18:13:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 18:13:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 18:13:28 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 18:13:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 18:13:28 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 18:13:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 18:13:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 18:13:28 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 18:13:28 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 18:13:28 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 增强版模板+AI生成器初始化完成
2025-07-14 18:13:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 增强版模板+AI代码生成器初始化完成
2025-07-14 18:13:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 从工作流状态获取设计文档 (4930 字符)
2025-07-14 18:13:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 18:13:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 18:13:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 18:13:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 18:13:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 18:13:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 18:13:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 18:13:29 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 18:13:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 18:13:29 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 18:13:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 18:13:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 18:13:29 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 18:13:29 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 18:13:29 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 增强版模板+AI生成器初始化完成
2025-07-14 18:13:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 增强版模板+AI代码生成器初始化完成
2025-07-14 18:13:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 从工作流状态获取设计文档 (4930 字符)
2025-07-14 18:13:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 18:13:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 18:13:30 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 18:13:30 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 18:13:30 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 18:13:30 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 18:13:30 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 18:13:30 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 18:13:30 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 18:13:30 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 18:13:30 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 18:13:30 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 18:13:30 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 18:13:30 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 18:13:30 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 增强版模板+AI生成器初始化完成
2025-07-14 18:13:30 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 增强版模板+AI代码生成器初始化完成
2025-07-14 18:13:30 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 从工作流状态获取设计文档 (4930 字符)
2025-07-14 18:13:30 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 18:13:30 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 18:13:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 18:13:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 18:13:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 18:13:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 18:13:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 18:13:31 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 18:13:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 18:13:31 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 18:13:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 18:13:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 18:13:31 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 18:13:31 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 18:13:31 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 增强版模板+AI生成器初始化完成
2025-07-14 18:13:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 增强版模板+AI代码生成器初始化完成
2025-07-14 18:13:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 从工作流状态获取设计文档 (4930 字符)
2025-07-14 18:13:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 18:13:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 18:13:32 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 18:13:32 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 18:13:32 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 18:13:32 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 18:13:32 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 18:13:32 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 18:13:32 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 18:13:32 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 18:13:32 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 18:13:32 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 18:13:32 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 18:13:32 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 18:13:32 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 增强版模板+AI生成器初始化完成
2025-07-14 18:13:32 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 增强版模板+AI代码生成器初始化完成
2025-07-14 18:13:32 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 从工作流状态获取设计文档 (4930 字符)
2025-07-14 18:13:32 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 18:13:32 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 18:13:33 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 18:13:33 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 18:13:33 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 18:13:33 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 18:13:33 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 18:13:33 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 18:13:33 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 18:13:34 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 18:13:34 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 18:13:34 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 18:13:34 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 18:13:34 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 18:13:34 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 增强版模板+AI生成器初始化完成
2025-07-14 18:13:34 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 增强版模板+AI代码生成器初始化完成
2025-07-14 18:13:34 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 从工作流状态获取设计文档 (4930 字符)
2025-07-14 18:13:34 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 18:13:34 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 18:13:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 18:13:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 18:13:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 18:13:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 18:13:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 18:13:35 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 18:13:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 18:13:35 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 18:13:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 18:13:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 18:13:35 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 18:13:35 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 18:13:35 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 增强版模板+AI生成器初始化完成
2025-07-14 18:13:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 增强版模板+AI代码生成器初始化完成
2025-07-14 18:13:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 从工作流状态获取设计文档 (4930 字符)
2025-07-14 18:13:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 18:13:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 18:13:36 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 18:13:36 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 18:13:36 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 18:13:36 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 18:13:36 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 18:13:36 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 18:13:36 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 18:13:36 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 18:13:36 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 18:13:36 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 18:13:36 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 18:13:36 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 18:13:36 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 增强版模板+AI生成器初始化完成
2025-07-14 18:13:36 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 增强版模板+AI代码生成器初始化完成
2025-07-14 18:13:36 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 从工作流状态获取设计文档 (4930 字符)
2025-07-14 18:13:36 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 18:13:36 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 18:13:37 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 18:13:37 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 18:13:37 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 18:13:37 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 18:13:37 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 18:13:37 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 18:13:37 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 18:13:37 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 18:13:37 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 18:13:37 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 18:13:37 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 18:13:37 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 18:13:37 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 增强版模板+AI生成器初始化完成
2025-07-14 18:13:37 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 增强版模板+AI代码生成器初始化完成
2025-07-14 18:13:37 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 从工作流状态获取设计文档 (4930 字符)
2025-07-14 18:13:37 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 18:13:37 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 18:13:39 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 18:13:39 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 18:13:39 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 18:13:39 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 18:13:39 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 18:13:39 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 18:13:39 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 18:13:39 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 18:13:39 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 18:13:39 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 18:13:39 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 18:13:39 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 18:13:39 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 增强版模板+AI生成器初始化完成
2025-07-14 18:13:39 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 增强版模板+AI代码生成器初始化完成
2025-07-14 18:13:39 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 从工作流状态获取设计文档 (4930 字符)
2025-07-14 18:13:39 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 18:13:39 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 18:13:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 18:13:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 18:13:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 18:13:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 18:13:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 18:13:40 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 18:13:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 18:13:41 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 18:13:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 18:13:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 18:13:41 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 18:13:41 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 18:13:41 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 增强版模板+AI生成器初始化完成
2025-07-14 18:13:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 增强版模板+AI代码生成器初始化完成
2025-07-14 18:13:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 从工作流状态获取设计文档 (4930 字符)
2025-07-14 18:13:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 18:13:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 18:13:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 18:13:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 18:13:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 18:13:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 18:13:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 18:13:42 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 18:13:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 18:13:42 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 18:13:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 18:13:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 18:13:42 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 18:13:42 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 18:13:42 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 增强版模板+AI生成器初始化完成
2025-07-14 18:13:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 增强版模板+AI代码生成器初始化完成
2025-07-14 18:13:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 从工作流状态获取设计文档 (4930 字符)
2025-07-14 18:13:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 18:13:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 18:13:43 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 18:13:43 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 18:13:43 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 18:13:43 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 18:13:43 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 18:13:43 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 18:13:43 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 18:13:44 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 18:13:44 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 18:13:44 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 18:13:44 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 18:13:44 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 18:13:44 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 增强版模板+AI生成器初始化完成
2025-07-14 18:13:44 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 增强版模板+AI代码生成器初始化完成
2025-07-14 18:13:44 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 从工作流状态获取设计文档 (4930 字符)
2025-07-14 18:13:44 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 18:13:44 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 18:13:45 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 18:13:45 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 18:13:45 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 18:13:45 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 18:13:45 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 18:13:45 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 18:13:45 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 18:13:45 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 18:13:45 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 18:13:45 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 18:13:45 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 18:13:45 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 18:13:45 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 增强版模板+AI生成器初始化完成
2025-07-14 18:13:45 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 增强版模板+AI代码生成器初始化完成
2025-07-14 18:13:45 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 从工作流状态获取设计文档 (4930 字符)
2025-07-14 18:13:45 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 18:13:45 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 18:13:47 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 18:13:47 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 18:13:47 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 18:13:47 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 18:13:47 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 18:13:47 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 18:13:47 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 18:13:47 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 18:13:47 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 18:13:47 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 18:13:47 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 18:13:47 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 18:13:47 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 增强版模板+AI生成器初始化完成
2025-07-14 18:13:47 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 增强版模板+AI代码生成器初始化完成
2025-07-14 18:13:47 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 从工作流状态获取设计文档 (4930 字符)
2025-07-14 18:13:47 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 18:13:47 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 18:13:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 18:13:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 18:13:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 18:13:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 18:13:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 18:13:48 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 18:13:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 18:13:48 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 18:13:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 18:13:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 18:13:48 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 18:13:48 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 18:13:48 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 增强版模板+AI生成器初始化完成
2025-07-14 18:13:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 增强版模板+AI代码生成器初始化完成
2025-07-14 18:13:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 从工作流状态获取设计文档 (4930 字符)
2025-07-14 18:13:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 18:13:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 18:13:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 18:13:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 18:13:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 18:13:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 18:13:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 18:13:49 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 18:13:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 18:13:50 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 18:13:50 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 18:13:50 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 18:13:50 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 18:13:50 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 18:13:50 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 增强版模板+AI生成器初始化完成
2025-07-14 18:13:50 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 增强版模板+AI代码生成器初始化完成
2025-07-14 18:13:50 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 从工作流状态获取设计文档 (4930 字符)
2025-07-14 18:13:50 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 18:13:50 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 18:13:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 18:13:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 18:13:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 18:13:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 18:13:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 18:13:51 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 18:13:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 18:13:51 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 18:13:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 18:13:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 18:13:51 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 18:13:51 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 18:13:51 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 增强版模板+AI生成器初始化完成
2025-07-14 18:13:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 增强版模板+AI代码生成器初始化完成
2025-07-14 18:13:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 从工作流状态获取设计文档 (4930 字符)
2025-07-14 18:13:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 18:13:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 18:13:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 18:13:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 18:13:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 18:13:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 18:13:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 18:13:52 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 18:13:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 18:13:53 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 18:13:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 18:13:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 18:13:53 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 18:13:53 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 18:13:53 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 增强版模板+AI生成器初始化完成
2025-07-14 18:13:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 增强版模板+AI代码生成器初始化完成
2025-07-14 18:13:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 从工作流状态获取设计文档 (4930 字符)
2025-07-14 18:13:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 18:13:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 18:13:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 18:13:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 18:13:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 18:13:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 18:13:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 18:13:54 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 18:13:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 18:13:54 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 18:13:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 18:13:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 18:13:54 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 18:13:54 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 18:13:54 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 增强版模板+AI生成器初始化完成
2025-07-14 18:13:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 增强版模板+AI代码生成器初始化完成
2025-07-14 18:13:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 从工作流状态获取设计文档 (4930 字符)
2025-07-14 18:13:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 18:13:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 18:13:55 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 18:13:55 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 18:13:55 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 18:13:55 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 18:13:55 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 18:13:55 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 18:13:55 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 18:13:56 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 18:13:56 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 18:13:56 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 18:13:56 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 18:13:56 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 18:13:56 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 增强版模板+AI生成器初始化完成
2025-07-14 18:13:56 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 增强版模板+AI代码生成器初始化完成
2025-07-14 18:13:56 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 从工作流状态获取设计文档 (4930 字符)
2025-07-14 18:13:56 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 18:13:56 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 18:13:57 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 18:13:57 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 18:13:57 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 18:13:57 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 18:13:57 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 18:13:57 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 18:13:57 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 18:13:57 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 18:13:57 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 18:13:57 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 18:13:57 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 18:13:57 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 18:13:57 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 增强版模板+AI生成器初始化完成
2025-07-14 18:13:57 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 增强版模板+AI代码生成器初始化完成
2025-07-14 18:13:57 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 从工作流状态获取设计文档 (4930 字符)
2025-07-14 18:13:57 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 18:13:57 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 18:13:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 18:13:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 18:13:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 18:13:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 18:13:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 18:13:58 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 18:13:59 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 18:13:59 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 18:13:59 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 18:13:59 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 18:13:59 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 18:13:59 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 18:13:59 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 增强版模板+AI生成器初始化完成
2025-07-14 18:13:59 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 增强版模板+AI代码生成器初始化完成
2025-07-14 18:13:59 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 从工作流状态获取设计文档 (4930 字符)
2025-07-14 18:13:59 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 18:13:59 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 18:14:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 18:14:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 18:14:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 18:14:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 18:14:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 18:14:00 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 18:14:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 18:14:00 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 18:14:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 18:14:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 18:14:00 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 18:14:00 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 18:14:00 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 增强版模板+AI生成器初始化完成
2025-07-14 18:14:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 增强版模板+AI代码生成器初始化完成
2025-07-14 18:14:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 从工作流状态获取设计文档 (4930 字符)
2025-07-14 18:14:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 18:14:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 18:14:01 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 18:14:01 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 18:14:01 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 18:14:01 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 18:14:01 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 18:14:01 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 18:14:01 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 18:14:02 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 18:14:02 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 18:14:02 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 18:14:02 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 18:14:02 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 18:14:02 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 增强版模板+AI生成器初始化完成
2025-07-14 18:14:02 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 增强版模板+AI代码生成器初始化完成
2025-07-14 18:14:02 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 从工作流状态获取设计文档 (4930 字符)
2025-07-14 18:14:02 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 18:14:02 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 18:14:02 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 18:14:02 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 18:14:02 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 18:14:02 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 18:14:02 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 18:14:02 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 18:14:02 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 18:14:03 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 18:14:03 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 18:14:03 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 18:14:03 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 18:14:03 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 18:14:03 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 增强版模板+AI生成器初始化完成
2025-07-14 18:14:03 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 增强版模板+AI代码生成器初始化完成
2025-07-14 18:14:03 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 从工作流状态获取设计文档 (4930 字符)
2025-07-14 18:14:03 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 18:14:03 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 18:14:04 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 18:14:04 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 18:14:04 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 18:14:04 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 18:14:04 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 18:14:04 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 18:14:04 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 18:14:04 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 18:14:04 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 18:14:04 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 18:14:04 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 18:14:04 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 18:14:04 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 增强版模板+AI生成器初始化完成
2025-07-14 18:14:04 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 增强版模板+AI代码生成器初始化完成
2025-07-14 18:14:04 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 从工作流状态获取设计文档 (4930 字符)
2025-07-14 18:14:04 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 18:14:04 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 18:14:05 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 18:14:05 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 18:14:05 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 18:14:05 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 18:14:05 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 18:14:05 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 18:14:05 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 18:14:05 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 18:14:05 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 18:14:05 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 18:14:05 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 18:14:05 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 18:14:05 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 增强版模板+AI生成器初始化完成
2025-07-14 18:14:05 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 增强版模板+AI代码生成器初始化完成
2025-07-14 18:14:05 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 从工作流状态获取设计文档 (4930 字符)
2025-07-14 18:14:05 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 18:14:05 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 18:14:07 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 18:14:07 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 18:14:07 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 18:14:07 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 18:14:07 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 18:14:07 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 18:14:07 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 18:14:07 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 18:14:07 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 18:14:07 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 18:14:07 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 18:14:07 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 18:14:07 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 增强版模板+AI生成器初始化完成
2025-07-14 18:14:07 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 增强版模板+AI代码生成器初始化完成
2025-07-14 18:14:07 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 从工作流状态获取设计文档 (4930 字符)
2025-07-14 18:14:07 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 18:14:07 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 18:14:08 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 18:14:08 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 18:14:08 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 18:14:08 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 18:14:08 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 18:14:08 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 18:14:08 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 18:14:09 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 18:14:09 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 18:14:09 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 18:14:09 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 18:14:09 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 18:14:09 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 增强版模板+AI生成器初始化完成
2025-07-14 18:14:09 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 增强版模板+AI代码生成器初始化完成
2025-07-14 18:14:09 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 从工作流状态获取设计文档 (4930 字符)
2025-07-14 18:14:09 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 18:14:09 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 18:14:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 18:14:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 18:14:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 18:14:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 18:14:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 18:14:10 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 18:14:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 18:14:10 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 18:14:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 18:14:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 18:14:10 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 18:14:10 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 18:14:10 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 增强版模板+AI生成器初始化完成
2025-07-14 18:14:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 增强版模板+AI代码生成器初始化完成
2025-07-14 18:14:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 从工作流状态获取设计文档 (4930 字符)
2025-07-14 18:14:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 18:14:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 18:14:11 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 18:14:11 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 18:14:11 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 18:14:11 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 18:14:11 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 18:14:11 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 18:14:11 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 18:14:11 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 18:14:11 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 18:14:11 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 18:14:11 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 18:14:11 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 18:14:11 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 增强版模板+AI生成器初始化完成
2025-07-14 18:14:11 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 增强版模板+AI代码生成器初始化完成
2025-07-14 18:14:11 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 从工作流状态获取设计文档 (4930 字符)
2025-07-14 18:14:11 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 18:14:11 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 18:14:12 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 18:14:12 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 18:14:12 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 18:14:12 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 18:14:12 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 18:14:12 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 18:14:12 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 18:14:12 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 18:14:12 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 18:14:12 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 18:14:12 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 18:14:12 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 18:14:12 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 增强版模板+AI生成器初始化完成
2025-07-14 18:14:12 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 增强版模板+AI代码生成器初始化完成
2025-07-14 18:14:12 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 从工作流状态获取设计文档 (4930 字符)
2025-07-14 18:14:12 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 18:14:12 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 18:14:14 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 18:14:14 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 18:14:14 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 18:14:14 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 18:14:14 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 18:14:14 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 18:14:14 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 18:14:15 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 18:14:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 18:14:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 18:14:15 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 18:14:15 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 18:14:15 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 增强版模板+AI生成器初始化完成
2025-07-14 18:14:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 增强版模板+AI代码生成器初始化完成
2025-07-14 18:14:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 从工作流状态获取设计文档 (4930 字符)
2025-07-14 18:14:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 18:14:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 18:14:16 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 18:14:16 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 18:14:16 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 18:14:16 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 18:14:16 - src.corder_integration.langgraph.workflow_orchestrator - ERROR - 工作流执行失败: Recursion limit of 50 reached without hitting a stop condition. You can increase the limit by setting the `recursion_limit` config key.
For troubleshooting, visit: https://python.langchain.com/docs/troubleshooting/errors/GRAPH_RECURSION_LIMIT
2025-07-14 18:14:16 - werkzeug - INFO - 127.0.0.1 - - [14/Jul/2025 18:14:16] "POST /api/coder-agent/process-document HTTP/1.1" 200 -
2025-07-14 19:32:15 - system - INFO - ==================================================
2025-07-14 19:32:15 - system - INFO - 🚀 智能分析系统日志系统初始化完成
2025-07-14 19:32:15 - system - INFO - 📁 日志根目录: D:\ai_project\document_analyzer\logs
2025-07-14 19:32:15 - system - INFO - 📊 日志级别: INFO
2025-07-14 19:32:15 - system - INFO - 📅 按日期轮转: 每天午夜自动轮转
2025-07-14 19:32:15 - system - INFO - 📂 按月分目录: logs/YYYY-MM/
2025-07-14 19:32:15 - system - INFO - 📝 主日志: logs/2025-07/app.log
2025-07-14 19:32:15 - system - INFO - 🔧 API日志: logs/2025-07/api_server.log
2025-07-14 19:32:15 - system - INFO - 🗂️ 保留天数: 7 天
2025-07-14 19:32:15 - system - INFO - ==================================================
2025-07-14 19:32:27 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-14 19:32:27 - root - WARNING - 智能编码节点不可用: cannot import name 'IntelligentCodingAgent' from partially initialized module 'src.corder_integration.langgraph.nodes.intelligent_coding_node' (most likely due to a circular import) (D:\ai_project\document_analyzer\src\corder_integration\langgraph\nodes\intelligent_coding_node.py)
2025-07-14 19:32:27 - src.utils.task_storage - INFO - 数据库初始化成功
2025-07-14 19:32:27 - markdown_storage - INFO - Markdown存储管理器初始化完成
2025-07-14 19:32:27 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-14 19:32:27 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 19:32:28 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-14 19:32:30 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-14 19:32:30 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-14 19:32:30 - WeaviateVectorDatabase - INFO - ✅ Weaviate连接成功: http://localhost:8080 (gRPC: 50051)
2025-07-14 19:32:30 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/schema/AnalyDesignDocuments "HTTP/1.1 200 OK"
2025-07-14 19:32:30 - WeaviateVectorDatabase - INFO - ✅ Weaviate集合已存在: AnalyDesignDocuments
2025-07-14 19:32:30 - AnalysisServiceManager - INFO - 初始化向量数据库: weaviate
2025-07-14 19:32:30 - sentence_transformers.SentenceTransformer - INFO - Use pytorch device_name: cpu
2025-07-14 19:32:30 - sentence_transformers.SentenceTransformer - INFO - Load pretrained SentenceTransformer: BAAI/bge-large-zh
2025-07-14 19:32:38 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-14 19:32:39 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-14 19:32:39 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-14 19:32:39 - src.utils.weaviate_helper - INFO - 成功连接到 Weaviate: localhost:8080
2025-07-14 19:32:39 - AnalysisServiceManager - INFO - 分析服务管理器初始化完成
2025-07-14 19:32:39 - src.utils.enhanced_analyzer - INFO - 增强分析器初始化完成
2025-07-14 19:32:39 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:8082
 * Running on http://26.26.26.1:8082
2025-07-14 19:32:39 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-07-14 19:32:39 - werkzeug - INFO -  * Restarting with stat
2025-07-14 19:32:40 - system - INFO - ==================================================
2025-07-14 19:32:40 - system - INFO - 🚀 智能分析系统日志系统初始化完成
2025-07-14 19:32:40 - system - INFO - 📁 日志根目录: D:\ai_project\document_analyzer\logs
2025-07-14 19:32:40 - system - INFO - 📊 日志级别: INFO
2025-07-14 19:32:40 - system - INFO - 📅 按日期轮转: 每天午夜自动轮转
2025-07-14 19:32:40 - system - INFO - 📂 按月分目录: logs/YYYY-MM/
2025-07-14 19:32:40 - system - INFO - 📝 主日志: logs/2025-07/app.log
2025-07-14 19:32:40 - system - INFO - 🔧 API日志: logs/2025-07/api_server.log
2025-07-14 19:32:40 - system - INFO - 🗂️ 保留天数: 7 天
2025-07-14 19:32:40 - system - INFO - ==================================================
2025-07-14 19:32:47 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-14 19:32:47 - root - WARNING - 智能编码节点不可用: cannot import name 'IntelligentCodingAgent' from partially initialized module 'src.corder_integration.langgraph.nodes.intelligent_coding_node' (most likely due to a circular import) (D:\ai_project\document_analyzer\src\corder_integration\langgraph\nodes\intelligent_coding_node.py)
2025-07-14 19:32:48 - src.utils.task_storage - INFO - 数据库初始化成功
2025-07-14 19:32:48 - markdown_storage - INFO - Markdown存储管理器初始化完成
2025-07-14 19:32:48 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-14 19:32:48 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 19:32:48 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-14 19:32:50 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-14 19:32:50 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-14 19:32:50 - WeaviateVectorDatabase - INFO - ✅ Weaviate连接成功: http://localhost:8080 (gRPC: 50051)
2025-07-14 19:32:50 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/schema/AnalyDesignDocuments "HTTP/1.1 200 OK"
2025-07-14 19:32:50 - WeaviateVectorDatabase - INFO - ✅ Weaviate集合已存在: AnalyDesignDocuments
2025-07-14 19:32:50 - AnalysisServiceManager - INFO - 初始化向量数据库: weaviate
2025-07-14 19:32:50 - sentence_transformers.SentenceTransformer - INFO - Use pytorch device_name: cpu
2025-07-14 19:32:50 - sentence_transformers.SentenceTransformer - INFO - Load pretrained SentenceTransformer: BAAI/bge-large-zh
2025-07-14 19:32:59 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-14 19:33:01 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-14 19:33:01 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-14 19:33:01 - src.utils.weaviate_helper - INFO - 成功连接到 Weaviate: localhost:8080
2025-07-14 19:33:01 - AnalysisServiceManager - INFO - 分析服务管理器初始化完成
2025-07-14 19:33:01 - src.utils.enhanced_analyzer - INFO - 增强分析器初始化完成
2025-07-14 19:33:01 - werkzeug - WARNING -  * Debugger is active!
2025-07-14 19:33:01 - werkzeug - INFO -  * Debugger PIN: 887-537-592
2025-07-14 19:34:05 - src.apis.coder_agent_api - INFO - 开始处理文档: 链数中建一局_1752492845
2025-07-14 19:34:05 - src.apis.coder_agent_api - INFO - 文档长度: 4931 字符
2025-07-14 19:34:05 - src.apis.coder_agent_api - INFO - 使用LangGraph: True
2025-07-14 19:34:05 - src.apis.coder_agent_api - INFO - 代码输出路径: D:\gitlab\create_project
2025-07-14 19:34:05 - src.apis.coder_agent_api - INFO - 使用LangGraph工作流处理项目: 链数中建一局_1752492845
2025-07-14 19:34:05 - src.corder_integration.langgraph.workflow_orchestrator - INFO - 准备使用异步SQLite检查点: D:\ai_project\document_analyzer\workflow_checkpoints.db
2025-07-14 19:34:05 - src.corder_integration.langgraph.workflow_orchestrator - INFO - 生成目标分支名称: 链数中建一局_1752492845 -> D_20250714_链数中建一局_1752492845
2025-07-14 19:34:05 - src.corder_integration.langgraph.workflow_orchestrator - INFO - 开始执行编码工作流: 链数中建一局_1752492845 -> D:\gitlab\create_project
2025-07-14 19:34:05 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 🚀 开始执行任务拆分: 链数中建一局_1752492845
2025-07-14 19:34:05 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📥 输入状态键: ['design_doc', 'project_name', 'identified_services', 'service_dependencies', 'task_execution_plan', 'parallel_tasks', 'git_repo_url', 'target_branch', 'project_paths', 'output_path', 'repo_initialized', 'generated_services', 'generated_apis', 'generated_sql', 'service_interconnections', 'unit_test_results', 'test_coverage', 'interface_compatibility', 'code_review_results', 'static_analysis_results', 'security_scan_results', 'commit_hashes', 'push_results', 'pr_urls', 'current_phase', 'completed_services', 'failed_services', 'retry_count', 'execution_errors']
2025-07-14 19:34:05 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📄 设计文档长度: 4930
2025-07-14 19:34:05 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 🔄 当前阶段: task_splitting
2025-07-14 19:34:05 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📁 计算的基础项目路径: D:\gitlab\create_project/链数中建一局_1752492845
2025-07-14 19:34:06 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 19:34:06 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 模板 task_splitting/design_analysis_prompts.jinja2 加载成功
2025-07-14 19:34:06 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 模板 task_splitting/service_boundary_prompts.jinja2 加载成功
2025-07-14 19:34:06 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 模板 task_splitting/dependency_analysis_prompts.jinja2 加载成功
2025-07-14 19:34:06 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 模板 task_splitting/task_scheduling_prompts.jinja2 加载成功
2025-07-14 19:34:06 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 模板 task_splitting/generate_sqlite_tasks_prompts.jinja2 加载成功
2025-07-14 19:34:06 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 任务数据库初始化完成
2025-07-14 19:34:06 - src.corder_integration.langgraph.nodes.task_splitting_node - WARNING - ⚠️ 无法删除文件 coding_agent_workflow.db-wal，可能被其他进程占用
2025-07-14 19:34:06 - src.corder_integration.langgraph.nodes.task_splitting_node - WARNING - ⚠️ 无法删除文件 coding_agent_workflow.db-shm，可能被其他进程占用
2025-07-14 19:34:06 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 数据库WAL检查点和优化完成
2025-07-14 19:34:06 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 数据库表结构重置完成
2025-07-14 19:34:06 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📋 步骤1：开始设计文档分析...
2025-07-14 19:34:06 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📄 文档分割完成：4930 字符 -> 3 个窗口
2025-07-14 19:34:06 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📄 设计文档分割成 3 个窗口
2025-07-14 19:34:06 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 分析窗口 1/3 (字符: 0-1926)
2025-07-14 19:34:23 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-14 19:34:23 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 窗口 1 分析完成
2025-07-14 19:34:23 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 分析窗口 2/3 (字符: 1626-3553)
2025-07-14 19:34:34 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-14 19:34:34 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 窗口 2 分析完成
2025-07-14 19:34:34 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 分析窗口 3/3 (字符: 3253-4930)
2025-07-14 19:34:49 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-14 19:34:49 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 窗口 3 分析完成
2025-07-14 19:34:49 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 🔄 合并 3 个设计分析分析结果...
2025-07-14 19:34:49 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📊 合并后的设计分析结果: {'architecture_style': '微服务', 'technology_stack': ['Spring Boot 2.7.x', 'Spring Boot', 'Excel导出工具（如Apache POI或EasyExcel）', 'pageHelper', 'PageHelper', 'MySQL', 'Spring Cloud 2021.x', 'Redis 6.0', 'MyBatis Plus 3.5.x', 'Redis', 'Nacos', 'RabbitMQ 3.8', 'RESTful API', 'MySQL 8.0'], 'functional_modules': [{'name': '用户服务', 'description': '处理用户管理、权限控制和角色管理', 'responsibilities': ['组织单元管理', '用户认证与授权']}, {'name': '确权开立服务', 'description': '处理业务数据的推送和校验逻辑', 'responsibilities': ['业务数据校验', '额度管理', '数据推送']}, {'name': '多组织单元管理', 'description': '管理企业多组织单元信息', 'responsibilities': ['组织单元CRUD', '状态管理', '关联企业信息']}, {'name': '确权开立服务', 'description': '处理确权开立和额度管理', 'responsibilities': ['额度分配', '额度查询', '额度类型管理']}, {'name': '额度管理模块', 'description': '处理组织单元额度的查询、导出功能', 'responsibilities': ['查询组织单元额度信息', '生成并导出Excel报表']}, {'name': '组织单元信息获取模块', 'description': '从用户服务获取组织单元详细信息', 'responsibilities': ['调用zqyl-user-center-service服务的/queryCompanyUnitList接口', '处理并返回组织单元信息']}], 'system_components': ['zqyl-user-center-service', 'zqyl-user-center-service（用户服务）', 'crcl-open服务', 'crcl-open（确权开立服务）', 'MySQL数据库', 'MySQL', 'crcl-open', 't_cust_multiorg_unit数据库表', 'Redis', 'Redis缓存'], 'data_flow': ['额度请求→额度分配→额度使用记录', '核心企业系统 → 确权开立服务 → 平台', '额度信息查询 -> 分页处理（PageHelper） -> 返回分页结果', '前端请求 -> crcl-open服务 -> 调用zqyl-user-center-service获取组织单元信息 -> 查询数据库获取额度信息 -> 生成Excel文件 -> 返回文件下载地址', '用户服务 → 确权开立服务 (组织单元信息)', '企业信息→组织单元创建'], 'integration_points': ['核心企业系统与确权开立服务的业务数据推送接口', 'zqyl-user-center-service的/queryCompanyUnitList接口', 'MySQL数据库连接', '企业系统与组织单元服务的集成', '额度服务与组织单元服务的集成', 'Redis缓存连接', '用户服务与确权开立服务的组织单元查询接口'], 'summary': '该设计采用微服务架构，包含用户服务和确权开立服务两个核心服务，使用Spring Cloud生态技术栈实现。主要优化了业务数据推送的校验逻辑，新增了组织单元额度管理功能。系统通过Nacos实现服务发现和配置管理，使用Redis缓存提升性能，整体架构松耦合且可扩展。 该设计采用微服务架构，包含多组织单元管理和确权开立两大核心模块。使用Spring Boot实现RESTful API，MySQL存储数据'}
2025-07-14 19:34:49 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 设计概要: 该设计采用微服务架构，包含用户服务和确权开立服务两个核心服务，使用Spring Cloud生态技术栈实现。主要优化了业务数据推送的校验逻辑，新增了组织单元额度管理功能。系统通过Nacos实现服务发现和配置管理，使用Redis缓存提升性能，整体架构松耦合且可扩展。 该设计采用微服务架构，包含多组织单元管理和确权开立两大核心模块。使用Spring Boot实现RESTful API，MySQL存储数据
2025-07-14 19:34:49 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 🏗️ 步骤2：开始技术架构分析...
2025-07-14 19:34:49 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 技术架构概要: 该设计采用微服务架构，包含用户服务和确权开立服务两个核心服务，使用Spring Cloud生态技术栈实现。主要优化了业务数据推送的校验逻辑，新增了组织单元额度管理功能。系统通过Nacos实现服务发现和配置管理，使用Redis缓存提升性能，整体架构松耦合且可扩展。 该设计采用微服务架构，包含多组织单元管理和确权开立两大核心模块。使用Spring Boot实现RESTful API，MySQL存储数据
2025-07-14 19:34:49 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 🔍 步骤3：开始服务边界识别...
2025-07-14 19:34:49 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 输入 - 设计概要: 该设计采用微服务架构，包含用户服务和确权开立服务两个核心服务，使用Spring Cloud生态技术栈实现。主要优化了业务数据推送的校验逻辑，新增了组织单元额度管理功能。系统通过Nacos实现服务发现和配置管理，使用Redis缓存提升性能，整体架构松耦合且可扩展。 该设计采用微服务架构，包含多组织单元管理和确权开立两大核心模块。使用Spring Boot实现RESTful API，MySQL存储数据
2025-07-14 19:34:49 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 输入 - 架构概要: 该设计采用微服务架构，包含用户服务和确权开立服务两个核心服务，使用Spring Cloud生态技术栈实现。主要优化了业务数据推送的校验逻辑，新增了组织单元额度管理功能。系统通过Nacos实现服务发现和配置管理，使用Redis缓存提升性能，整体架构松耦合且可扩展。 该设计采用微服务架构，包含多组织单元管理和确权开立两大核心模块。使用Spring Boot实现RESTful API，MySQL存储数据
2025-07-14 19:34:49 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 服务拆分提示词长度: 2333
2025-07-14 19:35:03 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-14 19:35:03 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 服务拆分LLM响应长度: 1082
2025-07-14 19:35:03 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📊 服务拆分解析结果: {'identified_services': [{'name': '用户服务', 'description': '负责用户管理和组织单元额度管理功能', 'git_repository': '', 'responsibilities': ['用户管理', '组织单元额度管理'], 'api_endpoints': [], 'database_tables': [], 'external_service_calls': [], 'config_requirements': ['MySQL数据库连接', 'Redis缓存配置']}, {'name': '确权开立服务', 'description': '负责确权开立业务处理，包含优化的业务数据推送校验逻辑', 'git_repository': '', 'responsibilities': ['确权开立业务处理', '业务数据推送校验'], 'api_endpoints': [], 'database_tables': [], 'external_service_calls': [], 'config_requirements': ['MySQL数据库连接', 'Redis缓存配置']}], 'service_call_relationships': {'dependencies': []}, 'summary': '基于设计文档的服务分析概要，确认涉及2个服务（用户服务和确权开立服务），0个新增接口（文档未提供具体接口信息），0个数据库表（文档未提供具体表信息）'}
2025-07-14 19:35:03 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 🎯 识别的服务列表: [{'name': '用户服务', 'description': '负责用户管理和组织单元额度管理功能', 'git_repository': '', 'responsibilities': ['用户管理', '组织单元额度管理'], 'api_endpoints': [], 'database_tables': [], 'external_service_calls': [], 'config_requirements': ['MySQL数据库连接', 'Redis缓存配置']}, {'name': '确权开立服务', 'description': '负责确权开立业务处理，包含优化的业务数据推送校验逻辑', 'git_repository': '', 'responsibilities': ['确权开立业务处理', '业务数据推送校验'], 'api_endpoints': [], 'database_tables': [], 'external_service_calls': [], 'config_requirements': ['MySQL数据库连接', 'Redis缓存配置']}]
2025-07-14 19:35:03 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 🔢 识别的服务数量: 2
2025-07-14 19:35:03 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 服务拆分概要: 基于设计文档的服务分析概要，确认涉及2个服务（用户服务和确权开立服务），0个新增接口（文档未提供具体接口信息），0个数据库表（文档未提供具体表信息）
2025-07-14 19:35:03 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 🌐 步骤4：开始依赖分析...
2025-07-14 19:35:03 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 依赖分析提示词长度: 2386
2025-07-14 19:35:22 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-14 19:35:22 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 依赖分析LLM响应长度: 1580
2025-07-14 19:35:22 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📊 依赖分析解析结果: {'service_dependencies': {'用户服务': {'database_dependencies': [{'database_type': 'MySQL', 'config_info': '未提供具体配置信息', 'tables_needed': [], 'description': '存储用户和组织单元信息'}, {'database_type': 'Redis', 'config_info': '未提供具体配置信息', 'tables_needed': [], 'description': '缓存用户和组织单元数据'}], 'api_call_dependencies': [], 'provides_apis': [{'endpoint': '未提供具体接口路径', 'used_by': ['确权开立服务']}]}, '确权开立服务': {'database_dependencies': [{'database_type': 'MySQL', 'config_info': '未提供具体配置信息', 'tables_needed': [], 'description': '存储确权开立相关数据'}], 'api_call_dependencies': [{'target_service': '用户服务', 'target_endpoint': '未提供具体接口路径', 'call_purpose': '获取用户和组织单元信息', 'dependency_type': '强依赖'}], 'provides_apis': []}}, 'development_order': [{'phase': 1, 'services': ['用户服务'], 'tasks': ['创建用户和组织单元相关的数据库表', '实现用户和组织单元管理接口'], 'reason': '确权开立服务需要调用用户服务的接口'}, {'phase': 2, 'services': ['确权开立服务'], 'tasks': ['创建确权开立相关的数据库表', '实现确权开立业务逻辑', '调用用户服务接口'], 'reason': '依赖用户服务的接口'}], 'critical_path': ['用户服务 -> 确权开立服务'], 'parallel_development': [], 'summary': '分析了2个服务的依赖关系，建议分2个阶段开发，关键路径为用户服务->确权开立服务'}
2025-07-14 19:35:22 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 依赖分析概要: 分析了2个服务的依赖关系，建议分2个阶段开发，关键路径为用户服务->确权开立服务
2025-07-14 19:35:22 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📅 步骤5：开始制定执行计划...
2025-07-14 19:35:22 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 任务调度提示词长度: 6276
2025-07-14 19:36:31 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-14 19:36:31 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 任务调度LLM响应长度: 7313
2025-07-14 19:36:31 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📊 执行计划解析结果: {'execution_phases': [{'phase_name': '基础设施搭建阶段', 'phase_order': 1, 'description': '搭建项目基础设施，包括数据库、配置服务、监控等基础组件', 'estimated_duration': '2天', 'services_involved': ['全部服务'], 'task_categories': [{'category': 'database', 'description': '数据库基础设施', 'tasks': [{'task_name': '创建MySQL数据库实例', 'service': '基础设施', 'deliverable': 'MySQL数据库实例', 'estimated_hours': 4, 'prerequisites': [], 'assignee_role': 'DBA'}, {'task_name': '初始化Redis缓存服务', 'service': '基础设施', 'deliverable': 'Redis服务', 'estimated_hours': 2, 'prerequisites': [], 'assignee_role': '运维工程师'}]}, {'category': 'config', 'description': '配置管理服务', 'tasks': [{'task_name': '部署Nacos配置中心', 'service': '基础设施', 'deliverable': 'Nacos服务', 'estimated_hours': 4, 'prerequisites': [], 'assignee_role': '运维工程师'}, {'task_name': '配置基础监控告警', 'service': '基础设施', 'deliverable': 'Prometheus+Grafana监控', 'estimated_hours': 4, 'prerequisites': [], 'assignee_role': '运维工程师'}]}], 'success_criteria': ['数据库可正常连接', 'Redis缓存服务可用', 'Nacos配置中心运行正常', '基础监控系统就绪'], 'parallel_execution': True}, {'phase_name': '核心服务开发阶段', 'phase_order': 2, 'description': '按依赖顺序开发用户服务和确权开立服务', 'estimated_duration': '6天', 'services_involved': ['用户服务', '确权开立服务'], 'task_categories': [{'category': 'database', 'description': '数据库表结构设计', 'tasks': [{'task_name': '设计用户服务数据库表', 'service': '用户服务', 'deliverable': '用户表SQL脚本', 'estimated_hours': 8, 'prerequisites': ['MySQL数据库实例'], 'assignee_role': '后端开发'}, {'task_name': '设计确权服务数据库表', 'service': '确权开立服务', 'deliverable': '确权表SQL脚本', 'estimated_hours': 8, 'prerequisites': ['MySQL数据库实例'], 'assignee_role': '后端开发'}]}, {'category': 'api', 'description': 'API接口开发', 'tasks': [{'task_name': '实现用户管理基础API', 'service': '用户服务', 'deliverable': '用户CRUD接口', 'estimated_hours': 16, 'prerequisites': ['用户表SQL脚本'], 'assignee_role': '后端开发'}, {'task_name': '实现组织单元额度管理API', 'service': '确权开立服务', 'deliverable': '额度管理接口', 'estimated_hours': 16, 'prerequisites': ['确权表SQL脚本', '用户服务API'], 'assignee_role': '后端开发'}]}, {'category': 'service', 'description': '业务逻辑实现', 'tasks': [{'task_name': '实现用户服务业务逻辑', 'service': '用户服务', 'deliverable': '用户服务实现类', 'estimated_hours': 16, 'prerequisites': ['用户表创建'], 'assignee_role': '后端开发'}, {'task_name': '实现确权校验逻辑', 'service': '确权开立服务', 'deliverable': '确权校验服务', 'estimated_hours': 16, 'prerequisites': ['确权表创建', '用户服务完成'], 'assignee_role': '后端开发'}]}], 'success_criteria': ['核心API开发完成', '业务逻辑单元测试通过', '代码覆盖率≥80%'], 'parallel_execution': False}, {'phase_name': '服务集成阶段', 'phase_order': 3, 'description': '服务间集成联调测试', 'estimated_duration': '3天', 'services_involved': ['用户服务', '确权开立服务'], 'task_categories': [{'category': 'integration', 'description': '服务集成', 'tasks': [{'task_name': '配置服务间调用', 'service': '集成', 'deliverable': 'Feign客户端配置', 'estimated_hours': 8, 'prerequisites': ['核心服务开发完成'], 'assignee_role': '后端开发'}]}, {'category': 'test', 'description': '集成测试', 'tasks': [{'task_name': '用户-确权服务集成测试', 'service': '集成测试', 'deliverable': '集成测试报告', 'estimated_hours': 16, 'prerequisites': ['服务间调用配置完成'], 'assignee_role': '测试工程师'}]}], 'success_criteria': ['服务间调用成功率100%', '集成测试用例通过率100%', '端到端业务流程验证通过'], 'parallel_execution': False}, {'phase_name': '部署上线阶段', 'phase_order': 4, 'description': '生产环境部署和监控配置', 'estimated_duration': '2天', 'services_involved': ['全部服务'], 'task_categories': [{'category': 'deployment', 'description': '部署配置', 'tasks': [{'task_name': '容器化打包', 'service': '部署', 'deliverable': 'Docker镜像', 'estimated_hours': 8, 'prerequisites': ['集成测试通过'], 'assignee_role': '运维工程师'}, {'task_name': '生产环境部署', 'service': '部署', 'deliverable': '生产环境服务', 'estimated_hours': 8, 'prerequisites': ['容器化打包完成'], 'assignee_role': '运维工程师'}]}, {'category': 'monitoring', 'description': '监控配置', 'tasks': [{'task_name': '配置生产环境监控', 'service': '监控', 'deliverable': '生产监控仪表盘', 'estimated_hours': 4, 'prerequisites': ['生产环境部署'], 'assignee_role': '运维工程师'}]}], 'success_criteria': ['生产环境服务正常运行', '关键指标监控就绪', '告警规则配置完成'], 'parallel_execution': False}], 'parallel_groups': [{'group_name': '基础设施并行组', 'group_order': 1, 'services': ['数据库', '缓存', '配置中心'], 'estimated_duration': '2天', 'description': '基础设施组件可并行部署', 'coordination_points': ['网络配置统一']}], 'execution_order': ['基础设施搭建', '用户服务开发', '确权开立服务开发', '服务集成测试', '生产环境部署'], 'resource_allocation': {'backend_developers': 2, 'devops_engineers': 1, 'test_engineers': 1, 'total_estimated_time': '13天'}, 'risk_management': {'critical_dependencies': [{'task': '用户服务开发', 'risk': '进度延迟影响确权服务开发', 'mitigation': '优先保证用户服务开发资源'}], 'buffer_time': '15%', 'contingency_plans': ['关键开发人员备份', '每日站会跟踪进度']}, 'summary': '项目分为4个阶段实施，预计13天完成，重点保障用户服务开发进度'}
2025-07-14 19:36:31 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 💾 步骤6：开始生成SQLite任务...
2025-07-14 19:36:31 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📄 执行计划较长(7813字符)，使用滑动窗口处理
2025-07-14 19:36:31 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📄 文档分割完成：7813 字符 -> 5 个窗口
2025-07-14 19:36:31 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 处理计划窗口 1/5
2025-07-14 19:37:20 - werkzeug - INFO -  * Detected change in 'D:\\ai_project\\document_analyzer\\src\\corder_integration\\code_generator\\unified_code_generator.py', reloading
2025-07-14 19:37:22 - werkzeug - INFO -  * Restarting with stat
2025-07-14 19:37:23 - system - INFO - ==================================================
2025-07-14 19:37:23 - system - INFO - 🚀 智能分析系统日志系统初始化完成
2025-07-14 19:37:23 - system - INFO - 📁 日志根目录: D:\ai_project\document_analyzer\logs
2025-07-14 19:37:23 - system - INFO - 📊 日志级别: INFO
2025-07-14 19:37:23 - system - INFO - 📅 按日期轮转: 每天午夜自动轮转
2025-07-14 19:37:23 - system - INFO - 📂 按月分目录: logs/YYYY-MM/
2025-07-14 19:37:23 - system - INFO - 📝 主日志: logs/2025-07/app.log
2025-07-14 19:37:23 - system - INFO - 🔧 API日志: logs/2025-07/api_server.log
2025-07-14 19:37:23 - system - INFO - 🗂️ 保留天数: 7 天
2025-07-14 19:37:23 - system - INFO - ==================================================
2025-07-14 19:37:31 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-14 19:37:31 - root - WARNING - 智能编码节点不可用: cannot import name 'IntelligentCodingAgent' from partially initialized module 'src.corder_integration.langgraph.nodes.intelligent_coding_node' (most likely due to a circular import) (D:\ai_project\document_analyzer\src\corder_integration\langgraph\nodes\intelligent_coding_node.py)
2025-07-14 19:37:31 - src.utils.task_storage - INFO - 数据库初始化成功
2025-07-14 19:37:31 - markdown_storage - INFO - Markdown存储管理器初始化完成
2025-07-14 19:37:31 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-14 19:37:32 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 19:37:32 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-14 19:37:33 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-14 19:37:33 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-14 19:37:33 - WeaviateVectorDatabase - INFO - ✅ Weaviate连接成功: http://localhost:8080 (gRPC: 50051)
2025-07-14 19:37:33 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/schema/AnalyDesignDocuments "HTTP/1.1 200 OK"
2025-07-14 19:37:33 - WeaviateVectorDatabase - INFO - ✅ Weaviate集合已存在: AnalyDesignDocuments
2025-07-14 19:37:33 - AnalysisServiceManager - INFO - 初始化向量数据库: weaviate
2025-07-14 19:37:33 - sentence_transformers.SentenceTransformer - INFO - Use pytorch device_name: cpu
2025-07-14 19:37:33 - sentence_transformers.SentenceTransformer - INFO - Load pretrained SentenceTransformer: BAAI/bge-large-zh
2025-07-14 19:37:40 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-14 19:37:41 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-14 19:37:42 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-14 19:37:42 - src.utils.weaviate_helper - INFO - 成功连接到 Weaviate: localhost:8080
2025-07-14 19:37:42 - AnalysisServiceManager - INFO - 分析服务管理器初始化完成
2025-07-14 19:37:42 - src.utils.enhanced_analyzer - INFO - 增强分析器初始化完成
2025-07-14 19:37:42 - werkzeug - WARNING -  * Debugger is active!
2025-07-14 19:37:42 - werkzeug - INFO -  * Debugger PIN: 887-537-592
2025-07-14 19:37:59 - system - INFO - ==================================================
2025-07-14 19:37:59 - system - INFO - 🚀 智能分析系统日志系统初始化完成
2025-07-14 19:37:59 - system - INFO - 📁 日志根目录: D:\ai_project\document_analyzer\logs
2025-07-14 19:37:59 - system - INFO - 📊 日志级别: INFO
2025-07-14 19:37:59 - system - INFO - 📅 按日期轮转: 每天午夜自动轮转
2025-07-14 19:37:59 - system - INFO - 📂 按月分目录: logs/YYYY-MM/
2025-07-14 19:37:59 - system - INFO - 📝 主日志: logs/2025-07/app.log
2025-07-14 19:37:59 - system - INFO - 🔧 API日志: logs/2025-07/api_server.log
2025-07-14 19:37:59 - system - INFO - 🗂️ 保留天数: 7 天
2025-07-14 19:37:59 - system - INFO - ==================================================
2025-07-14 19:38:06 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-14 19:38:06 - root - WARNING - 智能编码节点不可用: cannot import name 'IntelligentCodingAgent' from partially initialized module 'src.corder_integration.langgraph.nodes.intelligent_coding_node' (most likely due to a circular import) (D:\ai_project\document_analyzer\src\corder_integration\langgraph\nodes\intelligent_coding_node.py)
2025-07-14 19:38:06 - src.utils.task_storage - INFO - 数据库初始化成功
2025-07-14 19:38:06 - markdown_storage - INFO - Markdown存储管理器初始化完成
2025-07-14 19:38:06 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-14 19:38:06 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 19:38:07 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-14 19:38:07 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-14 19:38:08 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-14 19:38:08 - WeaviateVectorDatabase - INFO - ✅ Weaviate连接成功: http://localhost:8080 (gRPC: 50051)
2025-07-14 19:38:08 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/schema/AnalyDesignDocuments "HTTP/1.1 200 OK"
2025-07-14 19:38:08 - WeaviateVectorDatabase - INFO - ✅ Weaviate集合已存在: AnalyDesignDocuments
2025-07-14 19:38:08 - AnalysisServiceManager - INFO - 初始化向量数据库: weaviate
2025-07-14 19:38:08 - sentence_transformers.SentenceTransformer - INFO - Use pytorch device_name: cpu
2025-07-14 19:38:08 - sentence_transformers.SentenceTransformer - INFO - Load pretrained SentenceTransformer: BAAI/bge-large-zh
2025-07-14 19:38:15 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-14 19:38:15 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-14 19:38:16 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-14 19:38:16 - src.utils.weaviate_helper - INFO - 成功连接到 Weaviate: localhost:8080
2025-07-14 19:38:16 - AnalysisServiceManager - INFO - 分析服务管理器初始化完成
2025-07-14 19:38:16 - src.utils.enhanced_analyzer - INFO - 增强分析器初始化完成
2025-07-14 19:38:16 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:8082
 * Running on http://26.26.26.1:8082
2025-07-14 19:38:16 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-07-14 19:38:16 - werkzeug - INFO -  * Restarting with stat
2025-07-14 19:38:16 - system - INFO - ==================================================
2025-07-14 19:38:16 - system - INFO - 🚀 智能分析系统日志系统初始化完成
2025-07-14 19:38:16 - system - INFO - 📁 日志根目录: D:\ai_project\document_analyzer\logs
2025-07-14 19:38:16 - system - INFO - 📊 日志级别: INFO
2025-07-14 19:38:16 - system - INFO - 📅 按日期轮转: 每天午夜自动轮转
2025-07-14 19:38:16 - system - INFO - 📂 按月分目录: logs/YYYY-MM/
2025-07-14 19:38:16 - system - INFO - 📝 主日志: logs/2025-07/app.log
2025-07-14 19:38:16 - system - INFO - 🔧 API日志: logs/2025-07/api_server.log
2025-07-14 19:38:16 - system - INFO - 🗂️ 保留天数: 7 天
2025-07-14 19:38:16 - system - INFO - ==================================================
2025-07-14 19:38:23 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-14 19:38:23 - root - WARNING - 智能编码节点不可用: cannot import name 'IntelligentCodingAgent' from partially initialized module 'src.corder_integration.langgraph.nodes.intelligent_coding_node' (most likely due to a circular import) (D:\ai_project\document_analyzer\src\corder_integration\langgraph\nodes\intelligent_coding_node.py)
2025-07-14 19:38:23 - src.utils.task_storage - INFO - 数据库初始化成功
2025-07-14 19:38:23 - markdown_storage - INFO - Markdown存储管理器初始化完成
2025-07-14 19:38:23 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-14 19:38:24 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 19:38:24 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-14 19:38:25 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-14 19:38:25 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-14 19:38:25 - WeaviateVectorDatabase - INFO - ✅ Weaviate连接成功: http://localhost:8080 (gRPC: 50051)
2025-07-14 19:38:25 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/schema/AnalyDesignDocuments "HTTP/1.1 200 OK"
2025-07-14 19:38:25 - WeaviateVectorDatabase - INFO - ✅ Weaviate集合已存在: AnalyDesignDocuments
2025-07-14 19:38:25 - AnalysisServiceManager - INFO - 初始化向量数据库: weaviate
2025-07-14 19:38:25 - sentence_transformers.SentenceTransformer - INFO - Use pytorch device_name: cpu
2025-07-14 19:38:25 - sentence_transformers.SentenceTransformer - INFO - Load pretrained SentenceTransformer: BAAI/bge-large-zh
2025-07-14 19:38:33 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-14 19:38:34 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-14 19:38:35 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-14 19:38:35 - src.utils.weaviate_helper - INFO - 成功连接到 Weaviate: localhost:8080
2025-07-14 19:38:35 - AnalysisServiceManager - INFO - 分析服务管理器初始化完成
2025-07-14 19:38:35 - src.utils.enhanced_analyzer - INFO - 增强分析器初始化完成
2025-07-14 19:38:35 - werkzeug - WARNING -  * Debugger is active!
2025-07-14 19:38:35 - werkzeug - INFO -  * Debugger PIN: 887-537-592
2025-07-14 19:38:38 - src.apis.coder_agent_api - INFO - 开始处理文档: 链数中建一局_1752493118
2025-07-14 19:38:38 - src.apis.coder_agent_api - INFO - 文档长度: 4931 字符
2025-07-14 19:38:38 - src.apis.coder_agent_api - INFO - 使用LangGraph: True
2025-07-14 19:38:38 - src.apis.coder_agent_api - INFO - 代码输出路径: D:\gitlab\create_project
2025-07-14 19:38:38 - src.apis.coder_agent_api - INFO - 使用LangGraph工作流处理项目: 链数中建一局_1752493118
2025-07-14 19:38:38 - src.corder_integration.langgraph.workflow_orchestrator - INFO - 准备使用异步SQLite检查点: D:\ai_project\document_analyzer\workflow_checkpoints.db
2025-07-14 19:38:38 - src.corder_integration.langgraph.workflow_orchestrator - INFO - 生成目标分支名称: 链数中建一局_1752493118 -> D_20250714_链数中建一局_1752493118
2025-07-14 19:38:38 - src.corder_integration.langgraph.workflow_orchestrator - INFO - 开始执行编码工作流: 链数中建一局_1752493118 -> D:\gitlab\create_project
2025-07-14 19:38:38 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 🚀 开始执行任务拆分: 链数中建一局_1752493118
2025-07-14 19:38:38 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📥 输入状态键: ['design_doc', 'project_name', 'identified_services', 'service_dependencies', 'task_execution_plan', 'parallel_tasks', 'git_repo_url', 'target_branch', 'project_paths', 'output_path', 'repo_initialized', 'generated_services', 'generated_apis', 'generated_sql', 'service_interconnections', 'unit_test_results', 'test_coverage', 'interface_compatibility', 'code_review_results', 'static_analysis_results', 'security_scan_results', 'commit_hashes', 'push_results', 'pr_urls', 'current_phase', 'completed_services', 'failed_services', 'retry_count', 'execution_errors']
2025-07-14 19:38:38 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📄 设计文档长度: 4930
2025-07-14 19:38:38 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 🔄 当前阶段: task_splitting
2025-07-14 19:38:38 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📁 计算的基础项目路径: D:\gitlab\create_project/链数中建一局_1752493118
2025-07-14 19:38:38 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 19:38:38 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 模板 task_splitting/design_analysis_prompts.jinja2 加载成功
2025-07-14 19:38:38 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 模板 task_splitting/service_boundary_prompts.jinja2 加载成功
2025-07-14 19:38:38 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 模板 task_splitting/dependency_analysis_prompts.jinja2 加载成功
2025-07-14 19:38:38 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 模板 task_splitting/task_scheduling_prompts.jinja2 加载成功
2025-07-14 19:38:38 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 模板 task_splitting/generate_sqlite_tasks_prompts.jinja2 加载成功
2025-07-14 19:38:38 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 任务数据库初始化完成
2025-07-14 19:38:38 - src.corder_integration.langgraph.nodes.task_splitting_node - WARNING - ⚠️ 无法删除文件 coding_agent_workflow.db-wal，可能被其他进程占用
2025-07-14 19:38:38 - src.corder_integration.langgraph.nodes.task_splitting_node - WARNING - ⚠️ 无法删除文件 coding_agent_workflow.db-shm，可能被其他进程占用
2025-07-14 19:38:38 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 数据库WAL检查点和优化完成
2025-07-14 19:38:38 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 数据库表结构重置完成
2025-07-14 19:38:38 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📋 步骤1：开始设计文档分析...
2025-07-14 19:38:38 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📄 文档分割完成：4930 字符 -> 3 个窗口
2025-07-14 19:38:38 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📄 设计文档分割成 3 个窗口
2025-07-14 19:38:38 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 分析窗口 1/3 (字符: 0-1926)
2025-07-14 19:38:53 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-14 19:38:53 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 窗口 1 分析完成
2025-07-14 19:38:53 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 分析窗口 2/3 (字符: 1626-3553)
2025-07-14 19:39:04 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-14 19:39:04 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 窗口 2 分析完成
2025-07-14 19:39:04 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 分析窗口 3/3 (字符: 3253-4930)
2025-07-14 19:39:16 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-14 19:39:16 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 窗口 3 分析完成
2025-07-14 19:39:16 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 🔄 合并 3 个设计分析分析结果...
2025-07-14 19:39:16 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📊 合并后的设计分析结果: {'architecture_style': '微服务', 'technology_stack': ['MySQL', 'Nacos', 'Excel导出工具（如Apache POI或EasyExcel）', 'MyBatis Plus 3.5.x', 'RabbitMQ 3.8', 'Redis 6.0', 'RESTful API', 'Spring Boot', 'MySQL 8.0', 'pageHelper', 'Redis', 'PageHelper', 'Spring Boot 2.7.x', 'Spring Cloud 2021.x'], 'functional_modules': [{'name': '用户服务', 'description': '用户管理、权限控制、角色管理', 'responsibilities': ['组织单元管理', '用户认证与授权']}, {'name': '确权开立服务', 'description': '处理业务数据的推送与校验', 'responsibilities': ['业务数据校验', '额度管理']}, {'name': '多组织单元管理', 'description': '管理企业多组织单元信息', 'responsibilities': ['组织单元创建与维护', '组织单元状态管理']}, {'name': '确权开立服务', 'description': '处理确权开立和额度管理', 'responsibilities': ['额度分配管理', '额度使用情况跟踪']}, {'name': '额度管理模块', 'description': '处理组织单元额度的查询、导出功能', 'responsibilities': ['组织单元额度列表查询', 'Excel文件导出', '与用户中心服务集成获取组织单元详细信息']}], 'system_components': ['MySQL', 'zqyl-user-center-service（用户服务）', 'Redis缓存', 'zqyl-user-center-service', 't_cust_multiorg_unit数据库表', 'crcl-open（确权开立服务）', 'MySQL数据库', 'Redis', 'crcl-open服务', 'crcl-open'], 'data_flow': ['用户请求 -> 用户服务 -> 权限验证 -> 组织单元查询', '企业信息→组织单元管理→额度分配', '额度使用数据→额度管理→报表展示', '服务端查询数据库获取额度数据', '核心企业系统 -> 平台接口 -> 业务数据校验', '服务端生成Excel文件并返回下载链接', '客户端请求额度列表数据', '服务端调用用户中心服务获取组织单元详细信息'], 'integration_points': ['Redis缓存连接', 'MySQL数据库连接', '用户服务与确权开立服务的权限交互', '组织单元管理与确权开立服务间的API调用', '前端系统与后端服务的RESTful接口交互', 'zqyl-user-center-service的/queryCompanyUnitList接口', '核心企业系统与平台接口的数据推送'], 'summary': '该设计采用微服务架构，通过用户服务和确权开立服务实现松耦合。技术栈选型成熟，包含Spring Cloud生态组件和主流中间件。主要调整额度管理功能，新增组织单元额度查询，并优化接口校验逻辑以支持数据重推。整体架构合理，但需关注服务间通信和数据一致性问题。 该设计采用微服务架构，包含组织单元管理和确权开立两大核心模块。使用MySQL存储组织单元信息，通过RESTful API提供服务接口。系统实现了'}
2025-07-14 19:39:16 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 设计概要: 该设计采用微服务架构，通过用户服务和确权开立服务实现松耦合。技术栈选型成熟，包含Spring Cloud生态组件和主流中间件。主要调整额度管理功能，新增组织单元额度查询，并优化接口校验逻辑以支持数据重推。整体架构合理，但需关注服务间通信和数据一致性问题。 该设计采用微服务架构，包含组织单元管理和确权开立两大核心模块。使用MySQL存储组织单元信息，通过RESTful API提供服务接口。系统实现了
2025-07-14 19:39:16 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 🏗️ 步骤2：开始技术架构分析...
2025-07-14 19:39:16 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 技术架构概要: 该设计采用微服务架构，通过用户服务和确权开立服务实现松耦合。技术栈选型成熟，包含Spring Cloud生态组件和主流中间件。主要调整额度管理功能，新增组织单元额度查询，并优化接口校验逻辑以支持数据重推。整体架构合理，但需关注服务间通信和数据一致性问题。 该设计采用微服务架构，包含组织单元管理和确权开立两大核心模块。使用MySQL存储组织单元信息，通过RESTful API提供服务接口。系统实现了
2025-07-14 19:39:16 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 🔍 步骤3：开始服务边界识别...
2025-07-14 19:39:16 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 输入 - 设计概要: 该设计采用微服务架构，通过用户服务和确权开立服务实现松耦合。技术栈选型成熟，包含Spring Cloud生态组件和主流中间件。主要调整额度管理功能，新增组织单元额度查询，并优化接口校验逻辑以支持数据重推。整体架构合理，但需关注服务间通信和数据一致性问题。 该设计采用微服务架构，包含组织单元管理和确权开立两大核心模块。使用MySQL存储组织单元信息，通过RESTful API提供服务接口。系统实现了
2025-07-14 19:39:16 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 输入 - 架构概要: 该设计采用微服务架构，通过用户服务和确权开立服务实现松耦合。技术栈选型成熟，包含Spring Cloud生态组件和主流中间件。主要调整额度管理功能，新增组织单元额度查询，并优化接口校验逻辑以支持数据重推。整体架构合理，但需关注服务间通信和数据一致性问题。 该设计采用微服务架构，包含组织单元管理和确权开立两大核心模块。使用MySQL存储组织单元信息，通过RESTful API提供服务接口。系统实现了
2025-07-14 19:39:16 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 服务拆分提示词长度: 2333
2025-07-14 19:39:28 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-14 19:39:28 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 服务拆分LLM响应长度: 1084
2025-07-14 19:39:28 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📊 服务拆分解析结果: {'identified_services': [{'name': '用户服务', 'description': '处理用户相关功能的服务', 'git_repository': '', 'responsibilities': ['用户管理'], 'api_endpoints': [], 'database_tables': [], 'external_service_calls': [], 'config_requirements': []}, {'name': '确权开立服务', 'description': '处理确权开立相关功能的服务', 'git_repository': '', 'responsibilities': ['确权开立管理'], 'api_endpoints': [], 'database_tables': [], 'external_service_calls': [], 'config_requirements': []}, {'name': '组织单元管理服务', 'description': '管理组织单元信息的服务', 'git_repository': '', 'responsibilities': ['组织单元信息管理'], 'api_endpoints': [], 'database_tables': [{'table_name': '组织单元信息表', 'create_sql': '', 'description': '存储组织单元信息'}], 'external_service_calls': [], 'config_requirements': ['MySQL']}], 'service_call_relationships': {'dependencies': []}, 'summary': '基于设计文档的服务分析概要，确认涉及3个服务，0个新增接口，1个数据库表'}
2025-07-14 19:39:28 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 🎯 识别的服务列表: [{'name': '用户服务', 'description': '处理用户相关功能的服务', 'git_repository': '', 'responsibilities': ['用户管理'], 'api_endpoints': [], 'database_tables': [], 'external_service_calls': [], 'config_requirements': []}, {'name': '确权开立服务', 'description': '处理确权开立相关功能的服务', 'git_repository': '', 'responsibilities': ['确权开立管理'], 'api_endpoints': [], 'database_tables': [], 'external_service_calls': [], 'config_requirements': []}, {'name': '组织单元管理服务', 'description': '管理组织单元信息的服务', 'git_repository': '', 'responsibilities': ['组织单元信息管理'], 'api_endpoints': [], 'database_tables': [{'table_name': '组织单元信息表', 'create_sql': '', 'description': '存储组织单元信息'}], 'external_service_calls': [], 'config_requirements': ['MySQL']}]
2025-07-14 19:39:28 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 🔢 识别的服务数量: 3
2025-07-14 19:39:28 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 服务拆分概要: 基于设计文档的服务分析概要，确认涉及3个服务，0个新增接口，1个数据库表
2025-07-14 19:39:28 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 🌐 步骤4：开始依赖分析...
2025-07-14 19:39:28 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 依赖分析提示词长度: 2310
2025-07-14 19:39:45 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-14 19:39:45 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 依赖分析LLM响应长度: 1517
2025-07-14 19:39:45 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📊 依赖分析解析结果: {'service_dependencies': {'组织单元管理服务': {'database_dependencies': [{'database_type': 'MySQL', 'config_info': '存储组织单元信息', 'tables_needed': ['组织单元信息表'], 'description': '存储组织单元基础信息及额度数据'}], 'api_call_dependencies': [], 'provides_apis': [{'endpoint': '/api/organization-units/{id}/quota', 'used_by': ['确权开立服务']}]}, '确权开立服务': {'database_dependencies': [], 'api_call_dependencies': [{'target_service': '组织单元管理服务', 'target_endpoint': '/api/organization-units/{id}/quota', 'call_purpose': '查询组织单元额度', 'dependency_type': '强依赖'}], 'provides_apis': []}, '用户服务': {'database_dependencies': [], 'api_call_dependencies': [], 'provides_apis': []}}, 'development_order': [{'phase': 1, 'services': ['组织单元管理服务'], 'tasks': ['创建组织单元信息表', '实现组织单元额度查询接口'], 'reason': '确权开立服务强依赖其额度查询接口'}, {'phase': 2, 'services': ['确权开立服务'], 'tasks': ['实现业务逻辑', '集成组织单元额度查询'], 'reason': '依赖组织单元管理服务的接口'}], 'critical_path': ['组织单元管理服务 -> 确权开立服务'], 'parallel_development': [{'phase': '阶段1', 'parallel_services': ['用户服务'], 'reason': '用户服务与其他服务无直接依赖关系'}], 'summary': '分析了3个服务的依赖关系，建议分2个阶段开发，关键路径为组织单元管理服务→确权开立服务'}
2025-07-14 19:39:45 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 依赖分析概要: 分析了3个服务的依赖关系，建议分2个阶段开发，关键路径为组织单元管理服务→确权开立服务
2025-07-14 19:39:45 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📅 步骤5：开始制定执行计划...
2025-07-14 19:39:45 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 任务调度提示词长度: 6203
2025-07-14 19:40:45 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-14 19:40:45 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 任务调度LLM响应长度: 6210
2025-07-14 19:40:45 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📊 执行计划解析结果: {'execution_phases': [{'phase_name': '基础设施搭建阶段', 'phase_order': 1, 'description': '搭建基础数据库和环境配置，为后续开发做准备', 'estimated_duration': '1.5天', 'services_involved': ['组织单元管理服务', '确权开立服务', '用户服务'], 'task_categories': [{'category': 'database', 'description': '数据库初始化', 'tasks': [{'task_name': '创建组织单元数据库表', 'service': '组织单元管理服务', 'deliverable': 'org_unit_table.sql', 'estimated_hours': 4, 'prerequisites': [], 'assignee_role': 'DBA'}, {'task_name': '配置数据库连接池', 'service': '全部服务', 'deliverable': '数据源配置', 'estimated_hours': 2, 'prerequisites': ['数据库实例'], 'assignee_role': '后端开发'}]}, {'category': 'config', 'description': '环境配置', 'tasks': [{'task_name': '搭建Spring Cloud基础环境', 'service': '基础设施', 'deliverable': '注册中心配置', 'estimated_hours': 3, 'prerequisites': [], 'assignee_role': '运维工程师'}, {'task_name': '配置服务监控', 'service': '基础设施', 'deliverable': 'Prometheus配置', 'estimated_hours': 2, 'prerequisites': [], 'assignee_role': '运维工程师'}]}], 'success_criteria': ['数据库表创建完成', '服务注册中心可用', '监控系统就绪'], 'parallel_execution': True}, {'phase_name': '核心服务开发阶段', 'phase_order': 2, 'description': '按依赖顺序开发组织单元管理和确权开立服务', 'estimated_duration': '4天', 'services_involved': ['组织单元管理服务', '确权开立服务'], 'task_categories': [{'category': 'api', 'description': '接口实现', 'tasks': [{'task_name': '实现组织单元查询接口', 'service': '组织单元管理服务', 'deliverable': 'GET /org-units', 'estimated_hours': 6, 'prerequisites': ['数据库表创建'], 'assignee_role': '后端开发'}, {'task_name': '实现额度查询接口', 'service': '确权开立服务', 'deliverable': 'GET /rights/quotas', 'estimated_hours': 8, 'prerequisites': ['组织单元接口'], 'assignee_role': '后端开发'}]}, {'category': 'service', 'description': '业务逻辑实现', 'tasks': [{'task_name': '组织单元额度计算逻辑', 'service': '组织单元管理服务', 'deliverable': 'QuotaCalculator', 'estimated_hours': 8, 'prerequisites': ['数据库访问层'], 'assignee_role': '后端开发'}, {'task_name': '确权校验逻辑优化', 'service': '确权开立服务', 'deliverable': 'ValidationService', 'estimated_hours': 6, 'prerequisites': ['组织单元服务'], 'assignee_role': '后端开发'}]}], 'success_criteria': ['核心接口测试通过', '业务逻辑覆盖率>90%'], 'parallel_execution': False}, {'phase_name': '接口联调阶段', 'phase_order': 3, 'description': '服务间接口联调和数据一致性验证', 'estimated_duration': '2天', 'services_involved': ['组织单元管理服务', '确权开立服务'], 'task_categories': [{'category': 'integration', 'description': '服务集成', 'tasks': [{'task_name': '组织单元→确权服务联调', 'service': '集成测试', 'deliverable': '联调测试报告', 'estimated_hours': 8, 'prerequisites': ['核心服务开发'], 'assignee_role': '测试工程师'}]}, {'category': 'data', 'description': '数据验证', 'tasks': [{'task_name': '额度数据一致性检查', 'service': '数据测试', 'deliverable': '数据校验报告', 'estimated_hours': 4, 'prerequisites': ['服务联调'], 'assignee_role': '测试工程师'}]}], 'success_criteria': ['接口调用成功率100%', '数据差异为0'], 'parallel_execution': False}, {'phase_name': '系统测试部署阶段', 'phase_order': 4, 'description': '全链路测试和生产部署', 'estimated_duration': '2.5天', 'services_involved': ['全部服务'], 'task_categories': [{'category': 'test', 'description': '系统测试', 'tasks': [{'task_name': '性能压力测试', 'service': '性能测试', 'deliverable': '压测报告', 'estimated_hours': 6, 'prerequisites': ['联调完成'], 'assignee_role': '测试工程师'}]}, {'category': 'deployment', 'description': '生产部署', 'tasks': [{'task_name': '容器化打包部署', 'service': '部署', 'deliverable': '生产环境', 'estimated_hours': 8, 'prerequisites': ['测试通过'], 'assignee_role': '运维工程师'}]}], 'success_criteria': ['TPS达标', '生产验证通过'], 'parallel_execution': False}], 'parallel_groups': [{'group_name': '基础设施并行组', 'group_order': 1, 'services': ['数据库', '配置中心'], 'estimated_duration': '1.5天', 'description': '基础组件可并行搭建', 'coordination_points': ['网络配置']}], 'execution_order': ['数据库创建', '环境配置(并行)', '组织单元服务开发', '确权开立服务开发', '服务联调', '系统测试', '生产部署'], 'resource_allocation': {'backend_developers': 2, 'test_engineers': 1, 'devops_engineers': 1, 'total_estimated_time': '10天'}, 'risk_management': {'critical_dependencies': [{'task': '组织单元服务开发', 'risk': '延迟影响关键路径', 'mitigation': '优先分配资深开发'}], 'buffer_time': '15%', 'contingency_plans': ['每日站会跟踪进度', '关键代码评审']}, 'summary': '项目分4阶段10天完成，关键路径为组织单元→确权服务开发，需重点保障'}
2025-07-14 19:40:45 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 💾 步骤6：开始生成SQLite任务...
2025-07-14 19:40:45 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📄 执行计划较长(6744字符)，使用滑动窗口处理
2025-07-14 19:40:45 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📄 文档分割完成：6744 字符 -> 4 个窗口
2025-07-14 19:40:45 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 处理计划窗口 1/4
2025-07-14 19:43:09 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-14 19:43:09 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 窗口 1 任务生成完成
2025-07-14 19:43:09 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 处理计划窗口 2/4
2025-07-14 19:45:21 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-14 19:45:22 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 窗口 2 任务生成完成
2025-07-14 19:45:22 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 处理计划窗口 3/4
2025-07-14 19:47:35 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-14 19:47:35 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 窗口 3 任务生成完成
2025-07-14 19:47:35 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 处理计划窗口 4/4
2025-07-14 19:49:36 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-14 19:49:36 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 窗口 4 任务生成完成
2025-07-14 19:49:36 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 🔄 合并 4 个任务生成分析结果...
2025-07-14 19:49:36 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📊 任务生成解析结果: {'tasks': [{'task_id': 'task_001', 'service_name': '系统', 'task_type': 'git_extraction', 'priority': 1, 'dependencies': [], 'estimated_duration': '5分钟', 'description': '从设计文档提取GitLab仓库地址', 'implementation_details': '解析设计文档，提取用户服务 http://gitlab.local/ls/zqyl-user-center-service.git 和确权开立服务 http://gitlab.local/ls/crcl-open.git 仓库地址', 'deliverables': ['GitLab仓库地址清单', '仓库访问验证报告'], 'completion_criteria': '成功提取并验证两个GitLab仓库地址可访问性', 'parameters': {'repositories': ['zqyl-user-center-service', 'crcl-open']}}, {'task_id': 'task_002', 'service_name': '用户服务', 'task_type': 'git_clone', 'priority': 2, 'dependencies': ['task_001'], 'estimated_duration': '10分钟', 'description': '下载用户服务代码到D:\\gitlab\\create_project/链数中建一局_1752493118/zqyl-user-center-service', 'implementation_details': '使用git clone命令下载用户服务代码到指定目录，确保项目结构完整可编译', 'deliverables': ['用户服务源码目录'], 'completion_criteria': '代码下载完成，项目目录存在且包含pom.xml文件', 'parameters': {'git_url': 'http://gitlab.local/ls/zqyl-user-center-service.git', 'local_path': 'D:\\gitlab\\create_project/链数中建一局_1752493118/zqyl-user-center-service', 'branch': 'master'}}, {'task_id': 'task_003', 'service_name': '确权开立服务', 'task_type': 'git_clone', 'priority': 2, 'dependencies': ['task_001'], 'estimated_duration': '10分钟', 'description': '下载确权开立服务代码到D:\\gitlab\\create_project/链数中建一局_1752493118/crcl-open', 'implementation_details': '使用git clone命令下载确权开立服务代码到指定目录，确保项目结构完整可编译', 'deliverables': ['确权开立服务源码目录'], 'completion_criteria': '代码下载完成，项目目录存在且包含pom.xml文件', 'parameters': {'git_url': 'http://gitlab.local/ls/crcl-open.git', 'local_path': 'D:\\gitlab\\create_project/链数中建一局_1752493118/crcl-open', 'branch': 'master'}}, {'task_id': 'task_004', 'service_name': '用户服务', 'task_type': 'code_analysis', 'priority': 3, 'dependencies': ['task_002'], 'estimated_duration': '20分钟', 'description': '分析用户服务代码结构，确定MultiorgManageController添加位置', 'implementation_details': '分析项目package结构和controller层，找到或创建MultiorgManageController类的最佳位置', 'deliverables': ['代码结构从Controller层开始到数据获取的完整路径'], 'completion_criteria': '确定MultiorgManageController的包路径和文件位置，明确依赖的Service层结构', 'parameters': {'project_path': 'D:\\gitlab\\create_project/链数中建一局_1752493118/zqyl-user-center-service', 'target_controller': 'MultiorgManageController', 'target_api': '/general/multiorgManage/queryCompanyUnitList'}}, {'task_id': 'task_005', 'service_name': '确权开立服务', 'task_type': 'code_analysis', 'priority': 3, 'dependencies': ['task_003'], 'estimated_duration': '20分钟', 'description': '分析确权开立服务代码结构，确定LsLimitController添加位置', 'implementation_details': '分析项目package结构和controller层，找到或创建LsLimitController类的最佳位置，支持两个接口开发', 'deliverables': ['代码结构从Controller层开始到数据获取的完整路径', 'Feign客户端配置方案'], 'completion_criteria': '确定LsLimitController的包路径和文件位置，明确服务间调用的Feign配置', 'parameters': {'project_path': 'D:\\gitlab\\create_project/链数中建一局_1752493118/crcl-open', 'target_controller': 'LsLimitController', 'target_apis': ['/crcl-open-api/lsLimit/listUnitLimitByCompanyId', '/crcl-open-api/lsLimit/listUnitLimitByCompanyIdExport']}}, {'task_id': 'task_006', 'service_name': '用户服务', 'task_type': 'config', 'priority': 4, 'dependencies': ['task_004'], 'estimated_duration': '15分钟', 'description': '配置用户服务数据库连接：jdbc:mysql://localhost:6446/dbwebappdb', 'implementation_details': '修改application.yml文件，配置数据库连接信息包括URL、用户名密码和连接池设置', 'deliverables': ['数据库配置文件', '连接测试报告'], 'completion_criteria': 'application.yml文件已更新，数据库连接配置正确且可连通', 'parameters': {'config_file': 'D:\\gitlab\\create_project/链数中建一局_1752493118/zqyl-user-center-service/src/main/resources/application.yml', 'database_url': 'jdbc:mysql://localhost:6446/dbwebappdb', 'username': 'dbwebapp', 'password': 'dbwebapp'}}, {'task_id': 'task_007', 'service_name': '用户服务', 'task_type': 'database', 'priority': 5, 'dependencies': ['task_006'], 'estimated_duration': '15分钟', 'description': '创建t_cust_multiorg_unit表，包含id,company_id,unit_code,unit_name等字段', 'implementation_details': '编写建表SQL脚本，定义主键、索引和字段约束，创建对应的Entity和Mapper文件', 'deliverables': ['建表SQL脚本', 'Entity实体类', 'Mapper接口文件'], 'completion_criteria': '表结构创建成功，Entity和Mapper文件可正常编译，支持基本CRUD操作', 'parameters': {'table_name': 't_cust_multiorg_unit', 'sql_location': 'src/main/resources/sql/t_cust_multiorg_unit.sql'}}, {'task_id': 'task_008', 'service_name': '用户服务', 'task_type': 'api', 'priority': 6, 'dependencies': ['task_007'], 'estimated_duration': '60分钟', 'description': '实现GET /general/multiorgManage/queryCompanyUnitList接口', 'implementation_details': '在MultiorgManageController中实现查询接口，支持条件查询和分页，返回规定的字段格式', 'deliverables': ['MultiorgManageController类', 'Service业务逻辑层', '接口文档'], 'completion_criteria': '接口可正常访问，返回数据格式符合规范，支持条件查询和分页功能', 'parameters': {'project_path': 'D:\\gitlab\\create_project/链数中建一局_1752493118/zqyl-user-center-service', 'api_path': '/general/multiorgManage/queryCompanyUnitList', 'http_method': 'GET', 'content_type': 'application/json', 'request_params': {'unitCode': '组织单元编码(可选)', 'openStatus': '开通状态(可选)', 'unitList': '组织单元列表(可选)'}, 'response_params': {'unitId': '组织单元ID', 'unitTypeDicType': '组织单元类型字典类型', 'unitTypeId': '组织单元类型ID', 'openStatus': '开通状态', 'unitCode': '组织单元编码', 'unitName': '组织单元名称'}, 'business_logic': '根据查询条件查询组织单元信息，支持按编码、状态等条件筛选', 'data_source': 't_cust_multiorg_unit表', 'validation_rules': {'unitCode': '长度不超过50字符', 'openStatus': '取值范围0-1'}}}, {'task_id': 'task_009', 'service_name': '确权开立服务', 'task_type': 'api', 'priority': 7, 'dependencies': ['task_008'], 'estimated_duration': '90分钟', 'description': '实现GET /crcl-open-api/lsLimit/listUnitLimitByCompanyId接口，调用用户服务', 'implementation_details': '在LsLimitController中实现额度查询接口，配置Feign客户端调用用户服务接口获取组织单元信息', 'deliverables': ['LsLimitController类', 'Feign客户端配置', '业务逻辑层'], 'completion_criteria': '接口可正常访问，能成功调用用户服务，返回额度数据格式正确', 'parameters': {'project_path': 'D:\\gitlab\\create_project/链数中建一局_1752493118/crcl-open', 'api_path': '/crcl-open-api/lsLimit/listUnitLimitByCompanyId', 'http_method': 'GET', 'content_type': 'application/json', 'request_params': {'gwCompanyId': '公司ID(必填)', 'unitName': '组织单元名称(可选)', 'limitSource': '额度来源(可选)', 'bizType': '业务类型(必填)', 'page': '页码(可选,默认1)', 'pageRow': '每页行数(可选,默认10)'}, 'response_params': {'totalLimitAmt': '总额度金额', 'usedLimitAmt': '已用额度金额', 'usableLimitAmt': '可用额度金额', 'unitLimitListDetail': '单元额度详情列表'}, 'business_logic': '根据公司ID和筛选条件查询组织单元额度信息，调用用户服务获取组织单元基础信息', 'data_source': '本地额度表 + 用户服务接口', 'external_call': '/general/multiorgManage/queryCompanyUnitList', 'validation_rules': {'gwCompanyId': '必填，数值类型', 'bizType': '必填，业务类型枚举值', 'page': '正整数，默认1', 'pageRow': '正整数，范围1-100'}}}, {'task_id': 'task_010', 'service_name': '确权开立服务', 'task_type': 'api', 'priority': 8, 'dependencies': ['task_009'], 'estimated_duration': '45分钟', 'description': '实现GET /crcl-open-api/lsLimit/listUnitLimitByCompanyIdExport导出接口', 'implementation_details': '在LsLimitController中实现Excel导出接口，复用listUnitLimitByCompanyId的数据逻辑', 'deliverables': ['导出接口方法', 'Excel工具类', '导出模板文件'], 'completion_criteria': '接口可正常访问，能成功导出Excel文件，表头和数据格式正确', 'parameters': {'project_path': 'D:\\gitlab\\create_project/链数中建一局_1752493118/crcl-open', 'api_path': '/crcl-open-api/lsLimit/listUnitLimitByCompanyIdExport', 'http_method': 'GET', 'content_type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'request_params': {'gwCompanyId': '公司ID(必填)', 'unitName': '组织单元名称(可选)', 'limitSource': '额度来源(可选)', 'bizType': '业务类型(必填)'}, 'response_params': {'file': 'Excel文件流', 'filename': '导出文件名', 'contentType': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'}, 'business_logic': '复用listUnitLimitByCompanyId接口的查询逻辑，将结果导出为Excel格式', 'data_source': '调用listUnitLimitByCompanyId接口获取数据', 'export_format': 'xlsx', 'export_headers': ['组织单元名称', '额度名称', '额度类型', '已分配额度', '已用额度', '可用额度'], 'validation_rules': {'gwCompanyId': '必填，数值类型', 'bizType': '必填，业务类型枚举值'}}}, {'task_id': 'task_011', 'service_name': '系统', 'task_type': 'integration_test', 'priority': 9, 'dependencies': ['task_008', 'task_009', 'task_010'], 'estimated_duration': '30分钟', 'description': '测试确权开立服务调用用户服务接口的完整流程', 'implementation_details': '编写集成测试用例，验证服务间调用正确性和数据完整性', 'deliverables': ['集成测试用例', '测试数据脚本', '测试报告'], 'completion_criteria': '所有测试用例通过，接口调用链路正常，数据返回格式正确', 'parameters': {'test_scenarios': ['组织单元额度查询测试'], 'test_data': {'gwCompanyId': 1, 'unitName': '测试单元', 'bizType': 80}}}, {'task_id': 'task_012', 'service_name': '系统', 'task_type': 'deployment', 'priority': 10, 'dependencies': ['task_011'], 'estimated_duration': '20分钟', 'description': '提交代码到GitLab仓库，commit message: feat: 新增组织单元额度管理功能', 'implementation_details': '执行git add、git commit和git push命令，提交所有新增和修改的代码文件', 'deliverables': ['Git提交记录', '代码合并报告', '部署文档'], 'completion_criteria': '代码成功提交到GitLab仓库，commit信息清晰，无冲突', 'parameters': {'repositories': [{'path': 'D:\\gitlab\\create_project/链数中建一局_1752493118/zqyl-user-center-service', 'changes': '新增组织单元查询接口'}, {'path': 'D:\\gitlab\\create_project/链数中建一局_1752493118/crcl-open', 'changes': '新增组织单元额度列表和导出接口'}]}}], 'total_tasks': 12, 'summary': '生成12个任务：GitLab代码下载->结构分析->环境配置->接口开发->测试部署。严格使用设计文档中的真实接口路径和参数，确保先开发用户服务接口，再开发依赖它的确权开立服务接口。 生成12个任务：GitLab代码下载->结构分析->环境配置->接口开发->测试部署。严格使用设计文档中的真实接口路径和参数，确保先开发用户服务接口，再开发依赖它的确权开立服务接口。 生成12个任务：GitLab代码'}
2025-07-14 19:49:36 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 🎯 生成的任务列表: [{'task_id': 'task_001', 'service_name': '系统', 'task_type': 'git_extraction', 'priority': 1, 'dependencies': [], 'estimated_duration': '5分钟', 'description': '从设计文档提取GitLab仓库地址', 'implementation_details': '解析设计文档，提取用户服务 http://gitlab.local/ls/zqyl-user-center-service.git 和确权开立服务 http://gitlab.local/ls/crcl-open.git 仓库地址', 'deliverables': ['GitLab仓库地址清单', '仓库访问验证报告'], 'completion_criteria': '成功提取并验证两个GitLab仓库地址可访问性', 'parameters': {'repositories': ['zqyl-user-center-service', 'crcl-open']}}, {'task_id': 'task_002', 'service_name': '用户服务', 'task_type': 'git_clone', 'priority': 2, 'dependencies': ['task_001'], 'estimated_duration': '10分钟', 'description': '下载用户服务代码到D:\\gitlab\\create_project/链数中建一局_1752493118/zqyl-user-center-service', 'implementation_details': '使用git clone命令下载用户服务代码到指定目录，确保项目结构完整可编译', 'deliverables': ['用户服务源码目录'], 'completion_criteria': '代码下载完成，项目目录存在且包含pom.xml文件', 'parameters': {'git_url': 'http://gitlab.local/ls/zqyl-user-center-service.git', 'local_path': 'D:\\gitlab\\create_project/链数中建一局_1752493118/zqyl-user-center-service', 'branch': 'master'}}, {'task_id': 'task_003', 'service_name': '确权开立服务', 'task_type': 'git_clone', 'priority': 2, 'dependencies': ['task_001'], 'estimated_duration': '10分钟', 'description': '下载确权开立服务代码到D:\\gitlab\\create_project/链数中建一局_1752493118/crcl-open', 'implementation_details': '使用git clone命令下载确权开立服务代码到指定目录，确保项目结构完整可编译', 'deliverables': ['确权开立服务源码目录'], 'completion_criteria': '代码下载完成，项目目录存在且包含pom.xml文件', 'parameters': {'git_url': 'http://gitlab.local/ls/crcl-open.git', 'local_path': 'D:\\gitlab\\create_project/链数中建一局_1752493118/crcl-open', 'branch': 'master'}}, {'task_id': 'task_004', 'service_name': '用户服务', 'task_type': 'code_analysis', 'priority': 3, 'dependencies': ['task_002'], 'estimated_duration': '20分钟', 'description': '分析用户服务代码结构，确定MultiorgManageController添加位置', 'implementation_details': '分析项目package结构和controller层，找到或创建MultiorgManageController类的最佳位置', 'deliverables': ['代码结构从Controller层开始到数据获取的完整路径'], 'completion_criteria': '确定MultiorgManageController的包路径和文件位置，明确依赖的Service层结构', 'parameters': {'project_path': 'D:\\gitlab\\create_project/链数中建一局_1752493118/zqyl-user-center-service', 'target_controller': 'MultiorgManageController', 'target_api': '/general/multiorgManage/queryCompanyUnitList'}}, {'task_id': 'task_005', 'service_name': '确权开立服务', 'task_type': 'code_analysis', 'priority': 3, 'dependencies': ['task_003'], 'estimated_duration': '20分钟', 'description': '分析确权开立服务代码结构，确定LsLimitController添加位置', 'implementation_details': '分析项目package结构和controller层，找到或创建LsLimitController类的最佳位置，支持两个接口开发', 'deliverables': ['代码结构从Controller层开始到数据获取的完整路径', 'Feign客户端配置方案'], 'completion_criteria': '确定LsLimitController的包路径和文件位置，明确服务间调用的Feign配置', 'parameters': {'project_path': 'D:\\gitlab\\create_project/链数中建一局_1752493118/crcl-open', 'target_controller': 'LsLimitController', 'target_apis': ['/crcl-open-api/lsLimit/listUnitLimitByCompanyId', '/crcl-open-api/lsLimit/listUnitLimitByCompanyIdExport']}}, {'task_id': 'task_006', 'service_name': '用户服务', 'task_type': 'config', 'priority': 4, 'dependencies': ['task_004'], 'estimated_duration': '15分钟', 'description': '配置用户服务数据库连接：jdbc:mysql://localhost:6446/dbwebappdb', 'implementation_details': '修改application.yml文件，配置数据库连接信息包括URL、用户名密码和连接池设置', 'deliverables': ['数据库配置文件', '连接测试报告'], 'completion_criteria': 'application.yml文件已更新，数据库连接配置正确且可连通', 'parameters': {'config_file': 'D:\\gitlab\\create_project/链数中建一局_1752493118/zqyl-user-center-service/src/main/resources/application.yml', 'database_url': 'jdbc:mysql://localhost:6446/dbwebappdb', 'username': 'dbwebapp', 'password': 'dbwebapp'}}, {'task_id': 'task_007', 'service_name': '用户服务', 'task_type': 'database', 'priority': 5, 'dependencies': ['task_006'], 'estimated_duration': '15分钟', 'description': '创建t_cust_multiorg_unit表，包含id,company_id,unit_code,unit_name等字段', 'implementation_details': '编写建表SQL脚本，定义主键、索引和字段约束，创建对应的Entity和Mapper文件', 'deliverables': ['建表SQL脚本', 'Entity实体类', 'Mapper接口文件'], 'completion_criteria': '表结构创建成功，Entity和Mapper文件可正常编译，支持基本CRUD操作', 'parameters': {'table_name': 't_cust_multiorg_unit', 'sql_location': 'src/main/resources/sql/t_cust_multiorg_unit.sql'}}, {'task_id': 'task_008', 'service_name': '用户服务', 'task_type': 'api', 'priority': 6, 'dependencies': ['task_007'], 'estimated_duration': '60分钟', 'description': '实现GET /general/multiorgManage/queryCompanyUnitList接口', 'implementation_details': '在MultiorgManageController中实现查询接口，支持条件查询和分页，返回规定的字段格式', 'deliverables': ['MultiorgManageController类', 'Service业务逻辑层', '接口文档'], 'completion_criteria': '接口可正常访问，返回数据格式符合规范，支持条件查询和分页功能', 'parameters': {'project_path': 'D:\\gitlab\\create_project/链数中建一局_1752493118/zqyl-user-center-service', 'api_path': '/general/multiorgManage/queryCompanyUnitList', 'http_method': 'GET', 'content_type': 'application/json', 'request_params': {'unitCode': '组织单元编码(可选)', 'openStatus': '开通状态(可选)', 'unitList': '组织单元列表(可选)'}, 'response_params': {'unitId': '组织单元ID', 'unitTypeDicType': '组织单元类型字典类型', 'unitTypeId': '组织单元类型ID', 'openStatus': '开通状态', 'unitCode': '组织单元编码', 'unitName': '组织单元名称'}, 'business_logic': '根据查询条件查询组织单元信息，支持按编码、状态等条件筛选', 'data_source': 't_cust_multiorg_unit表', 'validation_rules': {'unitCode': '长度不超过50字符', 'openStatus': '取值范围0-1'}}}, {'task_id': 'task_009', 'service_name': '确权开立服务', 'task_type': 'api', 'priority': 7, 'dependencies': ['task_008'], 'estimated_duration': '90分钟', 'description': '实现GET /crcl-open-api/lsLimit/listUnitLimitByCompanyId接口，调用用户服务', 'implementation_details': '在LsLimitController中实现额度查询接口，配置Feign客户端调用用户服务接口获取组织单元信息', 'deliverables': ['LsLimitController类', 'Feign客户端配置', '业务逻辑层'], 'completion_criteria': '接口可正常访问，能成功调用用户服务，返回额度数据格式正确', 'parameters': {'project_path': 'D:\\gitlab\\create_project/链数中建一局_1752493118/crcl-open', 'api_path': '/crcl-open-api/lsLimit/listUnitLimitByCompanyId', 'http_method': 'GET', 'content_type': 'application/json', 'request_params': {'gwCompanyId': '公司ID(必填)', 'unitName': '组织单元名称(可选)', 'limitSource': '额度来源(可选)', 'bizType': '业务类型(必填)', 'page': '页码(可选,默认1)', 'pageRow': '每页行数(可选,默认10)'}, 'response_params': {'totalLimitAmt': '总额度金额', 'usedLimitAmt': '已用额度金额', 'usableLimitAmt': '可用额度金额', 'unitLimitListDetail': '单元额度详情列表'}, 'business_logic': '根据公司ID和筛选条件查询组织单元额度信息，调用用户服务获取组织单元基础信息', 'data_source': '本地额度表 + 用户服务接口', 'external_call': '/general/multiorgManage/queryCompanyUnitList', 'validation_rules': {'gwCompanyId': '必填，数值类型', 'bizType': '必填，业务类型枚举值', 'page': '正整数，默认1', 'pageRow': '正整数，范围1-100'}}}, {'task_id': 'task_010', 'service_name': '确权开立服务', 'task_type': 'api', 'priority': 8, 'dependencies': ['task_009'], 'estimated_duration': '45分钟', 'description': '实现GET /crcl-open-api/lsLimit/listUnitLimitByCompanyIdExport导出接口', 'implementation_details': '在LsLimitController中实现Excel导出接口，复用listUnitLimitByCompanyId的数据逻辑', 'deliverables': ['导出接口方法', 'Excel工具类', '导出模板文件'], 'completion_criteria': '接口可正常访问，能成功导出Excel文件，表头和数据格式正确', 'parameters': {'project_path': 'D:\\gitlab\\create_project/链数中建一局_1752493118/crcl-open', 'api_path': '/crcl-open-api/lsLimit/listUnitLimitByCompanyIdExport', 'http_method': 'GET', 'content_type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'request_params': {'gwCompanyId': '公司ID(必填)', 'unitName': '组织单元名称(可选)', 'limitSource': '额度来源(可选)', 'bizType': '业务类型(必填)'}, 'response_params': {'file': 'Excel文件流', 'filename': '导出文件名', 'contentType': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'}, 'business_logic': '复用listUnitLimitByCompanyId接口的查询逻辑，将结果导出为Excel格式', 'data_source': '调用listUnitLimitByCompanyId接口获取数据', 'export_format': 'xlsx', 'export_headers': ['组织单元名称', '额度名称', '额度类型', '已分配额度', '已用额度', '可用额度'], 'validation_rules': {'gwCompanyId': '必填，数值类型', 'bizType': '必填，业务类型枚举值'}}}, {'task_id': 'task_011', 'service_name': '系统', 'task_type': 'integration_test', 'priority': 9, 'dependencies': ['task_008', 'task_009', 'task_010'], 'estimated_duration': '30分钟', 'description': '测试确权开立服务调用用户服务接口的完整流程', 'implementation_details': '编写集成测试用例，验证服务间调用正确性和数据完整性', 'deliverables': ['集成测试用例', '测试数据脚本', '测试报告'], 'completion_criteria': '所有测试用例通过，接口调用链路正常，数据返回格式正确', 'parameters': {'test_scenarios': ['组织单元额度查询测试'], 'test_data': {'gwCompanyId': 1, 'unitName': '测试单元', 'bizType': 80}}}, {'task_id': 'task_012', 'service_name': '系统', 'task_type': 'deployment', 'priority': 10, 'dependencies': ['task_011'], 'estimated_duration': '20分钟', 'description': '提交代码到GitLab仓库，commit message: feat: 新增组织单元额度管理功能', 'implementation_details': '执行git add、git commit和git push命令，提交所有新增和修改的代码文件', 'deliverables': ['Git提交记录', '代码合并报告', '部署文档'], 'completion_criteria': '代码成功提交到GitLab仓库，commit信息清晰，无冲突', 'parameters': {'repositories': [{'path': 'D:\\gitlab\\create_project/链数中建一局_1752493118/zqyl-user-center-service', 'changes': '新增组织单元查询接口'}, {'path': 'D:\\gitlab\\create_project/链数中建一局_1752493118/crcl-open', 'changes': '新增组织单元额度列表和导出接口'}]}}]
2025-07-14 19:49:36 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 🔢 生成的任务数量: 12
2025-07-14 19:49:36 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 已保存 12 个任务到数据库
2025-07-14 19:49:36 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 已生成并保存 12 个任务到数据库
2025-07-14 19:49:36 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📤 最终服务列表: ['用户服务', '确权开立服务', '组织单元管理服务']
2025-07-14 19:49:36 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📤 生成并行任务批次: [{'batch_id': 'batch_1', 'services': ['用户服务', '确权开立服务', '组织单元管理服务'], 'dependencies': []}]
2025-07-14 19:49:36 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📤 输出状态键: ['design_doc', 'project_name', 'identified_services', 'service_dependencies', 'task_execution_plan', 'parallel_tasks', 'git_repo_url', 'target_branch', 'project_paths', 'output_path', 'repo_initialized', 'generated_services', 'generated_apis', 'generated_sql', 'service_interconnections', 'unit_test_results', 'test_coverage', 'interface_compatibility', 'code_review_results', 'static_analysis_results', 'security_scan_results', 'commit_hashes', 'push_results', 'pr_urls', 'current_phase', 'completed_services', 'failed_services', 'retry_count', 'execution_errors', 'generated_tasks']
2025-07-14 19:49:36 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📤 输出 - 识别服务: ['用户服务', '确权开立服务', '组织单元管理服务']
2025-07-14 19:49:36 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📤 输出 - 当前阶段: intelligent_coding
2025-07-14 19:49:36 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 任务拆分完成，识别 3 个服务，生成 12 个任务
2025-07-14 19:49:36 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🚀 Git管理节点开始执行...
2025-07-14 19:49:36 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 19:49:36 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🎯 git_management_node 开始执行任务...
2025-07-14 19:49:36 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 📋 找到 1 个可执行任务
2025-07-14 19:49:36 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🚀 开始执行任务: task_001 (git_extraction)
2025-07-14 19:49:36 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_001 已被 git_management_node 领取
2025-07-14 19:49:36 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🔍 执行Git提取任务: task_001
2025-07-14 19:49:36 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 📄 提取源文本: 解析设计文档，提取用户服务 http://gitlab.local/ls/zqyl-user-center-service.git 和确权开立服务 http://gitlab.local/ls/crcl-open.git 仓库地址 从设计文档提取GitLab仓库地址...
2025-07-14 19:49:36 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🔍 开始从文本提取Git URL...
2025-07-14 19:49:36 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🔗 找到Git仓库: http://gitlab.local/ls/zqyl-user-center-service.git
2025-07-14 19:49:36 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🔗 找到Git仓库: http://gitlab.local/ls/crcl-open.git
2025-07-14 19:49:36 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 提取到 2 个Git仓库
2025-07-14 19:49:36 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_001 状态更新为 completed
2025-07-14 19:49:36 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 任务 task_001 执行成功
2025-07-14 19:49:36 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ Git管理任务执行完成，共处理 1 个任务
2025-07-14 19:49:36 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🚀 基于提取结果自动克隆 2 个仓库...
2025-07-14 19:49:36 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 📥 自动克隆仓库: http://gitlab.local/ls/zqyl-user-center-service.git -> D:\gitlab\create_project/链数中建一局_1752493118/zqyl-user-center-service
2025-07-14 19:49:36 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 📥 开始克隆仓库: http://gitlab.local/ls/zqyl-user-center-service.git -> D:\gitlab\create_project/链数中建一局_1752493118/zqyl-user-center-service
2025-07-14 19:49:38 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 已切换到分支: master
2025-07-14 19:49:38 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 仓库克隆成功: D:\gitlab\create_project/链数中建一局_1752493118/zqyl-user-center-service
2025-07-14 19:49:38 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 自动克隆成功: zqyl-user-center-service
2025-07-14 19:49:38 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 已标记任务 task_002 为完成状态
2025-07-14 19:49:38 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 📥 自动克隆仓库: http://gitlab.local/ls/crcl-open.git -> D:\gitlab\create_project/链数中建一局_1752493118/crcl-open
2025-07-14 19:49:38 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 📥 开始克隆仓库: http://gitlab.local/ls/crcl-open.git -> D:\gitlab\create_project/链数中建一局_1752493118/crcl-open
2025-07-14 19:49:40 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 已切换到分支: master
2025-07-14 19:49:40 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 仓库克隆成功: D:\gitlab\create_project/链数中建一局_1752493118/crcl-open
2025-07-14 19:49:40 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 自动克隆成功: crcl-open
2025-07-14 19:49:40 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 已标记任务 task_003 为完成状态
2025-07-14 19:49:40 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ Git管理节点完成 - 提取: 2 个仓库, 克隆: 2 个仓库, 仓库初始化状态: True
2025-07-14 19:49:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 19:49:40 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 19:49:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 19:49:40 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 19:49:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 19:49:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 19:49:40 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 19:49:40 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 19:49:40 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 增强版模板+AI生成器初始化完成
2025-07-14 19:49:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 增强版模板+AI代码生成器初始化完成
2025-07-14 19:49:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 从工作流状态获取设计文档 (4930 字符)
2025-07-14 19:49:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 19:49:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 19:49:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 第1轮找到 2 个可执行任务
2025-07-14 19:49:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 开始执行任务: task_004 (code_analysis)
2025-07-14 19:49:40 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_004 已被 intelligent_coding_node 领取
2025-07-14 19:49:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行代码分析任务: task_004
2025-07-14 19:49:40 - src.utils.java_code_analyzer - INFO - 🔍 开始分析企业级Java项目: D:\gitlab\create_project/链数中建一局_1752493118/zqyl-user-center-service
2025-07-14 19:49:41 - src.utils.java_code_analyzer - INFO - ✅ 企业级项目分析完成，共分析 29 个Java文件
2025-07-14 19:49:41 - src.utils.java_code_analyzer - INFO - 📄 企业级分析报告已导出: outputs\用户服务_java_analysis_20250714_194941.md
2025-07-14 19:49:41 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_004 状态更新为 completed
2025-07-14 19:49:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 任务 task_004 执行成功
2025-07-14 19:49:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 开始执行任务: task_005 (code_analysis)
2025-07-14 19:49:41 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_005 已被 intelligent_coding_node 领取
2025-07-14 19:49:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行代码分析任务: task_005
2025-07-14 19:49:41 - src.utils.java_code_analyzer - INFO - 🔍 开始分析企业级Java项目: D:\gitlab\create_project/链数中建一局_1752493118/crcl-open
2025-07-14 19:49:51 - src.utils.java_code_analyzer - INFO - ✅ 企业级项目分析完成，共分析 2262 个Java文件
2025-07-14 19:49:52 - src.utils.java_code_analyzer - INFO - 📄 企业级分析报告已导出: outputs\确权开立服务_java_analysis_20250714_194951.md
2025-07-14 19:49:52 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_005 状态更新为 completed
2025-07-14 19:49:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 任务 task_005 执行成功
2025-07-14 19:49:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 第1轮执行完成，处理了 2 个任务
2025-07-14 19:49:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第2轮任务检查...
2025-07-14 19:49:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 第2轮找到 1 个可执行任务
2025-07-14 19:49:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 开始执行任务: task_006 (config)
2025-07-14 19:49:52 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_006 已被 intelligent_coding_node 领取
2025-07-14 19:49:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ⚙️ 执行配置生成任务: task_006
2025-07-14 19:49:52 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_006 状态更新为 completed
2025-07-14 19:49:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 任务 task_006 执行成功
2025-07-14 19:49:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 第2轮执行完成，处理了 1 个任务
2025-07-14 19:49:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第3轮任务检查...
2025-07-14 19:49:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 第3轮找到 1 个可执行任务
2025-07-14 19:49:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 开始执行任务: task_007 (database)
2025-07-14 19:49:53 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_007 已被 intelligent_coding_node 领取
2025-07-14 19:49:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🗄️ 执行数据库设计任务: task_007
2025-07-14 19:49:53 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_007 状态更新为 completed
2025-07-14 19:49:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 任务 task_007 执行成功
2025-07-14 19:49:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 第3轮执行完成，处理了 1 个任务
2025-07-14 19:49:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第4轮任务检查...
2025-07-14 19:49:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 第4轮找到 1 个可执行任务
2025-07-14 19:49:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 开始执行任务: task_008 (api)
2025-07-14 19:49:53 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_008 已被 intelligent_coding_node 领取
2025-07-14 19:49:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🌐 执行API接口生成任务: task_008
2025-07-14 19:49:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 解析的接口信息:
2025-07-14 19:49:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 接口名称: CompanyUnitList
2025-07-14 19:49:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - API路径: /general/multiorgManage/queryCompanyUnitList
2025-07-14 19:49:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - HTTP方法: GET
2025-07-14 19:49:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 输入参数: 3个
2025-07-14 19:49:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 输出参数: 6个
2025-07-14 19:49:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 业务描述: 根据查询条件查询组织单元信息，支持按编码、状态等条件筛选
2025-07-14 19:49:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 在 D:\gitlab\create_project/链数中建一局_1752493118/zqyl-user-center-service 中查找最佳Java项目路径...
2025-07-14 19:49:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 目标服务名: 用户服务
2025-07-14 19:49:54 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-14 19:49:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 发现Java项目: user-basic-general
2025-07-14 19:49:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       🎯 相对路径: user-basic-service\user-basic-general
2025-07-14 19:49:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       📊 Java文件: 29个
2025-07-14 19:49:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       📐 目录深度: 2
2025-07-14 19:49:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       🏆 优先级分数: 750
2025-07-14 19:49:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 排序后的候选路径（前3个）:
2025-07-14 19:49:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    1. user-basic-service\user-basic-general (优先级: 750)
2025-07-14 19:49:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 选择最佳Java项目路径:
2025-07-14 19:49:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 完整路径: D:\gitlab\create_project\链数中建一局_1752493118\zqyl-user-center-service\user-basic-service\user-basic-general
2025-07-14 19:49:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📋 相对路径: user-basic-service\user-basic-general
2025-07-14 19:49:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    🏆 最终优先级: 750
2025-07-14 19:49:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 从API路径 /general/multiorgManage/queryCompanyUnitList 提取关键字: multiorgManage
2025-07-14 19:49:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 在项目中搜索关键字相关路径: multiorgManage
2025-07-14 19:49:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    ❌ 未找到包含关键字 'multiorgManage' 的相关目录
2025-07-14 19:49:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -  分析目标项目: D:\gitlab\create_project\链数中建一局_1752493118\zqyl-user-center-service\user-basic-service\user-basic-general
2025-07-14 19:49:54 - src.apis.project_analysis_api - INFO - 🔍 开始分析项目用于代码生成: D:\gitlab\create_project\链数中建一局_1752493118\zqyl-user-center-service\user-basic-service\user-basic-general
2025-07-14 19:49:54 - src.apis.project_analysis_api - INFO - 🔍 在 D:\gitlab\create_project\链数中建一局_1752493118\zqyl-user-center-service\user-basic-service\user-basic-general 中查找最佳Java项目路径...
2025-07-14 19:49:54 - src.apis.project_analysis_api - INFO - 🎯 目标服务名: 用户服务
2025-07-14 19:49:54 - src.apis.project_analysis_api - INFO -    📐 中等深度结构 (深度7) -> +100
2025-07-14 19:49:54 - src.apis.project_analysis_api - INFO -    📦 服务模块匹配: user-basic-service -> +120
2025-07-14 19:49:54 - src.apis.project_analysis_api - INFO -    🏢 业务域匹配: user -> +60
2025-07-14 19:49:54 - src.apis.project_analysis_api - INFO -    🏗️ 架构层级匹配: service -> +100
2025-07-14 19:49:54 - src.apis.project_analysis_api - INFO -    🎯🎯🎯 深层服务模块路径匹配 -> +800
2025-07-14 19:49:54 - src.apis.project_analysis_api - INFO -    📁 发现Java项目: user-basic-general
2025-07-14 19:49:54 - src.apis.project_analysis_api - INFO -       🎯 相对路径: .
2025-07-14 19:49:54 - src.apis.project_analysis_api - INFO -       📊 Java文件: 29个
2025-07-14 19:49:54 - src.apis.project_analysis_api - INFO -       📐 目录深度: 0
2025-07-14 19:49:54 - src.apis.project_analysis_api - INFO -       🏆 优先级分数: 1181
2025-07-14 19:49:54 - src.apis.project_analysis_api - INFO - 📋 排序后的候选路径（前3个）:
2025-07-14 19:49:54 - src.apis.project_analysis_api - INFO -    1. . (优先级: 1181)
2025-07-14 19:49:54 - src.apis.project_analysis_api - INFO - ✅ 选择最佳Java项目路径:
2025-07-14 19:49:54 - src.apis.project_analysis_api - INFO -    📁 完整路径: D:\gitlab\create_project\链数中建一局_1752493118\zqyl-user-center-service\user-basic-service\user-basic-general
2025-07-14 19:49:54 - src.apis.project_analysis_api - INFO -    📋 相对路径: .
2025-07-14 19:49:54 - src.apis.project_analysis_api - INFO -    🏆 最终优先级: 1181
2025-07-14 19:49:54 - src.apis.project_analysis_api - INFO - 📂 实际分析路径: D:\gitlab\create_project\链数中建一局_1752493118\zqyl-user-center-service\user-basic-service\user-basic-general
2025-07-14 19:49:54 - src.utils.java_code_analyzer - INFO - 🔍 开始分析企业级Java项目: D:\gitlab\create_project\链数中建一局_1752493118\zqyl-user-center-service\user-basic-service\user-basic-general
2025-07-14 19:49:54 - src.utils.java_code_analyzer - INFO - ✅ 企业级项目分析完成，共分析 29 个Java文件
2025-07-14 19:49:54 - src.apis.project_analysis_api - INFO - 📦 动态检测到基础包: com.yljr.user.basicgeneral (出现29次)
2025-07-14 19:49:54 - src.apis.project_analysis_api - INFO - 📦 动态检测到基础包: com.yljr.user.basicgeneral (出现29次)
2025-07-14 19:49:54 - src.apis.project_analysis_api - INFO - 📦 动态检测到基础包: com.yljr.user.basicgeneral (出现29次)
2025-07-14 19:49:54 - src.apis.project_analysis_api - INFO - ✅ 项目分析完成，已提取代码生成上下文
2025-07-14 19:49:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 从编码代理获取设计文档内容 (4930 字符)
2025-07-14 19:49:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 设计文档内容已添加到项目上下文 (4930 字符)
2025-07-14 19:49:54 - src.corder_integration.code_generator.controller_interface_manager - INFO - 🚀 开始处理API接口请求: /general/multiorgManage/queryCompanyUnitList
2025-07-14 19:49:54 - src.corder_integration.code_generator.controller_analyzer - INFO - 🔍 开始分析路径下的Controller文件: D:\gitlab\create_project\链数中建一局_1752493118\zqyl-user-center-service\user-basic-service\user-basic-general
2025-07-14 19:49:54 - src.corder_integration.code_generator.controller_analyzer - INFO - 🎯 匹配关键字: multiorgManage
2025-07-14 19:49:54 - src.corder_integration.code_generator.controller_analyzer - INFO - 📊 总共找到 0 个匹配的Controller文件
2025-07-14 19:49:54 - src.corder_integration.code_generator.controller_interface_manager - INFO - ⚠️ 未找到匹配关键字 'multiorgManage' 的Controller文件
2025-07-14 19:49:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ⚠️ 未能在现有Controller中添加接口，将生成新文件
2025-07-14 19:49:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -  调用volcengine大模型生成代码...
2025-07-14 19:49:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 开始代码生成...
2025-07-14 19:49:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎨 使用模板+AI混合模式生成代码
2025-07-14 19:49:54 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - 🎨 开始增强版代码生成: CompanyUnitList
2025-07-14 19:49:54 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - 🔍 解析到表结构: t_cust_multiorg_unit (14列)
2025-07-14 19:49:54 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - 🤖 使用AI增强代码，处理特殊要求...
2025-07-14 19:50:33 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-14 19:50:33 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ AI代码增强成功
2025-07-14 19:51:28 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-14 19:51:28 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ AI代码增强成功
2025-07-14 19:51:28 - src.corder_integration.code_generator.template_ai_generator - INFO - 增强模板代码入参：[{'role': 'system', 'content': '你是Java代码优化专家。请根据业务需求优化给定的模板代码，保持代码结构清晰，添加必要的业务逻辑。重要：请使用具体的类名，不要使用{{}}模板变量语法。只返回优化后的Java代码，不要添加额外说明。'}, {'role': 'user', 'content': '\n请优化以下service_interface代码模板，重点关注：\n- 改进代码结构\n- 添加必要注释\n- 优化实现逻辑\n\n## 当前模板代码：\n```java\npackage com.yljr.user.basicgeneral.application.service;\n\nimport com.yljr.user.basicgeneral.interfaces.dto.CompanyUnitListReq;\nimport com.yljr.user.basicgeneral.interfaces.dto.CompanyUnitListResp;\nimport java.util.List;\n\n/**\n * CompanyUnitList Service - 根据查询条件查询组织单元信息，支持按编码、状态等条件筛选\n * Generated by Template + AI\n */\npublic interface CompanyUnitListService {\n    \n    /**\n     * 根据查询条件查询组织单元信息，支持按编码、状态等条件筛选\n     */\n    CompanyUnitListResp CompanyUnitList(CompanyUnitListReq request);\n}\n```\n\n## 业务需求：\n- 接口名称：CompanyUnitList\n- 功能描述：根据查询条件查询组织单元信息，支持按编码、状态等条件筛选\n- 业务逻辑：根据查询条件查询组织单元信息，支持按编码、状态等条件筛选\n\n## 输入参数：\n- unitCode (String): 组织单元编码(可选) [可选]\n- openStatus (String): 开通状态(可选) [可选]\n- unitList (String): 组织单元列表(可选) [可选]\n\n## 输出参数：\n- unitId (String): 组织单元ID\n- unitTypeDicType (String): 组织单元类型字典类型\n- unitTypeId (String): 组织单元类型ID\n- openStatus (String): 开通状态\n- unitCode (String): 组织单元编码\n- unitName (String): 组织单元名称\n\n## 技术要求：\n- 基础包名：com.yljr.user.basicgeneral\n- 使用Spring Boot + MyBatis Plus\n- 遵循DDD分层架构\n- 保持原有类名和包结构\n- 请求DTO类名：CompanyUnitListReq\n- 响应DTO类名：CompanyUnitListResp\n- Service类名：CompanyUnitListService\n\n**重要：请使用具体的类名（如 CompanyUnitListReq），不要使用模板变量语法（如 {{REQUEST_DTO_NAME}}）**\n\n请返回优化后的完整Java代码（只要代码，不要额外说明）：\n'}]
2025-07-14 19:51:39 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-14 19:51:39 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ service_interface AI增强完成
2025-07-14 19:51:39 - src.corder_integration.code_generator.template_ai_generator - INFO - 增强模板代码入参：[{'role': 'system', 'content': '你是Java代码优化专家。请根据业务需求优化给定的模板代码，保持代码结构清晰，添加必要的业务逻辑。重要：请使用具体的类名，不要使用{{}}模板变量语法。只返回优化后的Java代码，不要添加额外说明。'}, {'role': 'user', 'content': '\n请优化以下request_dto代码模板，重点关注：\n- 添加详细的字段验证\n- 完善API文档注解\n- 优化字段类型选择\n- 添加字段描述\n\n## 当前模板代码：\n```java\npackage com.yljr.user.basicgeneral.interfaces.dto;\n\nimport javax.validation.constraints.*;\nimport lombok.Data;\nimport io.swagger.annotations.ApiModel;\nimport io.swagger.annotations.ApiModelProperty;\n\n/**\n * CompanyUnitList Request DTO\n * Generated by Template + AI\n */\n@Data\n@ApiModel(description = "CompanyUnitList Request DTO")\npublic class CompanyUnitListReq {\n    \n    @ApiModelProperty(value = "组织单元编码(可选)", required = false)\n    private String unitCode;\n\n    @ApiModelProperty(value = "开通状态(可选)", required = false)\n    private String openStatus;\n\n    @ApiModelProperty(value = "组织单元列表(可选)", required = false)\n    private String unitList;\n}\n```\n\n## 业务需求：\n- 接口名称：CompanyUnitList\n- 功能描述：根据查询条件查询组织单元信息，支持按编码、状态等条件筛选\n- 业务逻辑：根据查询条件查询组织单元信息，支持按编码、状态等条件筛选\n\n## 输入参数：\n- unitCode (String): 组织单元编码(可选) [可选]\n- openStatus (String): 开通状态(可选) [可选]\n- unitList (String): 组织单元列表(可选) [可选]\n\n## 输出参数：\n- unitId (String): 组织单元ID\n- unitTypeDicType (String): 组织单元类型字典类型\n- unitTypeId (String): 组织单元类型ID\n- openStatus (String): 开通状态\n- unitCode (String): 组织单元编码\n- unitName (String): 组织单元名称\n\n## 技术要求：\n- 基础包名：com.yljr.user.basicgeneral\n- 使用Spring Boot + MyBatis Plus\n- 遵循DDD分层架构\n- 保持原有类名和包结构\n- 请求DTO类名：CompanyUnitListReq\n- 响应DTO类名：CompanyUnitListResp\n- Service类名：CompanyUnitListService\n\n**重要：请使用具体的类名（如 CompanyUnitListReq），不要使用模板变量语法（如 {{REQUEST_DTO_NAME}}）**\n\n请返回优化后的完整Java代码（只要代码，不要额外说明）：\n'}]
2025-07-14 19:51:53 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-14 19:51:53 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ request_dto AI增强完成
2025-07-14 19:51:53 - src.corder_integration.code_generator.template_ai_generator - INFO - 增强模板代码入参：[{'role': 'system', 'content': '你是Java代码优化专家。请根据业务需求优化给定的模板代码，保持代码结构清晰，添加必要的业务逻辑。重要：请使用具体的类名，不要使用{{}}模板变量语法。只返回优化后的Java代码，不要添加额外说明。'}, {'role': 'user', 'content': '\n请优化以下response_dto代码模板，重点关注：\n- 添加详细的字段验证\n- 完善API文档注解\n- 优化字段类型选择\n- 添加字段描述\n\n## 当前模板代码：\n```java\npackage com.yljr.user.basicgeneral.interfaces.dto;\n\nimport lombok.Data;\nimport io.swagger.annotations.ApiModel;\nimport io.swagger.annotations.ApiModelProperty;\n\n/**\n * CompanyUnitList Response DTO\n * Generated by Template + AI\n */\n@Data\n@ApiModel(description = "CompanyUnitList Response DTO")\npublic class CompanyUnitListResp {\n    \n    @ApiModelProperty("组织单元ID")\n    private String unitId;\n\n    @ApiModelProperty("组织单元类型字典类型")\n    private String unitTypeDicType;\n\n    @ApiModelProperty("组织单元类型ID")\n    private String unitTypeId;\n\n    @ApiModelProperty("开通状态")\n    private String openStatus;\n\n    @ApiModelProperty("组织单元编码")\n    private String unitCode;\n\n    @ApiModelProperty("组织单元名称")\n    private String unitName;\n}\n```\n\n## 业务需求：\n- 接口名称：CompanyUnitList\n- 功能描述：根据查询条件查询组织单元信息，支持按编码、状态等条件筛选\n- 业务逻辑：根据查询条件查询组织单元信息，支持按编码、状态等条件筛选\n\n## 输入参数：\n- unitCode (String): 组织单元编码(可选) [可选]\n- openStatus (String): 开通状态(可选) [可选]\n- unitList (String): 组织单元列表(可选) [可选]\n\n## 输出参数：\n- unitId (String): 组织单元ID\n- unitTypeDicType (String): 组织单元类型字典类型\n- unitTypeId (String): 组织单元类型ID\n- openStatus (String): 开通状态\n- unitCode (String): 组织单元编码\n- unitName (String): 组织单元名称\n\n## 技术要求：\n- 基础包名：com.yljr.user.basicgeneral\n- 使用Spring Boot + MyBatis Plus\n- 遵循DDD分层架构\n- 保持原有类名和包结构\n- 请求DTO类名：CompanyUnitListReq\n- 响应DTO类名：CompanyUnitListResp\n- Service类名：CompanyUnitListService\n\n**重要：请使用具体的类名（如 CompanyUnitListReq），不要使用模板变量语法（如 {{REQUEST_DTO_NAME}}）**\n\n请返回优化后的完整Java代码（只要代码，不要额外说明）：\n'}]
2025-07-14 19:52:11 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-14 19:52:11 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ response_dto AI增强完成
2025-07-14 19:52:11 - src.corder_integration.code_generator.template_ai_generator - INFO - 增强模板代码入参：[{'role': 'system', 'content': '你是Java代码优化专家。请根据业务需求优化给定的模板代码，保持代码结构清晰，添加必要的业务逻辑。重要：请使用具体的类名，不要使用{{}}模板变量语法。只返回优化后的Java代码，不要添加额外说明。'}, {'role': 'user', 'content': '\n请优化以下entity代码模板，重点关注：\n- 改进代码结构\n- 添加必要注释\n- 优化实现逻辑\n\n## 当前模板代码：\n```java\npackage com.yljr.user.basicgeneral.domain.entity;\n\nimport com.baomidou.mybatisplus.annotation.*;\nimport lombok.Data;\nimport io.swagger.annotations.ApiModel;\nimport io.swagger.annotations.ApiModelProperty;\nimport java.time.LocalDateTime;\n\n/**\n * CompanyUnitList Entity\n * Generated by Template + AI\n */\n@Data\n@ApiModel(description = "CompanyUnitList Entity")\n@TableName("t_cust_multiorg_unit")\npublic class CompanyUnitList {\n    \n    @ApiModelProperty("主键ID")\n    @TableId(type = IdType.AUTO)\n    private Long id;\n    \n    @ApiModelProperty("企业id")\n    @NotNull(message = "不能为空")\n    @TableField("company_id")\n    private Long companyId;\n\n    @ApiModelProperty("多组织id")\n    @NotNull(message = "不能为空")\n    @TableField("mutilorg_id")\n    private Long mutilorgId;\n\n    @ApiModelProperty("组织单元编号")\n    @NotNull(message = "不能为空")\n    @NotBlank(message = "不能为空白")\n    @TableField("unit_code")\n    private String unitCode;\n\n    @ApiModelProperty("组织单元名称")\n    @NotNull(message = "不能为空")\n    @NotBlank(message = "不能为空白")\n    @TableField("unit_name")\n    private String unitName;\n\n    @ApiModelProperty("备注")\n    @TableField("remark")\n    private String remark;\n\n    @ApiModelProperty("平台类型(1云信2云租3云保)")\n    @NotNull(message = "不能为空")\n    @TableField("platform_type")\n    private Integer platformType;\n\n    @ApiModelProperty("状态1正常0删除")\n    @NotNull(message = "不能为空")\n    @TableField("status")\n    private Integer status;\n\n    @ApiModelProperty("创建人id")\n    @NotNull(message = "不能为空")\n    @TableField("create_id")\n    private Long createId;\n\n    @ApiModelProperty("创建人用户名")\n    @TableField("oper_user_name")\n    private String operUserName;\n\n    @ApiModelProperty("修改人id")\n    @TableField("modify_id")\n    private Long modifyId;\n\n    @ApiModelProperty("最后修改用户名")\n    @TableField("modify_user_name")\n    private String modifyUserName;\n    \n    @ApiModelProperty("创建时间")\n    @TableField(fill = FieldFill.INSERT)\n    private LocalDateTime createTime;\n    \n    @ApiModelProperty("更新时间")\n    @TableField(fill = FieldFill.INSERT_UPDATE)\n    private LocalDateTime updateTime;\n}\n```\n\n## 业务需求：\n- 接口名称：CompanyUnitList\n- 功能描述：根据查询条件查询组织单元信息，支持按编码、状态等条件筛选\n- 业务逻辑：根据查询条件查询组织单元信息，支持按编码、状态等条件筛选\n\n## 输入参数：\n- unitCode (String): 组织单元编码(可选) [可选]\n- openStatus (String): 开通状态(可选) [可选]\n- unitList (String): 组织单元列表(可选) [可选]\n\n## 输出参数：\n- unitId (String): 组织单元ID\n- unitTypeDicType (String): 组织单元类型字典类型\n- unitTypeId (String): 组织单元类型ID\n- openStatus (String): 开通状态\n- unitCode (String): 组织单元编码\n- unitName (String): 组织单元名称\n\n## 技术要求：\n- 基础包名：com.yljr.user.basicgeneral\n- 使用Spring Boot + MyBatis Plus\n- 遵循DDD分层架构\n- 保持原有类名和包结构\n- 请求DTO类名：CompanyUnitListReq\n- 响应DTO类名：CompanyUnitListResp\n- Service类名：CompanyUnitListService\n\n**重要：请使用具体的类名（如 CompanyUnitListReq），不要使用模板变量语法（如 {{REQUEST_DTO_NAME}}）**\n\n请返回优化后的完整Java代码（只要代码，不要额外说明）：\n'}]
2025-07-14 19:52:40 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-14 19:52:40 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ entity AI增强完成
2025-07-14 19:52:40 - src.corder_integration.code_generator.template_ai_generator - INFO - 增强模板代码入参：[{'role': 'system', 'content': '你是Java代码优化专家。请根据业务需求优化给定的模板代码，保持代码结构清晰，添加必要的业务逻辑。重要：请使用具体的类名，不要使用{{}}模板变量语法。只返回优化后的Java代码，不要添加额外说明。'}, {'role': 'user', 'content': '\n请优化以下mapper代码模板，重点关注：\n- 改进代码结构\n- 添加必要注释\n- 优化实现逻辑\n\n## 当前模板代码：\n```java\npackage com.yljr.user.basicgeneral.domain.mapper;\n\nimport com.yljr.user.basicgeneral.domain.entity.CompanyUnitList;\nimport com.baomidou.mybatisplus.core.mapper.BaseMapper;\nimport org.apache.ibatis.annotations.Mapper;\nimport org.apache.ibatis.annotations.Param;\nimport java.util.List;\n\n/**\n * CompanyUnitListMapper Mapper\n * Generated by Template + AI\n */\n@Mapper\npublic interface CompanyUnitListMapper extends BaseMapper<CompanyUnitList> {\n    \n    /**\n     * Custom query for CompanyUnitList\n     */\n    List<CompanyUnitList> selectCompanyUnitListList(@Param("unitCode") String unitCode, @Param("openStatus") String openStatus, @Param("unitList") String unitList);\n}\n```\n\n## 业务需求：\n- 接口名称：CompanyUnitList\n- 功能描述：根据查询条件查询组织单元信息，支持按编码、状态等条件筛选\n- 业务逻辑：根据查询条件查询组织单元信息，支持按编码、状态等条件筛选\n\n## 输入参数：\n- unitCode (String): 组织单元编码(可选) [可选]\n- openStatus (String): 开通状态(可选) [可选]\n- unitList (String): 组织单元列表(可选) [可选]\n\n## 输出参数：\n- unitId (String): 组织单元ID\n- unitTypeDicType (String): 组织单元类型字典类型\n- unitTypeId (String): 组织单元类型ID\n- openStatus (String): 开通状态\n- unitCode (String): 组织单元编码\n- unitName (String): 组织单元名称\n\n## 技术要求：\n- 基础包名：com.yljr.user.basicgeneral\n- 使用Spring Boot + MyBatis Plus\n- 遵循DDD分层架构\n- 保持原有类名和包结构\n- 请求DTO类名：CompanyUnitListReq\n- 响应DTO类名：CompanyUnitListResp\n- Service类名：CompanyUnitListService\n\n**重要：请使用具体的类名（如 CompanyUnitListReq），不要使用模板变量语法（如 {{REQUEST_DTO_NAME}}）**\n\n请返回优化后的完整Java代码（只要代码，不要额外说明）：\n'}]
2025-07-14 19:52:53 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-14 19:52:53 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ mapper AI增强完成
2025-07-14 19:52:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI生成成功，生成代码类型: ['service_impl', 'controller', 'service_interface', 'request_dto', 'response_dto', 'entity', 'mapper']
2025-07-14 19:52:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 开始写入生成的代码文件...
2025-07-14 19:52:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔧 统一类名基础: CompanyUnitList
2025-07-14 19:52:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ service_impl 类名: CompanyUnitListServiceImpl
2025-07-14 19:52:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ controller 类名: CompanyUnitListController
2025-07-14 19:52:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ request_dto 类名: CompanyUnitListReq
2025-07-14 19:52:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ response_dto 类名: CompanyUnitListResp
2025-07-14 19:52:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ entity 类名: CompanyUnitListEntity
2025-07-14 19:52:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 检测到service_impl但缺少service，这是正常的（接口会被自动生成）
2025-07-14 19:52:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 标准化后的代码类型: ['service_impl', 'controller', 'service_interface', 'request_dto', 'response_dto', 'entity', 'mapper']
2025-07-14 19:52:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🤖 调用volcengine判断Java文件输出路径...
2025-07-14 19:53:10 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-14 19:53:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM路径判断成功，配置了 7 个Java文件路径
2025-07-14 19:53:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 controller: CompanyUnitListController.java
2025-07-14 19:53:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 service_interface: CompanyUnitListService.java
2025-07-14 19:53:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 service_impl: CompanyUnitListServiceImpl.java
2025-07-14 19:53:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 request_dto: CompanyUnitListReq.java
2025-07-14 19:53:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 response_dto: CompanyUnitListResp.java
2025-07-14 19:53:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 entity: CompanyUnitListEntity.java
2025-07-14 19:53:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 mapper: CompanyUnitListMapper.java
2025-07-14 19:53:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: D:\gitlab\create_project\链数中建一局_1752493118\zqyl-user-center-service\user-basic-service\user-basic-general\src\main\java\com\yljr\user\basicgeneral\application\service\impl\CompanyUnitListServiceImpl.java
2025-07-14 19:53:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: D:\gitlab\create_project\链数中建一局_1752493118\zqyl-user-center-service\user-basic-service\user-basic-general\src\main\java\com\yljr\user\basicgeneral\application\service\impl\CompanyUnitListServiceImpl.java
2025-07-14 19:53:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: D:\gitlab\create_project\链数中建一局_1752493118\zqyl-user-center-service\user-basic-service\user-basic-general\src\main\java\com\yljr\user\basicgeneral\interfaces\rest\CompanyUnitListController.java
2025-07-14 19:53:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: D:\gitlab\create_project\链数中建一局_1752493118\zqyl-user-center-service\user-basic-service\user-basic-general\src\main\java\com\yljr\user\basicgeneral\interfaces\rest\CompanyUnitListController.java
2025-07-14 19:53:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: D:\gitlab\create_project\链数中建一局_1752493118\zqyl-user-center-service\user-basic-service\user-basic-general\src\main\java\com\yljr\user\basicgeneral\application\service\CompanyUnitListService.java
2025-07-14 19:53:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: D:\gitlab\create_project\链数中建一局_1752493118\zqyl-user-center-service\user-basic-service\user-basic-general\src\main\java\com\yljr\user\basicgeneral\application\service\CompanyUnitListService.java
2025-07-14 19:53:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: D:\gitlab\create_project\链数中建一局_1752493118\zqyl-user-center-service\user-basic-service\user-basic-general\src\main\java\com\yljr\user\basicgeneral\interfaces\dto\CompanyUnitListReq.java
2025-07-14 19:53:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: D:\gitlab\create_project\链数中建一局_1752493118\zqyl-user-center-service\user-basic-service\user-basic-general\src\main\java\com\yljr\user\basicgeneral\interfaces\dto\CompanyUnitListReq.java
2025-07-14 19:53:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: D:\gitlab\create_project\链数中建一局_1752493118\zqyl-user-center-service\user-basic-service\user-basic-general\src\main\java\com\yljr\user\basicgeneral\interfaces\dto\CompanyUnitListResp.java
2025-07-14 19:53:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: D:\gitlab\create_project\链数中建一局_1752493118\zqyl-user-center-service\user-basic-service\user-basic-general\src\main\java\com\yljr\user\basicgeneral\interfaces\dto\CompanyUnitListResp.java
2025-07-14 19:53:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: D:\gitlab\create_project\链数中建一局_1752493118\zqyl-user-center-service\user-basic-service\user-basic-general\src\main\java\com\yljr\user\basicgeneral\domain\entity\CompanyUnitListEntity.java
2025-07-14 19:53:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: D:\gitlab\create_project\链数中建一局_1752493118\zqyl-user-center-service\user-basic-service\user-basic-general\src\main\java\com\yljr\user\basicgeneral\domain\entity\CompanyUnitListEntity.java
2025-07-14 19:53:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: D:\gitlab\create_project\链数中建一局_1752493118\zqyl-user-center-service\user-basic-service\user-basic-general\src\main\java\com\yljr\user\basicgeneral\domain\mapper\CompanyUnitListMapper.java
2025-07-14 19:53:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: D:\gitlab\create_project\链数中建一局_1752493118\zqyl-user-center-service\user-basic-service\user-basic-general\src\main\java\com\yljr\user\basicgeneral\domain\mapper\CompanyUnitListMapper.java
2025-07-14 19:53:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📊 代码生成完成，共写入 7 个文件到项目中
2025-07-14 19:53:10 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_008 状态更新为 completed
2025-07-14 19:53:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 任务 task_008 执行成功
2025-07-14 19:53:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 第4轮执行完成，处理了 1 个任务
2025-07-14 19:53:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第5轮任务检查...
2025-07-14 19:53:11 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 第5轮找到 1 个可执行任务
2025-07-14 19:53:11 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 开始执行任务: task_009 (api)
2025-07-14 19:53:11 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_009 已被 intelligent_coding_node 领取
2025-07-14 19:53:11 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🌐 执行API接口生成任务: task_009
2025-07-14 19:53:11 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 解析的接口信息:
2025-07-14 19:53:11 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 接口名称: UnitLimitByCompanyId
2025-07-14 19:53:11 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - API路径: /crcl-open-api/lsLimit/listUnitLimitByCompanyId
2025-07-14 19:53:11 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - HTTP方法: GET
2025-07-14 19:53:11 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 输入参数: 6个
2025-07-14 19:53:11 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 输出参数: 4个
2025-07-14 19:53:11 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 业务描述: 根据公司ID和筛选条件查询组织单元额度信息，调用用户服务获取组织单元基础信息
2025-07-14 19:53:11 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 在 D:\gitlab\create_project/链数中建一局_1752493118/crcl-open 中查找最佳Java项目路径...
2025-07-14 19:53:11 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 目标服务名: 确权开立服务
2025-07-14 19:53:11 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-14 19:53:11 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 发现Java项目: crcl-open
2025-07-14 19:53:11 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       🎯 相对路径: .
2025-07-14 19:53:11 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       📊 Java文件: 2251个
2025-07-14 19:53:11 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       📐 目录深度: 0
2025-07-14 19:53:11 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       🏆 优先级分数: 750
2025-07-14 19:53:11 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 排序后的候选路径（前3个）:
2025-07-14 19:53:11 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    1. . (优先级: 750)
2025-07-14 19:53:11 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 选择最佳Java项目路径:
2025-07-14 19:53:11 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 完整路径: D:\gitlab\create_project\链数中建一局_1752493118\crcl-open
2025-07-14 19:53:11 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📋 相对路径: .
2025-07-14 19:53:11 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    🏆 最终优先级: 750
2025-07-14 19:53:11 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 从API路径 /crcl-open-api/lsLimit/listUnitLimitByCompanyId 提取关键字: lsLimit
2025-07-14 19:53:11 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 在项目中搜索关键字相关路径: lsLimit
2025-07-14 19:53:11 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 找到匹配目录: limit (得分: 25)
2025-07-14 19:53:11 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 找到匹配目录: ls (得分: 25)
2025-07-14 19:53:11 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 找到匹配目录: ls (得分: 25)
2025-07-14 19:53:11 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 找到匹配目录: ls (得分: 25)
2025-07-14 19:53:11 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 找到匹配目录: limit (得分: 25)
2025-07-14 19:53:11 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    ✅ 选择最佳匹配目录: limit (路径: src\main\java\com\yljr\crcl\limit)
2025-07-14 19:53:11 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 基于API关键字 'lsLimit' 找到现有路径: D:\gitlab\create_project\链数中建一局_1752493118\crcl-open\src\main\java\com\yljr\crcl\limit
2025-07-14 19:53:11 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -  分析目标项目: D:\gitlab\create_project\链数中建一局_1752493118\crcl-open\src\main\java\com\yljr\crcl\limit
2025-07-14 19:53:11 - src.apis.project_analysis_api - INFO - 🔍 开始分析项目用于代码生成: D:\gitlab\create_project\链数中建一局_1752493118\crcl-open\src\main\java\com\yljr\crcl\limit
2025-07-14 19:53:11 - src.apis.project_analysis_api - INFO - 🔍 在 D:\gitlab\create_project\链数中建一局_1752493118\crcl-open\src\main\java\com\yljr\crcl\limit 中查找最佳Java项目路径...
2025-07-14 19:53:11 - src.apis.project_analysis_api - INFO - 🎯 目标服务名: 确权开立服务
2025-07-14 19:53:11 - src.apis.project_analysis_api - WARNING - ⚠️ 在 D:\gitlab\create_project\链数中建一局_1752493118\crcl-open\src\main\java\com\yljr\crcl\limit 中未找到包含Java文件的src/main/java结构
2025-07-14 19:53:11 - src.apis.project_analysis_api - INFO - 📂 实际分析路径: D:\gitlab\create_project\链数中建一局_1752493118\crcl-open\src\main\java\com\yljr\crcl\limit
2025-07-14 19:53:11 - src.utils.java_code_analyzer - INFO - 🔍 开始分析企业级Java项目: D:\gitlab\create_project\链数中建一局_1752493118\crcl-open\src\main\java\com\yljr\crcl\limit
2025-07-14 19:53:14 - src.utils.java_code_analyzer - INFO - ✅ 企业级项目分析完成，共分析 533 个Java文件
2025-07-14 19:53:14 - src.apis.project_analysis_api - INFO - 📦 动态检测到基础包: com.yljr.crcl.limit (出现533次)
2025-07-14 19:53:14 - src.apis.project_analysis_api - INFO - 📦 动态检测到基础包: com.yljr.crcl.limit (出现533次)
2025-07-14 19:53:14 - src.apis.project_analysis_api - INFO - 📦 动态检测到基础包: com.yljr.crcl.limit (出现533次)
2025-07-14 19:53:14 - src.apis.project_analysis_api - INFO - ✅ 项目分析完成，已提取代码生成上下文
2025-07-14 19:53:14 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 从编码代理获取设计文档内容 (4930 字符)
2025-07-14 19:53:14 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 设计文档内容已添加到项目上下文 (4930 字符)
2025-07-14 19:53:14 - src.corder_integration.code_generator.controller_interface_manager - INFO - 🚀 开始处理API接口请求: /crcl-open-api/lsLimit/listUnitLimitByCompanyId
2025-07-14 19:53:14 - src.corder_integration.code_generator.controller_analyzer - INFO - 🔍 开始分析路径下的Controller文件: D:\gitlab\create_project\链数中建一局_1752493118\crcl-open\src\main\java\com\yljr\crcl\limit
2025-07-14 19:53:14 - src.corder_integration.code_generator.controller_analyzer - INFO - 🎯 匹配关键字: lsLimit
2025-07-14 19:53:14 - src.corder_integration.code_generator.controller_analyzer - INFO - 🎯 在 D:\gitlab\create_project\链数中建一局_1752493118\crcl-open\src\main\java\com\yljr\crcl\limit\interfaces\LsLimitController.java 中找到匹配的@RequestMapping: /lsLimit
2025-07-14 19:53:14 - src.corder_integration.code_generator.controller_analyzer - INFO - 📋 提取到 0 个Service依赖
2025-07-14 19:53:14 - src.corder_integration.code_generator.controller_analyzer - INFO - ✅ 找到匹配的Controller: D:\gitlab\create_project\链数中建一局_1752493118\crcl-open\src\main\java\com\yljr\crcl\limit\interfaces\LsLimitController.java
2025-07-14 19:53:14 - src.corder_integration.code_generator.controller_analyzer - INFO - 📊 总共找到 1 个匹配的Controller文件
2025-07-14 19:53:14 - src.corder_integration.code_generator.controller_analyzer - INFO - 🔧 从API路径 '/crcl-open-api/lsLimit/listUnitLimitByCompanyId' 提取接口名称: 'listUnitLimitByCompanyId'
2025-07-14 19:53:14 - src.corder_integration.code_generator.controller_interface_manager - INFO - 📝 处理Controller: LsLimitController
2025-07-14 19:53:14 - src.corder_integration.code_generator.service_decision_maker - INFO - 🔍 开始分析Service需求: listUnitLimitByCompanyId
2025-07-14 19:53:14 - src.corder_integration.code_generator.service_decision_maker - INFO - 📂 扫描项目Service文件: D:\gitlab\create_project\链数中建一局_1752493118\crcl-open
2025-07-14 19:53:15 - src.corder_integration.code_generator.service_decision_maker - INFO - 📊 找到 336 个Service文件
2025-07-14 19:53:15 - src.corder_integration.code_generator.service_decision_maker - INFO - 📂 扫描Application文件: D:\gitlab\create_project\链数中建一局_1752493118\crcl-open
2025-07-14 19:53:15 - src.corder_integration.code_generator.service_decision_maker - INFO - 📊 找到 35 个Application文件
2025-07-14 19:53:15 - src.corder_integration.code_generator.service_decision_maker - INFO - 🤔 进行Service决策: listUnitLimitByCompanyId
2025-07-14 19:53:19 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-14 19:53:19 - src.corder_integration.code_generator.service_decision_maker - INFO - 🤖 LLM决策完成: {'action': 'create_new', 'target_service': None, 'reason': '现有Service文件中没有直接与信用额度查询相关的服务，且CustUnitCreditFeignApi可能更适合处理单位信用额度查询，但为了避免破坏现有功能结构和职责单一原则，建议创建新的Service来处理listUnitLimitByCompanyId接口。', 'need_new_service': True, 'modify_existing': False}
2025-07-14 19:53:19 - src.corder_integration.code_generator.interface_adder - INFO - ➕ 开始在Controller中添加新接口: listUnitLimitByCompanyId
2025-07-14 19:53:19 - src.corder_integration.code_generator.interface_adder - INFO - ✅ 成功添加接口方法到Controller
2025-07-14 19:53:19 - src.corder_integration.code_generator.interface_adder - INFO - 📝 已备份原始文件: D:\gitlab\create_project\链数中建一局_1752493118\crcl-open\src\main\java\com\yljr\crcl\limit\interfaces\LsLimitController.java.backup
2025-07-14 19:53:19 - src.corder_integration.code_generator.interface_adder - INFO - ✅ 已保存更新后的Controller文件: D:\gitlab\create_project\链数中建一局_1752493118\crcl-open\src\main\java\com\yljr\crcl\limit\interfaces\LsLimitController.java
2025-07-14 19:53:19 - src.corder_integration.code_generator.controller_interface_manager - INFO - ✅ Controller LsLimitController 处理完成
2025-07-14 19:53:19 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功在现有Controller中添加接口: listUnitLimitByCompanyId
2025-07-14 19:53:19 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔧 使用现有模块处理Service和Mapper层: UnitLimitByCompanyId
2025-07-14 19:53:19 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 Service决策结果: create_new
2025-07-14 19:53:19 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_009 状态更新为 completed
2025-07-14 19:53:19 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 任务 task_009 执行成功
2025-07-14 19:53:19 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 第5轮执行完成，处理了 1 个任务
2025-07-14 19:53:19 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第6轮任务检查...
2025-07-14 19:53:19 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 第6轮找到 1 个可执行任务
2025-07-14 19:53:19 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 开始执行任务: task_010 (api)
2025-07-14 19:53:19 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_010 已被 intelligent_coding_node 领取
2025-07-14 19:53:19 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🌐 执行API接口生成任务: task_010
2025-07-14 19:53:19 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 解析的接口信息:
2025-07-14 19:53:19 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 接口名称: UnitLimitByCompanyIdExport
2025-07-14 19:53:19 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - API路径: /crcl-open-api/lsLimit/listUnitLimitByCompanyIdExport
2025-07-14 19:53:19 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - HTTP方法: GET
2025-07-14 19:53:19 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 输入参数: 4个
2025-07-14 19:53:19 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 输出参数: 3个
2025-07-14 19:53:19 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 业务描述: 复用listUnitLimitByCompanyId接口的查询逻辑，将结果导出为Excel格式
2025-07-14 19:53:19 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 在 D:\gitlab\create_project/链数中建一局_1752493118/crcl-open 中查找最佳Java项目路径...
2025-07-14 19:53:19 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 目标服务名: 确权开立服务
2025-07-14 19:53:20 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-14 19:53:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 发现Java项目: crcl-open
2025-07-14 19:53:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       🎯 相对路径: .
2025-07-14 19:53:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       📊 Java文件: 2251个
2025-07-14 19:53:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       📐 目录深度: 0
2025-07-14 19:53:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       🏆 优先级分数: 650
2025-07-14 19:53:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 排序后的候选路径（前3个）:
2025-07-14 19:53:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    1. . (优先级: 650)
2025-07-14 19:53:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 选择最佳Java项目路径:
2025-07-14 19:53:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 完整路径: D:\gitlab\create_project\链数中建一局_1752493118\crcl-open
2025-07-14 19:53:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📋 相对路径: .
2025-07-14 19:53:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    🏆 最终优先级: 650
2025-07-14 19:53:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 从API路径 /crcl-open-api/lsLimit/listUnitLimitByCompanyIdExport 提取关键字: lsLimit
2025-07-14 19:53:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 在项目中搜索关键字相关路径: lsLimit
2025-07-14 19:53:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 找到匹配目录: limit (得分: 25)
2025-07-14 19:53:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 找到匹配目录: ls (得分: 25)
2025-07-14 19:53:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 找到匹配目录: ls (得分: 25)
2025-07-14 19:53:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 找到匹配目录: ls (得分: 25)
2025-07-14 19:53:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 找到匹配目录: limit (得分: 25)
2025-07-14 19:53:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    ✅ 选择最佳匹配目录: limit (路径: src\main\java\com\yljr\crcl\limit)
2025-07-14 19:53:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 基于API关键字 'lsLimit' 找到现有路径: D:\gitlab\create_project\链数中建一局_1752493118\crcl-open\src\main\java\com\yljr\crcl\limit
2025-07-14 19:53:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -  分析目标项目: D:\gitlab\create_project\链数中建一局_1752493118\crcl-open\src\main\java\com\yljr\crcl\limit
2025-07-14 19:53:20 - src.apis.project_analysis_api - INFO - 🔍 开始分析项目用于代码生成: D:\gitlab\create_project\链数中建一局_1752493118\crcl-open\src\main\java\com\yljr\crcl\limit
2025-07-14 19:53:20 - src.apis.project_analysis_api - INFO - 📋 使用缓存的分析结果
2025-07-14 19:53:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 从编码代理获取设计文档内容 (4930 字符)
2025-07-14 19:53:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 设计文档内容已添加到项目上下文 (4930 字符)
2025-07-14 19:53:20 - src.corder_integration.code_generator.controller_interface_manager - INFO - 🚀 开始处理API接口请求: /crcl-open-api/lsLimit/listUnitLimitByCompanyIdExport
2025-07-14 19:53:20 - src.corder_integration.code_generator.controller_analyzer - INFO - 🔍 开始分析路径下的Controller文件: D:\gitlab\create_project\链数中建一局_1752493118\crcl-open\src\main\java\com\yljr\crcl\limit
2025-07-14 19:53:20 - src.corder_integration.code_generator.controller_analyzer - INFO - 🎯 匹配关键字: lsLimit
2025-07-14 19:53:20 - src.corder_integration.code_generator.controller_analyzer - INFO - 🎯 在 D:\gitlab\create_project\链数中建一局_1752493118\crcl-open\src\main\java\com\yljr\crcl\limit\interfaces\LsLimitController.java 中找到匹配的@RequestMapping: /lsLimit
2025-07-14 19:53:20 - src.corder_integration.code_generator.controller_analyzer - INFO - 📋 提取到 0 个Service依赖
2025-07-14 19:53:20 - src.corder_integration.code_generator.controller_analyzer - INFO - ✅ 找到匹配的Controller: D:\gitlab\create_project\链数中建一局_1752493118\crcl-open\src\main\java\com\yljr\crcl\limit\interfaces\LsLimitController.java
2025-07-14 19:53:20 - src.corder_integration.code_generator.controller_analyzer - INFO - 📊 总共找到 1 个匹配的Controller文件
2025-07-14 19:53:20 - src.corder_integration.code_generator.controller_analyzer - INFO - 🔧 从API路径 '/crcl-open-api/lsLimit/listUnitLimitByCompanyIdExport' 提取接口名称: 'listUnitLimitByCompanyIdExport'
2025-07-14 19:53:20 - src.corder_integration.code_generator.controller_interface_manager - INFO - 📝 处理Controller: LsLimitController
2025-07-14 19:53:20 - src.corder_integration.code_generator.service_decision_maker - INFO - 🔍 开始分析Service需求: listUnitLimitByCompanyIdExport
2025-07-14 19:53:20 - src.corder_integration.code_generator.service_decision_maker - INFO - 📂 扫描项目Service文件: D:\gitlab\create_project\链数中建一局_1752493118\crcl-open
2025-07-14 19:53:20 - src.corder_integration.code_generator.service_decision_maker - INFO - 📊 找到 336 个Service文件
2025-07-14 19:53:20 - src.corder_integration.code_generator.service_decision_maker - INFO - 📂 扫描Application文件: D:\gitlab\create_project\链数中建一局_1752493118\crcl-open
2025-07-14 19:53:20 - src.corder_integration.code_generator.service_decision_maker - INFO - 📊 找到 35 个Application文件
2025-07-14 19:53:20 - src.corder_integration.code_generator.service_decision_maker - INFO - 🤔 进行Service决策: listUnitLimitByCompanyIdExport
2025-07-14 19:53:24 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-14 19:53:24 - src.corder_integration.code_generator.service_decision_maker - INFO - 🤖 LLM决策完成: {'action': 'create_new', 'target_service': None, 'reason': '现有Service中没有与信用额度查询直接相关的服务，CustUnitCreditFeignApi虽然名称相关但功能不匹配。建议创建新的Service专门处理单位额度查询导出功能，保持职责单一。', 'need_new_service': True, 'modify_existing': False}
2025-07-14 19:53:24 - src.corder_integration.code_generator.interface_adder - INFO - ➕ 开始在Controller中添加新接口: listUnitLimitByCompanyIdExport
2025-07-14 19:53:24 - src.corder_integration.code_generator.interface_adder - INFO - ✅ 成功添加接口方法到Controller
2025-07-14 19:53:24 - src.corder_integration.code_generator.interface_adder - INFO - 📝 已备份原始文件: D:\gitlab\create_project\链数中建一局_1752493118\crcl-open\src\main\java\com\yljr\crcl\limit\interfaces\LsLimitController.java.backup
2025-07-14 19:53:24 - src.corder_integration.code_generator.interface_adder - INFO - ✅ 已保存更新后的Controller文件: D:\gitlab\create_project\链数中建一局_1752493118\crcl-open\src\main\java\com\yljr\crcl\limit\interfaces\LsLimitController.java
2025-07-14 19:53:24 - src.corder_integration.code_generator.controller_interface_manager - INFO - ✅ Controller LsLimitController 处理完成
2025-07-14 19:53:24 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功在现有Controller中添加接口: listUnitLimitByCompanyIdExport
2025-07-14 19:53:24 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔧 使用现有模块处理Service和Mapper层: UnitLimitByCompanyIdExport
2025-07-14 19:53:24 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 Service决策结果: create_new
2025-07-14 19:53:24 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_010 状态更新为 completed
2025-07-14 19:53:24 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 任务 task_010 执行成功
2025-07-14 19:53:24 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 第6轮执行完成，处理了 1 个任务
2025-07-14 19:53:24 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第7轮任务检查...
2025-07-14 19:53:25 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第7轮没有可执行的智能编码任务
2025-07-14 19:53:25 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 7 个任务，共7轮
2025-07-14 19:53:25 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 7 个任务
2025-07-14 19:53:25 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 19:53:25 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 19:53:25 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 19:53:25 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 19:53:25 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 19:53:25 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 19:53:25 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 19:53:25 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 19:53:25 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 增强版模板+AI生成器初始化完成
2025-07-14 19:53:25 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 增强版模板+AI代码生成器初始化完成
2025-07-14 19:53:25 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 从工作流状态获取设计文档 (4930 字符)
2025-07-14 19:53:25 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 19:53:25 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 19:53:25 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 19:53:25 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 19:53:25 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 19:53:25 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 19:53:25 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 19:53:25 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 19:53:25 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 19:53:26 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 19:53:26 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 19:53:26 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 19:53:26 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 19:53:26 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 19:53:26 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 增强版模板+AI生成器初始化完成
2025-07-14 19:53:26 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 增强版模板+AI代码生成器初始化完成
2025-07-14 19:53:26 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 从工作流状态获取设计文档 (4930 字符)
2025-07-14 19:53:26 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 19:53:26 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 19:53:26 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 19:53:26 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 19:53:26 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 19:53:26 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 19:53:26 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 19:53:26 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 19:53:26 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 19:53:26 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 19:53:26 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 19:53:26 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 19:53:26 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 19:53:26 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 19:53:26 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 增强版模板+AI生成器初始化完成
2025-07-14 19:53:26 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 增强版模板+AI代码生成器初始化完成
2025-07-14 19:53:26 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 从工作流状态获取设计文档 (4930 字符)
2025-07-14 19:53:26 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 19:53:26 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 19:53:27 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 19:53:27 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 19:53:27 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 19:53:27 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 19:53:27 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 19:53:27 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 19:53:27 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 19:53:27 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 19:53:27 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 19:53:27 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 19:53:27 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 19:53:27 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 19:53:27 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 增强版模板+AI生成器初始化完成
2025-07-14 19:53:27 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 增强版模板+AI代码生成器初始化完成
2025-07-14 19:53:27 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 从工作流状态获取设计文档 (4930 字符)
2025-07-14 19:53:27 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 19:53:27 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 19:53:27 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 19:53:27 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 19:53:27 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 19:53:27 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 19:53:27 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 19:53:27 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 19:53:27 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 19:53:28 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 19:53:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 19:53:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 19:53:28 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 19:53:28 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 19:53:28 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 增强版模板+AI生成器初始化完成
2025-07-14 19:53:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 增强版模板+AI代码生成器初始化完成
2025-07-14 19:53:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 从工作流状态获取设计文档 (4930 字符)
2025-07-14 19:53:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 19:53:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 19:53:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 19:53:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 19:53:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 19:53:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 19:53:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 19:53:28 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 19:53:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 19:53:28 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 19:53:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 19:53:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 19:53:28 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 19:53:28 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 19:53:28 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 增强版模板+AI生成器初始化完成
2025-07-14 19:53:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 增强版模板+AI代码生成器初始化完成
2025-07-14 19:53:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 从工作流状态获取设计文档 (4930 字符)
2025-07-14 19:53:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 19:53:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 19:53:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 19:53:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 19:53:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 19:53:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 19:53:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 19:53:29 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 19:53:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 19:53:29 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 19:53:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 19:53:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 19:53:29 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 19:53:29 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 19:53:29 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 增强版模板+AI生成器初始化完成
2025-07-14 19:53:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 增强版模板+AI代码生成器初始化完成
2025-07-14 19:53:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 从工作流状态获取设计文档 (4930 字符)
2025-07-14 19:53:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 19:53:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 19:53:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 19:53:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 19:53:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 19:53:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 19:53:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 19:53:29 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 19:53:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 19:53:30 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 19:53:30 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 19:53:30 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 19:53:30 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 19:53:30 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 19:53:30 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 增强版模板+AI生成器初始化完成
2025-07-14 19:53:30 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 增强版模板+AI代码生成器初始化完成
2025-07-14 19:53:30 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 从工作流状态获取设计文档 (4930 字符)
2025-07-14 19:53:30 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 19:53:30 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 19:53:30 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 19:53:30 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 19:53:30 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 19:53:30 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 19:53:30 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 19:53:30 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 19:53:30 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 19:53:30 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 19:53:30 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 19:53:30 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 19:53:30 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 19:53:30 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 19:53:30 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 增强版模板+AI生成器初始化完成
2025-07-14 19:53:30 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 增强版模板+AI代码生成器初始化完成
2025-07-14 19:53:30 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 从工作流状态获取设计文档 (4930 字符)
2025-07-14 19:53:30 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 19:53:30 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 19:53:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 19:53:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 19:53:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 19:53:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 19:53:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 19:53:31 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 19:53:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 19:53:31 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 19:53:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 19:53:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 19:53:31 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 19:53:31 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 19:53:31 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 增强版模板+AI生成器初始化完成
2025-07-14 19:53:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 增强版模板+AI代码生成器初始化完成
2025-07-14 19:53:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 从工作流状态获取设计文档 (4930 字符)
2025-07-14 19:53:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 19:53:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 19:53:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 19:53:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 19:53:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 19:53:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 19:53:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 19:53:31 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 19:53:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 19:53:32 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 19:53:32 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 19:53:32 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 19:53:32 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 19:53:32 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 19:53:32 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 增强版模板+AI生成器初始化完成
2025-07-14 19:53:32 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 增强版模板+AI代码生成器初始化完成
2025-07-14 19:53:32 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 从工作流状态获取设计文档 (4930 字符)
2025-07-14 19:53:32 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 19:53:32 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 19:53:32 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 19:53:32 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 19:53:32 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 19:53:32 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 19:53:32 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 19:53:32 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 19:53:32 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 19:53:32 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 19:53:32 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 19:53:32 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 19:53:32 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 19:53:32 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 19:53:32 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 增强版模板+AI生成器初始化完成
2025-07-14 19:53:32 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 增强版模板+AI代码生成器初始化完成
2025-07-14 19:53:32 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 从工作流状态获取设计文档 (4930 字符)
2025-07-14 19:53:32 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 19:53:32 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 19:53:33 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 19:53:33 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 19:53:33 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 19:53:33 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 19:53:33 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 19:53:33 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 19:53:33 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 19:53:33 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 19:53:33 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 19:53:33 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 19:53:33 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 19:53:33 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 19:53:33 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 增强版模板+AI生成器初始化完成
2025-07-14 19:53:33 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 增强版模板+AI代码生成器初始化完成
2025-07-14 19:53:33 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 从工作流状态获取设计文档 (4930 字符)
2025-07-14 19:53:33 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 19:53:33 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 19:53:34 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 19:53:34 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 19:53:34 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 19:53:34 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 19:53:34 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 19:53:34 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 19:53:34 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 19:53:34 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 19:53:34 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 19:53:34 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 19:53:34 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 19:53:34 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 19:53:34 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 增强版模板+AI生成器初始化完成
2025-07-14 19:53:34 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 增强版模板+AI代码生成器初始化完成
2025-07-14 19:53:34 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 从工作流状态获取设计文档 (4930 字符)
2025-07-14 19:53:34 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 19:53:34 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 19:53:34 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 19:53:34 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 19:53:34 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 19:53:34 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 19:53:34 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 19:53:34 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 19:53:34 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 19:53:35 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 19:53:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 19:53:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 19:53:35 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 19:53:35 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 19:53:35 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 增强版模板+AI生成器初始化完成
2025-07-14 19:53:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 增强版模板+AI代码生成器初始化完成
2025-07-14 19:53:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 从工作流状态获取设计文档 (4930 字符)
2025-07-14 19:53:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 19:53:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 19:53:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 19:53:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 19:53:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 19:53:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 19:53:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 19:53:35 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 19:53:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 19:53:35 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 19:53:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 19:53:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 19:53:35 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 19:53:35 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 19:53:35 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 增强版模板+AI生成器初始化完成
2025-07-14 19:53:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 增强版模板+AI代码生成器初始化完成
2025-07-14 19:53:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 从工作流状态获取设计文档 (4930 字符)
2025-07-14 19:53:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 19:53:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 19:53:36 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 19:53:36 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 19:53:36 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 19:53:36 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 19:53:36 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 19:53:36 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 19:53:36 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 19:53:36 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 19:53:36 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 19:53:36 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 19:53:36 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 19:53:36 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 19:53:36 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 增强版模板+AI生成器初始化完成
2025-07-14 19:53:36 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 增强版模板+AI代码生成器初始化完成
2025-07-14 19:53:36 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 从工作流状态获取设计文档 (4930 字符)
2025-07-14 19:53:36 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 19:53:36 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 19:53:36 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 19:53:36 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 19:53:36 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 19:53:36 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 19:53:36 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 19:53:36 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 19:53:36 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 19:53:37 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 19:53:37 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 19:53:37 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 19:53:37 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 19:53:37 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 19:53:37 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 增强版模板+AI生成器初始化完成
2025-07-14 19:53:37 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 增强版模板+AI代码生成器初始化完成
2025-07-14 19:53:37 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 从工作流状态获取设计文档 (4930 字符)
2025-07-14 19:53:37 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 19:53:37 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 19:53:37 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 19:53:37 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 19:53:37 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 19:53:37 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 19:53:37 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 19:53:37 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 19:53:37 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 19:53:37 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 19:53:37 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 19:53:37 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 19:53:37 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 19:53:37 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 19:53:37 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 增强版模板+AI生成器初始化完成
2025-07-14 19:53:37 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 增强版模板+AI代码生成器初始化完成
2025-07-14 19:53:37 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 从工作流状态获取设计文档 (4930 字符)
2025-07-14 19:53:37 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 19:53:37 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 19:53:38 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 19:53:38 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 19:53:38 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 19:53:38 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 19:53:38 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 19:53:38 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 19:53:38 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 19:53:38 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 19:53:38 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 19:53:38 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 19:53:38 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 19:53:38 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 19:53:38 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 增强版模板+AI生成器初始化完成
2025-07-14 19:53:38 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 增强版模板+AI代码生成器初始化完成
2025-07-14 19:53:38 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 从工作流状态获取设计文档 (4930 字符)
2025-07-14 19:53:38 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 19:53:38 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 19:53:38 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 19:53:38 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 19:53:38 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 19:53:38 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 19:53:38 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 19:53:38 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 19:53:38 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 19:53:38 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 19:53:38 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 19:53:38 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 19:53:38 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 19:53:38 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 19:53:38 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 增强版模板+AI生成器初始化完成
2025-07-14 19:53:38 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 增强版模板+AI代码生成器初始化完成
2025-07-14 19:53:38 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 从工作流状态获取设计文档 (4930 字符)
2025-07-14 19:53:38 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 19:53:38 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 19:53:39 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 19:53:39 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 19:53:39 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 19:53:39 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 19:53:39 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 19:53:39 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 19:53:39 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 19:53:39 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 19:53:39 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 19:53:39 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 19:53:39 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 19:53:39 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 19:53:39 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 增强版模板+AI生成器初始化完成
2025-07-14 19:53:39 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 增强版模板+AI代码生成器初始化完成
2025-07-14 19:53:39 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 从工作流状态获取设计文档 (4930 字符)
2025-07-14 19:53:39 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 19:53:39 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 19:53:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 19:53:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 19:53:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 19:53:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 19:53:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 19:53:40 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 19:53:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 19:53:40 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 19:53:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 19:53:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 19:53:40 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 19:53:40 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 19:53:40 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 增强版模板+AI生成器初始化完成
2025-07-14 19:53:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 增强版模板+AI代码生成器初始化完成
2025-07-14 19:53:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 从工作流状态获取设计文档 (4930 字符)
2025-07-14 19:53:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 19:53:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 19:53:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 19:53:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 19:53:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 19:53:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 19:53:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 19:53:40 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 19:53:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 19:53:40 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 19:53:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 19:53:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 19:53:40 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 19:53:40 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 19:53:40 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 增强版模板+AI生成器初始化完成
2025-07-14 19:53:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 增强版模板+AI代码生成器初始化完成
2025-07-14 19:53:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 从工作流状态获取设计文档 (4930 字符)
2025-07-14 19:53:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 19:53:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 19:53:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 19:53:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 19:53:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 19:53:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 19:53:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 19:53:41 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 19:53:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 19:53:41 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 19:53:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 19:53:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 19:53:41 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 19:53:41 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 19:53:41 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 增强版模板+AI生成器初始化完成
2025-07-14 19:53:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 增强版模板+AI代码生成器初始化完成
2025-07-14 19:53:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 从工作流状态获取设计文档 (4930 字符)
2025-07-14 19:53:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 19:53:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 19:53:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 19:53:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 19:53:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 19:53:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 19:53:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 19:53:41 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 19:53:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 19:53:42 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 19:53:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 19:53:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 19:53:42 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 19:53:42 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 19:53:42 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 增强版模板+AI生成器初始化完成
2025-07-14 19:53:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 增强版模板+AI代码生成器初始化完成
2025-07-14 19:53:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 从工作流状态获取设计文档 (4930 字符)
2025-07-14 19:53:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 19:53:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 19:53:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 19:53:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 19:53:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 19:53:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 19:53:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 19:53:42 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 19:53:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 19:53:42 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 19:53:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 19:53:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 19:53:42 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 19:53:42 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 19:53:42 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 增强版模板+AI生成器初始化完成
2025-07-14 19:53:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 增强版模板+AI代码生成器初始化完成
2025-07-14 19:53:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 从工作流状态获取设计文档 (4930 字符)
2025-07-14 19:53:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 19:53:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 19:53:43 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 19:53:43 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 19:53:43 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 19:53:43 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 19:53:43 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 19:53:43 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 19:53:43 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 19:53:43 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 19:53:43 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 19:53:43 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 19:53:43 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 19:53:43 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 19:53:43 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 增强版模板+AI生成器初始化完成
2025-07-14 19:53:43 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 增强版模板+AI代码生成器初始化完成
2025-07-14 19:53:43 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 从工作流状态获取设计文档 (4930 字符)
2025-07-14 19:53:43 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 19:53:43 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 19:53:43 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 19:53:43 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 19:53:43 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 19:53:43 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 19:53:43 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 19:53:43 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 19:53:43 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 19:53:44 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 19:53:44 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 19:53:44 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 19:53:44 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 19:53:44 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 19:53:44 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 增强版模板+AI生成器初始化完成
2025-07-14 19:53:44 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 增强版模板+AI代码生成器初始化完成
2025-07-14 19:53:44 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 从工作流状态获取设计文档 (4930 字符)
2025-07-14 19:53:44 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 19:53:44 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 19:53:44 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 19:53:44 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 19:53:44 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 19:53:44 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 19:53:44 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 19:53:44 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 19:53:44 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 19:53:44 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 19:53:44 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 19:53:44 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 19:53:44 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 19:53:44 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 19:53:44 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 增强版模板+AI生成器初始化完成
2025-07-14 19:53:44 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 增强版模板+AI代码生成器初始化完成
2025-07-14 19:53:44 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 从工作流状态获取设计文档 (4930 字符)
2025-07-14 19:53:44 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 19:53:44 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 19:53:45 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 19:53:45 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 19:53:45 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 19:53:45 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 19:53:45 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 19:53:45 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 19:53:45 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 19:53:45 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 19:53:45 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 19:53:45 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 19:53:45 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 19:53:45 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 19:53:45 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 增强版模板+AI生成器初始化完成
2025-07-14 19:53:45 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 增强版模板+AI代码生成器初始化完成
2025-07-14 19:53:45 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 从工作流状态获取设计文档 (4930 字符)
2025-07-14 19:53:45 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 19:53:45 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 19:53:46 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 19:53:46 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 19:53:46 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 19:53:46 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 19:53:46 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 19:53:46 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 19:53:46 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 19:53:46 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 19:53:46 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 19:53:46 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 19:53:46 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 19:53:46 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 19:53:46 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 增强版模板+AI生成器初始化完成
2025-07-14 19:53:46 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 增强版模板+AI代码生成器初始化完成
2025-07-14 19:53:46 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 从工作流状态获取设计文档 (4930 字符)
2025-07-14 19:53:46 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 19:53:46 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 19:53:47 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 19:53:47 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 19:53:47 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 19:53:47 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 19:53:47 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 19:53:47 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 19:53:47 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 19:53:47 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 19:53:47 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 19:53:47 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 19:53:47 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 19:53:47 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 19:53:47 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 增强版模板+AI生成器初始化完成
2025-07-14 19:53:47 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 增强版模板+AI代码生成器初始化完成
2025-07-14 19:53:47 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 从工作流状态获取设计文档 (4930 字符)
2025-07-14 19:53:47 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 19:53:47 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 19:53:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 19:53:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 19:53:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 19:53:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 19:53:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 19:53:48 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 19:53:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 19:53:48 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 19:53:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 19:53:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 19:53:48 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 19:53:48 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 19:53:48 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 增强版模板+AI生成器初始化完成
2025-07-14 19:53:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 增强版模板+AI代码生成器初始化完成
2025-07-14 19:53:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 从工作流状态获取设计文档 (4930 字符)
2025-07-14 19:53:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 19:53:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 19:53:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 19:53:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 19:53:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 19:53:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 19:53:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 19:53:49 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 19:53:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 19:53:49 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 19:53:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 19:53:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 19:53:49 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 19:53:49 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 19:53:49 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 增强版模板+AI生成器初始化完成
2025-07-14 19:53:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 增强版模板+AI代码生成器初始化完成
2025-07-14 19:53:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 从工作流状态获取设计文档 (4930 字符)
2025-07-14 19:53:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 19:53:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 19:53:50 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 19:53:50 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 19:53:50 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 19:53:50 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 19:53:50 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 19:53:50 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 19:53:50 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 19:53:50 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 19:53:50 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 19:53:50 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 19:53:50 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 19:53:50 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 19:53:50 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 增强版模板+AI生成器初始化完成
2025-07-14 19:53:50 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 增强版模板+AI代码生成器初始化完成
2025-07-14 19:53:50 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 从工作流状态获取设计文档 (4930 字符)
2025-07-14 19:53:50 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 19:53:50 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 19:53:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 19:53:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 19:53:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 19:53:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 19:53:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 19:53:51 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 19:53:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 19:53:51 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 19:53:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 19:53:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 19:53:51 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 19:53:51 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 19:53:51 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 增强版模板+AI生成器初始化完成
2025-07-14 19:53:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 增强版模板+AI代码生成器初始化完成
2025-07-14 19:53:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 从工作流状态获取设计文档 (4930 字符)
2025-07-14 19:53:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 19:53:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 19:53:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 19:53:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 19:53:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 19:53:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 19:53:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 19:53:51 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 19:53:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 19:53:52 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 19:53:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 19:53:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 19:53:52 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 19:53:52 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 19:53:52 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 增强版模板+AI生成器初始化完成
2025-07-14 19:53:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 增强版模板+AI代码生成器初始化完成
2025-07-14 19:53:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 从工作流状态获取设计文档 (4930 字符)
2025-07-14 19:53:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 19:53:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 19:53:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 19:53:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 19:53:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 19:53:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 19:53:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 19:53:52 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 19:53:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 19:53:52 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 19:53:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 19:53:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 19:53:52 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 19:53:52 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 19:53:52 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 增强版模板+AI生成器初始化完成
2025-07-14 19:53:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 增强版模板+AI代码生成器初始化完成
2025-07-14 19:53:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 从工作流状态获取设计文档 (4930 字符)
2025-07-14 19:53:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 19:53:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 19:53:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 19:53:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 19:53:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 19:53:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 19:53:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 19:53:53 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 19:53:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 19:53:53 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 19:53:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 19:53:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 19:53:53 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 19:53:53 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 19:53:53 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 增强版模板+AI生成器初始化完成
2025-07-14 19:53:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 增强版模板+AI代码生成器初始化完成
2025-07-14 19:53:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 从工作流状态获取设计文档 (4930 字符)
2025-07-14 19:53:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 19:53:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 19:53:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 19:53:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 19:53:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 19:53:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 19:53:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 19:53:54 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 19:53:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 19:53:54 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 19:53:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 19:53:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 19:53:54 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 19:53:54 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 19:53:54 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 增强版模板+AI生成器初始化完成
2025-07-14 19:53:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 增强版模板+AI代码生成器初始化完成
2025-07-14 19:53:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 从工作流状态获取设计文档 (4930 字符)
2025-07-14 19:53:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 19:53:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 19:53:55 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 19:53:55 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 19:53:55 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 19:53:55 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 19:53:55 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 19:53:55 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 19:53:55 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 19:53:55 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 19:53:55 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 19:53:55 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 19:53:55 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 19:53:55 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 19:53:55 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 增强版模板+AI生成器初始化完成
2025-07-14 19:53:55 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 增强版模板+AI代码生成器初始化完成
2025-07-14 19:53:55 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 从工作流状态获取设计文档 (4930 字符)
2025-07-14 19:53:55 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 19:53:55 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 19:53:55 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 19:53:55 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 19:53:55 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 19:53:55 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 19:53:55 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 19:53:55 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 19:53:55 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 19:53:56 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 19:53:56 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 19:53:56 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 19:53:56 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 19:53:56 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 19:53:56 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 增强版模板+AI生成器初始化完成
2025-07-14 19:53:56 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 增强版模板+AI代码生成器初始化完成
2025-07-14 19:53:56 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 从工作流状态获取设计文档 (4930 字符)
2025-07-14 19:53:56 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 19:53:56 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 19:53:56 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 19:53:56 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 19:53:56 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 19:53:56 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 19:53:56 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 19:53:56 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 19:53:56 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 19:53:56 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 19:53:56 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 19:53:56 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 19:53:56 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 19:53:56 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 19:53:56 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 增强版模板+AI生成器初始化完成
2025-07-14 19:53:56 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 增强版模板+AI代码生成器初始化完成
2025-07-14 19:53:56 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 从工作流状态获取设计文档 (4930 字符)
2025-07-14 19:53:56 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 19:53:56 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 19:53:57 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 19:53:57 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 19:53:57 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 19:53:57 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 19:53:57 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 19:53:57 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 19:53:57 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 19:53:57 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 19:53:57 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 19:53:57 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 19:53:57 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 19:53:57 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 19:53:57 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 增强版模板+AI生成器初始化完成
2025-07-14 19:53:57 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 增强版模板+AI代码生成器初始化完成
2025-07-14 19:53:57 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 从工作流状态获取设计文档 (4930 字符)
2025-07-14 19:53:57 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 19:53:57 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 19:53:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 19:53:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 19:53:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 19:53:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 19:53:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 19:53:58 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 19:53:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 19:53:58 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 19:53:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 19:53:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 19:53:58 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 19:53:58 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 19:53:58 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 增强版模板+AI生成器初始化完成
2025-07-14 19:53:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 增强版模板+AI代码生成器初始化完成
2025-07-14 19:53:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 从工作流状态获取设计文档 (4930 字符)
2025-07-14 19:53:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 19:53:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 19:53:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 19:53:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 19:53:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 19:53:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 19:53:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-14 19:53:58 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-14 19:53:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-14 19:53:59 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 19:53:59 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-14 19:53:59 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-14 19:53:59 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-14 19:53:59 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-14 19:53:59 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 增强版模板+AI生成器初始化完成
2025-07-14 19:53:59 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 增强版模板+AI代码生成器初始化完成
2025-07-14 19:53:59 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 从工作流状态获取设计文档 (4930 字符)
2025-07-14 19:53:59 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-14 19:53:59 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-14 19:53:59 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-14 19:53:59 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-14 19:53:59 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-14 19:53:59 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-14 19:53:59 - src.corder_integration.langgraph.workflow_orchestrator - ERROR - 工作流执行失败: Recursion limit of 50 reached without hitting a stop condition. You can increase the limit by setting the `recursion_limit` config key.
For troubleshooting, visit: https://python.langchain.com/docs/troubleshooting/errors/GRAPH_RECURSION_LIMIT
2025-07-14 19:53:59 - werkzeug - INFO - 127.0.0.1 - - [14/Jul/2025 19:53:59] "POST /api/coder-agent/process-document HTTP/1.1" 200 -
2025-07-14 19:56:02 - werkzeug - INFO -  * Detected change in 'D:\\ai_project\\document_analyzer\\src\\corder_integration\\langgraph\\workflow_orchestrator.py', reloading
2025-07-14 19:56:05 - werkzeug - INFO -  * Restarting with stat
2025-07-14 19:56:07 - system - INFO - ==================================================
2025-07-14 19:56:07 - system - INFO - 🚀 智能分析系统日志系统初始化完成
2025-07-14 19:56:07 - system - INFO - 📁 日志根目录: D:\ai_project\document_analyzer\logs
2025-07-14 19:56:07 - system - INFO - 📊 日志级别: INFO
2025-07-14 19:56:07 - system - INFO - 📅 按日期轮转: 每天午夜自动轮转
2025-07-14 19:56:07 - system - INFO - 📂 按月分目录: logs/YYYY-MM/
2025-07-14 19:56:07 - system - INFO - 📝 主日志: logs/2025-07/app.log
2025-07-14 19:56:07 - system - INFO - 🔧 API日志: logs/2025-07/api_server.log
2025-07-14 19:56:07 - system - INFO - 🗂️ 保留天数: 7 天
2025-07-14 19:56:07 - system - INFO - ==================================================
2025-07-14 19:56:19 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-14 19:56:19 - root - WARNING - 智能编码节点不可用: cannot import name 'IntelligentCodingAgent' from partially initialized module 'src.corder_integration.langgraph.nodes.intelligent_coding_node' (most likely due to a circular import) (D:\ai_project\document_analyzer\src\corder_integration\langgraph\nodes\intelligent_coding_node.py)
2025-07-14 19:56:20 - src.utils.task_storage - INFO - 数据库初始化成功
2025-07-14 19:56:20 - markdown_storage - INFO - Markdown存储管理器初始化完成
2025-07-14 19:56:20 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-14 19:56:20 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 19:56:20 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-14 19:56:21 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-14 19:56:22 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-14 19:56:22 - WeaviateVectorDatabase - INFO - ✅ Weaviate连接成功: http://localhost:8080 (gRPC: 50051)
2025-07-14 19:56:22 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/schema/AnalyDesignDocuments "HTTP/1.1 200 OK"
2025-07-14 19:56:22 - WeaviateVectorDatabase - INFO - ✅ Weaviate集合已存在: AnalyDesignDocuments
2025-07-14 19:56:22 - AnalysisServiceManager - INFO - 初始化向量数据库: weaviate
2025-07-14 19:56:22 - sentence_transformers.SentenceTransformer - INFO - Use pytorch device_name: cpu
2025-07-14 19:56:22 - sentence_transformers.SentenceTransformer - INFO - Load pretrained SentenceTransformer: BAAI/bge-large-zh
2025-07-14 19:56:31 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-14 19:56:32 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-14 19:56:32 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-14 19:56:32 - src.utils.weaviate_helper - INFO - 成功连接到 Weaviate: localhost:8080
2025-07-14 19:56:32 - AnalysisServiceManager - INFO - 分析服务管理器初始化完成
2025-07-14 19:56:32 - src.utils.enhanced_analyzer - INFO - 增强分析器初始化完成
2025-07-14 19:56:32 - werkzeug - WARNING -  * Debugger is active!
2025-07-14 19:56:32 - werkzeug - INFO -  * Debugger PIN: 887-537-592
2025-07-14 19:56:40 - werkzeug - INFO -  * Detected change in 'D:\\ai_project\\document_analyzer\\src\\corder_integration\\langgraph\\nodes\\intelligent_coding_node.py', reloading
2025-07-14 19:56:42 - werkzeug - INFO -  * Restarting with stat
2025-07-14 19:56:43 - system - INFO - ==================================================
2025-07-14 19:56:43 - system - INFO - 🚀 智能分析系统日志系统初始化完成
2025-07-14 19:56:43 - system - INFO - 📁 日志根目录: D:\ai_project\document_analyzer\logs
2025-07-14 19:56:43 - system - INFO - 📊 日志级别: INFO
2025-07-14 19:56:43 - system - INFO - 📅 按日期轮转: 每天午夜自动轮转
2025-07-14 19:56:43 - system - INFO - 📂 按月分目录: logs/YYYY-MM/
2025-07-14 19:56:43 - system - INFO - 📝 主日志: logs/2025-07/app.log
2025-07-14 19:56:43 - system - INFO - 🔧 API日志: logs/2025-07/api_server.log
2025-07-14 19:56:43 - system - INFO - 🗂️ 保留天数: 7 天
2025-07-14 19:56:43 - system - INFO - ==================================================
2025-07-14 19:56:53 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-14 19:56:53 - root - WARNING - 智能编码节点不可用: cannot import name 'IntelligentCodingAgent' from partially initialized module 'src.corder_integration.langgraph.nodes.intelligent_coding_node' (most likely due to a circular import) (D:\ai_project\document_analyzer\src\corder_integration\langgraph\nodes\intelligent_coding_node.py)
2025-07-14 19:56:53 - src.utils.task_storage - INFO - 数据库初始化成功
2025-07-14 19:56:53 - markdown_storage - INFO - Markdown存储管理器初始化完成
2025-07-14 19:56:53 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-14 19:56:54 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 19:56:54 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-14 19:56:56 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-14 19:56:56 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-14 19:56:56 - WeaviateVectorDatabase - INFO - ✅ Weaviate连接成功: http://localhost:8080 (gRPC: 50051)
2025-07-14 19:56:56 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/schema/AnalyDesignDocuments "HTTP/1.1 200 OK"
2025-07-14 19:56:56 - WeaviateVectorDatabase - INFO - ✅ Weaviate集合已存在: AnalyDesignDocuments
2025-07-14 19:56:56 - AnalysisServiceManager - INFO - 初始化向量数据库: weaviate
2025-07-14 19:56:56 - sentence_transformers.SentenceTransformer - INFO - Use pytorch device_name: cpu
2025-07-14 19:56:56 - sentence_transformers.SentenceTransformer - INFO - Load pretrained SentenceTransformer: BAAI/bge-large-zh
2025-07-14 19:57:02 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-14 19:57:03 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-14 19:57:04 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-14 19:57:04 - src.utils.weaviate_helper - INFO - 成功连接到 Weaviate: localhost:8080
2025-07-14 19:57:04 - AnalysisServiceManager - INFO - 分析服务管理器初始化完成
2025-07-14 19:57:04 - src.utils.enhanced_analyzer - INFO - 增强分析器初始化完成
2025-07-14 19:57:04 - werkzeug - WARNING -  * Debugger is active!
2025-07-14 19:57:04 - werkzeug - INFO -  * Debugger PIN: 887-537-592
2025-07-14 20:19:10 - werkzeug - INFO -  * Detected change in 'D:\\ai_project\\document_analyzer\\src\\corder_integration\\langgraph\\nodes\\intelligent_coding_node.py', reloading
2025-07-14 20:19:13 - werkzeug - INFO -  * Restarting with stat
2025-07-14 20:19:14 - system - INFO - ==================================================
2025-07-14 20:19:14 - system - INFO - 🚀 智能分析系统日志系统初始化完成
2025-07-14 20:19:14 - system - INFO - 📁 日志根目录: D:\ai_project\document_analyzer\logs
2025-07-14 20:19:14 - system - INFO - 📊 日志级别: INFO
2025-07-14 20:19:14 - system - INFO - 📅 按日期轮转: 每天午夜自动轮转
2025-07-14 20:19:14 - system - INFO - 📂 按月分目录: logs/YYYY-MM/
2025-07-14 20:19:14 - system - INFO - 📝 主日志: logs/2025-07/app.log
2025-07-14 20:19:14 - system - INFO - 🔧 API日志: logs/2025-07/api_server.log
2025-07-14 20:19:14 - system - INFO - 🗂️ 保留天数: 7 天
2025-07-14 20:19:14 - system - INFO - ==================================================
2025-07-14 20:19:28 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-14 20:19:29 - root - WARNING - LangGraph工作流编排器不可用: No module named 'src.corder_integration.code_generator.unified_code_generator'
2025-07-14 20:19:29 - root - WARNING - 代码生成器不可用: No module named 'src.corder_integration.code_generator.unified_code_generator'
2025-07-14 20:19:29 - src.utils.task_storage - INFO - 数据库初始化成功
2025-07-14 20:19:29 - markdown_storage - INFO - Markdown存储管理器初始化完成
2025-07-14 20:19:29 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-14 20:19:30 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-14 20:19:30 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-14 20:19:31 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-14 20:19:31 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-14 20:19:31 - WeaviateVectorDatabase - INFO - ✅ Weaviate连接成功: http://localhost:8080 (gRPC: 50051)
2025-07-14 20:19:31 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/schema/AnalyDesignDocuments "HTTP/1.1 200 OK"
2025-07-14 20:19:31 - WeaviateVectorDatabase - INFO - ✅ Weaviate集合已存在: AnalyDesignDocuments
2025-07-14 20:19:31 - AnalysisServiceManager - INFO - 初始化向量数据库: weaviate
2025-07-14 20:19:31 - sentence_transformers.SentenceTransformer - INFO - Use pytorch device_name: cpu
2025-07-14 20:19:31 - sentence_transformers.SentenceTransformer - INFO - Load pretrained SentenceTransformer: BAAI/bge-large-zh
