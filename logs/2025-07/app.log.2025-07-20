2025-07-20 00:04:45 - system - INFO - ==================================================
2025-07-20 00:04:45 - system - INFO - 🚀 智能分析系统日志系统初始化完成
2025-07-20 00:04:45 - system - INFO - 📁 日志根目录: /Users/renyu/Documents/ai_project/document_analyzer/logs
2025-07-20 00:04:45 - system - INFO - 📊 日志级别: INFO
2025-07-20 00:04:45 - system - INFO - 📅 按日期轮转: 每天午夜自动轮转
2025-07-20 00:04:45 - system - INFO - 📂 按月分目录: logs/YYYY-MM/
2025-07-20 00:04:45 - system - INFO - 📝 主日志: logs/2025-07/app.log
2025-07-20 00:04:45 - system - INFO - 🔧 API日志: logs/2025-07/api_server.log
2025-07-20 00:04:45 - system - INFO - 🗂️ 保留天数: 7 天
2025-07-20 00:04:45 - system - INFO - ==================================================
2025-07-20 00:04:48 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-20 00:04:48 - root - WARNING - SQLite检查点不可用，将仅使用内存检查点
2025-07-20 00:04:48 - src.utils.task_storage - INFO - 数据库初始化成功
2025-07-20 00:04:48 - markdown_storage - INFO - Markdown存储管理器初始化完成
2025-07-20 00:04:48 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-20 00:04:48 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-20 00:04:48 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-20 00:04:48 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-20 00:04:49 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-20 00:04:49 - WeaviateVectorDatabase - INFO - ✅ Weaviate连接成功: http://localhost:8080 (gRPC: 50051)
2025-07-20 00:04:49 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/schema/AnalyDesignDocuments "HTTP/1.1 200 OK"
2025-07-20 00:04:49 - WeaviateVectorDatabase - INFO - ✅ Weaviate集合已存在: AnalyDesignDocuments
2025-07-20 00:04:49 - AnalysisServiceManager - INFO - 初始化向量数据库: weaviate
2025-07-20 00:04:49 - sentence_transformers.SentenceTransformer - INFO - Use pytorch device_name: mps
2025-07-20 00:04:49 - sentence_transformers.SentenceTransformer - INFO - Load pretrained SentenceTransformer: BAAI/bge-large-zh
2025-07-20 00:04:55 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-20 00:04:56 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-20 00:04:56 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-20 00:04:56 - src.utils.weaviate_helper - INFO - 成功连接到 Weaviate: localhost:8080
2025-07-20 00:04:56 - AnalysisServiceManager - INFO - 分析服务管理器初始化完成
2025-07-20 00:04:56 - src.utils.enhanced_analyzer - INFO - 增强分析器初始化完成
2025-07-20 00:05:01 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:8082
 * Running on http://26.26.26.1:8082
2025-07-20 00:05:01 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-07-20 00:05:01 - werkzeug - INFO -  * Restarting with stat
2025-07-20 00:05:01 - system - INFO - ==================================================
2025-07-20 00:05:01 - system - INFO - 🚀 智能分析系统日志系统初始化完成
2025-07-20 00:05:01 - system - INFO - 📁 日志根目录: /Users/renyu/Documents/ai_project/document_analyzer/logs
2025-07-20 00:05:01 - system - INFO - 📊 日志级别: INFO
2025-07-20 00:05:01 - system - INFO - 📅 按日期轮转: 每天午夜自动轮转
2025-07-20 00:05:01 - system - INFO - 📂 按月分目录: logs/YYYY-MM/
2025-07-20 00:05:01 - system - INFO - 📝 主日志: logs/2025-07/app.log
2025-07-20 00:05:01 - system - INFO - 🔧 API日志: logs/2025-07/api_server.log
2025-07-20 00:05:01 - system - INFO - 🗂️ 保留天数: 7 天
2025-07-20 00:05:01 - system - INFO - ==================================================
2025-07-20 00:05:04 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-20 00:05:04 - root - WARNING - SQLite检查点不可用，将仅使用内存检查点
2025-07-20 00:05:04 - src.utils.task_storage - INFO - 数据库初始化成功
2025-07-20 00:05:04 - markdown_storage - INFO - Markdown存储管理器初始化完成
2025-07-20 00:05:04 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-20 00:05:04 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-20 00:05:04 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-20 00:05:05 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-20 00:05:05 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-20 00:05:05 - WeaviateVectorDatabase - INFO - ✅ Weaviate连接成功: http://localhost:8080 (gRPC: 50051)
2025-07-20 00:05:05 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/schema/AnalyDesignDocuments "HTTP/1.1 200 OK"
2025-07-20 00:05:05 - WeaviateVectorDatabase - INFO - ✅ Weaviate集合已存在: AnalyDesignDocuments
2025-07-20 00:05:05 - AnalysisServiceManager - INFO - 初始化向量数据库: weaviate
2025-07-20 00:05:05 - sentence_transformers.SentenceTransformer - INFO - Use pytorch device_name: mps
2025-07-20 00:05:05 - sentence_transformers.SentenceTransformer - INFO - Load pretrained SentenceTransformer: BAAI/bge-large-zh
2025-07-20 00:05:12 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-20 00:05:13 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-20 00:05:13 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-20 00:05:13 - src.utils.weaviate_helper - INFO - 成功连接到 Weaviate: localhost:8080
2025-07-20 00:05:13 - AnalysisServiceManager - INFO - 分析服务管理器初始化完成
2025-07-20 00:05:13 - src.utils.enhanced_analyzer - INFO - 增强分析器初始化完成
2025-07-20 00:05:13 - werkzeug - WARNING -  * Debugger is active!
2025-07-20 00:05:13 - werkzeug - INFO -  * Debugger PIN: 686-644-562
2025-07-20 00:05:14 - src.apis.coder_agent_api - INFO - 开始处理文档: 链数中建一局_1752941114
2025-07-20 00:05:14 - src.apis.coder_agent_api - INFO - 文档长度: 4937 字符
2025-07-20 00:05:14 - src.apis.coder_agent_api - INFO - 使用LangGraph: True
2025-07-20 00:05:14 - src.apis.coder_agent_api - INFO - 代码输出路径: /Users/renyu/Documents/create_project
2025-07-20 00:05:14 - src.apis.coder_agent_api - INFO - 使用LangGraph工作流处理项目: 链数中建一局_1752941114
2025-07-20 00:05:14 - src.corder_integration.langgraph.workflow_orchestrator - INFO - 使用内存检查点
2025-07-20 00:05:14 - src.corder_integration.langgraph.workflow_orchestrator - INFO - 生成目标分支名称: 链数中建一局_1752941114 -> D_20250720_链数中建一局_1752941114
2025-07-20 00:05:14 - src.corder_integration.langgraph.workflow_orchestrator - INFO - 开始执行编码工作流: 链数中建一局_1752941114 -> /Users/renyu/Documents/create_project
2025-07-20 00:05:14 - src.corder_integration.langgraph.workflow_orchestrator - ERROR - 工作流执行失败: 'ExitStack' object has no attribute 'get_next_version'
2025-07-20 00:05:14 - werkzeug - INFO - 127.0.0.1 - - [20/Jul/2025 00:05:14] "POST /api/coder-agent/process-document HTTP/1.1" 200 -
2025-07-20 00:08:27 - system - INFO - ==================================================
2025-07-20 00:08:27 - system - INFO - 🚀 智能分析系统日志系统初始化完成
2025-07-20 00:08:27 - system - INFO - 📁 日志根目录: /Users/renyu/Documents/ai_project/document_analyzer/logs
2025-07-20 00:08:27 - system - INFO - 📊 日志级别: INFO
2025-07-20 00:08:27 - system - INFO - 📅 按日期轮转: 每天午夜自动轮转
2025-07-20 00:08:27 - system - INFO - 📂 按月分目录: logs/YYYY-MM/
2025-07-20 00:08:27 - system - INFO - 📝 主日志: logs/2025-07/app.log
2025-07-20 00:08:27 - system - INFO - 🔧 API日志: logs/2025-07/api_server.log
2025-07-20 00:08:27 - system - INFO - 🗂️ 保留天数: 7 天
2025-07-20 00:08:27 - system - INFO - ==================================================
2025-07-20 00:08:30 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-20 00:08:30 - root - WARNING - SQLite检查点不可用，将仅使用内存检查点
2025-07-20 00:08:30 - src.utils.task_storage - INFO - 数据库初始化成功
2025-07-20 00:08:30 - markdown_storage - INFO - Markdown存储管理器初始化完成
2025-07-20 00:08:30 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-20 00:08:30 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-20 00:08:30 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-20 00:08:31 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-20 00:08:31 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-20 00:08:31 - WeaviateVectorDatabase - INFO - ✅ Weaviate连接成功: http://localhost:8080 (gRPC: 50051)
2025-07-20 00:08:31 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/schema/AnalyDesignDocuments "HTTP/1.1 200 OK"
2025-07-20 00:08:31 - WeaviateVectorDatabase - INFO - ✅ Weaviate集合已存在: AnalyDesignDocuments
2025-07-20 00:08:31 - AnalysisServiceManager - INFO - 初始化向量数据库: weaviate
2025-07-20 00:08:31 - sentence_transformers.SentenceTransformer - INFO - Use pytorch device_name: mps
2025-07-20 00:08:31 - sentence_transformers.SentenceTransformer - INFO - Load pretrained SentenceTransformer: BAAI/bge-large-zh
2025-07-20 00:08:37 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-20 00:08:38 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-20 00:08:38 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-20 00:08:38 - src.utils.weaviate_helper - INFO - 成功连接到 Weaviate: localhost:8080
2025-07-20 00:08:38 - AnalysisServiceManager - INFO - 分析服务管理器初始化完成
2025-07-20 00:08:38 - src.utils.enhanced_analyzer - INFO - 增强分析器初始化完成
2025-07-20 00:08:43 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:8082
 * Running on http://26.26.26.1:8082
2025-07-20 00:08:43 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-07-20 00:08:43 - werkzeug - INFO -  * Restarting with stat
2025-07-20 00:08:43 - system - INFO - ==================================================
2025-07-20 00:08:43 - system - INFO - 🚀 智能分析系统日志系统初始化完成
2025-07-20 00:08:43 - system - INFO - 📁 日志根目录: /Users/renyu/Documents/ai_project/document_analyzer/logs
2025-07-20 00:08:43 - system - INFO - 📊 日志级别: INFO
2025-07-20 00:08:43 - system - INFO - 📅 按日期轮转: 每天午夜自动轮转
2025-07-20 00:08:43 - system - INFO - 📂 按月分目录: logs/YYYY-MM/
2025-07-20 00:08:43 - system - INFO - 📝 主日志: logs/2025-07/app.log
2025-07-20 00:08:43 - system - INFO - 🔧 API日志: logs/2025-07/api_server.log
2025-07-20 00:08:43 - system - INFO - 🗂️ 保留天数: 7 天
2025-07-20 00:08:43 - system - INFO - ==================================================
2025-07-20 00:08:45 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-20 00:08:46 - root - WARNING - SQLite检查点不可用，将仅使用内存检查点
2025-07-20 00:08:46 - src.utils.task_storage - INFO - 数据库初始化成功
2025-07-20 00:08:46 - markdown_storage - INFO - Markdown存储管理器初始化完成
2025-07-20 00:08:46 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-20 00:08:46 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-20 00:08:46 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-20 00:08:46 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-20 00:08:47 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-20 00:08:47 - WeaviateVectorDatabase - INFO - ✅ Weaviate连接成功: http://localhost:8080 (gRPC: 50051)
2025-07-20 00:08:47 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/schema/AnalyDesignDocuments "HTTP/1.1 200 OK"
2025-07-20 00:08:47 - WeaviateVectorDatabase - INFO - ✅ Weaviate集合已存在: AnalyDesignDocuments
2025-07-20 00:08:47 - AnalysisServiceManager - INFO - 初始化向量数据库: weaviate
2025-07-20 00:08:47 - sentence_transformers.SentenceTransformer - INFO - Use pytorch device_name: mps
2025-07-20 00:08:47 - sentence_transformers.SentenceTransformer - INFO - Load pretrained SentenceTransformer: BAAI/bge-large-zh
2025-07-20 00:08:53 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-20 00:08:54 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-20 00:08:54 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-20 00:08:54 - src.utils.weaviate_helper - INFO - 成功连接到 Weaviate: localhost:8080
2025-07-20 00:08:54 - AnalysisServiceManager - INFO - 分析服务管理器初始化完成
2025-07-20 00:08:54 - src.utils.enhanced_analyzer - INFO - 增强分析器初始化完成
2025-07-20 00:09:42 - system - INFO - ==================================================
2025-07-20 00:09:42 - system - INFO - 🚀 智能分析系统日志系统初始化完成
2025-07-20 00:09:42 - system - INFO - 📁 日志根目录: /Users/renyu/Documents/ai_project/document_analyzer/logs
2025-07-20 00:09:42 - system - INFO - 📊 日志级别: INFO
2025-07-20 00:09:42 - system - INFO - 📅 按日期轮转: 每天午夜自动轮转
2025-07-20 00:09:42 - system - INFO - 📂 按月分目录: logs/YYYY-MM/
2025-07-20 00:09:42 - system - INFO - 📝 主日志: logs/2025-07/app.log
2025-07-20 00:09:42 - system - INFO - 🔧 API日志: logs/2025-07/api_server.log
2025-07-20 00:09:42 - system - INFO - 🗂️ 保留天数: 7 天
2025-07-20 00:09:42 - system - INFO - ==================================================
2025-07-20 00:09:44 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-20 00:09:44 - root - WARNING - SQLite检查点不可用，将仅使用内存检查点
2025-07-20 00:09:44 - src.utils.task_storage - INFO - 数据库初始化成功
2025-07-20 00:09:44 - markdown_storage - INFO - Markdown存储管理器初始化完成
2025-07-20 00:09:44 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-20 00:09:44 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-20 00:09:44 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-20 00:09:45 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-20 00:09:45 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-20 00:09:45 - WeaviateVectorDatabase - INFO - ✅ Weaviate连接成功: http://localhost:8080 (gRPC: 50051)
2025-07-20 00:09:45 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/schema/AnalyDesignDocuments "HTTP/1.1 200 OK"
2025-07-20 00:09:45 - WeaviateVectorDatabase - INFO - ✅ Weaviate集合已存在: AnalyDesignDocuments
2025-07-20 00:09:45 - AnalysisServiceManager - INFO - 初始化向量数据库: weaviate
2025-07-20 00:09:45 - sentence_transformers.SentenceTransformer - INFO - Use pytorch device_name: mps
2025-07-20 00:09:45 - sentence_transformers.SentenceTransformer - INFO - Load pretrained SentenceTransformer: BAAI/bge-large-zh
2025-07-20 00:09:51 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-20 00:09:52 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-20 00:09:52 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-20 00:09:52 - src.utils.weaviate_helper - INFO - 成功连接到 Weaviate: localhost:8080
2025-07-20 00:09:52 - AnalysisServiceManager - INFO - 分析服务管理器初始化完成
2025-07-20 00:09:52 - src.utils.enhanced_analyzer - INFO - 增强分析器初始化完成
2025-07-20 00:10:00 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:8082
 * Running on http://26.26.26.1:8082
2025-07-20 00:10:00 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-07-20 00:10:00 - werkzeug - INFO -  * Restarting with stat
2025-07-20 00:10:00 - system - INFO - ==================================================
2025-07-20 00:10:00 - system - INFO - 🚀 智能分析系统日志系统初始化完成
2025-07-20 00:10:00 - system - INFO - 📁 日志根目录: /Users/renyu/Documents/ai_project/document_analyzer/logs
2025-07-20 00:10:00 - system - INFO - 📊 日志级别: INFO
2025-07-20 00:10:00 - system - INFO - 📅 按日期轮转: 每天午夜自动轮转
2025-07-20 00:10:00 - system - INFO - 📂 按月分目录: logs/YYYY-MM/
2025-07-20 00:10:00 - system - INFO - 📝 主日志: logs/2025-07/app.log
2025-07-20 00:10:00 - system - INFO - 🔧 API日志: logs/2025-07/api_server.log
2025-07-20 00:10:00 - system - INFO - 🗂️ 保留天数: 7 天
2025-07-20 00:10:00 - system - INFO - ==================================================
2025-07-20 00:10:02 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-20 00:10:02 - root - WARNING - SQLite检查点不可用，将仅使用内存检查点
2025-07-20 00:10:02 - src.utils.task_storage - INFO - 数据库初始化成功
2025-07-20 00:10:02 - markdown_storage - INFO - Markdown存储管理器初始化完成
2025-07-20 00:10:02 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-20 00:10:02 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-20 00:10:02 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-20 00:10:03 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-20 00:10:03 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-20 00:10:03 - WeaviateVectorDatabase - INFO - ✅ Weaviate连接成功: http://localhost:8080 (gRPC: 50051)
2025-07-20 00:10:03 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/schema/AnalyDesignDocuments "HTTP/1.1 200 OK"
2025-07-20 00:10:03 - WeaviateVectorDatabase - INFO - ✅ Weaviate集合已存在: AnalyDesignDocuments
2025-07-20 00:10:03 - AnalysisServiceManager - INFO - 初始化向量数据库: weaviate
2025-07-20 00:10:03 - sentence_transformers.SentenceTransformer - INFO - Use pytorch device_name: mps
2025-07-20 00:10:03 - sentence_transformers.SentenceTransformer - INFO - Load pretrained SentenceTransformer: BAAI/bge-large-zh
2025-07-20 00:10:10 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-20 00:10:11 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-20 00:10:11 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-20 00:10:11 - src.utils.weaviate_helper - INFO - 成功连接到 Weaviate: localhost:8080
2025-07-20 00:10:11 - AnalysisServiceManager - INFO - 分析服务管理器初始化完成
2025-07-20 00:10:11 - src.utils.enhanced_analyzer - INFO - 增强分析器初始化完成
2025-07-20 00:10:11 - werkzeug - WARNING -  * Debugger is active!
2025-07-20 00:10:11 - werkzeug - INFO -  * Debugger PIN: 686-644-562
2025-07-20 00:10:46 - src.apis.coder_agent_api - INFO - 开始处理文档: 链数中建一局_1752941446
2025-07-20 00:10:46 - src.apis.coder_agent_api - INFO - 文档长度: 4937 字符
2025-07-20 00:10:46 - src.apis.coder_agent_api - INFO - 使用LangGraph: True
2025-07-20 00:10:46 - src.apis.coder_agent_api - INFO - 代码输出路径: /Users/renyu/Documents/create_project
2025-07-20 00:10:46 - src.apis.coder_agent_api - INFO - 使用LangGraph工作流处理项目: 链数中建一局_1752941446
2025-07-20 00:10:46 - src.corder_integration.langgraph.workflow_orchestrator - INFO - 使用内存检查点
2025-07-20 00:10:46 - src.corder_integration.langgraph.workflow_orchestrator - INFO - 生成目标分支名称: 链数中建一局_1752941446 -> D_20250720_链数中建一局_1752941446
2025-07-20 00:10:46 - src.corder_integration.langgraph.workflow_orchestrator - INFO - 开始执行编码工作流: 链数中建一局_1752941446 -> /Users/renyu/Documents/create_project
2025-07-20 00:10:46 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 🚀 开始执行任务拆分: 链数中建一局_1752941446
2025-07-20 00:10:46 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📥 输入状态键: ['design_doc', 'project_name', 'identified_services', 'service_dependencies', 'task_execution_plan', 'parallel_tasks', 'git_repo_url', 'target_branch', 'project_paths', 'output_path', 'repo_initialized', 'generated_services', 'generated_apis', 'generated_sql', 'service_interconnections', 'unit_test_results', 'test_coverage', 'interface_compatibility', 'code_review_results', 'static_analysis_results', 'security_scan_results', 'commit_hashes', 'push_results', 'pr_urls', 'current_phase', 'completed_services', 'failed_services', 'retry_count', 'execution_errors']
2025-07-20 00:10:46 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📄 设计文档长度: 4936
2025-07-20 00:10:46 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 🔄 当前阶段: task_splitting
2025-07-20 00:10:46 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📁 计算的基础项目路径: /Users/renyu/Documents/create_project/链数中建一局_1752941446
2025-07-20 00:10:46 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-20 00:10:46 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 模板 task_splitting/design_analysis_prompts.jinja2 加载成功
2025-07-20 00:10:46 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 模板 task_splitting/service_boundary_prompts.jinja2 加载成功
2025-07-20 00:10:46 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 模板 task_splitting/dependency_analysis_prompts.jinja2 加载成功
2025-07-20 00:10:46 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 模板 task_splitting/task_scheduling_prompts.jinja2 加载成功
2025-07-20 00:10:46 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 模板 task_splitting/generate_sqlite_tasks_prompts.jinja2 加载成功
2025-07-20 00:10:46 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 任务数据库初始化完成
2025-07-20 00:10:46 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 删除WAL文件: coding_agent_workflow.db-wal
2025-07-20 00:10:46 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 删除WAL文件: coding_agent_workflow.db-shm
2025-07-20 00:10:46 - src.corder_integration.langgraph.nodes.task_splitting_node - WARNING - ⚠️ WAL检查点操作失败: disk I/O error
2025-07-20 00:10:46 - src.corder_integration.langgraph.nodes.task_splitting_node - ERROR - ❌ 数据库重置失败: disk I/O error
2025-07-20 00:10:46 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 删除WAL文件: coding_agent_workflow.db-wal
2025-07-20 00:10:46 - src.corder_integration.langgraph.nodes.task_splitting_node - WARNING - ⚠️ WAL检查点操作失败: disk I/O error
2025-07-20 00:10:48 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 删除WAL文件: coding_agent_workflow.db-wal
2025-07-20 00:10:48 - src.corder_integration.langgraph.nodes.task_splitting_node - WARNING - ⚠️ WAL检查点操作失败: disk I/O error
2025-07-20 00:10:48 - src.corder_integration.langgraph.nodes.task_splitting_node - ERROR - ❌ 最终数据库重置失败: disk I/O error
2025-07-20 00:10:48 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📋 步骤1：开始设计文档分析...
2025-07-20 00:10:48 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📄 文档分割完成：4936 字符 -> 3 个窗口
2025-07-20 00:10:48 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📄 设计文档分割成 3 个窗口
2025-07-20 00:10:48 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 分析窗口 1/3 (字符: 0-1926)
2025-07-20 00:11:09 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-20 00:11:09 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 窗口 1 分析完成
2025-07-20 00:11:09 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 分析窗口 2/3 (字符: 1626-3553)
2025-07-20 00:11:21 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-20 00:11:21 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 窗口 2 分析完成
2025-07-20 00:11:21 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 分析窗口 3/3 (字符: 3253-4936)
2025-07-20 00:11:33 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-20 00:11:33 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 窗口 3 分析完成
2025-07-20 00:11:33 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 🔄 合并 3 个设计分析分析结果...
2025-07-20 00:11:33 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📊 合并后的设计分析结果: {'architecture_style': '微服务', 'technology_stack': ['Excel导出工具', 'RESTful API', 'MySQL', 'Spring Cloud 2021.x', 'Spring Boot 2.7.x', 'MySQL 8.0', 'PageHelper', 'Redis 6.0', 'MyBatis Plus 3.5.x', 'Spring Boot', 'RabbitMQ 3.8', 'Redis', 'pageHelper', 'Nacos'], 'functional_modules': [{'name': '额度管理', 'description': '调整原链数额度功能，新增组织单元额度管理', 'responsibilities': ['额度信息管理', '组织单元额度查询', '额度类型分类']}, {'name': '用户服务', 'description': '用户管理、权限控制、角色管理', 'responsibilities': ['组织单元管理', '用户权限控制']}, {'name': '确权开立服务', 'description': '处理确权开立相关业务逻辑', 'responsibilities': ['业务数据推送', '接口校验逻辑处理']}, {'name': '多组织单元管理', 'description': '管理组织单元的基本信息和状态', 'responsibilities': ['组织单元CRUD', '状态管理', '多平台类型支持']}, {'name': '确权开立服务', 'description': '处理确权开立和额度管理', 'responsibilities': ['额度分配', '额度查询', '业务类型管理']}, {'name': '额度管理模块', 'description': '处理组织单元额度的查询和导出功能', 'responsibilities': ['额度信息查询', '额度信息导出']}, {'name': '组织单元管理模块', 'description': '获取组织单元详细信息', 'responsibilities': ['组织单元信息查询']}], 'system_components': ['多组织单元表(t_cust_multiorg_unit)', 'zqyl-user-center-service', 'MySQL', '确权开立API服务', 'crcl-open', '额度管理模块', 'Redis'], 'data_flow': ['业务类型→额度类型映射', '核心企业系统 -> 平台接口 -> 确权开立服务', '用户服务 -> 组织单元管理 -> 额度管理', '额度分配→组织单元关联', '客户端请求额度列表 -> 服务端查询数据库 -> 返回分页结果', '企业信息→组织单元创建', '客户端请求导出额度列表 -> 服务端查询数据库 -> 生成Excel文件 -> 返回文件下载地址'], 'integration_points': ['核心企业系统与平台接口的数据推送', '用户服务与确权开立服务的组织单元数据交互', 'zqyl-user-center-service的/queryCompanyUnitList接口', 'crcl-open的/lsLimit/listUnitLimitByCompanyIdExport接口', '企业系统→组织单元同步接口', '前端→额度查询API(/lsLimit/listUnitLimitByCompanyId)'], 'summary': '该设计采用微服务架构，主要调整额度管理功能并新增组织单元额度功能。技术栈选用Spring Boot+Cloud、MySQL等成熟组件。系统包含用户服务和确权开立服务两个核心服务，通过接口实现与核心企业系统的数据交互。设计重点在于优化接口校验逻辑以支持数据重推，并通过新增功能模块提升额度管理灵活性。 该设计采用微服务架构，包含组织单元管理和确权开立两大核心模块。数据库设计规范，包含审计字段和索引优化'}
2025-07-20 00:11:33 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 设计概要: 该设计采用微服务架构，主要调整额度管理功能并新增组织单元额度功能。技术栈选用Spring Boot+Cloud、MySQL等成熟组件。系统包含用户服务和确权开立服务两个核心服务，通过接口实现与核心企业系统的数据交互。设计重点在于优化接口校验逻辑以支持数据重推，并通过新增功能模块提升额度管理灵活性。 该设计采用微服务架构，包含组织单元管理和确权开立两大核心模块。数据库设计规范，包含审计字段和索引优化
2025-07-20 00:11:33 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 🏗️ 步骤2：开始技术架构分析...
2025-07-20 00:11:33 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 技术架构概要: 该设计采用微服务架构，主要调整额度管理功能并新增组织单元额度功能。技术栈选用Spring Boot+Cloud、MySQL等成熟组件。系统包含用户服务和确权开立服务两个核心服务，通过接口实现与核心企业系统的数据交互。设计重点在于优化接口校验逻辑以支持数据重推，并通过新增功能模块提升额度管理灵活性。 该设计采用微服务架构，包含组织单元管理和确权开立两大核心模块。数据库设计规范，包含审计字段和索引优化
2025-07-20 00:11:33 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 🔍 步骤3：开始服务边界识别...
2025-07-20 00:11:33 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 输入 - 设计概要: 该设计采用微服务架构，主要调整额度管理功能并新增组织单元额度功能。技术栈选用Spring Boot+Cloud、MySQL等成熟组件。系统包含用户服务和确权开立服务两个核心服务，通过接口实现与核心企业系统的数据交互。设计重点在于优化接口校验逻辑以支持数据重推，并通过新增功能模块提升额度管理灵活性。 该设计采用微服务架构，包含组织单元管理和确权开立两大核心模块。数据库设计规范，包含审计字段和索引优化
2025-07-20 00:11:33 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 输入 - 架构概要: 该设计采用微服务架构，主要调整额度管理功能并新增组织单元额度功能。技术栈选用Spring Boot+Cloud、MySQL等成熟组件。系统包含用户服务和确权开立服务两个核心服务，通过接口实现与核心企业系统的数据交互。设计重点在于优化接口校验逻辑以支持数据重推，并通过新增功能模块提升额度管理灵活性。 该设计采用微服务架构，包含组织单元管理和确权开立两大核心模块。数据库设计规范，包含审计字段和索引优化
2025-07-20 00:11:33 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 服务拆分提示词长度: 2333
2025-07-20 00:13:44 - system - INFO - ==================================================
2025-07-20 00:13:44 - system - INFO - 🚀 智能分析系统日志系统初始化完成
2025-07-20 00:13:44 - system - INFO - 📁 日志根目录: /Users/renyu/Documents/ai_project/document_analyzer/logs
2025-07-20 00:13:44 - system - INFO - 📊 日志级别: INFO
2025-07-20 00:13:44 - system - INFO - 📅 按日期轮转: 每天午夜自动轮转
2025-07-20 00:13:44 - system - INFO - 📂 按月分目录: logs/YYYY-MM/
2025-07-20 00:13:44 - system - INFO - 📝 主日志: logs/2025-07/app.log
2025-07-20 00:13:44 - system - INFO - 🔧 API日志: logs/2025-07/api_server.log
2025-07-20 00:13:44 - system - INFO - 🗂️ 保留天数: 7 天
2025-07-20 00:13:44 - system - INFO - ==================================================
2025-07-20 00:13:47 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-20 00:13:47 - root - WARNING - SQLite检查点不可用，将仅使用内存检查点
2025-07-20 00:13:47 - src.utils.task_storage - INFO - 数据库初始化成功
2025-07-20 00:13:47 - markdown_storage - INFO - Markdown存储管理器初始化完成
2025-07-20 00:13:47 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-20 00:13:47 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-20 00:13:47 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-20 00:13:48 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-20 00:13:48 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-20 00:13:48 - WeaviateVectorDatabase - INFO - ✅ Weaviate连接成功: http://localhost:8080 (gRPC: 50051)
2025-07-20 00:13:48 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/schema/AnalyDesignDocuments "HTTP/1.1 200 OK"
2025-07-20 00:13:48 - WeaviateVectorDatabase - INFO - ✅ Weaviate集合已存在: AnalyDesignDocuments
2025-07-20 00:13:48 - AnalysisServiceManager - INFO - 初始化向量数据库: weaviate
2025-07-20 00:13:48 - sentence_transformers.SentenceTransformer - INFO - Use pytorch device_name: mps
2025-07-20 00:13:48 - sentence_transformers.SentenceTransformer - INFO - Load pretrained SentenceTransformer: BAAI/bge-large-zh
2025-07-20 00:13:55 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-20 00:13:55 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-20 00:13:56 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-20 00:13:56 - src.utils.weaviate_helper - INFO - 成功连接到 Weaviate: localhost:8080
2025-07-20 00:13:56 - AnalysisServiceManager - INFO - 分析服务管理器初始化完成
2025-07-20 00:13:56 - src.utils.enhanced_analyzer - INFO - 增强分析器初始化完成
2025-07-20 00:14:01 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:8082
 * Running on http://26.26.26.1:8082
2025-07-20 00:14:01 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-07-20 00:14:01 - werkzeug - INFO -  * Restarting with stat
2025-07-20 00:14:01 - system - INFO - ==================================================
2025-07-20 00:14:01 - system - INFO - 🚀 智能分析系统日志系统初始化完成
2025-07-20 00:14:01 - system - INFO - 📁 日志根目录: /Users/renyu/Documents/ai_project/document_analyzer/logs
2025-07-20 00:14:01 - system - INFO - 📊 日志级别: INFO
2025-07-20 00:14:01 - system - INFO - 📅 按日期轮转: 每天午夜自动轮转
2025-07-20 00:14:01 - system - INFO - 📂 按月分目录: logs/YYYY-MM/
2025-07-20 00:14:01 - system - INFO - 📝 主日志: logs/2025-07/app.log
2025-07-20 00:14:01 - system - INFO - 🔧 API日志: logs/2025-07/api_server.log
2025-07-20 00:14:01 - system - INFO - 🗂️ 保留天数: 7 天
2025-07-20 00:14:01 - system - INFO - ==================================================
2025-07-20 00:14:03 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-20 00:14:03 - root - WARNING - SQLite检查点不可用，将仅使用内存检查点
2025-07-20 00:14:03 - src.utils.task_storage - INFO - 数据库初始化成功
2025-07-20 00:14:03 - markdown_storage - INFO - Markdown存储管理器初始化完成
2025-07-20 00:14:03 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-20 00:14:03 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-20 00:14:03 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-20 00:14:04 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-20 00:14:04 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-20 00:14:04 - WeaviateVectorDatabase - INFO - ✅ Weaviate连接成功: http://localhost:8080 (gRPC: 50051)
2025-07-20 00:14:04 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/schema/AnalyDesignDocuments "HTTP/1.1 200 OK"
2025-07-20 00:14:04 - WeaviateVectorDatabase - INFO - ✅ Weaviate集合已存在: AnalyDesignDocuments
2025-07-20 00:14:04 - AnalysisServiceManager - INFO - 初始化向量数据库: weaviate
2025-07-20 00:14:04 - sentence_transformers.SentenceTransformer - INFO - Use pytorch device_name: mps
2025-07-20 00:14:04 - sentence_transformers.SentenceTransformer - INFO - Load pretrained SentenceTransformer: BAAI/bge-large-zh
2025-07-20 00:14:11 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-20 00:14:11 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-20 00:14:11 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-20 00:14:11 - src.utils.weaviate_helper - INFO - 成功连接到 Weaviate: localhost:8080
2025-07-20 00:14:11 - AnalysisServiceManager - INFO - 分析服务管理器初始化完成
2025-07-20 00:14:11 - src.utils.enhanced_analyzer - INFO - 增强分析器初始化完成
2025-07-20 00:14:11 - werkzeug - WARNING -  * Debugger is active!
2025-07-20 00:14:11 - werkzeug - INFO -  * Debugger PIN: 686-644-562
2025-07-20 00:14:36 - src.apis.coder_agent_api - INFO - 开始处理文档: 链数中建一局_1752941676
2025-07-20 00:14:36 - src.apis.coder_agent_api - INFO - 文档长度: 4937 字符
2025-07-20 00:14:36 - src.apis.coder_agent_api - INFO - 使用LangGraph: True
2025-07-20 00:14:36 - src.apis.coder_agent_api - INFO - 代码输出路径: /Users/renyu/Documents/create_project
2025-07-20 00:14:36 - src.apis.coder_agent_api - INFO - 使用LangGraph工作流处理项目: 链数中建一局_1752941676
2025-07-20 00:14:36 - src.corder_integration.langgraph.workflow_orchestrator - INFO - 使用内存检查点
2025-07-20 00:14:36 - src.corder_integration.langgraph.workflow_orchestrator - INFO - 生成目标分支名称: 链数中建一局_1752941676 -> D_20250720_链数中建一局_1752941676
2025-07-20 00:14:36 - src.corder_integration.langgraph.workflow_orchestrator - INFO - 开始执行编码工作流: 链数中建一局_1752941676 -> /Users/renyu/Documents/create_project
2025-07-20 00:14:36 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 🚀 开始执行任务拆分: 链数中建一局_1752941676
2025-07-20 00:14:36 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📥 输入状态键: ['design_doc', 'project_name', 'identified_services', 'service_dependencies', 'task_execution_plan', 'parallel_tasks', 'git_repo_url', 'target_branch', 'project_paths', 'output_path', 'repo_initialized', 'generated_services', 'generated_apis', 'generated_sql', 'service_interconnections', 'unit_test_results', 'test_coverage', 'interface_compatibility', 'code_review_results', 'static_analysis_results', 'security_scan_results', 'commit_hashes', 'push_results', 'pr_urls', 'current_phase', 'completed_services', 'failed_services', 'retry_count', 'execution_errors']
2025-07-20 00:14:36 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📄 设计文档长度: 4936
2025-07-20 00:14:36 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 🔄 当前阶段: task_splitting
2025-07-20 00:14:36 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📁 计算的基础项目路径: /Users/renyu/Documents/create_project/链数中建一局_1752941676
2025-07-20 00:14:36 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-20 00:14:36 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 模板 task_splitting/design_analysis_prompts.jinja2 加载成功
2025-07-20 00:14:36 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 模板 task_splitting/service_boundary_prompts.jinja2 加载成功
2025-07-20 00:14:36 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 模板 task_splitting/dependency_analysis_prompts.jinja2 加载成功
2025-07-20 00:14:36 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 模板 task_splitting/task_scheduling_prompts.jinja2 加载成功
2025-07-20 00:14:36 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 模板 task_splitting/generate_sqlite_tasks_prompts.jinja2 加载成功
2025-07-20 00:14:36 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 任务数据库初始化完成
2025-07-20 00:14:36 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 删除WAL文件: coding_agent_workflow.db-wal
2025-07-20 00:14:36 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 删除WAL文件: coding_agent_workflow.db-shm
2025-07-20 00:14:36 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 数据库WAL检查点和优化完成
2025-07-20 00:14:36 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 数据库表结构重置完成
2025-07-20 00:14:36 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📋 步骤1：开始设计文档分析...
2025-07-20 00:14:36 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📄 文档分割完成：4936 字符 -> 3 个窗口
2025-07-20 00:14:36 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📄 设计文档分割成 3 个窗口
2025-07-20 00:14:36 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 分析窗口 1/3 (字符: 0-1926)
2025-07-20 00:14:51 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-20 00:14:51 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 窗口 1 分析完成
2025-07-20 00:14:51 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 分析窗口 2/3 (字符: 1626-3553)
2025-07-20 00:15:03 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-20 00:15:03 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 窗口 2 分析完成
2025-07-20 00:15:03 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 分析窗口 3/3 (字符: 3253-4936)
2025-07-20 00:15:16 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-20 00:15:16 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 窗口 3 分析完成
2025-07-20 00:15:16 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 🔄 合并 3 个设计分析分析结果...
2025-07-20 00:15:16 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📊 合并后的设计分析结果: {'architecture_style': '微服务', 'technology_stack': ['Spring Boot', 'Spring Cloud 2021.x', 'Nacos', 'Redis', 'MyBatis Plus 3.5.x', 'Excel导出工具（如Apache POI或EasyExcel）', 'MySQL 8.0', 'Redis 6.0', 'PageHelper', 'Spring Boot 2.7.x', 'MySQL', 'pageHelper', 'RESTful API', 'RabbitMQ 3.8'], 'functional_modules': [{'name': '用户服务', 'description': '处理用户管理、权限控制和角色管理', 'responsibilities': ['组织单元管理', '用户认证与授权']}, {'name': '确权开立服务', 'description': '处理额度管理和业务数据推送', 'responsibilities': ['额度管理功能', '业务数据推送接口']}, {'name': '多组织单元管理', 'description': '管理企业多组织单元信息', 'responsibilities': ['组织单元CRUD', '状态管理', '组织单元查询']}, {'name': '确权开立服务', 'description': '处理确权开立和额度管理', 'responsibilities': ['确权开立', '额度分配管理', '额度查询']}, {'name': '额度管理模块', 'description': '处理组织单元额度的查询和导出功能', 'responsibilities': ['查询组织单元额度信息', '生成Excel格式的额度报表', '与用户服务集成获取组织单元详细信息']}], 'system_components': ['MySQL数据库', 'Redis', 'Redis缓存', '额度管理模块', 'MySQL', 'crcl-open（确权开立服务）', 'zqyl-user-center-service', '多组织单元表(t_cust_multiorg_unit)', 'zqyl-user-center-service（用户服务）', '确权开立API服务', 'crcl-open'], 'data_flow': ['前端请求额度列表导出 -> 后端处理查询并生成Excel -> 返回文件下载地址', '调用zqyl-user-center-service获取组织单元详细信息', '额度申请→额度分配→额度使用记录', '用户请求 → 用户服务 → 组织单元数据返回', '核心企业系统 → 额度管理服务 → 平台数据存储', '企业信息→组织单元创建→状态更新'], 'integration_points': ['核心企业系统与额度管理服务的接口', 'Redis缓存连接', '组织单元管理与确权开立服务的API集成', '用户服务与确权开立服务的交互', '企业系统与多组织单元表的数据库集成', 'MySQL数据库连接', 'zqyl-user-center-service的/queryCompanyUnitList接口'], 'summary': '该设计采用微服务架构，包含用户服务和确权开立服务两个主要模块，使用Spring Boot和Spring Cloud等技术栈实现。主要调整包括额度管理功能的优化和组织单元额度的新增，支持核心企业重推数据的需求。系统通过MySQL和Redis进行数据存储和缓存，利用Nacos进行服务发现和配置管理。 该设计采用微服务架构，包含组织单元管理和确权开立两大核心模块。技术栈基于Spring Boot和MyS'}
2025-07-20 00:15:16 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 设计概要: 该设计采用微服务架构，包含用户服务和确权开立服务两个主要模块，使用Spring Boot和Spring Cloud等技术栈实现。主要调整包括额度管理功能的优化和组织单元额度的新增，支持核心企业重推数据的需求。系统通过MySQL和Redis进行数据存储和缓存，利用Nacos进行服务发现和配置管理。 该设计采用微服务架构，包含组织单元管理和确权开立两大核心模块。技术栈基于Spring Boot和MyS
2025-07-20 00:15:16 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 🏗️ 步骤2：开始技术架构分析...
2025-07-20 00:15:16 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 技术架构概要: 该设计采用微服务架构，包含用户服务和确权开立服务两个主要模块，使用Spring Boot和Spring Cloud等技术栈实现。主要调整包括额度管理功能的优化和组织单元额度的新增，支持核心企业重推数据的需求。系统通过MySQL和Redis进行数据存储和缓存，利用Nacos进行服务发现和配置管理。 该设计采用微服务架构，包含组织单元管理和确权开立两大核心模块。技术栈基于Spring Boot和MyS
2025-07-20 00:15:16 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 🔍 步骤3：开始服务边界识别...
2025-07-20 00:15:16 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 输入 - 设计概要: 该设计采用微服务架构，包含用户服务和确权开立服务两个主要模块，使用Spring Boot和Spring Cloud等技术栈实现。主要调整包括额度管理功能的优化和组织单元额度的新增，支持核心企业重推数据的需求。系统通过MySQL和Redis进行数据存储和缓存，利用Nacos进行服务发现和配置管理。 该设计采用微服务架构，包含组织单元管理和确权开立两大核心模块。技术栈基于Spring Boot和MyS
2025-07-20 00:15:16 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 输入 - 架构概要: 该设计采用微服务架构，包含用户服务和确权开立服务两个主要模块，使用Spring Boot和Spring Cloud等技术栈实现。主要调整包括额度管理功能的优化和组织单元额度的新增，支持核心企业重推数据的需求。系统通过MySQL和Redis进行数据存储和缓存，利用Nacos进行服务发现和配置管理。 该设计采用微服务架构，包含组织单元管理和确权开立两大核心模块。技术栈基于Spring Boot和MyS
2025-07-20 00:15:16 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 服务拆分提示词长度: 2333
2025-07-20 00:15:21 - src.apis.coder_agent_api - INFO - 开始处理文档: 链数中建一局_1752941721
2025-07-20 00:15:21 - src.apis.coder_agent_api - INFO - 文档长度: 4937 字符
2025-07-20 00:15:21 - src.apis.coder_agent_api - INFO - 使用LangGraph: True
2025-07-20 00:15:21 - src.apis.coder_agent_api - INFO - 代码输出路径: /Users/renyu/Documents/create_project
2025-07-20 00:15:21 - src.apis.coder_agent_api - INFO - 使用LangGraph工作流处理项目: 链数中建一局_1752941721
2025-07-20 00:15:21 - src.corder_integration.langgraph.workflow_orchestrator - INFO - 使用内存检查点
2025-07-20 00:15:21 - src.corder_integration.langgraph.workflow_orchestrator - INFO - 生成目标分支名称: 链数中建一局_1752941721 -> D_20250720_链数中建一局_1752941721
2025-07-20 00:15:21 - src.corder_integration.langgraph.workflow_orchestrator - INFO - 开始执行编码工作流: 链数中建一局_1752941721 -> /Users/renyu/Documents/create_project
2025-07-20 00:15:21 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 🚀 开始执行任务拆分: 链数中建一局_1752941721
2025-07-20 00:15:21 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📥 输入状态键: ['design_doc', 'project_name', 'identified_services', 'service_dependencies', 'task_execution_plan', 'parallel_tasks', 'git_repo_url', 'target_branch', 'project_paths', 'output_path', 'repo_initialized', 'generated_services', 'generated_apis', 'generated_sql', 'service_interconnections', 'unit_test_results', 'test_coverage', 'interface_compatibility', 'code_review_results', 'static_analysis_results', 'security_scan_results', 'commit_hashes', 'push_results', 'pr_urls', 'current_phase', 'completed_services', 'failed_services', 'retry_count', 'execution_errors']
2025-07-20 00:15:21 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📄 设计文档长度: 4936
2025-07-20 00:15:21 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 🔄 当前阶段: task_splitting
2025-07-20 00:15:21 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📁 计算的基础项目路径: /Users/renyu/Documents/create_project/链数中建一局_1752941721
2025-07-20 00:15:21 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 模板 task_splitting/design_analysis_prompts.jinja2 加载成功
2025-07-20 00:15:21 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 模板 task_splitting/service_boundary_prompts.jinja2 加载成功
2025-07-20 00:15:21 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 模板 task_splitting/dependency_analysis_prompts.jinja2 加载成功
2025-07-20 00:15:21 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 模板 task_splitting/task_scheduling_prompts.jinja2 加载成功
2025-07-20 00:15:21 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 模板 task_splitting/generate_sqlite_tasks_prompts.jinja2 加载成功
2025-07-20 00:15:21 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 任务数据库初始化完成
2025-07-20 00:15:21 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 删除WAL文件: coding_agent_workflow.db-wal
2025-07-20 00:15:21 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 删除WAL文件: coding_agent_workflow.db-shm
2025-07-20 00:15:21 - src.corder_integration.langgraph.nodes.task_splitting_node - WARNING - ⚠️ WAL检查点操作失败: disk I/O error
2025-07-20 00:15:21 - src.corder_integration.langgraph.nodes.task_splitting_node - ERROR - ❌ 数据库重置失败: disk I/O error
2025-07-20 00:15:21 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 删除WAL文件: coding_agent_workflow.db-wal
2025-07-20 00:15:21 - src.corder_integration.langgraph.nodes.task_splitting_node - WARNING - ⚠️ WAL检查点操作失败: disk I/O error
2025-07-20 00:15:23 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 删除WAL文件: coding_agent_workflow.db-wal
2025-07-20 00:15:23 - src.corder_integration.langgraph.nodes.task_splitting_node - WARNING - ⚠️ WAL检查点操作失败: disk I/O error
2025-07-20 00:15:23 - src.corder_integration.langgraph.nodes.task_splitting_node - ERROR - ❌ 最终数据库重置失败: disk I/O error
2025-07-20 00:15:23 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📋 步骤1：开始设计文档分析...
2025-07-20 00:15:23 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📄 文档分割完成：4936 字符 -> 3 个窗口
2025-07-20 00:15:23 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📄 设计文档分割成 3 个窗口
2025-07-20 00:15:23 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 分析窗口 1/3 (字符: 0-1926)
2025-07-20 00:15:28 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-20 00:15:28 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 服务拆分LLM响应长度: 1040
2025-07-20 00:15:28 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📊 服务拆分解析结果: {'identified_services': [{'name': '用户服务', 'description': '处理用户相关功能的服务', 'git_repository': '', 'responsibilities': ['用户管理'], 'api_endpoints': [], 'database_tables': [], 'external_service_calls': [], 'config_requirements': ['MySQL连接', 'Redis缓存']}, {'name': '确权开立服务', 'description': '处理确权开立相关功能的服务', 'git_repository': '', 'responsibilities': ['确权开立管理', '额度管理优化', '组织单元额度管理'], 'api_endpoints': [], 'database_tables': [], 'external_service_calls': [], 'config_requirements': ['MySQL连接', 'Redis缓存']}, {'name': '组织单元管理', 'description': '处理组织单元相关功能的服务', 'git_repository': '', 'responsibilities': ['组织单元管理'], 'api_endpoints': [], 'database_tables': [], 'external_service_calls': [], 'config_requirements': ['MySQL连接']}], 'service_call_relationships': {'dependencies': []}, 'summary': '基于设计文档的服务分析概要，确认涉及3个服务（用户服务、确权开立服务、组织单元管理），0个新增接口，0个数据库表'}
2025-07-20 00:15:28 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 🎯 识别的服务列表: [{'name': '用户服务', 'description': '处理用户相关功能的服务', 'git_repository': '', 'responsibilities': ['用户管理'], 'api_endpoints': [], 'database_tables': [], 'external_service_calls': [], 'config_requirements': ['MySQL连接', 'Redis缓存']}, {'name': '确权开立服务', 'description': '处理确权开立相关功能的服务', 'git_repository': '', 'responsibilities': ['确权开立管理', '额度管理优化', '组织单元额度管理'], 'api_endpoints': [], 'database_tables': [], 'external_service_calls': [], 'config_requirements': ['MySQL连接', 'Redis缓存']}, {'name': '组织单元管理', 'description': '处理组织单元相关功能的服务', 'git_repository': '', 'responsibilities': ['组织单元管理'], 'api_endpoints': [], 'database_tables': [], 'external_service_calls': [], 'config_requirements': ['MySQL连接']}]
2025-07-20 00:15:28 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 🔢 识别的服务数量: 3
2025-07-20 00:15:28 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 服务拆分概要: 基于设计文档的服务分析概要，确认涉及3个服务（用户服务、确权开立服务、组织单元管理），0个新增接口，0个数据库表
2025-07-20 00:15:28 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 🌐 步骤4：开始依赖分析...
2025-07-20 00:15:28 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 依赖分析提示词长度: 2350
2025-07-20 00:15:39 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-20 00:15:39 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 窗口 1 分析完成
2025-07-20 00:15:39 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 分析窗口 2/3 (字符: 1626-3553)
2025-07-20 00:16:25 - system - INFO - ==================================================
2025-07-20 00:16:25 - system - INFO - 🚀 智能分析系统日志系统初始化完成
2025-07-20 00:16:25 - system - INFO - 📁 日志根目录: /Users/renyu/Documents/ai_project/document_analyzer/logs
2025-07-20 00:16:25 - system - INFO - 📊 日志级别: INFO
2025-07-20 00:16:25 - system - INFO - 📅 按日期轮转: 每天午夜自动轮转
2025-07-20 00:16:25 - system - INFO - 📂 按月分目录: logs/YYYY-MM/
2025-07-20 00:16:25 - system - INFO - 📝 主日志: logs/2025-07/app.log
2025-07-20 00:16:25 - system - INFO - 🔧 API日志: logs/2025-07/api_server.log
2025-07-20 00:16:25 - system - INFO - 🗂️ 保留天数: 7 天
2025-07-20 00:16:25 - system - INFO - ==================================================
2025-07-20 00:16:28 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-20 00:16:28 - root - WARNING - SQLite检查点不可用，将仅使用内存检查点
2025-07-20 00:16:28 - src.utils.task_storage - INFO - 数据库初始化成功
2025-07-20 00:16:28 - markdown_storage - INFO - Markdown存储管理器初始化完成
2025-07-20 00:16:28 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-20 00:16:28 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-20 00:16:28 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-20 00:16:29 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-20 00:16:29 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-20 00:16:29 - WeaviateVectorDatabase - INFO - ✅ Weaviate连接成功: http://localhost:8080 (gRPC: 50051)
2025-07-20 00:16:29 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/schema/AnalyDesignDocuments "HTTP/1.1 200 OK"
2025-07-20 00:16:29 - WeaviateVectorDatabase - INFO - ✅ Weaviate集合已存在: AnalyDesignDocuments
2025-07-20 00:16:29 - AnalysisServiceManager - INFO - 初始化向量数据库: weaviate
2025-07-20 00:16:29 - sentence_transformers.SentenceTransformer - INFO - Use pytorch device_name: mps
2025-07-20 00:16:29 - sentence_transformers.SentenceTransformer - INFO - Load pretrained SentenceTransformer: BAAI/bge-large-zh
2025-07-20 00:16:38 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-20 00:16:39 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-20 00:16:39 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-20 00:16:39 - src.utils.weaviate_helper - INFO - 成功连接到 Weaviate: localhost:8080
2025-07-20 00:16:39 - AnalysisServiceManager - INFO - 分析服务管理器初始化完成
2025-07-20 00:16:39 - src.utils.enhanced_analyzer - INFO - 增强分析器初始化完成
2025-07-20 00:16:47 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:8082
 * Running on http://26.26.26.1:8082
2025-07-20 00:16:47 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-07-20 00:16:47 - werkzeug - INFO -  * Restarting with stat
2025-07-20 00:16:47 - system - INFO - ==================================================
2025-07-20 00:16:47 - system - INFO - 🚀 智能分析系统日志系统初始化完成
2025-07-20 00:16:47 - system - INFO - 📁 日志根目录: /Users/renyu/Documents/ai_project/document_analyzer/logs
2025-07-20 00:16:47 - system - INFO - 📊 日志级别: INFO
2025-07-20 00:16:47 - system - INFO - 📅 按日期轮转: 每天午夜自动轮转
2025-07-20 00:16:47 - system - INFO - 📂 按月分目录: logs/YYYY-MM/
2025-07-20 00:16:47 - system - INFO - 📝 主日志: logs/2025-07/app.log
2025-07-20 00:16:47 - system - INFO - 🔧 API日志: logs/2025-07/api_server.log
2025-07-20 00:16:47 - system - INFO - 🗂️ 保留天数: 7 天
2025-07-20 00:16:47 - system - INFO - ==================================================
2025-07-20 00:16:49 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-20 00:16:49 - root - WARNING - SQLite检查点不可用，将仅使用内存检查点
2025-07-20 00:16:49 - src.utils.task_storage - INFO - 数据库初始化成功
2025-07-20 00:16:49 - markdown_storage - INFO - Markdown存储管理器初始化完成
2025-07-20 00:16:49 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-20 00:16:49 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-20 00:16:49 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-20 00:16:50 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-20 00:16:50 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-20 00:16:50 - WeaviateVectorDatabase - INFO - ✅ Weaviate连接成功: http://localhost:8080 (gRPC: 50051)
2025-07-20 00:16:50 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/schema/AnalyDesignDocuments "HTTP/1.1 200 OK"
2025-07-20 00:16:50 - WeaviateVectorDatabase - INFO - ✅ Weaviate集合已存在: AnalyDesignDocuments
2025-07-20 00:16:50 - AnalysisServiceManager - INFO - 初始化向量数据库: weaviate
2025-07-20 00:16:50 - sentence_transformers.SentenceTransformer - INFO - Use pytorch device_name: mps
2025-07-20 00:16:50 - sentence_transformers.SentenceTransformer - INFO - Load pretrained SentenceTransformer: BAAI/bge-large-zh
2025-07-20 00:16:59 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-20 00:17:00 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-20 00:17:00 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-20 00:17:00 - src.utils.weaviate_helper - INFO - 成功连接到 Weaviate: localhost:8080
2025-07-20 00:17:00 - AnalysisServiceManager - INFO - 分析服务管理器初始化完成
2025-07-20 00:17:00 - src.utils.enhanced_analyzer - INFO - 增强分析器初始化完成
2025-07-20 00:17:00 - werkzeug - WARNING -  * Debugger is active!
2025-07-20 00:17:00 - werkzeug - INFO -  * Debugger PIN: 686-644-562
2025-07-20 00:17:00 - src.apis.coder_agent_api - INFO - 开始处理文档: 链数中建一局_1752941814
2025-07-20 00:17:00 - src.apis.coder_agent_api - INFO - 文档长度: 4937 字符
2025-07-20 00:17:00 - src.apis.coder_agent_api - INFO - 使用LangGraph: True
2025-07-20 00:17:00 - src.apis.coder_agent_api - INFO - 代码输出路径: /Users/renyu/Documents/create_project
2025-07-20 00:17:00 - src.apis.coder_agent_api - INFO - 使用LangGraph工作流处理项目: 链数中建一局_1752941814
2025-07-20 00:17:00 - src.corder_integration.langgraph.workflow_orchestrator - INFO - 使用内存检查点
2025-07-20 00:17:00 - src.corder_integration.langgraph.workflow_orchestrator - INFO - 生成目标分支名称: 链数中建一局_1752941814 -> D_20250720_链数中建一局_1752941814
2025-07-20 00:17:00 - src.corder_integration.langgraph.workflow_orchestrator - INFO - 开始执行编码工作流: 链数中建一局_1752941814 -> /Users/renyu/Documents/create_project
2025-07-20 00:17:00 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 🚀 开始执行任务拆分: 链数中建一局_1752941814
2025-07-20 00:17:00 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📥 输入状态键: ['design_doc', 'project_name', 'identified_services', 'service_dependencies', 'task_execution_plan', 'parallel_tasks', 'git_repo_url', 'target_branch', 'project_paths', 'output_path', 'repo_initialized', 'generated_services', 'generated_apis', 'generated_sql', 'service_interconnections', 'unit_test_results', 'test_coverage', 'interface_compatibility', 'code_review_results', 'static_analysis_results', 'security_scan_results', 'commit_hashes', 'push_results', 'pr_urls', 'current_phase', 'completed_services', 'failed_services', 'retry_count', 'execution_errors']
2025-07-20 00:17:00 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📄 设计文档长度: 4936
2025-07-20 00:17:00 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 🔄 当前阶段: task_splitting
2025-07-20 00:17:00 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📁 计算的基础项目路径: /Users/renyu/Documents/create_project/链数中建一局_1752941814
2025-07-20 00:17:00 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-20 00:17:00 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 模板 task_splitting/design_analysis_prompts.jinja2 加载成功
2025-07-20 00:17:00 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 模板 task_splitting/service_boundary_prompts.jinja2 加载成功
2025-07-20 00:17:00 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 模板 task_splitting/dependency_analysis_prompts.jinja2 加载成功
2025-07-20 00:17:00 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 模板 task_splitting/task_scheduling_prompts.jinja2 加载成功
2025-07-20 00:17:00 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 模板 task_splitting/generate_sqlite_tasks_prompts.jinja2 加载成功
2025-07-20 00:17:00 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 任务数据库初始化完成
2025-07-20 00:17:00 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 删除WAL文件: coding_agent_workflow.db-wal
2025-07-20 00:17:00 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 删除WAL文件: coding_agent_workflow.db-shm
2025-07-20 00:17:00 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 数据库WAL检查点和优化完成
2025-07-20 00:17:00 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 数据库表结构重置完成
2025-07-20 00:17:00 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📋 步骤1：开始设计文档分析...
2025-07-20 00:17:00 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📄 文档分割完成：4936 字符 -> 3 个窗口
2025-07-20 00:17:00 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📄 设计文档分割成 3 个窗口
2025-07-20 00:17:00 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 分析窗口 1/3 (字符: 0-1926)
2025-07-20 00:17:16 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-20 00:17:16 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 窗口 1 分析完成
2025-07-20 00:17:16 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 分析窗口 2/3 (字符: 1626-3553)
2025-07-20 00:17:28 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-20 00:17:28 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 窗口 2 分析完成
2025-07-20 00:17:28 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 分析窗口 3/3 (字符: 3253-4936)
2025-07-20 00:17:41 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-20 00:17:41 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 窗口 3 分析完成
2025-07-20 00:17:41 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 🔄 合并 3 个设计分析分析结果...
2025-07-20 00:17:41 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📊 合并后的设计分析结果: {'architecture_style': '微服务', 'technology_stack': ['RESTful API', 'MyBatis Plus 3.5.x', 'Redis 6.0', 'Redis', 'MySQL', 'Nacos', 'PageHelper', 'Excel导出工具', 'pageHelper', 'RabbitMQ 3.8', 'Spring Boot 2.7.x', 'MySQL 8.0', 'Spring Boot', 'Spring Cloud 2021.x'], 'functional_modules': [{'name': '用户服务', 'description': '处理用户管理、权限控制和角色管理', 'responsibilities': ['组织单元管理', '用户认证与授权']}, {'name': '确权开立服务', 'description': '处理业务数据的推送和校验逻辑', 'responsibilities': ['业务数据校验', '额度管理']}, {'name': '多组织单元管理', 'description': '管理企业多组织单元信息', 'responsibilities': ['组织单元创建与维护', '组织单元状态管理']}, {'name': '确权开立服务', 'description': '处理确权开立和额度管理', 'responsibilities': ['确权开立处理', '额度分配与管理']}, {'name': '额度管理模块', 'description': '处理组织单元额度的查询和导出功能', 'responsibilities': ['额度信息查询', '额度信息导出']}, {'name': '组织单元信息获取模块', 'description': '从用户服务获取组织单元详细信息', 'responsibilities': ['调用外部接口获取组织单元信息']}], 'system_components': ['zqyl-user-center-service', 'crcl-open', 'Redis', 'MySQL', '多组织单元表(t_cust_multiorg_unit)', '确权开立API服务'], 'data_flow': ['用户服务 → 确权开立服务 → 额度管理功能', '企业信息 -> 多组织单元管理 -> 确权开立服务', 'Excel文件生成 -> 本地存储 -> 返回文件下载链接', '客户端请求 -> crcl-open服务 -> 调用zqyl-user-center-service获取组织单元信息 -> 查询数据库 -> 处理数据 -> 返回结果/生成Excel文件', '额度查询请求 -> 确权开立服务 -> 返回额度信息', '核心企业系统 → 确权开立服务 → 平台数据存储'], 'integration_points': ['用户服务与确权开立服务的组织单元信息交互', 'zqyl-user-center-service的/queryCompanyUnitList接口', '多组织单元管理与确权开立服务间的数据交互', 'crcl-open服务的/lsLimit/listUnitLimitByCompanyIdExport接口', '核心企业系统与确权开立服务的业务数据推送接口', '前端系统与确权开立API的交互'], 'summary': '该设计采用微服务架构，技术栈成熟且完整。主要包含用户服务和确权开立服务两个核心模块，分别处理权限管理和业务逻辑。架构设计合理考虑了核心企业数据重推的需求，通过调整接口校验逻辑实现功能扩展。数据库使用MySQL和Redis，确保数据持久化和缓存性能。整体架构松耦合、可扩展性强。 该设计采用微服务架构，包含多组织单元管理和确权开立两大核心模块。使用Spring Boot和MySQL技术栈，通过REST'}
2025-07-20 00:17:41 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 设计概要: 该设计采用微服务架构，技术栈成熟且完整。主要包含用户服务和确权开立服务两个核心模块，分别处理权限管理和业务逻辑。架构设计合理考虑了核心企业数据重推的需求，通过调整接口校验逻辑实现功能扩展。数据库使用MySQL和Redis，确保数据持久化和缓存性能。整体架构松耦合、可扩展性强。 该设计采用微服务架构，包含多组织单元管理和确权开立两大核心模块。使用Spring Boot和MySQL技术栈，通过REST
2025-07-20 00:17:41 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 🏗️ 步骤2：开始技术架构分析...
2025-07-20 00:17:41 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 技术架构概要: 该设计采用微服务架构，技术栈成熟且完整。主要包含用户服务和确权开立服务两个核心模块，分别处理权限管理和业务逻辑。架构设计合理考虑了核心企业数据重推的需求，通过调整接口校验逻辑实现功能扩展。数据库使用MySQL和Redis，确保数据持久化和缓存性能。整体架构松耦合、可扩展性强。 该设计采用微服务架构，包含多组织单元管理和确权开立两大核心模块。使用Spring Boot和MySQL技术栈，通过REST
2025-07-20 00:17:41 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 🔍 步骤3：开始服务边界识别...
2025-07-20 00:17:41 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 输入 - 设计概要: 该设计采用微服务架构，技术栈成熟且完整。主要包含用户服务和确权开立服务两个核心模块，分别处理权限管理和业务逻辑。架构设计合理考虑了核心企业数据重推的需求，通过调整接口校验逻辑实现功能扩展。数据库使用MySQL和Redis，确保数据持久化和缓存性能。整体架构松耦合、可扩展性强。 该设计采用微服务架构，包含多组织单元管理和确权开立两大核心模块。使用Spring Boot和MySQL技术栈，通过REST
2025-07-20 00:17:41 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 输入 - 架构概要: 该设计采用微服务架构，技术栈成熟且完整。主要包含用户服务和确权开立服务两个核心模块，分别处理权限管理和业务逻辑。架构设计合理考虑了核心企业数据重推的需求，通过调整接口校验逻辑实现功能扩展。数据库使用MySQL和Redis，确保数据持久化和缓存性能。整体架构松耦合、可扩展性强。 该设计采用微服务架构，包含多组织单元管理和确权开立两大核心模块。使用Spring Boot和MySQL技术栈，通过REST
2025-07-20 00:17:41 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 服务拆分提示词长度: 2333
2025-07-20 00:17:56 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-20 00:17:56 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 服务拆分LLM响应长度: 1004
2025-07-20 00:17:56 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📊 服务拆分解析结果: {'identified_services': [{'name': '用户服务', 'description': '处理权限管理和多组织单元管理', 'git_repository': '未在设计文档中明确', 'responsibilities': ['权限管理', '多组织单元管理'], 'api_endpoints': [], 'database_tables': [], 'external_service_calls': [], 'config_requirements': ['MySQL数据库连接', 'Redis缓存配置']}, {'name': '确权开立服务', 'description': '处理业务逻辑和核心企业数据重推', 'git_repository': '未在设计文档中明确', 'responsibilities': ['业务逻辑处理', '核心企业数据重推'], 'api_endpoints': [], 'database_tables': [], 'external_service_calls': [], 'config_requirements': ['MySQL数据库连接', 'Redis缓存配置']}], 'service_call_relationships': {'dependencies': []}, 'summary': '基于设计文档的服务分析概要，确认涉及2个服务（用户服务和确权开立服务），未明确新增接口数量，未明确数据库表数量'}
2025-07-20 00:17:56 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 🎯 识别的服务列表: [{'name': '用户服务', 'description': '处理权限管理和多组织单元管理', 'git_repository': '未在设计文档中明确', 'responsibilities': ['权限管理', '多组织单元管理'], 'api_endpoints': [], 'database_tables': [], 'external_service_calls': [], 'config_requirements': ['MySQL数据库连接', 'Redis缓存配置']}, {'name': '确权开立服务', 'description': '处理业务逻辑和核心企业数据重推', 'git_repository': '未在设计文档中明确', 'responsibilities': ['业务逻辑处理', '核心企业数据重推'], 'api_endpoints': [], 'database_tables': [], 'external_service_calls': [], 'config_requirements': ['MySQL数据库连接', 'Redis缓存配置']}]
2025-07-20 00:17:56 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 🔢 识别的服务数量: 2
2025-07-20 00:17:56 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 服务拆分概要: 基于设计文档的服务分析概要，确认涉及2个服务（用户服务和确权开立服务），未明确新增接口数量，未明确数据库表数量
2025-07-20 00:17:56 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 🌐 步骤4：开始依赖分析...
2025-07-20 00:17:56 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 依赖分析提示词长度: 2348
2025-07-20 00:18:19 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-20 00:18:19 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 依赖分析LLM响应长度: 2136
2025-07-20 00:18:19 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📊 依赖分析解析结果: {'service_dependencies': {'用户服务': {'database_dependencies': [{'database_type': 'MySQL', 'config_info': '存储用户权限和组织单元数据', 'tables_needed': ['users', 'roles', 'organizations'], 'description': '用于权限管理和组织单元管理'}, {'database_type': 'Redis', 'config_info': '缓存用户权限数据', 'tables_needed': [], 'description': '提高权限验证性能'}], 'api_call_dependencies': [], 'provides_apis': [{'endpoint': '/api/auth/verify', 'used_by': ['确权开立服务']}, {'endpoint': '/api/organizations', 'used_by': ['确权开立服务']}]}, '确权开立服务': {'database_dependencies': [{'database_type': 'MySQL', 'config_info': '存储业务数据', 'tables_needed': ['rights', 'transactions'], 'description': '业务数据持久化'}], 'api_call_dependencies': [{'target_service': '用户服务', 'target_endpoint': '/api/auth/verify', 'call_purpose': '权限验证', 'dependency_type': '强依赖'}, {'target_service': '用户服务', 'target_endpoint': '/api/organizations', 'call_purpose': '获取组织单元信息', 'dependency_type': '强依赖'}], 'provides_apis': []}}, 'development_order': [{'phase': 1, 'services': ['用户服务'], 'tasks': ['创建users,roles,organizations表', '实现/auth/verify和/organizations接口', '配置Redis缓存'], 'reason': '确权开立服务强依赖用户服务的接口'}, {'phase': 2, 'services': ['确权开立服务'], 'tasks': ['创建rights,transactions表', '实现业务逻辑并调用用户服务接口'], 'reason': '依赖用户服务的权限验证和组织信息接口'}], 'critical_path': ['用户服务数据库创建', '用户服务接口实现', '确权开立服务数据库创建', '确权开立服务业务实现'], 'parallel_development': [{'phase': '阶段1', 'parallel_services': ['用户服务的MySQL和Redis配置'], 'reason': '数据库配置可以并行进行'}], 'summary': '分析了2个服务的依赖关系，建议分2个阶段开发，关键路径为用户服务→确权开立服务'}
2025-07-20 00:18:19 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 依赖分析概要: 分析了2个服务的依赖关系，建议分2个阶段开发，关键路径为用户服务→确权开立服务
2025-07-20 00:18:19 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📅 步骤5：开始制定执行计划...
2025-07-20 00:18:19 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 任务调度提示词长度: 6237
2025-07-20 00:30:19 - openai._base_client - INFO - Retrying request to /chat/completions in 0.424770 seconds
2025-07-20 00:31:38 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-20 00:31:38 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 任务调度LLM响应长度: 7807
2025-07-20 00:31:38 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📊 执行计划解析结果: {'execution_phases': [{'phase_name': '基础设施搭建阶段', 'phase_order': 1, 'description': '搭建基础数据库、配置服务和监控体系', 'estimated_duration': '2天', 'services_involved': ['全部服务'], 'task_categories': [{'category': 'database', 'description': '数据库初始化', 'tasks': [{'task_name': '创建MySQL主库实例', 'service': '基础设施', 'deliverable': 'MySQL 8.0实例', 'estimated_hours': 4, 'prerequisites': [], 'assignee_role': 'DBA'}, {'task_name': '设计用户服务表结构', 'service': '用户服务', 'deliverable': 'users/roles表DDL', 'estimated_hours': 6, 'prerequisites': ['MySQL实例就绪'], 'assignee_role': '后端开发'}, {'task_name': '设计确权服务表结构', 'service': '确权开立服务', 'deliverable': 'entitlements表DDL', 'estimated_hours': 6, 'prerequisites': ['MySQL实例就绪'], 'assignee_role': '后端开发'}]}, {'category': 'config', 'description': '环境配置', 'tasks': [{'task_name': '搭建Nacos配置中心', 'service': '基础设施', 'deliverable': 'Nacos集群', 'estimated_hours': 4, 'prerequisites': [], 'assignee_role': 'DevOps'}, {'task_name': '配置服务监控(Prometheus+Grafana)', 'service': '基础设施', 'deliverable': '监控仪表板', 'estimated_hours': 4, 'prerequisites': [], 'assignee_role': 'DevOps'}]}], 'success_criteria': ['MySQL主从复制验证通过', '配置中心可正常读写配置', '基础监控指标可采集'], 'parallel_execution': True}, {'phase_name': '核心服务开发阶段', 'phase_order': 2, 'description': '按依赖顺序开发用户服务和确权服务', 'estimated_duration': '6天', 'services_involved': ['用户服务', '确权开立服务'], 'task_categories': [{'category': 'api', 'description': '用户服务API开发', 'tasks': [{'task_name': '实现用户认证接口', 'service': '用户服务', 'deliverable': 'POST /auth/login', 'estimated_hours': 8, 'prerequisites': ['users表创建'], 'assignee_role': '后端开发'}, {'task_name': '实现权限校验接口', 'service': '用户服务', 'deliverable': 'GET /auth/verify', 'estimated_hours': 6, 'prerequisites': ['users表创建'], 'assignee_role': '后端开发'}]}, {'category': 'service', 'description': '确权服务业务实现', 'tasks': [{'task_name': '确权业务主流程开发', 'service': '确权开立服务', 'deliverable': 'EntitlementServiceImpl', 'estimated_hours': 12, 'prerequisites': ['用户服务API就绪'], 'assignee_role': '后端开发'}, {'task_name': '企业数据重推逻辑', 'service': '确权开立服务', 'deliverable': 'DataRepushHandler', 'estimated_hours': 8, 'prerequisites': ['主流程开发'], 'assignee_role': '后端开发'}]}], 'success_criteria': ['用户服务接口测试覆盖率≥80%', '确权业务流程测试通过', '核心企业场景验证完成'], 'parallel_execution': False}, {'phase_name': '服务集成阶段', 'phase_order': 3, 'description': '服务联调与集成测试', 'estimated_duration': '3天', 'services_involved': ['用户服务', '确权开立服务'], 'task_categories': [{'category': 'integration', 'description': '服务间集成', 'tasks': [{'task_name': '配置服务间Feign调用', 'service': '基础设施', 'deliverable': 'Feign Client配置', 'estimated_hours': 4, 'prerequisites': ['核心服务开发'], 'assignee_role': '后端开发'}]}, {'category': 'test', 'description': '集成测试', 'tasks': [{'task_name': '用户-确权链路测试', 'service': '集成测试', 'deliverable': '集成测试报告', 'estimated_hours': 8, 'prerequisites': ['Feign配置完成'], 'assignee_role': '测试工程师'}]}], 'success_criteria': ['跨服务调用成功率100%', '数据最终一致性验证通过', '核心链路RT<500ms'], 'parallel_execution': False}, {'phase_name': '部署上线阶段', 'phase_order': 4, 'description': '生产环境部署与验证', 'estimated_duration': '2天', 'services_involved': ['全部服务'], 'task_categories': [{'category': 'deployment', 'description': '发布管理', 'tasks': [{'task_name': '构建Docker镜像', 'service': '基础设施', 'deliverable': '镜像仓库Tag', 'estimated_hours': 4, 'prerequisites': ['集成测试通过'], 'assignee_role': 'DevOps'}, {'task_name': '蓝绿部署用户服务', 'service': '用户服务', 'deliverable': '生产环境v1.0', 'estimated_hours': 4, 'prerequisites': ['Docker镜像就绪'], 'assignee_role': 'DevOps'}]}, {'category': 'verification', 'description': '生产验证', 'tasks': [{'task_name': '生产流量灰度测试', 'service': '运维', 'deliverable': '生产验证报告', 'estimated_hours': 8, 'prerequisites': ['服务部署完成'], 'assignee_role': '测试工程师'}]}], 'success_criteria': ['生产环境监控无异常告警', '核心业务成功率≥99.9%', '系统资源利用率在安全阈值内'], 'parallel_execution': False}], 'parallel_groups': [{'group_name': '数据库设计并行组', 'group_order': 1, 'services': ['用户服务', '确权开立服务'], 'estimated_duration': '1天', 'description': '两个服务的数据库设计可并行', 'coordination_points': ['统一ID生成策略', '约定事务边界']}], 'execution_order': ['基础设施搭建', '用户服务开发', '确权服务开发', '服务集成联调', '生产部署'], 'resource_allocation': {'backend_developers': 2, 'test_engineers': 1, 'devops_engineers': 1, 'dba': 1, 'total_estimated_time': '13天'}, 'risk_management': {'critical_dependencies': [{'task': '用户服务API开发', 'risk': '接口变更影响确权服务', 'mitigation': '先定义API契约，采用契约测试'}], 'buffer_time': '15%', 'contingency_plans': ['准备Mock服务应对依赖延迟', '关键模块双人开发']}, 'summary': '分4个阶段完成2个微服务开发，关键路径13天，重点保障用户服务先行交付'}
2025-07-20 00:31:38 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 💾 步骤6：开始生成SQLite任务...
2025-07-20 00:31:38 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📄 执行计划较长(7479字符)，使用滑动窗口处理
2025-07-20 00:31:38 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📄 文档分割完成：7479 字符 -> 5 个窗口
2025-07-20 00:31:38 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 处理计划窗口 1/5
2025-07-20 00:33:40 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-20 00:33:40 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 窗口 1 任务生成完成
2025-07-20 00:33:40 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 处理计划窗口 2/5
2025-07-20 00:35:58 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-20 00:35:58 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 窗口 2 任务生成完成
2025-07-20 00:35:58 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 处理计划窗口 3/5
2025-07-20 00:47:00 - openai._base_client - INFO - Retrying request to /chat/completions in 0.465625 seconds
2025-07-20 00:49:02 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-20 00:49:02 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 窗口 3 任务生成完成
2025-07-20 00:49:02 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 处理计划窗口 4/5
2025-07-20 00:49:38 - openai._base_client - INFO - Retrying request to /chat/completions in 0.446635 seconds
2025-07-20 00:51:53 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-20 00:51:53 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 窗口 4 任务生成完成
2025-07-20 00:51:53 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 处理计划窗口 5/5
2025-07-20 00:54:13 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-20 00:54:13 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 窗口 5 任务生成完成
2025-07-20 00:54:13 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 🔄 合并 5 个任务生成分析结果...
2025-07-20 00:54:13 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📊 任务生成解析结果: {'tasks': [{'task_id': 'task_001', 'service_name': '系统', 'task_type': 'git_extraction', 'priority': 1, 'dependencies': [], 'estimated_duration': '5分钟', 'description': '从设计文档提取GitLab仓库地址', 'implementation_details': '解析设计文档，提取用户服务 http://localhost:30000/ls/zqyl-user-center-service.git 和确权开立服务 http://localhost:30000/ls/crcl-open.git 仓库地址', 'deliverables': ['GitLab仓库地址清单', '仓库访问验证报告'], 'completion_criteria': '成功提取并验证两个GitLab仓库地址可访问性', 'parameters': {'repositories': ['zqyl-user-center-service', 'crcl-open']}}, {'task_id': 'task_002', 'service_name': '用户服务', 'task_type': 'git_clone', 'priority': 2, 'dependencies': ['task_001'], 'estimated_duration': '10分钟', 'description': '下载用户服务代码到/Users/renyu/Documents/create_project/链数中建一局_1752941814/zqyl-user-center-service', 'implementation_details': '使用git clone命令下载用户服务代码到指定目录，确保项目结构完整可编译', 'deliverables': ['用户服务源码目录'], 'completion_criteria': '代码下载完成，项目目录存在且包含pom.xml文件', 'parameters': {'git_url': 'http://localhost:30000/ls/zqyl-user-center-service.git', 'local_path': '/Users/renyu/Documents/create_project/链数中建一局_1752941814/zqyl-user-center-service'}}, {'task_id': 'task_003', 'service_name': '确权开立服务', 'task_type': 'git_clone', 'priority': 2, 'dependencies': ['task_001'], 'estimated_duration': '10分钟', 'description': '下载确权开立服务代码到/Users/renyu/Documents/create_project/链数中建一局_1752941814/crcl-open', 'implementation_details': '使用git clone命令下载确权开立服务代码到指定目录，确保项目结构完整可编译', 'deliverables': ['确权开立服务源码目录'], 'completion_criteria': '代码下载完成，项目目录存在且包含pom.xml文件', 'parameters': {'git_url': 'http://localhost:30000/ls/crcl-open.git', 'local_path': '/Users/renyu/Documents/create_project/链数中建一局_1752941814/crcl-open'}}, {'task_id': 'task_004', 'service_name': '用户服务', 'task_type': 'code_analysis', 'priority': 3, 'dependencies': ['task_002'], 'estimated_duration': '20分钟', 'description': '分析用户服务代码结构，确定MultiorgManageController添加位置', 'implementation_details': '分析项目package结构和controller层，找到或创建MultiorgManageController类的最佳位置', 'deliverables': ['代码结构从Controller层开始到数据获取的完整路径'], 'completion_criteria': '确定MultiorgManageController的包路径和文件位置，明确依赖的Service层结构', 'parameters': {'project_path': '/Users/renyu/Documents/create_project/链数中建一局_1752941814/zqyl-user-center-service', 'target_controller': 'MultiorgManageController', 'target_api': '/general/multiorgManage/queryCompanyUnitList'}}, {'task_id': 'task_005', 'service_name': '确权开立服务', 'task_type': 'code_analysis', 'priority': 3, 'dependencies': ['task_003'], 'estimated_duration': '20分钟', 'description': '分析确权开立服务代码结构，确定LsLimitController添加位置', 'implementation_details': '分析项目package结构和controller层，找到或创建LsLimitController类的最佳位置，支持两个接口开发', 'deliverables': ['代码结构从Controller层开始到数据获取的完整路径', 'Feign客户端配置方案'], 'completion_criteria': '确定LsLimitController的包路径和文件位置，明确服务间调用的Feign配置', 'parameters': {'project_path': '/Users/renyu/Documents/create_project/链数中建一局_1752941814/crcl-open', 'target_controller': 'LsLimitController', 'target_apis': ['/crcl-open-api/lsLimit/listUnitLimitByCompanyId', '/crcl-open-api/lsLimit/listUnitLimitByCompanyIdExport']}}, {'task_id': 'task_006', 'service_name': '用户服务', 'task_type': 'config', 'priority': 4, 'dependencies': ['task_004'], 'estimated_duration': '15分钟', 'description': '配置用户服务数据库连接：jdbc:mysql://localhost:6446/dbwebappdb', 'implementation_details': '修改application.yml文件，配置数据库连接信息包括URL、用户名密码和连接池设置', 'deliverables': ['数据库配置文件', '连接测试报告'], 'completion_criteria': 'application.yml文件已更新，数据库连接配置正确且可连通', 'parameters': {'config_file': '/Users/renyu/Documents/create_project/链数中建一局_1752941814/zqyl-user-center-service/src/main/resources/application.yml', 'database_url': 'jdbc:mysql://localhost:6446/dbwebappdb?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC&characterEncoding=utf8&useUnicode=true', 'username': 'dbwebapp', 'password': 'dbwebapp'}}, {'task_id': 'task_007', 'service_name': '用户服务', 'task_type': 'database', 'priority': 5, 'dependencies': ['task_006'], 'estimated_duration': '15分钟', 'description': '创建t_cust_multiorg_unit表，包含id,company_id,unit_code,unit_name等字段', 'implementation_details': '编写建表SQL脚本，定义主键、索引和字段约束，创建对应的Entity和Mapper文件', 'deliverables': ['建表SQL脚本', 'Entity实体类', 'Mapper接口文件'], 'completion_criteria': '表结构创建成功，Entity和Mapper文件可正常编译，支持基本CRUD操作', 'parameters': {'table_name': 't_cust_multiorg_unit', 'sql_location': 'src/main/resources/sql/t_cust_multiorg_unit.sql'}}, {'task_id': 'task_008', 'service_name': '用户服务', 'task_type': 'api', 'priority': 6, 'dependencies': ['task_007'], 'estimated_duration': '60分钟', 'description': '实现GET /general/multiorgManage/queryCompanyUnitList接口', 'implementation_details': '在MultiorgManageController中实现查询接口，支持条件查询和分页，返回规定的字段格式', 'deliverables': ['MultiorgManageController类', 'Service业务逻辑层', '接口文档'], 'completion_criteria': '接口可正常访问，返回数据格式符合规范，支持条件查询和分页功能', 'parameters': {'project_path': '/Users/renyu/Documents/create_project/链数中建一局_1752941814/zqyl-user-center-service', 'api_path': '/general/multiorgManage/queryCompanyUnitList', 'http_method': 'GET', 'content_type': 'application/json', 'request_params': {'unitCode': '组织单元编码(可选)', 'openStatus': '开通状态(可选)', 'unitList': '组织单元列表(可选)'}, 'response_params': {'unitId': '组织单元ID', 'unitTypeDicType': '组织单元类型字典类型', 'unitTypeId': '组织单元类型ID', 'openStatus': '开通状态', 'unitCode': '组织单元编码', 'unitName': '组织单元名称'}, 'business_logic': '根据查询条件查询组织单元信息，支持按编码、状态等条件筛选', 'data_source': 't_cust_multiorg_unit表', 'validation_rules': {'unitCode': '长度不超过50字符', 'openStatus': '取值范围0-1'}}}, {'task_id': 'task_009', 'service_name': '确权开立服务', 'task_type': 'api', 'priority': 7, 'dependencies': ['task_008'], 'estimated_duration': '90分钟', 'description': '实现GET /crcl-open-api/lsLimit/listUnitLimitByCompanyId接口，调用用户服务', 'implementation_details': '在LsLimitController中实现额度查询接口，配置Feign客户端调用用户服务接口获取组织单元信息', 'deliverables': ['LsLimitController类', 'Feign客户端配置', '业务逻辑层'], 'completion_criteria': '接口可正常访问，能成功调用用户服务，返回额度数据格式正确', 'parameters': {'project_path': '/Users/renyu/Documents/create_project/链数中建一局_1752941814/crcl-open', 'api_path': '/crcl-open-api/lsLimit/listUnitLimitByCompanyId', 'http_method': 'GET', 'content_type': 'application/json', 'request_params': {'gwCompanyId': '公司ID(必填)', 'unitName': '组织单元名称(可选)', 'limitSource': '额度来源(可选)', 'bizType': '业务类型(必填)', 'page': '页码(可选,默认1)', 'pageRow': '每页行数(可选,默认10)'}, 'response_params': {'totalLimitAmt': '总额度金额', 'usedLimitAmt': '已用额度金额', 'usableLimitAmt': '可用额度金额', 'unitLimitListDetail': '单元额度详情列表'}, 'business_logic': '根据公司ID和筛选条件查询组织单元额度信息，调用用户服务获取组织单元基础信息', 'data_source': '本地额度表 + 用户服务接口', 'external_call': '/general/multiorgManage/queryCompanyUnitList', 'validation_rules': {'gwCompanyId': '必填，数值类型', 'bizType': '必填，业务类型枚举值', 'page': '正整数，默认1', 'pageRow': '正整数，范围1-100'}}}, {'task_id': 'task_010', 'service_name': '确权开立服务', 'task_type': 'api', 'priority': 8, 'dependencies': ['task_009'], 'estimated_duration': '45分钟', 'description': '实现GET /crcl-open-api/lsLimit/listUnitLimitByCompanyIdExport导出接口', 'implementation_details': '在LsLimitController中实现Excel导出接口，复用listUnitLimitByCompanyId的数据逻辑', 'deliverables': ['导出接口方法', 'Excel工具类', '导出模板文件'], 'completion_criteria': '接口可正常访问，能成功导出Excel文件，表头和数据格式正确', 'parameters': {'project_path': '/Users/renyu/Documents/create_project/链数中建一局_1752941814/crcl-open', 'api_path': '/crcl-open-api/lsLimit/listUnitLimitByCompanyIdExport', 'http_method': 'GET', 'content_type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'request_params': {'gwCompanyId': '公司ID(必填)', 'unitName': '组织单元名称(可选)', 'limitSource': '额度来源(可选)', 'bizType': '业务类型(必填)'}, 'response_params': {'file': 'Excel文件流', 'filename': '导出文件名', 'contentType': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'}, 'business_logic': '复用listUnitLimitByCompanyId接口的查询逻辑，将结果导出为Excel格式', 'data_source': '调用listUnitLimitByCompanyId接口获取数据', 'export_format': 'xlsx', 'export_headers': ['组织单元名称', '额度名称', '额度类型', '已分配额度', '已用额度', '可用额度'], 'validation_rules': {'gwCompanyId': '必填，数值类型', 'bizType': '必填，业务类型枚举值'}}}, {'task_id': 'task_011', 'service_name': '系统', 'task_type': 'integration_test', 'priority': 9, 'dependencies': ['task_008', 'task_009', 'task_010'], 'estimated_duration': '30分钟', 'description': '测试确权开立服务调用用户服务接口的完整流程', 'implementation_details': '编写集成测试用例，验证服务间调用正确性和数据完整性', 'deliverables': ['集成测试用例', '测试数据脚本', '测试报告'], 'completion_criteria': '所有测试用例通过，接口调用链路正常，数据返回格式正确', 'parameters': {'test_scenarios': ['组织单元额度查询测试'], 'test_data': {'gwCompanyId': 1, 'unitName': '测试单元', 'bizType': 80}}}, {'task_id': 'task_012', 'service_name': '系统', 'task_type': 'deployment', 'priority': 10, 'dependencies': ['task_011'], 'estimated_duration': '20分钟', 'description': '提交代码到GitLab仓库，commit message: feat: 新增组织单元额度管理功能', 'implementation_details': '执行git add、git commit和git push命令，提交所有新增和修改的代码文件', 'deliverables': ['Git提交记录', '代码合并报告', '部署文档'], 'completion_criteria': '代码成功提交到GitLab仓库，commit信息清晰，无冲突', 'parameters': {'repositories': [{'path': '/Users/renyu/Documents/create_project/链数中建一局_1752941814/zqyl-user-center-service', 'changes': '新增组织单元查询接口'}, {'path': '/Users/renyu/Documents/create_project/链数中建一局_1752941814/crcl-open', 'changes': '新增组织单元额度列表和导出接口'}]}}], 'total_tasks': 12, 'summary': '生成12个任务：GitLab代码下载->结构分析->环境配置->接口开发->测试部署。严格使用设计文档中的真实接口路径和参数，确保先开发用户服务接口，再开发依赖它的确权开立服务接口。 生成12个任务：GitLab代码下载->结构分析->环境配置->接口开发->测试部署。严格使用设计文档中的真实接口路径和参数，确保先开发用户服务接口，再开发依赖它的确权开立服务接口。 生成12个任务：GitLab代码'}
2025-07-20 00:54:13 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 🎯 生成的任务列表: [{'task_id': 'task_001', 'service_name': '系统', 'task_type': 'git_extraction', 'priority': 1, 'dependencies': [], 'estimated_duration': '5分钟', 'description': '从设计文档提取GitLab仓库地址', 'implementation_details': '解析设计文档，提取用户服务 http://localhost:30000/ls/zqyl-user-center-service.git 和确权开立服务 http://localhost:30000/ls/crcl-open.git 仓库地址', 'deliverables': ['GitLab仓库地址清单', '仓库访问验证报告'], 'completion_criteria': '成功提取并验证两个GitLab仓库地址可访问性', 'parameters': {'repositories': ['zqyl-user-center-service', 'crcl-open']}}, {'task_id': 'task_002', 'service_name': '用户服务', 'task_type': 'git_clone', 'priority': 2, 'dependencies': ['task_001'], 'estimated_duration': '10分钟', 'description': '下载用户服务代码到/Users/renyu/Documents/create_project/链数中建一局_1752941814/zqyl-user-center-service', 'implementation_details': '使用git clone命令下载用户服务代码到指定目录，确保项目结构完整可编译', 'deliverables': ['用户服务源码目录'], 'completion_criteria': '代码下载完成，项目目录存在且包含pom.xml文件', 'parameters': {'git_url': 'http://localhost:30000/ls/zqyl-user-center-service.git', 'local_path': '/Users/renyu/Documents/create_project/链数中建一局_1752941814/zqyl-user-center-service'}}, {'task_id': 'task_003', 'service_name': '确权开立服务', 'task_type': 'git_clone', 'priority': 2, 'dependencies': ['task_001'], 'estimated_duration': '10分钟', 'description': '下载确权开立服务代码到/Users/renyu/Documents/create_project/链数中建一局_1752941814/crcl-open', 'implementation_details': '使用git clone命令下载确权开立服务代码到指定目录，确保项目结构完整可编译', 'deliverables': ['确权开立服务源码目录'], 'completion_criteria': '代码下载完成，项目目录存在且包含pom.xml文件', 'parameters': {'git_url': 'http://localhost:30000/ls/crcl-open.git', 'local_path': '/Users/renyu/Documents/create_project/链数中建一局_1752941814/crcl-open'}}, {'task_id': 'task_004', 'service_name': '用户服务', 'task_type': 'code_analysis', 'priority': 3, 'dependencies': ['task_002'], 'estimated_duration': '20分钟', 'description': '分析用户服务代码结构，确定MultiorgManageController添加位置', 'implementation_details': '分析项目package结构和controller层，找到或创建MultiorgManageController类的最佳位置', 'deliverables': ['代码结构从Controller层开始到数据获取的完整路径'], 'completion_criteria': '确定MultiorgManageController的包路径和文件位置，明确依赖的Service层结构', 'parameters': {'project_path': '/Users/renyu/Documents/create_project/链数中建一局_1752941814/zqyl-user-center-service', 'target_controller': 'MultiorgManageController', 'target_api': '/general/multiorgManage/queryCompanyUnitList'}}, {'task_id': 'task_005', 'service_name': '确权开立服务', 'task_type': 'code_analysis', 'priority': 3, 'dependencies': ['task_003'], 'estimated_duration': '20分钟', 'description': '分析确权开立服务代码结构，确定LsLimitController添加位置', 'implementation_details': '分析项目package结构和controller层，找到或创建LsLimitController类的最佳位置，支持两个接口开发', 'deliverables': ['代码结构从Controller层开始到数据获取的完整路径', 'Feign客户端配置方案'], 'completion_criteria': '确定LsLimitController的包路径和文件位置，明确服务间调用的Feign配置', 'parameters': {'project_path': '/Users/renyu/Documents/create_project/链数中建一局_1752941814/crcl-open', 'target_controller': 'LsLimitController', 'target_apis': ['/crcl-open-api/lsLimit/listUnitLimitByCompanyId', '/crcl-open-api/lsLimit/listUnitLimitByCompanyIdExport']}}, {'task_id': 'task_006', 'service_name': '用户服务', 'task_type': 'config', 'priority': 4, 'dependencies': ['task_004'], 'estimated_duration': '15分钟', 'description': '配置用户服务数据库连接：jdbc:mysql://localhost:6446/dbwebappdb', 'implementation_details': '修改application.yml文件，配置数据库连接信息包括URL、用户名密码和连接池设置', 'deliverables': ['数据库配置文件', '连接测试报告'], 'completion_criteria': 'application.yml文件已更新，数据库连接配置正确且可连通', 'parameters': {'config_file': '/Users/renyu/Documents/create_project/链数中建一局_1752941814/zqyl-user-center-service/src/main/resources/application.yml', 'database_url': 'jdbc:mysql://localhost:6446/dbwebappdb?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC&characterEncoding=utf8&useUnicode=true', 'username': 'dbwebapp', 'password': 'dbwebapp'}}, {'task_id': 'task_007', 'service_name': '用户服务', 'task_type': 'database', 'priority': 5, 'dependencies': ['task_006'], 'estimated_duration': '15分钟', 'description': '创建t_cust_multiorg_unit表，包含id,company_id,unit_code,unit_name等字段', 'implementation_details': '编写建表SQL脚本，定义主键、索引和字段约束，创建对应的Entity和Mapper文件', 'deliverables': ['建表SQL脚本', 'Entity实体类', 'Mapper接口文件'], 'completion_criteria': '表结构创建成功，Entity和Mapper文件可正常编译，支持基本CRUD操作', 'parameters': {'table_name': 't_cust_multiorg_unit', 'sql_location': 'src/main/resources/sql/t_cust_multiorg_unit.sql'}}, {'task_id': 'task_008', 'service_name': '用户服务', 'task_type': 'api', 'priority': 6, 'dependencies': ['task_007'], 'estimated_duration': '60分钟', 'description': '实现GET /general/multiorgManage/queryCompanyUnitList接口', 'implementation_details': '在MultiorgManageController中实现查询接口，支持条件查询和分页，返回规定的字段格式', 'deliverables': ['MultiorgManageController类', 'Service业务逻辑层', '接口文档'], 'completion_criteria': '接口可正常访问，返回数据格式符合规范，支持条件查询和分页功能', 'parameters': {'project_path': '/Users/renyu/Documents/create_project/链数中建一局_1752941814/zqyl-user-center-service', 'api_path': '/general/multiorgManage/queryCompanyUnitList', 'http_method': 'GET', 'content_type': 'application/json', 'request_params': {'unitCode': '组织单元编码(可选)', 'openStatus': '开通状态(可选)', 'unitList': '组织单元列表(可选)'}, 'response_params': {'unitId': '组织单元ID', 'unitTypeDicType': '组织单元类型字典类型', 'unitTypeId': '组织单元类型ID', 'openStatus': '开通状态', 'unitCode': '组织单元编码', 'unitName': '组织单元名称'}, 'business_logic': '根据查询条件查询组织单元信息，支持按编码、状态等条件筛选', 'data_source': 't_cust_multiorg_unit表', 'validation_rules': {'unitCode': '长度不超过50字符', 'openStatus': '取值范围0-1'}}}, {'task_id': 'task_009', 'service_name': '确权开立服务', 'task_type': 'api', 'priority': 7, 'dependencies': ['task_008'], 'estimated_duration': '90分钟', 'description': '实现GET /crcl-open-api/lsLimit/listUnitLimitByCompanyId接口，调用用户服务', 'implementation_details': '在LsLimitController中实现额度查询接口，配置Feign客户端调用用户服务接口获取组织单元信息', 'deliverables': ['LsLimitController类', 'Feign客户端配置', '业务逻辑层'], 'completion_criteria': '接口可正常访问，能成功调用用户服务，返回额度数据格式正确', 'parameters': {'project_path': '/Users/renyu/Documents/create_project/链数中建一局_1752941814/crcl-open', 'api_path': '/crcl-open-api/lsLimit/listUnitLimitByCompanyId', 'http_method': 'GET', 'content_type': 'application/json', 'request_params': {'gwCompanyId': '公司ID(必填)', 'unitName': '组织单元名称(可选)', 'limitSource': '额度来源(可选)', 'bizType': '业务类型(必填)', 'page': '页码(可选,默认1)', 'pageRow': '每页行数(可选,默认10)'}, 'response_params': {'totalLimitAmt': '总额度金额', 'usedLimitAmt': '已用额度金额', 'usableLimitAmt': '可用额度金额', 'unitLimitListDetail': '单元额度详情列表'}, 'business_logic': '根据公司ID和筛选条件查询组织单元额度信息，调用用户服务获取组织单元基础信息', 'data_source': '本地额度表 + 用户服务接口', 'external_call': '/general/multiorgManage/queryCompanyUnitList', 'validation_rules': {'gwCompanyId': '必填，数值类型', 'bizType': '必填，业务类型枚举值', 'page': '正整数，默认1', 'pageRow': '正整数，范围1-100'}}}, {'task_id': 'task_010', 'service_name': '确权开立服务', 'task_type': 'api', 'priority': 8, 'dependencies': ['task_009'], 'estimated_duration': '45分钟', 'description': '实现GET /crcl-open-api/lsLimit/listUnitLimitByCompanyIdExport导出接口', 'implementation_details': '在LsLimitController中实现Excel导出接口，复用listUnitLimitByCompanyId的数据逻辑', 'deliverables': ['导出接口方法', 'Excel工具类', '导出模板文件'], 'completion_criteria': '接口可正常访问，能成功导出Excel文件，表头和数据格式正确', 'parameters': {'project_path': '/Users/renyu/Documents/create_project/链数中建一局_1752941814/crcl-open', 'api_path': '/crcl-open-api/lsLimit/listUnitLimitByCompanyIdExport', 'http_method': 'GET', 'content_type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'request_params': {'gwCompanyId': '公司ID(必填)', 'unitName': '组织单元名称(可选)', 'limitSource': '额度来源(可选)', 'bizType': '业务类型(必填)'}, 'response_params': {'file': 'Excel文件流', 'filename': '导出文件名', 'contentType': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'}, 'business_logic': '复用listUnitLimitByCompanyId接口的查询逻辑，将结果导出为Excel格式', 'data_source': '调用listUnitLimitByCompanyId接口获取数据', 'export_format': 'xlsx', 'export_headers': ['组织单元名称', '额度名称', '额度类型', '已分配额度', '已用额度', '可用额度'], 'validation_rules': {'gwCompanyId': '必填，数值类型', 'bizType': '必填，业务类型枚举值'}}}, {'task_id': 'task_011', 'service_name': '系统', 'task_type': 'integration_test', 'priority': 9, 'dependencies': ['task_008', 'task_009', 'task_010'], 'estimated_duration': '30分钟', 'description': '测试确权开立服务调用用户服务接口的完整流程', 'implementation_details': '编写集成测试用例，验证服务间调用正确性和数据完整性', 'deliverables': ['集成测试用例', '测试数据脚本', '测试报告'], 'completion_criteria': '所有测试用例通过，接口调用链路正常，数据返回格式正确', 'parameters': {'test_scenarios': ['组织单元额度查询测试'], 'test_data': {'gwCompanyId': 1, 'unitName': '测试单元', 'bizType': 80}}}, {'task_id': 'task_012', 'service_name': '系统', 'task_type': 'deployment', 'priority': 10, 'dependencies': ['task_011'], 'estimated_duration': '20分钟', 'description': '提交代码到GitLab仓库，commit message: feat: 新增组织单元额度管理功能', 'implementation_details': '执行git add、git commit和git push命令，提交所有新增和修改的代码文件', 'deliverables': ['Git提交记录', '代码合并报告', '部署文档'], 'completion_criteria': '代码成功提交到GitLab仓库，commit信息清晰，无冲突', 'parameters': {'repositories': [{'path': '/Users/renyu/Documents/create_project/链数中建一局_1752941814/zqyl-user-center-service', 'changes': '新增组织单元查询接口'}, {'path': '/Users/renyu/Documents/create_project/链数中建一局_1752941814/crcl-open', 'changes': '新增组织单元额度列表和导出接口'}]}}]
2025-07-20 00:54:13 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 🔢 生成的任务数量: 12
2025-07-20 00:54:13 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 已保存 12 个任务到数据库
2025-07-20 00:54:13 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 已生成并保存 12 个任务到数据库
2025-07-20 00:54:13 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📤 最终服务列表: ['用户服务', '确权开立服务']
2025-07-20 00:54:13 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📤 生成并行任务批次: [{'batch_id': 'batch_1', 'services': ['用户服务', '确权开立服务'], 'dependencies': []}]
2025-07-20 00:54:13 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📤 输出状态键: ['design_doc', 'project_name', 'identified_services', 'service_dependencies', 'task_execution_plan', 'parallel_tasks', 'git_repo_url', 'target_branch', 'project_paths', 'output_path', 'repo_initialized', 'generated_services', 'generated_apis', 'generated_sql', 'service_interconnections', 'unit_test_results', 'test_coverage', 'interface_compatibility', 'code_review_results', 'static_analysis_results', 'security_scan_results', 'commit_hashes', 'push_results', 'pr_urls', 'current_phase', 'completed_services', 'failed_services', 'retry_count', 'execution_errors', 'generated_tasks']
2025-07-20 00:54:13 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📤 输出 - 识别服务: ['用户服务', '确权开立服务']
2025-07-20 00:54:13 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📤 输出 - 当前阶段: intelligent_coding
2025-07-20 00:54:13 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 任务拆分完成，识别 2 个服务，生成 12 个任务
2025-07-20 00:54:13 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🚀 Git管理节点开始执行...
2025-07-20 00:54:13 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-20 00:54:13 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🎯 git_management_node 开始执行任务...
2025-07-20 00:54:13 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 📋 找到 1 个可执行任务
2025-07-20 00:54:13 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🚀 开始执行任务: task_001 (git_extraction)
2025-07-20 00:54:13 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_001 已被 git_management_node 领取
2025-07-20 00:54:13 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🔍 执行Git提取任务: task_001
2025-07-20 00:54:13 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 📄 提取源文本: 解析设计文档，提取用户服务 http://localhost:30000/ls/zqyl-user-center-service.git 和确权开立服务 http://localhost:30000/ls/crcl-open.git 仓库地址 从设计文档提取GitLab仓库地址...
2025-07-20 00:54:13 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🔍 开始从文本提取Git URL...
2025-07-20 00:54:13 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 提取到 0 个Git仓库
2025-07-20 00:54:13 - src.corder_integration.langgraph.nodes.git_management_node - WARNING - ⚠️ 未从任务中提取到任何Git仓库URL
2025-07-20 00:54:13 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_001 状态更新为 failed
2025-07-20 00:54:13 - src.corder_integration.langgraph.nodes.git_management_node - ERROR - ❌ 任务 task_001 执行失败: 未从任务中提取到Git仓库URL
2025-07-20 00:54:13 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ Git管理任务执行完成，共处理 1 个任务
2025-07-20 00:54:13 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ Git管理节点完成 - 提取: 0 个仓库, 克隆: 0 个仓库, 仓库初始化状态: False
2025-07-20 00:54:13 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🚀 Git管理节点开始执行...
2025-07-20 00:54:13 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-20 00:54:13 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🎯 git_management_node 开始执行任务...
2025-07-20 00:54:13 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ℹ️ 没有可执行的Git管理任务
2025-07-20 00:54:13 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ Git管理节点完成 - 提取: 0 个仓库, 克隆: 0 个仓库, 仓库初始化状态: False
2025-07-20 00:54:13 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-20 00:54:13 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-20 00:54:13 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: config.yaml
2025-07-20 00:54:13 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-20 00:54:13 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-20 00:54:13 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-20 00:54:13 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-20 00:54:13 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-20 00:54:13 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 增强版模板+AI生成器初始化完成
2025-07-20 00:54:13 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 增强版模板+AI代码生成器初始化完成
2025-07-20 00:54:13 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 从工作流状态获取设计文档 (4936 字符)
2025-07-20 00:54:13 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-20 00:54:13 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-20 00:54:13 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-20 00:54:13 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-20 00:54:13 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-20 00:54:13 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-20 00:54:13 - src.corder_integration.langgraph.workflow_orchestrator - ERROR - 工作流执行失败: At key 'repo_initialized': Can receive only one value per step. Use an Annotated key to handle multiple values.
For troubleshooting, visit: https://python.langchain.com/docs/troubleshooting/errors/INVALID_CONCURRENT_GRAPH_UPDATE
2025-07-20 00:54:13 - werkzeug - INFO - 127.0.0.1 - - [20/Jul/2025 00:54:13] "POST /api/coder-agent/process-document HTTP/1.1" 200 -
2025-07-20 20:23:28 - system - INFO - ==================================================
2025-07-20 20:23:28 - system - INFO - 🚀 智能分析系统日志系统初始化完成
2025-07-20 20:23:28 - system - INFO - 📁 日志根目录: /Users/renyu/Documents/ai_project/document_analyzer/logs
2025-07-20 20:23:28 - system - INFO - 📊 日志级别: INFO
2025-07-20 20:23:28 - system - INFO - 📅 按日期轮转: 每天午夜自动轮转
2025-07-20 20:23:28 - system - INFO - 📂 按月分目录: logs/YYYY-MM/
2025-07-20 20:23:28 - system - INFO - 📝 主日志: logs/2025-07/app.log
2025-07-20 20:23:28 - system - INFO - 🔧 API日志: logs/2025-07/api_server.log
2025-07-20 20:23:28 - system - INFO - 🗂️ 保留天数: 7 天
2025-07-20 20:23:28 - system - INFO - ==================================================
2025-07-20 20:23:32 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-20 20:23:32 - root - WARNING - SQLite检查点不可用，将仅使用内存检查点
2025-07-20 20:23:32 - src.utils.task_storage - INFO - 数据库初始化成功
2025-07-20 20:23:32 - markdown_storage - INFO - Markdown存储管理器初始化完成
2025-07-20 20:23:32 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-20 20:23:32 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-20 20:23:33 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-20 20:23:33 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-20 20:23:33 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-20 20:23:33 - WeaviateVectorDatabase - INFO - ✅ Weaviate连接成功: http://localhost:8080 (gRPC: 50051)
2025-07-20 20:23:33 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/schema/AnalyDesignDocuments "HTTP/1.1 200 OK"
2025-07-20 20:23:33 - WeaviateVectorDatabase - INFO - ✅ Weaviate集合已存在: AnalyDesignDocuments
2025-07-20 20:23:33 - AnalysisServiceManager - INFO - 初始化向量数据库: weaviate
2025-07-20 20:23:33 - sentence_transformers.SentenceTransformer - INFO - Use pytorch device_name: mps
2025-07-20 20:23:33 - sentence_transformers.SentenceTransformer - INFO - Load pretrained SentenceTransformer: BAAI/bge-large-zh
2025-07-20 20:23:39 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-20 20:23:39 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-20 20:23:39 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-20 20:23:39 - src.utils.weaviate_helper - INFO - 成功连接到 Weaviate: localhost:8080
2025-07-20 20:23:39 - AnalysisServiceManager - INFO - 分析服务管理器初始化完成
2025-07-20 20:23:39 - src.utils.enhanced_analyzer - INFO - 增强分析器初始化完成
2025-07-20 20:23:44 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:8082
 * Running on http://26.26.26.1:8082
2025-07-20 20:23:44 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-07-20 20:23:44 - werkzeug - INFO -  * Restarting with stat
2025-07-20 20:23:44 - system - INFO - ==================================================
2025-07-20 20:23:44 - system - INFO - 🚀 智能分析系统日志系统初始化完成
2025-07-20 20:23:44 - system - INFO - 📁 日志根目录: /Users/renyu/Documents/ai_project/document_analyzer/logs
2025-07-20 20:23:44 - system - INFO - 📊 日志级别: INFO
2025-07-20 20:23:44 - system - INFO - 📅 按日期轮转: 每天午夜自动轮转
2025-07-20 20:23:44 - system - INFO - 📂 按月分目录: logs/YYYY-MM/
2025-07-20 20:23:44 - system - INFO - 📝 主日志: logs/2025-07/app.log
2025-07-20 20:23:44 - system - INFO - 🔧 API日志: logs/2025-07/api_server.log
2025-07-20 20:23:44 - system - INFO - 🗂️ 保留天数: 7 天
2025-07-20 20:23:44 - system - INFO - ==================================================
2025-07-20 20:23:47 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-20 20:23:47 - root - WARNING - SQLite检查点不可用，将仅使用内存检查点
2025-07-20 20:23:47 - src.utils.task_storage - INFO - 数据库初始化成功
2025-07-20 20:23:47 - markdown_storage - INFO - Markdown存储管理器初始化完成
2025-07-20 20:23:47 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-20 20:23:47 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-20 20:23:47 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-20 20:23:48 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-20 20:23:48 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-20 20:23:48 - WeaviateVectorDatabase - INFO - ✅ Weaviate连接成功: http://localhost:8080 (gRPC: 50051)
2025-07-20 20:23:48 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/schema/AnalyDesignDocuments "HTTP/1.1 200 OK"
2025-07-20 20:23:48 - WeaviateVectorDatabase - INFO - ✅ Weaviate集合已存在: AnalyDesignDocuments
2025-07-20 20:23:48 - AnalysisServiceManager - INFO - 初始化向量数据库: weaviate
2025-07-20 20:23:48 - sentence_transformers.SentenceTransformer - INFO - Use pytorch device_name: mps
2025-07-20 20:23:48 - sentence_transformers.SentenceTransformer - INFO - Load pretrained SentenceTransformer: BAAI/bge-large-zh
2025-07-20 20:23:53 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-20 20:23:53 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-20 20:23:53 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-20 20:23:53 - src.utils.weaviate_helper - INFO - 成功连接到 Weaviate: localhost:8080
2025-07-20 20:23:53 - AnalysisServiceManager - INFO - 分析服务管理器初始化完成
2025-07-20 20:23:53 - src.utils.enhanced_analyzer - INFO - 增强分析器初始化完成
2025-07-20 20:23:53 - werkzeug - WARNING -  * Debugger is active!
2025-07-20 20:23:53 - werkzeug - INFO -  * Debugger PIN: 587-510-452
2025-07-20 20:24:24 - src.apis.coder_agent_api - INFO - 开始处理文档: 链数中建一局_1753014264
2025-07-20 20:24:24 - src.apis.coder_agent_api - INFO - 文档长度: 4937 字符
2025-07-20 20:24:24 - src.apis.coder_agent_api - INFO - 使用LangGraph: True
2025-07-20 20:24:24 - src.apis.coder_agent_api - INFO - 代码输出路径: /Users/renyu/Documents/create_project
2025-07-20 20:24:24 - src.apis.coder_agent_api - INFO - 使用LangGraph工作流处理项目: 链数中建一局_1753014264
2025-07-20 20:24:24 - src.corder_integration.langgraph.workflow_orchestrator - INFO - 使用内存检查点
2025-07-20 20:24:24 - src.corder_integration.langgraph.workflow_orchestrator - INFO - 生成目标分支名称: 链数中建一局_1753014264 -> D_20250720_链数中建一局_1753014264
2025-07-20 20:24:24 - src.corder_integration.langgraph.workflow_orchestrator - INFO - 开始执行编码工作流: 链数中建一局_1753014264 -> /Users/renyu/Documents/create_project
2025-07-20 20:24:24 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 🚀 开始执行任务拆分: 链数中建一局_1753014264
2025-07-20 20:24:24 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📥 输入状态键: ['design_doc', 'project_name', 'identified_services', 'service_dependencies', 'task_execution_plan', 'parallel_tasks', 'git_repo_url', 'target_branch', 'project_paths', 'output_path', 'repo_initialized', 'generated_services', 'generated_apis', 'generated_sql', 'service_interconnections', 'unit_test_results', 'test_coverage', 'interface_compatibility', 'code_review_results', 'static_analysis_results', 'security_scan_results', 'commit_hashes', 'push_results', 'pr_urls', 'current_phase', 'completed_services', 'failed_services', 'retry_count', 'execution_errors']
2025-07-20 20:24:24 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📄 设计文档长度: 4936
2025-07-20 20:24:24 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 🔄 当前阶段: task_splitting
2025-07-20 20:24:24 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📁 计算的基础项目路径: /Users/renyu/Documents/create_project/链数中建一局_1753014264
2025-07-20 20:24:24 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-20 20:24:24 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 模板 task_splitting/design_analysis_prompts.jinja2 加载成功
2025-07-20 20:24:24 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 模板 task_splitting/service_boundary_prompts.jinja2 加载成功
2025-07-20 20:24:24 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 模板 task_splitting/dependency_analysis_prompts.jinja2 加载成功
2025-07-20 20:24:24 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 模板 task_splitting/task_scheduling_prompts.jinja2 加载成功
2025-07-20 20:24:24 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 模板 task_splitting/generate_sqlite_tasks_prompts.jinja2 加载成功
2025-07-20 20:24:24 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 任务数据库初始化完成
2025-07-20 20:24:24 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 删除WAL文件: coding_agent_workflow.db-wal
2025-07-20 20:24:24 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 删除WAL文件: coding_agent_workflow.db-shm
2025-07-20 20:24:24 - src.corder_integration.langgraph.nodes.task_splitting_node - WARNING - ⚠️ WAL检查点操作失败: disk I/O error
2025-07-20 20:24:24 - src.corder_integration.langgraph.nodes.task_splitting_node - ERROR - ❌ 数据库重置失败: disk I/O error
2025-07-20 20:24:24 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 删除WAL文件: coding_agent_workflow.db-wal
2025-07-20 20:24:24 - src.corder_integration.langgraph.nodes.task_splitting_node - WARNING - ⚠️ WAL检查点操作失败: disk I/O error
2025-07-20 20:24:26 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 删除WAL文件: coding_agent_workflow.db-wal
2025-07-20 20:24:26 - src.corder_integration.langgraph.nodes.task_splitting_node - WARNING - ⚠️ WAL检查点操作失败: disk I/O error
2025-07-20 20:24:26 - src.corder_integration.langgraph.nodes.task_splitting_node - ERROR - ❌ 最终数据库重置失败: disk I/O error
2025-07-20 20:24:26 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📋 步骤1：开始设计文档分析...
2025-07-20 20:24:26 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📄 文档分割完成：4936 字符 -> 3 个窗口
2025-07-20 20:24:26 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📄 设计文档分割成 3 个窗口
2025-07-20 20:24:26 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 分析窗口 1/3 (字符: 0-1926)
2025-07-20 20:24:42 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-20 20:24:42 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 窗口 1 分析完成
2025-07-20 20:24:42 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 分析窗口 2/3 (字符: 1626-3553)
2025-07-20 20:24:54 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-20 20:24:54 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 窗口 2 分析完成
2025-07-20 20:24:54 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 分析窗口 3/3 (字符: 3253-4936)
2025-07-20 20:25:08 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-20 20:25:08 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 窗口 3 分析完成
2025-07-20 20:25:08 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 🔄 合并 3 个设计分析分析结果...
2025-07-20 20:25:08 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📊 合并后的设计分析结果: {'architecture_style': '微服务', 'technology_stack': ['Nacos', 'RESTful API', 'Apache POI (用于Excel导出)', 'MyBatis Plus 3.5.x', 'MySQL 8.0', 'RabbitMQ 3.8', 'pageHelper', 'Spring Cloud 2021.x', 'MySQL', 'Redis', 'PageHelper', 'Spring Boot 2.7.x', 'Redis 6.0', 'Spring Boot'], 'functional_modules': [{'name': '用户服务', 'description': '负责用户管理、权限控制和角色管理', 'responsibilities': ['组织单元管理', '用户认证与授权']}, {'name': '确权开立服务', 'description': '处理业务数据的推送和校验逻辑', 'responsibilities': ['业务数据校验', '数据推送处理']}, {'name': '多组织单元管理', 'description': '管理组织单元的基本信息', 'responsibilities': ['组织单元创建与维护', '组织单元状态管理']}, {'name': '确权开立服务', 'description': '处理确权开立和额度管理', 'responsibilities': ['确权开立', '额度分配与管理']}, {'name': '额度管理模块', 'description': '处理组织单元额度的查询和导出功能', 'responsibilities': ['查询组织单元额度信息', '导出组织单元额度列表到Excel']}], 'system_components': ['多组织单元表(t_cust_multiorg_unit)', 'crcl-open', 'zqyl-user-center-service (用户服务)', '确权开立API服务', 'Redis', 'MySQL', 'crcl-open (确权开立服务)', 'zqyl-user-center-service'], 'data_flow': ['核心企业修改数据后重新推送', 'MySQL数据库用于存储额度信息', '客户端请求 -> crcl-open服务 -> 调用zqyl-user-center-service获取组织单元详细信息 -> 处理数据 -> 返回结果或生成Excel文件', 'Redis用于缓存', '接口校验逻辑处理', '企业信息→组织单元创建→额度分配', '组织单元额度数据查询与展示', '额度查询→额度使用统计→额度调整'], 'integration_points': ['企业系统与多组织单元管理的数据同步', 'zqyl-user-center-service的/queryCompanyUnitList接口', 'crcl-open的/lsLimit/listUnitLimitByCompanyIdExport接口', '组织单元管理与确权开立服务的API集成', '核心企业系统与链数平台的数据推送接口', '用户服务与确权开立服务的内部通信'], 'summary': '该设计采用微服务架构，通过用户服务和确权开立服务实现松耦合。技术栈选型成熟，包含Spring Boot、MySQL和Redis等。主要调整了接口校验逻辑以支持数据重推，并新增组织单元额度管理功能，提升了系统的灵活性和可扩展性。 该设计采用微服务架构，包含多组织单元管理和确权开立两大核心模块。使用MySQL存储组织单元信息，通过RESTful API提供服务。系统实现了组织单元的创建维护、状态管理以'}
2025-07-20 20:25:08 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 设计概要: 该设计采用微服务架构，通过用户服务和确权开立服务实现松耦合。技术栈选型成熟，包含Spring Boot、MySQL和Redis等。主要调整了接口校验逻辑以支持数据重推，并新增组织单元额度管理功能，提升了系统的灵活性和可扩展性。 该设计采用微服务架构，包含多组织单元管理和确权开立两大核心模块。使用MySQL存储组织单元信息，通过RESTful API提供服务。系统实现了组织单元的创建维护、状态管理以
2025-07-20 20:25:08 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 🏗️ 步骤2：开始技术架构分析...
2025-07-20 20:25:08 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 技术架构概要: 该设计采用微服务架构，通过用户服务和确权开立服务实现松耦合。技术栈选型成熟，包含Spring Boot、MySQL和Redis等。主要调整了接口校验逻辑以支持数据重推，并新增组织单元额度管理功能，提升了系统的灵活性和可扩展性。 该设计采用微服务架构，包含多组织单元管理和确权开立两大核心模块。使用MySQL存储组织单元信息，通过RESTful API提供服务。系统实现了组织单元的创建维护、状态管理以
2025-07-20 20:25:08 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 🔍 步骤3：开始服务边界识别...
2025-07-20 20:25:08 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 输入 - 设计概要: 该设计采用微服务架构，通过用户服务和确权开立服务实现松耦合。技术栈选型成熟，包含Spring Boot、MySQL和Redis等。主要调整了接口校验逻辑以支持数据重推，并新增组织单元额度管理功能，提升了系统的灵活性和可扩展性。 该设计采用微服务架构，包含多组织单元管理和确权开立两大核心模块。使用MySQL存储组织单元信息，通过RESTful API提供服务。系统实现了组织单元的创建维护、状态管理以
2025-07-20 20:25:08 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 输入 - 架构概要: 该设计采用微服务架构，通过用户服务和确权开立服务实现松耦合。技术栈选型成熟，包含Spring Boot、MySQL和Redis等。主要调整了接口校验逻辑以支持数据重推，并新增组织单元额度管理功能，提升了系统的灵活性和可扩展性。 该设计采用微服务架构，包含多组织单元管理和确权开立两大核心模块。使用MySQL存储组织单元信息，通过RESTful API提供服务。系统实现了组织单元的创建维护、状态管理以
2025-07-20 20:25:08 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 服务拆分提示词长度: 2333
2025-07-20 20:25:23 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-20 20:25:23 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 服务拆分LLM响应长度: 1279
2025-07-20 20:25:23 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📊 服务拆分解析结果: {'identified_services': [{'name': '用户服务', 'description': '处理用户相关操作的服务', 'git_repository': '', 'responsibilities': ['用户管理', '权限控制'], 'api_endpoints': [], 'database_tables': [], 'external_service_calls': [], 'config_requirements': ['MySQL', 'Redis']}, {'name': '确权开立服务', 'description': '处理确权开立相关操作的服务', 'git_repository': '', 'responsibilities': ['确权开立管理', '额度管理'], 'api_endpoints': [], 'database_tables': [], 'external_service_calls': [], 'config_requirements': ['MySQL', 'Redis']}, {'name': '多组织单元管理服务', 'description': '处理组织单元相关操作的服务', 'git_repository': '', 'responsibilities': ['组织单元创建维护', '状态管理', '额度管理'], 'api_endpoints': [], 'database_tables': [{'table_name': '组织单元信息表', 'create_sql': '', 'description': '存储组织单元信息'}], 'external_service_calls': [], 'config_requirements': ['MySQL']}], 'service_call_relationships': {'dependencies': [{'caller': '用户服务', 'called': '确权开立服务', 'interface': '', 'purpose': '确权开立操作'}]}, 'summary': '基于设计文档的服务分析概要，确认涉及3个服务，0个新增接口，1个数据库表'}
2025-07-20 20:25:23 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 🎯 识别的服务列表: [{'name': '用户服务', 'description': '处理用户相关操作的服务', 'git_repository': '', 'responsibilities': ['用户管理', '权限控制'], 'api_endpoints': [], 'database_tables': [], 'external_service_calls': [], 'config_requirements': ['MySQL', 'Redis']}, {'name': '确权开立服务', 'description': '处理确权开立相关操作的服务', 'git_repository': '', 'responsibilities': ['确权开立管理', '额度管理'], 'api_endpoints': [], 'database_tables': [], 'external_service_calls': [], 'config_requirements': ['MySQL', 'Redis']}, {'name': '多组织单元管理服务', 'description': '处理组织单元相关操作的服务', 'git_repository': '', 'responsibilities': ['组织单元创建维护', '状态管理', '额度管理'], 'api_endpoints': [], 'database_tables': [{'table_name': '组织单元信息表', 'create_sql': '', 'description': '存储组织单元信息'}], 'external_service_calls': [], 'config_requirements': ['MySQL']}]
2025-07-20 20:25:23 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 🔢 识别的服务数量: 3
2025-07-20 20:25:23 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 服务拆分概要: 基于设计文档的服务分析概要，确认涉及3个服务，0个新增接口，1个数据库表
2025-07-20 20:25:23 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 🌐 步骤4：开始依赖分析...
2025-07-20 20:25:23 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 依赖分析提示词长度: 2310
2025-07-20 20:25:40 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-20 20:25:40 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 依赖分析LLM响应长度: 1238
2025-07-20 20:25:40 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📊 依赖分析解析结果: {'service_dependencies': {'用户服务': {'database_dependencies': [{'database_type': 'MySQL', 'config_info': '存储组织单元信息', 'tables_needed': ['组织单元表'], 'description': '用于管理组织单元的创建、维护和状态管理'}], 'api_call_dependencies': [], 'provides_apis': [{'endpoint': '/api/organization', 'used_by': ['确权开立服务']}]}, '确权开立服务': {'database_dependencies': [], 'api_call_dependencies': [{'target_service': '用户服务', 'target_endpoint': '/api/organization', 'call_purpose': '获取组织单元信息', 'dependency_type': '强依赖'}], 'provides_apis': []}}, 'development_order': [{'phase': 1, 'services': ['用户服务'], 'tasks': ['创建组织单元表', '实现组织单元管理接口'], 'reason': '确权开立服务依赖用户服务的组织单元接口'}, {'phase': 2, 'services': ['确权开立服务'], 'tasks': ['实现业务逻辑', '调用用户服务的组织单元接口'], 'reason': '依赖用户服务的接口'}], 'critical_path': ['用户服务 -> 确权开立服务'], 'parallel_development': [], 'summary': '分析了2个服务的依赖关系，建议分2个阶段开发，关键路径为用户服务->确权开立服务'}
2025-07-20 20:25:40 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 依赖分析概要: 分析了2个服务的依赖关系，建议分2个阶段开发，关键路径为用户服务->确权开立服务
2025-07-20 20:25:40 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📅 步骤5：开始制定执行计划...
2025-07-20 20:25:40 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 任务调度提示词长度: 6200
2025-07-20 20:27:02 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-20 20:27:02 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 任务调度LLM响应长度: 7012
2025-07-20 20:27:02 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📊 执行计划解析结果: {'execution_phases': [{'phase_name': '基础设施搭建阶段', 'phase_order': 1, 'description': '搭建基础数据库和环境配置，为后续开发做准备', 'estimated_duration': '2天', 'services_involved': ['用户服务', '确权开立服务', '组织单元服务'], 'task_categories': [{'category': 'database', 'description': '数据库初始化', 'tasks': [{'task_name': '创建组织单元额度表', 'service': '组织单元服务', 'deliverable': 'org_unit_quota表DDL', 'estimated_hours': 4, 'prerequisites': [], 'assignee_role': 'DBA'}, {'task_name': '初始化数据库连接池', 'service': '全部服务', 'deliverable': 'Druid/Hikari配置', 'estimated_hours': 2, 'prerequisites': ['数据库实例'], 'assignee_role': '后端开发'}]}, {'category': 'config', 'description': '环境配置', 'tasks': [{'task_name': '搭建Redis缓存集群', 'service': '基础设施', 'deliverable': 'Redis配置', 'estimated_hours': 3, 'prerequisites': [], 'assignee_role': '运维工程师'}, {'task_name': '配置服务注册中心', 'service': '基础设施', 'deliverable': 'Nacos/Eureka运行实例', 'estimated_hours': 2, 'prerequisites': [], 'assignee_role': '运维工程师'}]}], 'success_criteria': ['数据库表创建完成', '缓存服务可连接', '配置中心正常运行'], 'parallel_execution': True}, {'phase_name': '核心服务开发阶段', 'phase_order': 2, 'description': '按依赖顺序开发用户服务和确权开立服务', 'estimated_duration': '6天', 'services_involved': ['用户服务', '确权开立服务'], 'task_categories': [{'category': 'database', 'description': '数据访问层', 'tasks': [{'task_name': '实现用户数据访问层', 'service': '用户服务', 'deliverable': 'UserMapper接口', 'estimated_hours': 8, 'prerequisites': ['用户表创建'], 'assignee_role': '后端开发'}]}, {'category': 'api', 'description': '接口实现', 'tasks': [{'task_name': '实现用户查询接口', 'service': '用户服务', 'deliverable': 'GET /api/users/{id}', 'estimated_hours': 6, 'prerequisites': ['数据访问层完成'], 'assignee_role': '后端开发'}, {'task_name': '实现确权创建接口', 'service': '确权开立服务', 'deliverable': 'POST /api/rights', 'estimated_hours': 8, 'prerequisites': ['用户服务API稳定'], 'assignee_role': '后端开发'}]}, {'category': 'service', 'description': '业务逻辑', 'tasks': [{'task_name': '开发用户状态管理逻辑', 'service': '用户服务', 'deliverable': 'UserStateService', 'estimated_hours': 8, 'prerequisites': ['数据访问层完成'], 'assignee_role': '后端开发'}, {'task_name': '开发额度计算引擎', 'service': '确权开立服务', 'deliverable': 'QuotaCalculationEngine', 'estimated_hours': 12, 'prerequisites': ['组织单元表就绪'], 'assignee_role': '后端开发'}]}], 'success_criteria': ['核心接口通过单元测试', '业务逻辑覆盖率≥80%'], 'parallel_execution': False}, {'phase_name': '组织单元服务开发阶段', 'phase_order': 3, 'description': '开发相对独立的组织单元服务', 'estimated_duration': '4天', 'services_involved': ['组织单元服务'], 'task_categories': [{'category': 'database', 'description': '数据操作', 'tasks': [{'task_name': '实现额度表操作DAO', 'service': '组织单元服务', 'deliverable': 'OrgUnitQuotaRepository', 'estimated_hours': 6, 'prerequisites': ['额度表创建'], 'assignee_role': '后端开发'}]}, {'category': 'service', 'description': '额度管理', 'tasks': [{'task_name': '开发额度分配服务', 'service': '组织单元服务', 'deliverable': 'QuotaAllocationService', 'estimated_hours': 8, 'prerequisites': ['DAO层完成'], 'assignee_role': '后端开发'}]}], 'success_criteria': ['额度管理功能测试通过'], 'parallel_execution': True}, {'phase_name': '系统集成阶段', 'phase_order': 4, 'description': '服务联调与全链路测试', 'estimated_duration': '3天', 'services_involved': ['全部服务'], 'task_categories': [{'category': 'test', 'description': '集成测试', 'tasks': [{'task_name': '用户-确权服务联调', 'service': '集成测试', 'deliverable': '联调测试报告', 'estimated_hours': 8, 'prerequisites': ['核心服务开发完成'], 'assignee_role': '测试工程师'}, {'task_name': '额度计算全链路测试', 'service': '集成测试', 'deliverable': '链路测试用例', 'estimated_hours': 6, 'prerequisites': ['组织单元服务完成'], 'assignee_role': '测试工程师'}]}, {'category': 'config', 'description': '生产配置', 'tasks': [{'task_name': '配置服务熔断策略', 'service': '基础设施', 'deliverable': 'Sentinel规则配置', 'estimated_hours': 4, 'prerequisites': ['联调通过'], 'assignee_role': '运维工程师'}]}], 'success_criteria': ['关键路径测试通过率100%', '熔断机制验证完成'], 'parallel_execution': False}], 'parallel_groups': [{'group_name': '第一阶段并行组', 'group_order': 1, 'services': ['用户服务', '组织单元服务'], 'estimated_duration': '6天', 'description': '用户服务与组织单元服务可并行开发', 'coordination_points': ['共享数据库配置']}], 'execution_order': ['基础设施搭建', '用户服务开发', '确权开立服务开发', '组织单元服务开发(并行)', '系统集成测试'], 'resource_allocation': {'backend_developers': 4, 'test_engineers': 2, 'devops_engineers': 1, 'total_estimated_time': '15天'}, 'risk_management': {'critical_dependencies': [{'task': '用户服务API', 'risk': '接口变更影响确权服务', 'mitigation': '前期定义API契约，使用Swagger文档'}], 'buffer_time': '25%', 'contingency_plans': ['关键开发人员AB角', '每日代码评审']}, 'summary': '项目分4个阶段实施，关键路径为用户服务→确权服务，总工期预计15天'}
2025-07-20 20:27:02 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 💾 步骤6：开始生成SQLite任务...
2025-07-20 20:27:02 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📄 执行计划较长(7480字符)，使用滑动窗口处理
2025-07-20 20:27:02 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📄 文档分割完成：7480 字符 -> 5 个窗口
2025-07-20 20:27:02 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 处理计划窗口 1/5
2025-07-20 20:29:11 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-20 20:29:11 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 窗口 1 任务生成完成
2025-07-20 20:29:11 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 处理计划窗口 2/5
2025-07-20 20:31:05 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-20 20:31:05 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 窗口 2 任务生成完成
2025-07-20 20:31:05 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 处理计划窗口 3/5
2025-07-20 20:33:33 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-20 20:33:33 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 窗口 3 任务生成完成
2025-07-20 20:33:33 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 处理计划窗口 4/5
2025-07-20 20:35:44 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-20 20:35:44 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 窗口 4 任务生成完成
2025-07-20 20:35:44 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 处理计划窗口 5/5
2025-07-20 20:37:53 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-20 20:37:53 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 窗口 5 任务生成完成
2025-07-20 20:37:53 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 🔄 合并 5 个任务生成分析结果...
2025-07-20 20:37:53 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📊 任务生成解析结果: {'tasks': [{'task_id': 'task_001', 'service_name': '系统', 'task_type': 'git_extraction', 'priority': 1, 'dependencies': [], 'estimated_duration': '5分钟', 'description': '从设计文档提取GitLab仓库地址', 'implementation_details': '解析设计文档，提取用户服务 http://localhost:30000/ls/zqyl-user-center-service.git 和确权开立服务 http://localhost:30000/ls/crcl-open.git 仓库地址', 'deliverables': ['GitLab仓库地址清单', '仓库访问验证报告'], 'completion_criteria': '成功提取并验证两个GitLab仓库地址可访问性', 'parameters': {'repositories': ['zqyl-user-center-service', 'crcl-open']}}, {'task_id': 'task_002', 'service_name': '用户服务', 'task_type': 'git_clone', 'priority': 2, 'dependencies': ['task_001'], 'estimated_duration': '10分钟', 'description': '下载用户服务代码到/Users/renyu/Documents/create_project/链数中建一局_1753014264/zqyl-user-center-service', 'implementation_details': '使用git clone命令下载用户服务代码到指定目录，确保项目结构完整可编译', 'deliverables': ['用户服务源码目录'], 'completion_criteria': '代码下载完成，项目目录存在且包含pom.xml文件', 'parameters': {'git_url': 'http://localhost:30000/ls/zqyl-user-center-service.git', 'local_path': '/Users/renyu/Documents/create_project/链数中建一局_1753014264/zqyl-user-center-service'}}, {'task_id': 'task_003', 'service_name': '确权开立服务', 'task_type': 'git_clone', 'priority': 2, 'dependencies': ['task_001'], 'estimated_duration': '10分钟', 'description': '下载确权开立服务代码到/Users/renyu/Documents/create_project/链数中建一局_1753014264/crcl-open', 'implementation_details': '使用git clone命令下载确权开立服务代码到指定目录，确保项目结构完整可编译', 'deliverables': ['确权开立服务源码目录'], 'completion_criteria': '代码下载完成，项目目录存在且包含pom.xml文件', 'parameters': {'git_url': 'http://localhost:30000/ls/crcl-open.git', 'local_path': '/Users/renyu/Documents/create_project/链数中建一局_1753014264/crcl-open'}}, {'task_id': 'task_004', 'service_name': '用户服务', 'task_type': 'code_analysis', 'priority': 3, 'dependencies': ['task_002'], 'estimated_duration': '20分钟', 'description': '分析用户服务代码结构，确定MultiorgManageController添加位置', 'implementation_details': '分析项目package结构和controller层，找到或创建MultiorgManageController类的最佳位置', 'deliverables': ['代码结构从Controller层开始到数据获取的完整路径'], 'completion_criteria': '确定MultiorgManageController的包路径和文件位置，明确依赖的Service层结构', 'parameters': {'project_path': '/Users/renyu/Documents/create_project/链数中建一局_1753014264/zqyl-user-center-service', 'target_controller': 'MultiorgManageController', 'target_api': '/general/multiorgManage/queryCompanyUnitList'}}, {'task_id': 'task_005', 'service_name': '确权开立服务', 'task_type': 'code_analysis', 'priority': 3, 'dependencies': ['task_003'], 'estimated_duration': '20分钟', 'description': '分析确权开立服务代码结构，确定LsLimitController添加位置', 'implementation_details': '分析项目package结构和controller层，找到或创建LsLimitController类的最佳位置，支持两个接口开发', 'deliverables': ['代码结构从Controller层开始到数据获取的完整路径', 'Feign客户端配置方案'], 'completion_criteria': '确定LsLimitController的包路径和文件位置，明确服务间调用的Feign配置', 'parameters': {'project_path': '/Users/renyu/Documents/create_project/链数中建一局_1753014264/crcl-open', 'target_controller': 'LsLimitController', 'target_apis': ['/crcl-open-api/lsLimit/listUnitLimitByCompanyId', '/crcl-open-api/lsLimit/listUnitLimitByCompanyIdExport']}}, {'task_id': 'task_006', 'service_name': '用户服务', 'task_type': 'config', 'priority': 4, 'dependencies': ['task_004'], 'estimated_duration': '15分钟', 'description': '配置用户服务数据库连接：jdbc:mysql://localhost:6446/dbwebappdb', 'implementation_details': '修改application.yml文件，配置数据库连接信息包括URL、用户名密码和连接池设置', 'deliverables': ['数据库配置文件', '连接测试报告'], 'completion_criteria': 'application.yml文件已更新，数据库连接配置正确且可连通', 'parameters': {'config_file': '/Users/renyu/Documents/create_project/链数中建一局_1753014264/zqyl-user-center-service/src/main/resources/application.yml', 'database_url': 'jdbc:mysql://localhost:6446/dbwebappdb?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC&characterEncoding=utf8&useUnicode=true', 'username': 'dbwebapp', 'password': 'dbwebapp'}}, {'task_id': 'task_007', 'service_name': '用户服务', 'task_type': 'database', 'priority': 5, 'dependencies': ['task_006'], 'estimated_duration': '15分钟', 'description': '创建t_cust_multiorg_unit表，包含id,company_id,unit_code,unit_name等字段', 'implementation_details': '编写建表SQL脚本，定义主键、索引和字段约束，创建对应的Entity和Mapper文件', 'deliverables': ['建表SQL脚本', 'Entity实体类', 'Mapper接口文件'], 'completion_criteria': '表结构创建成功，Entity和Mapper文件可正常编译，支持基本CRUD操作', 'parameters': {'table_name': 't_cust_multiorg_unit', 'sql_location': 'src/main/resources/sql/t_cust_multiorg_unit.sql'}}, {'task_id': 'task_008', 'service_name': '用户服务', 'task_type': 'api', 'priority': 6, 'dependencies': ['task_007'], 'estimated_duration': '60分钟', 'description': '实现GET /general/multiorgManage/queryCompanyUnitList接口', 'implementation_details': '在MultiorgManageController中实现查询接口，支持条件查询和分页，返回规定的字段格式', 'deliverables': ['MultiorgManageController类', 'Service业务逻辑层', '接口文档'], 'completion_criteria': '接口可正常访问，返回数据格式符合规范，支持条件查询和分页功能', 'parameters': {'project_path': '/Users/renyu/Documents/create_project/链数中建一局_1753014264/zqyl-user-center-service', 'api_path': '/general/multiorgManage/queryCompanyUnitList', 'http_method': 'GET', 'content_type': 'application/json', 'request_params': {'unitCode': '组织单元编码(可选)', 'openStatus': '开通状态(可选)', 'unitList': '组织单元列表(可选)'}, 'response_params': {'unitId': '组织单元ID', 'unitTypeDicType': '组织单元类型字典类型', 'unitTypeId': '组织单元类型ID', 'openStatus': '开通状态', 'unitCode': '组织单元编码', 'unitName': '组织单元名称'}, 'business_logic': '根据查询条件查询组织单元信息，支持按编码、状态等条件筛选', 'data_source': 't_cust_multiorg_unit表', 'validation_rules': {'unitCode': '长度不超过50字符', 'openStatus': '取值范围0-1'}}}, {'task_id': 'task_009', 'service_name': '确权开立服务', 'task_type': 'api', 'priority': 7, 'dependencies': ['task_008'], 'estimated_duration': '90分钟', 'description': '实现GET /crcl-open-api/lsLimit/listUnitLimitByCompanyId接口，调用用户服务', 'implementation_details': '在LsLimitController中实现额度查询接口，配置Feign客户端调用用户服务接口获取组织单元信息', 'deliverables': ['LsLimitController类', 'Feign客户端配置', '业务逻辑层'], 'completion_criteria': '接口可正常访问，能成功调用用户服务，返回额度数据格式正确', 'parameters': {'project_path': '/Users/renyu/Documents/create_project/链数中建一局_1753014264/crcl-open', 'api_path': '/crcl-open-api/lsLimit/listUnitLimitByCompanyId', 'http_method': 'GET', 'content_type': 'application/json', 'request_params': {'gwCompanyId': '公司ID(必填)', 'unitName': '组织单元名称(可选)', 'limitSource': '额度来源(可选)', 'bizType': '业务类型(必填)', 'page': '页码(可选,默认1)', 'pageRow': '每页行数(可选,默认10)'}, 'response_params': {'totalLimitAmt': '总额度金额', 'usedLimitAmt': '已用额度金额', 'usableLimitAmt': '可用额度金额', 'unitLimitListDetail': '单元额度详情列表'}, 'business_logic': '根据公司ID和筛选条件查询组织单元额度信息，调用用户服务获取组织单元基础信息', 'data_source': '本地额度表 + 用户服务接口', 'external_call': '/general/multiorgManage/queryCompanyUnitList', 'validation_rules': {'gwCompanyId': '必填，数值类型', 'bizType': '必填，业务类型枚举值', 'page': '正整数，默认1', 'pageRow': '正整数，范围1-100'}}}, {'task_id': 'task_010', 'service_name': '确权开立服务', 'task_type': 'api', 'priority': 8, 'dependencies': ['task_009'], 'estimated_duration': '45分钟', 'description': '实现GET /crcl-open-api/lsLimit/listUnitLimitByCompanyIdExport导出接口', 'implementation_details': '在LsLimitController中实现Excel导出接口，复用listUnitLimitByCompanyId的数据逻辑', 'deliverables': ['导出接口方法', 'Excel工具类', '导出模板文件'], 'completion_criteria': '接口可正常访问，能成功导出Excel文件，表头和数据格式正确', 'parameters': {'project_path': '/Users/renyu/Documents/create_project/链数中建一局_1753014264/crcl-open', 'api_path': '/crcl-open-api/lsLimit/listUnitLimitByCompanyIdExport', 'http_method': 'GET', 'content_type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'request_params': {'gwCompanyId': '公司ID(必填)', 'unitName': '组织单元名称(可选)', 'limitSource': '额度来源(可选)', 'bizType': '业务类型(必填)'}, 'response_params': {'file': 'Excel文件流', 'filename': '导出文件名', 'contentType': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'}, 'business_logic': '复用listUnitLimitByCompanyId接口的查询逻辑，将结果导出为Excel格式', 'data_source': '调用listUnitLimitByCompanyId接口获取数据', 'export_format': 'xlsx', 'export_headers': ['组织单元名称', '额度名称', '额度类型', '已分配额度', '已用额度', '可用额度'], 'validation_rules': {'gwCompanyId': '必填，数值类型', 'bizType': '必填，业务类型枚举值'}}}, {'task_id': 'task_011', 'service_name': '系统', 'task_type': 'integration_test', 'priority': 9, 'dependencies': ['task_008', 'task_009', 'task_010'], 'estimated_duration': '30分钟', 'description': '测试确权开立服务调用用户服务接口的完整流程', 'implementation_details': '编写集成测试用例，验证服务间调用正确性和数据完整性', 'deliverables': ['集成测试用例', '测试数据脚本', '测试报告'], 'completion_criteria': '所有测试用例通过，接口调用链路正常，数据返回格式正确', 'parameters': {'test_scenarios': ['组织单元额度查询测试'], 'test_data': {'gwCompanyId': 1, 'unitName': '测试单元', 'bizType': 80}}}, {'task_id': 'task_012', 'service_name': '系统', 'task_type': 'deployment', 'priority': 10, 'dependencies': ['task_011'], 'estimated_duration': '20分钟', 'description': '提交代码到GitLab仓库，commit message: feat: 新增组织单元额度管理功能', 'implementation_details': '执行git add、git commit和git push命令，提交所有新增和修改的代码文件', 'deliverables': ['Git提交记录', '代码合并报告', '部署文档'], 'completion_criteria': '代码成功提交到GitLab仓库，commit信息清晰，无冲突', 'parameters': {'repositories': [{'path': '/Users/renyu/Documents/create_project/链数中建一局_1753014264/zqyl-user-center-service', 'changes': '新增组织单元查询接口'}, {'path': '/Users/renyu/Documents/create_project/链数中建一局_1753014264/crcl-open', 'changes': '新增组织单元额度列表和导出接口'}]}}], 'total_tasks': 12, 'summary': '生成12个任务：GitLab代码下载->结构分析->环境配置->接口开发->测试部署。严格使用设计文档中的真实接口路径和参数，确保先开发用户服务接口，再开发依赖它的确权开立服务接口。 生成12个任务：GitLab代码下载->结构分析->数据访问层->接口开发->业务逻辑->测试部署。严格遵循设计文档要求，先开发用户服务接口，再开发依赖它的确权开立服务接口。 生成12个任务：GitLab代码下载->'}
2025-07-20 20:37:53 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 🎯 生成的任务列表: [{'task_id': 'task_001', 'service_name': '系统', 'task_type': 'git_extraction', 'priority': 1, 'dependencies': [], 'estimated_duration': '5分钟', 'description': '从设计文档提取GitLab仓库地址', 'implementation_details': '解析设计文档，提取用户服务 http://localhost:30000/ls/zqyl-user-center-service.git 和确权开立服务 http://localhost:30000/ls/crcl-open.git 仓库地址', 'deliverables': ['GitLab仓库地址清单', '仓库访问验证报告'], 'completion_criteria': '成功提取并验证两个GitLab仓库地址可访问性', 'parameters': {'repositories': ['zqyl-user-center-service', 'crcl-open']}}, {'task_id': 'task_002', 'service_name': '用户服务', 'task_type': 'git_clone', 'priority': 2, 'dependencies': ['task_001'], 'estimated_duration': '10分钟', 'description': '下载用户服务代码到/Users/renyu/Documents/create_project/链数中建一局_1753014264/zqyl-user-center-service', 'implementation_details': '使用git clone命令下载用户服务代码到指定目录，确保项目结构完整可编译', 'deliverables': ['用户服务源码目录'], 'completion_criteria': '代码下载完成，项目目录存在且包含pom.xml文件', 'parameters': {'git_url': 'http://localhost:30000/ls/zqyl-user-center-service.git', 'local_path': '/Users/renyu/Documents/create_project/链数中建一局_1753014264/zqyl-user-center-service'}}, {'task_id': 'task_003', 'service_name': '确权开立服务', 'task_type': 'git_clone', 'priority': 2, 'dependencies': ['task_001'], 'estimated_duration': '10分钟', 'description': '下载确权开立服务代码到/Users/renyu/Documents/create_project/链数中建一局_1753014264/crcl-open', 'implementation_details': '使用git clone命令下载确权开立服务代码到指定目录，确保项目结构完整可编译', 'deliverables': ['确权开立服务源码目录'], 'completion_criteria': '代码下载完成，项目目录存在且包含pom.xml文件', 'parameters': {'git_url': 'http://localhost:30000/ls/crcl-open.git', 'local_path': '/Users/renyu/Documents/create_project/链数中建一局_1753014264/crcl-open'}}, {'task_id': 'task_004', 'service_name': '用户服务', 'task_type': 'code_analysis', 'priority': 3, 'dependencies': ['task_002'], 'estimated_duration': '20分钟', 'description': '分析用户服务代码结构，确定MultiorgManageController添加位置', 'implementation_details': '分析项目package结构和controller层，找到或创建MultiorgManageController类的最佳位置', 'deliverables': ['代码结构从Controller层开始到数据获取的完整路径'], 'completion_criteria': '确定MultiorgManageController的包路径和文件位置，明确依赖的Service层结构', 'parameters': {'project_path': '/Users/renyu/Documents/create_project/链数中建一局_1753014264/zqyl-user-center-service', 'target_controller': 'MultiorgManageController', 'target_api': '/general/multiorgManage/queryCompanyUnitList'}}, {'task_id': 'task_005', 'service_name': '确权开立服务', 'task_type': 'code_analysis', 'priority': 3, 'dependencies': ['task_003'], 'estimated_duration': '20分钟', 'description': '分析确权开立服务代码结构，确定LsLimitController添加位置', 'implementation_details': '分析项目package结构和controller层，找到或创建LsLimitController类的最佳位置，支持两个接口开发', 'deliverables': ['代码结构从Controller层开始到数据获取的完整路径', 'Feign客户端配置方案'], 'completion_criteria': '确定LsLimitController的包路径和文件位置，明确服务间调用的Feign配置', 'parameters': {'project_path': '/Users/renyu/Documents/create_project/链数中建一局_1753014264/crcl-open', 'target_controller': 'LsLimitController', 'target_apis': ['/crcl-open-api/lsLimit/listUnitLimitByCompanyId', '/crcl-open-api/lsLimit/listUnitLimitByCompanyIdExport']}}, {'task_id': 'task_006', 'service_name': '用户服务', 'task_type': 'config', 'priority': 4, 'dependencies': ['task_004'], 'estimated_duration': '15分钟', 'description': '配置用户服务数据库连接：jdbc:mysql://localhost:6446/dbwebappdb', 'implementation_details': '修改application.yml文件，配置数据库连接信息包括URL、用户名密码和连接池设置', 'deliverables': ['数据库配置文件', '连接测试报告'], 'completion_criteria': 'application.yml文件已更新，数据库连接配置正确且可连通', 'parameters': {'config_file': '/Users/renyu/Documents/create_project/链数中建一局_1753014264/zqyl-user-center-service/src/main/resources/application.yml', 'database_url': 'jdbc:mysql://localhost:6446/dbwebappdb?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC&characterEncoding=utf8&useUnicode=true', 'username': 'dbwebapp', 'password': 'dbwebapp'}}, {'task_id': 'task_007', 'service_name': '用户服务', 'task_type': 'database', 'priority': 5, 'dependencies': ['task_006'], 'estimated_duration': '15分钟', 'description': '创建t_cust_multiorg_unit表，包含id,company_id,unit_code,unit_name等字段', 'implementation_details': '编写建表SQL脚本，定义主键、索引和字段约束，创建对应的Entity和Mapper文件', 'deliverables': ['建表SQL脚本', 'Entity实体类', 'Mapper接口文件'], 'completion_criteria': '表结构创建成功，Entity和Mapper文件可正常编译，支持基本CRUD操作', 'parameters': {'table_name': 't_cust_multiorg_unit', 'sql_location': 'src/main/resources/sql/t_cust_multiorg_unit.sql'}}, {'task_id': 'task_008', 'service_name': '用户服务', 'task_type': 'api', 'priority': 6, 'dependencies': ['task_007'], 'estimated_duration': '60分钟', 'description': '实现GET /general/multiorgManage/queryCompanyUnitList接口', 'implementation_details': '在MultiorgManageController中实现查询接口，支持条件查询和分页，返回规定的字段格式', 'deliverables': ['MultiorgManageController类', 'Service业务逻辑层', '接口文档'], 'completion_criteria': '接口可正常访问，返回数据格式符合规范，支持条件查询和分页功能', 'parameters': {'project_path': '/Users/renyu/Documents/create_project/链数中建一局_1753014264/zqyl-user-center-service', 'api_path': '/general/multiorgManage/queryCompanyUnitList', 'http_method': 'GET', 'content_type': 'application/json', 'request_params': {'unitCode': '组织单元编码(可选)', 'openStatus': '开通状态(可选)', 'unitList': '组织单元列表(可选)'}, 'response_params': {'unitId': '组织单元ID', 'unitTypeDicType': '组织单元类型字典类型', 'unitTypeId': '组织单元类型ID', 'openStatus': '开通状态', 'unitCode': '组织单元编码', 'unitName': '组织单元名称'}, 'business_logic': '根据查询条件查询组织单元信息，支持按编码、状态等条件筛选', 'data_source': 't_cust_multiorg_unit表', 'validation_rules': {'unitCode': '长度不超过50字符', 'openStatus': '取值范围0-1'}}}, {'task_id': 'task_009', 'service_name': '确权开立服务', 'task_type': 'api', 'priority': 7, 'dependencies': ['task_008'], 'estimated_duration': '90分钟', 'description': '实现GET /crcl-open-api/lsLimit/listUnitLimitByCompanyId接口，调用用户服务', 'implementation_details': '在LsLimitController中实现额度查询接口，配置Feign客户端调用用户服务接口获取组织单元信息', 'deliverables': ['LsLimitController类', 'Feign客户端配置', '业务逻辑层'], 'completion_criteria': '接口可正常访问，能成功调用用户服务，返回额度数据格式正确', 'parameters': {'project_path': '/Users/renyu/Documents/create_project/链数中建一局_1753014264/crcl-open', 'api_path': '/crcl-open-api/lsLimit/listUnitLimitByCompanyId', 'http_method': 'GET', 'content_type': 'application/json', 'request_params': {'gwCompanyId': '公司ID(必填)', 'unitName': '组织单元名称(可选)', 'limitSource': '额度来源(可选)', 'bizType': '业务类型(必填)', 'page': '页码(可选,默认1)', 'pageRow': '每页行数(可选,默认10)'}, 'response_params': {'totalLimitAmt': '总额度金额', 'usedLimitAmt': '已用额度金额', 'usableLimitAmt': '可用额度金额', 'unitLimitListDetail': '单元额度详情列表'}, 'business_logic': '根据公司ID和筛选条件查询组织单元额度信息，调用用户服务获取组织单元基础信息', 'data_source': '本地额度表 + 用户服务接口', 'external_call': '/general/multiorgManage/queryCompanyUnitList', 'validation_rules': {'gwCompanyId': '必填，数值类型', 'bizType': '必填，业务类型枚举值', 'page': '正整数，默认1', 'pageRow': '正整数，范围1-100'}}}, {'task_id': 'task_010', 'service_name': '确权开立服务', 'task_type': 'api', 'priority': 8, 'dependencies': ['task_009'], 'estimated_duration': '45分钟', 'description': '实现GET /crcl-open-api/lsLimit/listUnitLimitByCompanyIdExport导出接口', 'implementation_details': '在LsLimitController中实现Excel导出接口，复用listUnitLimitByCompanyId的数据逻辑', 'deliverables': ['导出接口方法', 'Excel工具类', '导出模板文件'], 'completion_criteria': '接口可正常访问，能成功导出Excel文件，表头和数据格式正确', 'parameters': {'project_path': '/Users/renyu/Documents/create_project/链数中建一局_1753014264/crcl-open', 'api_path': '/crcl-open-api/lsLimit/listUnitLimitByCompanyIdExport', 'http_method': 'GET', 'content_type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'request_params': {'gwCompanyId': '公司ID(必填)', 'unitName': '组织单元名称(可选)', 'limitSource': '额度来源(可选)', 'bizType': '业务类型(必填)'}, 'response_params': {'file': 'Excel文件流', 'filename': '导出文件名', 'contentType': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'}, 'business_logic': '复用listUnitLimitByCompanyId接口的查询逻辑，将结果导出为Excel格式', 'data_source': '调用listUnitLimitByCompanyId接口获取数据', 'export_format': 'xlsx', 'export_headers': ['组织单元名称', '额度名称', '额度类型', '已分配额度', '已用额度', '可用额度'], 'validation_rules': {'gwCompanyId': '必填，数值类型', 'bizType': '必填，业务类型枚举值'}}}, {'task_id': 'task_011', 'service_name': '系统', 'task_type': 'integration_test', 'priority': 9, 'dependencies': ['task_008', 'task_009', 'task_010'], 'estimated_duration': '30分钟', 'description': '测试确权开立服务调用用户服务接口的完整流程', 'implementation_details': '编写集成测试用例，验证服务间调用正确性和数据完整性', 'deliverables': ['集成测试用例', '测试数据脚本', '测试报告'], 'completion_criteria': '所有测试用例通过，接口调用链路正常，数据返回格式正确', 'parameters': {'test_scenarios': ['组织单元额度查询测试'], 'test_data': {'gwCompanyId': 1, 'unitName': '测试单元', 'bizType': 80}}}, {'task_id': 'task_012', 'service_name': '系统', 'task_type': 'deployment', 'priority': 10, 'dependencies': ['task_011'], 'estimated_duration': '20分钟', 'description': '提交代码到GitLab仓库，commit message: feat: 新增组织单元额度管理功能', 'implementation_details': '执行git add、git commit和git push命令，提交所有新增和修改的代码文件', 'deliverables': ['Git提交记录', '代码合并报告', '部署文档'], 'completion_criteria': '代码成功提交到GitLab仓库，commit信息清晰，无冲突', 'parameters': {'repositories': [{'path': '/Users/renyu/Documents/create_project/链数中建一局_1753014264/zqyl-user-center-service', 'changes': '新增组织单元查询接口'}, {'path': '/Users/renyu/Documents/create_project/链数中建一局_1753014264/crcl-open', 'changes': '新增组织单元额度列表和导出接口'}]}}]
2025-07-20 20:37:53 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 🔢 生成的任务数量: 12
2025-07-20 20:37:53 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 已保存 12 个任务到数据库
2025-07-20 20:37:53 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 已生成并保存 12 个任务到数据库
2025-07-20 20:37:53 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📤 最终服务列表: ['用户服务', '确权开立服务', '多组织单元管理服务']
2025-07-20 20:37:53 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📤 生成并行任务批次: [{'batch_id': 'batch_1', 'services': ['用户服务', '确权开立服务', '多组织单元管理服务'], 'dependencies': []}]
2025-07-20 20:37:53 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📤 输出状态键: ['design_doc', 'project_name', 'identified_services', 'service_dependencies', 'task_execution_plan', 'parallel_tasks', 'git_repo_url', 'target_branch', 'project_paths', 'output_path', 'repo_initialized', 'generated_services', 'generated_apis', 'generated_sql', 'service_interconnections', 'unit_test_results', 'test_coverage', 'interface_compatibility', 'code_review_results', 'static_analysis_results', 'security_scan_results', 'commit_hashes', 'push_results', 'pr_urls', 'current_phase', 'completed_services', 'failed_services', 'retry_count', 'execution_errors', 'generated_tasks']
2025-07-20 20:37:53 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📤 输出 - 识别服务: ['用户服务', '确权开立服务', '多组织单元管理服务']
2025-07-20 20:37:53 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📤 输出 - 当前阶段: intelligent_coding
2025-07-20 20:37:53 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 任务拆分完成，识别 3 个服务，生成 12 个任务
2025-07-20 20:37:53 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🚀 Git管理节点开始执行...
2025-07-20 20:37:53 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-20 20:37:53 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🎯 git_management_node 开始执行任务...
2025-07-20 20:37:53 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 📋 找到 1 个可执行任务
2025-07-20 20:37:53 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🚀 开始执行任务: task_001 (git_extraction)
2025-07-20 20:37:53 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_001 已被 git_management_node 领取
2025-07-20 20:37:53 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🔍 执行Git提取任务: task_001
2025-07-20 20:37:53 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 📄 提取源文本: 解析设计文档，提取用户服务 http://localhost:30000/ls/zqyl-user-center-service.git 和确权开立服务 http://localhost:30000/ls/crcl-open.git 仓库地址 从设计文档提取GitLab仓库地址...
2025-07-20 20:37:53 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🔍 开始从文本提取Git URL...
2025-07-20 20:37:53 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 提取到 0 个Git仓库
2025-07-20 20:37:53 - src.corder_integration.langgraph.nodes.git_management_node - WARNING - ⚠️ 未从任务中提取到任何Git仓库URL
2025-07-20 20:37:53 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_001 状态更新为 failed
2025-07-20 20:37:53 - src.corder_integration.langgraph.nodes.git_management_node - ERROR - ❌ 任务 task_001 执行失败: 未从任务中提取到Git仓库URL
2025-07-20 20:37:53 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ Git管理任务执行完成，共处理 1 个任务
2025-07-20 20:37:53 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ Git管理节点完成 - 提取: 0 个仓库, 克隆: 0 个仓库, 仓库初始化状态: False
2025-07-20 20:37:53 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🚀 Git管理节点开始执行...
2025-07-20 20:37:53 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-20 20:37:53 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🎯 git_management_node 开始执行任务...
2025-07-20 20:37:53 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ℹ️ 没有可执行的Git管理任务
2025-07-20 20:37:53 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ Git管理节点完成 - 提取: 0 个仓库, 克隆: 0 个仓库, 仓库初始化状态: False
2025-07-20 20:37:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-20 20:37:53 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-20 20:37:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: config.yaml
2025-07-20 20:37:53 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-20 20:37:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-20 20:37:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-20 20:37:53 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-20 20:37:53 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-20 20:37:53 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 增强版模板+AI生成器初始化完成
2025-07-20 20:37:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 增强版模板+AI代码生成器初始化完成
2025-07-20 20:37:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 从工作流状态获取设计文档 (4936 字符)
2025-07-20 20:37:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-20 20:37:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-20 20:37:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-20 20:37:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-20 20:37:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-20 20:37:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-20 20:37:53 - src.corder_integration.langgraph.workflow_orchestrator - ERROR - 工作流执行失败: At key 'repo_initialized': Can receive only one value per step. Use an Annotated key to handle multiple values.
For troubleshooting, visit: https://python.langchain.com/docs/troubleshooting/errors/INVALID_CONCURRENT_GRAPH_UPDATE
2025-07-20 20:37:53 - werkzeug - INFO - 127.0.0.1 - - [20/Jul/2025 20:37:53] "POST /api/coder-agent/process-document HTTP/1.1" 200 -
2025-07-20 21:21:59 - system - INFO - ==================================================
2025-07-20 21:21:59 - system - INFO - 🚀 智能分析系统日志系统初始化完成
2025-07-20 21:21:59 - system - INFO - 📁 日志根目录: /Users/renyu/Documents/ai_project/document_analyzer/logs
2025-07-20 21:21:59 - system - INFO - 📊 日志级别: INFO
2025-07-20 21:21:59 - system - INFO - 📅 按日期轮转: 每天午夜自动轮转
2025-07-20 21:21:59 - system - INFO - 📂 按月分目录: logs/YYYY-MM/
2025-07-20 21:21:59 - system - INFO - 📝 主日志: logs/2025-07/app.log
2025-07-20 21:21:59 - system - INFO - 🔧 API日志: logs/2025-07/api_server.log
2025-07-20 21:21:59 - system - INFO - 🗂️ 保留天数: 7 天
2025-07-20 21:21:59 - system - INFO - ==================================================
2025-07-20 21:22:03 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-20 21:22:03 - root - WARNING - SQLite检查点不可用，将仅使用内存检查点
2025-07-20 21:22:03 - src.utils.task_storage - INFO - 数据库初始化成功
2025-07-20 21:22:03 - markdown_storage - INFO - Markdown存储管理器初始化完成
2025-07-20 21:22:03 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-20 21:22:03 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-20 21:22:03 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-20 21:22:03 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-20 21:22:03 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-20 21:22:03 - WeaviateVectorDatabase - INFO - ✅ Weaviate连接成功: http://localhost:8080 (gRPC: 50051)
2025-07-20 21:22:03 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/schema/AnalyDesignDocuments "HTTP/1.1 200 OK"
2025-07-20 21:22:03 - WeaviateVectorDatabase - INFO - ✅ Weaviate集合已存在: AnalyDesignDocuments
2025-07-20 21:22:03 - AnalysisServiceManager - INFO - 初始化向量数据库: weaviate
2025-07-20 21:22:04 - sentence_transformers.SentenceTransformer - INFO - Use pytorch device_name: mps
2025-07-20 21:22:04 - sentence_transformers.SentenceTransformer - INFO - Load pretrained SentenceTransformer: BAAI/bge-large-zh
2025-07-20 21:22:09 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-20 21:22:10 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-20 21:22:10 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-20 21:22:10 - src.utils.weaviate_helper - INFO - 成功连接到 Weaviate: localhost:8080
2025-07-20 21:22:10 - AnalysisServiceManager - INFO - 分析服务管理器初始化完成
2025-07-20 21:22:10 - src.utils.enhanced_analyzer - INFO - 增强分析器初始化完成
2025-07-20 21:22:18 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:8082
 * Running on http://26.26.26.1:8082
2025-07-20 21:22:18 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-07-20 21:22:18 - werkzeug - INFO -  * Restarting with stat
2025-07-20 21:22:18 - system - INFO - ==================================================
2025-07-20 21:22:18 - system - INFO - 🚀 智能分析系统日志系统初始化完成
2025-07-20 21:22:18 - system - INFO - 📁 日志根目录: /Users/renyu/Documents/ai_project/document_analyzer/logs
2025-07-20 21:22:18 - system - INFO - 📊 日志级别: INFO
2025-07-20 21:22:18 - system - INFO - 📅 按日期轮转: 每天午夜自动轮转
2025-07-20 21:22:18 - system - INFO - 📂 按月分目录: logs/YYYY-MM/
2025-07-20 21:22:18 - system - INFO - 📝 主日志: logs/2025-07/app.log
2025-07-20 21:22:18 - system - INFO - 🔧 API日志: logs/2025-07/api_server.log
2025-07-20 21:22:18 - system - INFO - 🗂️ 保留天数: 7 天
2025-07-20 21:22:18 - system - INFO - ==================================================
2025-07-20 21:22:20 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-20 21:22:21 - root - WARNING - SQLite检查点不可用，将仅使用内存检查点
2025-07-20 21:22:21 - src.utils.task_storage - INFO - 数据库初始化成功
2025-07-20 21:22:21 - markdown_storage - INFO - Markdown存储管理器初始化完成
2025-07-20 21:22:21 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-20 21:22:21 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-20 21:22:21 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-20 21:22:21 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-20 21:22:21 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-20 21:22:21 - WeaviateVectorDatabase - INFO - ✅ Weaviate连接成功: http://localhost:8080 (gRPC: 50051)
2025-07-20 21:22:21 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/schema/AnalyDesignDocuments "HTTP/1.1 200 OK"
2025-07-20 21:22:21 - WeaviateVectorDatabase - INFO - ✅ Weaviate集合已存在: AnalyDesignDocuments
2025-07-20 21:22:21 - AnalysisServiceManager - INFO - 初始化向量数据库: weaviate
2025-07-20 21:22:21 - sentence_transformers.SentenceTransformer - INFO - Use pytorch device_name: mps
2025-07-20 21:22:21 - sentence_transformers.SentenceTransformer - INFO - Load pretrained SentenceTransformer: BAAI/bge-large-zh
2025-07-20 21:22:26 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-20 21:22:27 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-20 21:22:27 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-20 21:22:27 - src.utils.weaviate_helper - INFO - 成功连接到 Weaviate: localhost:8080
2025-07-20 21:22:27 - AnalysisServiceManager - INFO - 分析服务管理器初始化完成
2025-07-20 21:22:27 - src.utils.enhanced_analyzer - INFO - 增强分析器初始化完成
2025-07-20 21:22:27 - werkzeug - WARNING -  * Debugger is active!
2025-07-20 21:22:27 - werkzeug - INFO -  * Debugger PIN: 587-510-452
2025-07-20 21:23:16 - src.apis.coder_agent_api - INFO - 开始处理文档: 链数中建一局_1753017796
2025-07-20 21:23:16 - src.apis.coder_agent_api - INFO - 文档长度: 4937 字符
2025-07-20 21:23:16 - src.apis.coder_agent_api - INFO - 使用LangGraph: True
2025-07-20 21:23:16 - src.apis.coder_agent_api - INFO - 代码输出路径: /Users/renyu/Documents/create_project
2025-07-20 21:23:16 - src.apis.coder_agent_api - INFO - 使用LangGraph工作流处理项目: 链数中建一局_1753017796
2025-07-20 21:23:16 - src.corder_integration.langgraph.workflow_orchestrator - INFO - 使用内存检查点
2025-07-20 21:23:16 - src.corder_integration.langgraph.workflow_orchestrator - INFO - 生成目标分支名称: 链数中建一局_1753017796 -> D_20250720_链数中建一局_1753017796
2025-07-20 21:23:16 - src.corder_integration.langgraph.workflow_orchestrator - INFO - 开始执行编码工作流: 链数中建一局_1753017796 -> /Users/renyu/Documents/create_project
2025-07-20 21:23:16 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🚀 Git管理节点开始执行...
2025-07-20 21:23:16 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-20 21:23:16 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🎯 git_management_node 开始执行任务...
2025-07-20 21:23:16 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ℹ️ 没有可执行的Git管理任务
2025-07-20 21:23:16 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ Git管理节点完成 - 提取: 0 个仓库, 克隆: 0 个仓库, 仓库初始化状态: False
2025-07-20 21:23:16 - src.corder_integration.langgraph.workflow_orchestrator - WARNING - 没有识别到任何服务，Git设置阶段结束
2025-07-20 21:23:16 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-20 21:23:16 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-20 21:23:16 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: config.yaml
2025-07-20 21:23:16 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-20 21:23:16 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-20 21:23:16 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-20 21:23:16 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-20 21:23:16 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-20 21:23:16 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 增强版模板+AI生成器初始化完成
2025-07-20 21:23:16 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 增强版模板+AI代码生成器初始化完成
2025-07-20 21:23:16 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 从工作流状态获取设计文档 (4936 字符)
2025-07-20 21:23:16 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-20 21:23:16 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-20 21:23:16 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-20 21:23:16 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-20 21:23:16 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-20 21:23:16 - src.corder_integration.langgraph.workflow_orchestrator - WARNING - 没有识别到任何服务，结束编码流程
2025-07-20 21:23:16 - src.corder_integration.langgraph.workflow_orchestrator - INFO - 工作流执行成功: 链数中建一局_1753017796, 完成服务数: 0
2025-07-20 21:23:16 - werkzeug - INFO - 127.0.0.1 - - [20/Jul/2025 21:23:16] "POST /api/coder-agent/process-document HTTP/1.1" 200 -
2025-07-20 21:24:29 - system - INFO - ==================================================
2025-07-20 21:24:29 - system - INFO - 🚀 智能分析系统日志系统初始化完成
2025-07-20 21:24:29 - system - INFO - 📁 日志根目录: /Users/renyu/Documents/ai_project/document_analyzer/logs
2025-07-20 21:24:29 - system - INFO - 📊 日志级别: INFO
2025-07-20 21:24:29 - system - INFO - 📅 按日期轮转: 每天午夜自动轮转
2025-07-20 21:24:29 - system - INFO - 📂 按月分目录: logs/YYYY-MM/
2025-07-20 21:24:29 - system - INFO - 📝 主日志: logs/2025-07/app.log
2025-07-20 21:24:29 - system - INFO - 🔧 API日志: logs/2025-07/api_server.log
2025-07-20 21:24:29 - system - INFO - 🗂️ 保留天数: 7 天
2025-07-20 21:24:29 - system - INFO - ==================================================
2025-07-20 21:24:32 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-20 21:24:32 - root - WARNING - SQLite检查点不可用，将仅使用内存检查点
2025-07-20 21:24:32 - src.utils.task_storage - INFO - 数据库初始化成功
2025-07-20 21:24:32 - markdown_storage - INFO - Markdown存储管理器初始化完成
2025-07-20 21:24:32 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-20 21:24:32 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-20 21:24:32 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-20 21:24:32 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-20 21:24:32 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-20 21:24:32 - WeaviateVectorDatabase - INFO - ✅ Weaviate连接成功: http://localhost:8080 (gRPC: 50051)
2025-07-20 21:24:32 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/schema/AnalyDesignDocuments "HTTP/1.1 200 OK"
2025-07-20 21:24:32 - WeaviateVectorDatabase - INFO - ✅ Weaviate集合已存在: AnalyDesignDocuments
2025-07-20 21:24:32 - AnalysisServiceManager - INFO - 初始化向量数据库: weaviate
2025-07-20 21:24:32 - sentence_transformers.SentenceTransformer - INFO - Use pytorch device_name: mps
2025-07-20 21:24:32 - sentence_transformers.SentenceTransformer - INFO - Load pretrained SentenceTransformer: BAAI/bge-large-zh
2025-07-20 21:24:38 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-20 21:24:38 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-20 21:24:38 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-20 21:24:38 - src.utils.weaviate_helper - INFO - 成功连接到 Weaviate: localhost:8080
2025-07-20 21:24:38 - AnalysisServiceManager - INFO - 分析服务管理器初始化完成
2025-07-20 21:24:38 - src.utils.enhanced_analyzer - INFO - 增强分析器初始化完成
2025-07-20 21:24:43 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:8082
 * Running on http://26.26.26.1:8082
2025-07-20 21:24:43 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-07-20 21:24:43 - werkzeug - INFO -  * Restarting with stat
2025-07-20 21:24:44 - system - INFO - ==================================================
2025-07-20 21:24:44 - system - INFO - 🚀 智能分析系统日志系统初始化完成
2025-07-20 21:24:44 - system - INFO - 📁 日志根目录: /Users/renyu/Documents/ai_project/document_analyzer/logs
2025-07-20 21:24:44 - system - INFO - 📊 日志级别: INFO
2025-07-20 21:24:44 - system - INFO - 📅 按日期轮转: 每天午夜自动轮转
2025-07-20 21:24:44 - system - INFO - 📂 按月分目录: logs/YYYY-MM/
2025-07-20 21:24:44 - system - INFO - 📝 主日志: logs/2025-07/app.log
2025-07-20 21:24:44 - system - INFO - 🔧 API日志: logs/2025-07/api_server.log
2025-07-20 21:24:44 - system - INFO - 🗂️ 保留天数: 7 天
2025-07-20 21:24:44 - system - INFO - ==================================================
2025-07-20 21:24:46 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-20 21:24:46 - root - WARNING - SQLite检查点不可用，将仅使用内存检查点
2025-07-20 21:24:46 - src.utils.task_storage - INFO - 数据库初始化成功
2025-07-20 21:24:46 - markdown_storage - INFO - Markdown存储管理器初始化完成
2025-07-20 21:24:46 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-20 21:24:47 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-20 21:24:47 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-20 21:24:47 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-20 21:24:47 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-20 21:24:47 - WeaviateVectorDatabase - INFO - ✅ Weaviate连接成功: http://localhost:8080 (gRPC: 50051)
2025-07-20 21:24:47 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/schema/AnalyDesignDocuments "HTTP/1.1 200 OK"
2025-07-20 21:24:47 - WeaviateVectorDatabase - INFO - ✅ Weaviate集合已存在: AnalyDesignDocuments
2025-07-20 21:24:47 - AnalysisServiceManager - INFO - 初始化向量数据库: weaviate
2025-07-20 21:24:47 - sentence_transformers.SentenceTransformer - INFO - Use pytorch device_name: mps
2025-07-20 21:24:47 - sentence_transformers.SentenceTransformer - INFO - Load pretrained SentenceTransformer: BAAI/bge-large-zh
2025-07-20 21:24:52 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-20 21:24:53 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-20 21:24:53 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-20 21:24:53 - src.utils.weaviate_helper - INFO - 成功连接到 Weaviate: localhost:8080
2025-07-20 21:24:53 - AnalysisServiceManager - INFO - 分析服务管理器初始化完成
2025-07-20 21:24:53 - src.utils.enhanced_analyzer - INFO - 增强分析器初始化完成
2025-07-20 21:24:53 - werkzeug - WARNING -  * Debugger is active!
2025-07-20 21:24:53 - werkzeug - INFO -  * Debugger PIN: 587-510-452
2025-07-20 21:24:53 - src.apis.coder_agent_api - INFO - 开始处理文档: 链数中建一局_1753017893
2025-07-20 21:24:53 - src.apis.coder_agent_api - INFO - 文档长度: 4937 字符
2025-07-20 21:24:53 - src.apis.coder_agent_api - INFO - 使用LangGraph: True
2025-07-20 21:24:53 - src.apis.coder_agent_api - INFO - 代码输出路径: /Users/renyu/Documents/create_project
2025-07-20 21:24:53 - src.apis.coder_agent_api - INFO - 使用LangGraph工作流处理项目: 链数中建一局_1753017893
2025-07-20 21:24:53 - src.corder_integration.langgraph.workflow_orchestrator - INFO - 使用内存检查点
2025-07-20 21:24:53 - src.corder_integration.langgraph.workflow_orchestrator - INFO - 生成目标分支名称: 链数中建一局_1753017893 -> D_20250720_链数中建一局_1753017893
2025-07-20 21:24:53 - src.corder_integration.langgraph.workflow_orchestrator - INFO - 开始执行编码工作流: 链数中建一局_1753017893 -> /Users/renyu/Documents/create_project
2025-07-20 21:24:53 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🚀 Git管理节点开始执行...
2025-07-20 21:24:53 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-20 21:24:53 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🎯 git_management_node 开始执行任务...
2025-07-20 21:24:53 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 📋 找到 1 个可执行任务
2025-07-20 21:24:53 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🚀 开始执行任务: task_001 (git_extraction)
2025-07-20 21:24:53 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_001 已被 git_management_node 领取
2025-07-20 21:24:53 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🔍 执行Git提取任务: task_001
2025-07-20 21:24:53 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 📄 提取源文本: 解析设计文档，提取用户服务 http://localhost:30000/ls/zqyl-user-center-service.git 和确权开立服务 http://localhost:30000/ls/crcl-open.git 仓库地址 从设计文档提取GitLab仓库地址...
2025-07-20 21:24:53 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🔍 开始从文本提取Git URL...
2025-07-20 21:24:53 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🔗 找到Git仓库: http://localhost:30000/ls/zqyl-user-center-service.git
2025-07-20 21:24:53 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🔗 找到Git仓库: http://localhost:30000/ls/crcl-open.git
2025-07-20 21:24:53 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 提取到 2 个Git仓库
2025-07-20 21:24:53 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_001 状态更新为 completed
2025-07-20 21:24:53 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 任务 task_001 执行成功
2025-07-20 21:24:53 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ Git管理任务执行完成，共处理 1 个任务
2025-07-20 21:24:53 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🚀 基于提取结果自动克隆 2 个仓库...
2025-07-20 21:24:53 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 📥 自动克隆仓库: http://localhost:30000/ls/zqyl-user-center-service.git -> /Users/renyu/Documents/create_project/链数中建一局_1753017893/zqyl-user-center-service
2025-07-20 21:24:53 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 📥 开始克隆仓库: http://localhost:30000/ls/zqyl-user-center-service.git -> /Users/renyu/Documents/create_project/链数中建一局_1753017893/zqyl-user-center-service
2025-07-20 21:24:53 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 已切换到分支: master
2025-07-20 21:24:53 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 仓库克隆成功: /Users/renyu/Documents/create_project/链数中建一局_1753017893/zqyl-user-center-service
2025-07-20 21:24:53 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 自动克隆成功: zqyl-user-center-service
2025-07-20 21:24:53 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 已标记任务 task_002 为完成状态
2025-07-20 21:24:53 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 📥 自动克隆仓库: http://localhost:30000/ls/crcl-open.git -> /Users/renyu/Documents/create_project/链数中建一局_1753017893/crcl-open
2025-07-20 21:24:53 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 📥 开始克隆仓库: http://localhost:30000/ls/crcl-open.git -> /Users/renyu/Documents/create_project/链数中建一局_1753017893/crcl-open
2025-07-20 21:24:54 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 已切换到分支: master
2025-07-20 21:24:54 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 仓库克隆成功: /Users/renyu/Documents/create_project/链数中建一局_1753017893/crcl-open
2025-07-20 21:24:54 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 自动克隆成功: crcl-open
2025-07-20 21:24:54 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 已标记任务 task_003 为完成状态
2025-07-20 21:24:54 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ Git管理节点完成 - 提取: 2 个仓库, 克隆: 2 个仓库, 仓库初始化状态: True
2025-07-20 21:24:54 - src.corder_integration.langgraph.workflow_orchestrator - WARNING - 没有识别到任何服务，Git设置阶段结束
2025-07-20 21:24:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-20 21:24:54 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-20 21:24:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: /Users/renyu/Documents/ai_project/document_analyzer/config.yaml
2025-07-20 21:24:54 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-20 21:24:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-20 21:24:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-20 21:24:54 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-20 21:24:54 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-20 21:24:54 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 增强版模板+AI生成器初始化完成
2025-07-20 21:24:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 增强版模板+AI代码生成器初始化完成
2025-07-20 21:24:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 从工作流状态获取设计文档 (4936 字符)
2025-07-20 21:24:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-20 21:24:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-20 21:24:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 第1轮找到 2 个可执行任务
2025-07-20 21:24:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 开始执行任务: task_004 (code_analysis)
2025-07-20 21:24:54 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_004 已被 intelligent_coding_node 领取
2025-07-20 21:24:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行代码分析任务: task_004
2025-07-20 21:24:54 - src.utils.java_code_analyzer - INFO - 🔍 开始分析企业级Java项目: /Users/renyu/Documents/create_project/链数中建一局_1753014264/zqyl-user-center-service
2025-07-20 21:24:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - ERROR - ❌ 项目路径不存在: 项目路径不存在: /Users/renyu/Documents/create_project/链数中建一局_1753014264/zqyl-user-center-service
2025-07-20 21:24:54 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_004 状态更新为 failed
2025-07-20 21:24:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - ERROR - ❌ 任务 task_004 执行失败: 项目路径不存在: /Users/renyu/Documents/create_project/链数中建一局_1753014264/zqyl-user-center-service
2025-07-20 21:24:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 开始执行任务: task_005 (code_analysis)
2025-07-20 21:24:54 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_005 已被 intelligent_coding_node 领取
2025-07-20 21:24:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行代码分析任务: task_005
2025-07-20 21:24:54 - src.utils.java_code_analyzer - INFO - 🔍 开始分析企业级Java项目: /Users/renyu/Documents/create_project/链数中建一局_1753014264/crcl-open
2025-07-20 21:24:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - ERROR - ❌ 项目路径不存在: 项目路径不存在: /Users/renyu/Documents/create_project/链数中建一局_1753014264/crcl-open
2025-07-20 21:24:54 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_005 状态更新为 failed
2025-07-20 21:24:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - ERROR - ❌ 任务 task_005 执行失败: 项目路径不存在: /Users/renyu/Documents/create_project/链数中建一局_1753014264/crcl-open
2025-07-20 21:24:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 第1轮执行完成，处理了 2 个任务
2025-07-20 21:24:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第2轮任务检查...
2025-07-20 21:24:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第2轮没有可执行的智能编码任务
2025-07-20 21:24:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 2 个任务，共2轮
2025-07-20 21:24:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 2 个任务
2025-07-20 21:24:54 - src.corder_integration.langgraph.workflow_orchestrator - WARNING - 没有识别到任何服务，结束编码流程
2025-07-20 21:24:54 - src.corder_integration.langgraph.workflow_orchestrator - INFO - 工作流执行成功: 链数中建一局_1753017893, 完成服务数: 0
2025-07-20 21:24:54 - werkzeug - INFO - 127.0.0.1 - - [20/Jul/2025 21:24:54] "POST /api/coder-agent/process-document HTTP/1.1" 200 -
2025-07-20 21:36:18 - system - INFO - ==================================================
2025-07-20 21:36:18 - system - INFO - 🚀 智能分析系统日志系统初始化完成
2025-07-20 21:36:19 - system - INFO - 📁 日志根目录: /Users/renyu/Documents/ai_project/document_analyzer/logs
2025-07-20 21:36:19 - system - INFO - 📊 日志级别: INFO
2025-07-20 21:36:19 - system - INFO - 📅 按日期轮转: 每天午夜自动轮转
2025-07-20 21:36:19 - system - INFO - 📂 按月分目录: logs/YYYY-MM/
2025-07-20 21:36:19 - system - INFO - 📝 主日志: logs/2025-07/app.log
2025-07-20 21:36:19 - system - INFO - 🔧 API日志: logs/2025-07/api_server.log
2025-07-20 21:36:19 - system - INFO - 🗂️ 保留天数: 7 天
2025-07-20 21:36:19 - system - INFO - ==================================================
2025-07-20 21:36:21 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-20 21:36:22 - root - WARNING - SQLite检查点不可用，将仅使用内存检查点
2025-07-20 21:36:22 - src.utils.task_storage - INFO - 数据库初始化成功
2025-07-20 21:36:22 - markdown_storage - INFO - Markdown存储管理器初始化完成
2025-07-20 21:36:22 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-20 21:36:22 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-20 21:36:22 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-20 21:36:22 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-20 21:36:22 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-20 21:36:22 - WeaviateVectorDatabase - INFO - ✅ Weaviate连接成功: http://localhost:8080 (gRPC: 50051)
2025-07-20 21:36:22 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/schema/AnalyDesignDocuments "HTTP/1.1 200 OK"
2025-07-20 21:36:22 - WeaviateVectorDatabase - INFO - ✅ Weaviate集合已存在: AnalyDesignDocuments
2025-07-20 21:36:22 - AnalysisServiceManager - INFO - 初始化向量数据库: weaviate
2025-07-20 21:36:22 - sentence_transformers.SentenceTransformer - INFO - Use pytorch device_name: mps
2025-07-20 21:36:22 - sentence_transformers.SentenceTransformer - INFO - Load pretrained SentenceTransformer: BAAI/bge-large-zh
2025-07-20 21:36:27 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-20 21:36:28 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-20 21:36:28 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-20 21:36:28 - src.utils.weaviate_helper - INFO - 成功连接到 Weaviate: localhost:8080
2025-07-20 21:36:28 - AnalysisServiceManager - INFO - 分析服务管理器初始化完成
2025-07-20 21:36:28 - src.utils.enhanced_analyzer - INFO - 增强分析器初始化完成
2025-07-20 21:36:33 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:8082
 * Running on http://26.26.26.1:8082
2025-07-20 21:36:33 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-07-20 21:36:33 - werkzeug - INFO -  * Restarting with stat
2025-07-20 21:36:33 - system - INFO - ==================================================
2025-07-20 21:36:33 - system - INFO - 🚀 智能分析系统日志系统初始化完成
2025-07-20 21:36:33 - system - INFO - 📁 日志根目录: /Users/renyu/Documents/ai_project/document_analyzer/logs
2025-07-20 21:36:33 - system - INFO - 📊 日志级别: INFO
2025-07-20 21:36:33 - system - INFO - 📅 按日期轮转: 每天午夜自动轮转
2025-07-20 21:36:33 - system - INFO - 📂 按月分目录: logs/YYYY-MM/
2025-07-20 21:36:33 - system - INFO - 📝 主日志: logs/2025-07/app.log
2025-07-20 21:36:33 - system - INFO - 🔧 API日志: logs/2025-07/api_server.log
2025-07-20 21:36:33 - system - INFO - 🗂️ 保留天数: 7 天
2025-07-20 21:36:33 - system - INFO - ==================================================
2025-07-20 21:36:36 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-20 21:36:36 - root - WARNING - SQLite检查点不可用，将仅使用内存检查点
2025-07-20 21:36:36 - src.utils.task_storage - INFO - 数据库初始化成功
2025-07-20 21:36:36 - markdown_storage - INFO - Markdown存储管理器初始化完成
2025-07-20 21:36:36 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-20 21:36:36 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-20 21:36:36 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-20 21:36:36 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-20 21:36:36 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-20 21:36:36 - WeaviateVectorDatabase - INFO - ✅ Weaviate连接成功: http://localhost:8080 (gRPC: 50051)
2025-07-20 21:36:36 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/schema/AnalyDesignDocuments "HTTP/1.1 200 OK"
2025-07-20 21:36:36 - WeaviateVectorDatabase - INFO - ✅ Weaviate集合已存在: AnalyDesignDocuments
2025-07-20 21:36:36 - AnalysisServiceManager - INFO - 初始化向量数据库: weaviate
2025-07-20 21:36:36 - sentence_transformers.SentenceTransformer - INFO - Use pytorch device_name: mps
2025-07-20 21:36:36 - sentence_transformers.SentenceTransformer - INFO - Load pretrained SentenceTransformer: BAAI/bge-large-zh
2025-07-20 21:36:42 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-20 21:36:42 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-20 21:36:42 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-20 21:36:42 - src.utils.weaviate_helper - INFO - 成功连接到 Weaviate: localhost:8080
2025-07-20 21:36:42 - AnalysisServiceManager - INFO - 分析服务管理器初始化完成
2025-07-20 21:36:42 - src.utils.enhanced_analyzer - INFO - 增强分析器初始化完成
2025-07-20 21:36:42 - werkzeug - WARNING -  * Debugger is active!
2025-07-20 21:36:42 - werkzeug - INFO -  * Debugger PIN: 587-510-452
2025-07-20 21:37:07 - src.apis.coder_agent_api - INFO - 开始处理文档: 链数中建一局_1753018627
2025-07-20 21:37:07 - src.apis.coder_agent_api - INFO - 文档长度: 4937 字符
2025-07-20 21:37:07 - src.apis.coder_agent_api - INFO - 使用LangGraph: True
2025-07-20 21:37:07 - src.apis.coder_agent_api - INFO - 代码输出路径: /Users/renyu/Documents/create_project
2025-07-20 21:37:07 - src.apis.coder_agent_api - INFO - 使用LangGraph工作流处理项目: 链数中建一局_1753018627
2025-07-20 21:37:07 - src.corder_integration.langgraph.workflow_orchestrator - INFO - 使用内存检查点
2025-07-20 21:37:07 - src.corder_integration.langgraph.workflow_orchestrator - INFO - 生成目标分支名称: 链数中建一局_1753018627 -> D_20250720_链数中建一局_1753018627
2025-07-20 21:37:07 - src.corder_integration.langgraph.workflow_orchestrator - INFO - 开始执行编码工作流: 链数中建一局_1753018627 -> /Users/renyu/Documents/create_project
2025-07-20 21:37:07 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🚀 Git管理节点开始执行...
2025-07-20 21:37:07 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-20 21:37:07 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🎯 git_management_node 开始执行任务...
2025-07-20 21:37:07 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ℹ️ 没有可执行的Git管理任务
2025-07-20 21:37:07 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ Git管理节点完成 - 提取: 0 个仓库, 克隆: 0 个仓库, 仓库初始化状态: False
2025-07-20 21:37:07 - src.corder_integration.langgraph.workflow_orchestrator - WARNING - 没有识别到任何服务，Git设置阶段结束
2025-07-20 21:37:07 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-20 21:37:07 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-20 21:37:07 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: config.yaml
2025-07-20 21:37:07 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-20 21:37:07 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-20 21:37:07 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-20 21:37:07 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-20 21:37:07 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-20 21:37:07 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 增强版模板+AI生成器初始化完成
2025-07-20 21:37:07 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 增强版模板+AI代码生成器初始化完成
2025-07-20 21:37:07 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 从工作流状态获取设计文档 (4936 字符)
2025-07-20 21:37:07 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-20 21:37:07 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-20 21:37:07 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 第1轮找到 2 个可执行任务
2025-07-20 21:37:07 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 开始执行任务: task_004 (code_analysis)
2025-07-20 21:37:07 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_004 已被 intelligent_coding_node 领取
2025-07-20 21:37:07 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行代码分析任务: task_004
2025-07-20 21:37:07 - src.utils.java_code_analyzer - INFO - 🔍 开始分析企业级Java项目: /Users/renyu/Documents/create_project/链数中建一局_1753017893/zqyl-user-center-service
2025-07-20 21:37:08 - src.utils.java_code_analyzer - INFO - ✅ 企业级项目分析完成，共分析 408 个Java文件
2025-07-20 21:37:09 - src.utils.java_code_analyzer - INFO - 📄 企业级分析报告已导出: outputs/用户服务_java_analysis_20250720_213708.md
2025-07-20 21:37:09 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_004 状态更新为 completed
2025-07-20 21:37:09 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 任务 task_004 执行成功
2025-07-20 21:37:09 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 开始执行任务: task_005 (code_analysis)
2025-07-20 21:37:09 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_005 已被 intelligent_coding_node 领取
2025-07-20 21:37:09 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行代码分析任务: task_005
2025-07-20 21:37:09 - src.utils.java_code_analyzer - INFO - 🔍 开始分析企业级Java项目: /Users/renyu/Documents/create_project/链数中建一局_1753017893/crcl-open
2025-07-20 21:37:14 - src.utils.java_code_analyzer - INFO - ✅ 企业级项目分析完成，共分析 2262 个Java文件
2025-07-20 21:37:14 - src.utils.java_code_analyzer - INFO - 📄 企业级分析报告已导出: outputs/确权开立服务_java_analysis_20250720_213714.md
2025-07-20 21:37:14 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_005 状态更新为 completed
2025-07-20 21:37:14 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 任务 task_005 执行成功
2025-07-20 21:37:14 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 第1轮执行完成，处理了 2 个任务
2025-07-20 21:37:14 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第2轮任务检查...
2025-07-20 21:37:14 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 第2轮找到 1 个可执行任务
2025-07-20 21:37:14 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 开始执行任务: task_006 (config)
2025-07-20 21:37:14 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_006 已被 intelligent_coding_node 领取
2025-07-20 21:37:14 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ⚙️ 执行配置生成任务: task_006
2025-07-20 21:37:14 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_006 状态更新为 completed
2025-07-20 21:37:14 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 任务 task_006 执行成功
2025-07-20 21:37:14 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 第2轮执行完成，处理了 1 个任务
2025-07-20 21:37:14 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第3轮任务检查...
2025-07-20 21:37:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 第3轮找到 1 个可执行任务
2025-07-20 21:37:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 开始执行任务: task_007 (database)
2025-07-20 21:37:15 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_007 已被 intelligent_coding_node 领取
2025-07-20 21:37:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🗄️ 执行数据库设计任务: task_007
2025-07-20 21:37:15 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_007 状态更新为 completed
2025-07-20 21:37:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 任务 task_007 执行成功
2025-07-20 21:37:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 第3轮执行完成，处理了 1 个任务
2025-07-20 21:37:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第4轮任务检查...
2025-07-20 21:37:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 第4轮找到 1 个可执行任务
2025-07-20 21:37:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 开始执行任务: task_008 (api)
2025-07-20 21:37:15 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_008 已被 intelligent_coding_node 领取
2025-07-20 21:37:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🌐 执行API接口生成任务: task_008
2025-07-20 21:37:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 解析的接口信息:
2025-07-20 21:37:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 接口名称: CompanyUnitList
2025-07-20 21:37:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - API路径: /general/multiorgManage/queryCompanyUnitList
2025-07-20 21:37:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - HTTP方法: GET
2025-07-20 21:37:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 输入参数: 3个
2025-07-20 21:37:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 输出参数: 6个
2025-07-20 21:37:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 业务描述: 根据查询条件查询组织单元信息，支持按编码、状态等条件筛选
2025-07-20 21:37:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 在 /Users/renyu/Documents/create_project/链数中建一局_1753017893/zqyl-user-center-service 中查找最佳Java项目路径...
2025-07-20 21:37:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 目标服务名: 用户服务
2025-07-20 21:37:16 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-20 21:37:16 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 发现Java项目: user-basic-general
2025-07-20 21:37:16 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       🎯 相对路径: zqyl-user-center-service/user-basic-service/user-basic-general
2025-07-20 21:37:16 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       📊 Java文件: 408个
2025-07-20 21:37:16 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       📐 目录深度: 3
2025-07-20 21:37:16 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       🏆 优先级分数: 750
2025-07-20 21:37:16 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 排序后的候选路径（前3个）:
2025-07-20 21:37:16 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    1. zqyl-user-center-service/user-basic-service/user-basic-general (优先级: 750)
2025-07-20 21:37:16 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 选择最佳Java项目路径:
2025-07-20 21:37:16 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 完整路径: /Users/renyu/Documents/create_project/链数中建一局_1753017893/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general
2025-07-20 21:37:16 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📋 相对路径: zqyl-user-center-service/user-basic-service/user-basic-general
2025-07-20 21:37:16 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    🏆 最终优先级: 750
2025-07-20 21:37:16 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 从API路径 /general/multiorgManage/queryCompanyUnitList 提取关键字: multiorgManage
2025-07-20 21:37:16 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 在项目中搜索关键字相关路径: multiorgManage
2025-07-20 21:37:16 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 找到匹配目录: multiorg (得分: 25)
2025-07-20 21:37:16 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 找到匹配目录: multiorg (得分: 25)
2025-07-20 21:37:16 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 找到匹配目录: multiorg (得分: 25)
2025-07-20 21:37:16 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 找到匹配目录: multiorg (得分: 25)
2025-07-20 21:37:16 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 找到匹配目录: multiorg (得分: 25)
2025-07-20 21:37:16 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    ✅ 选择最佳匹配目录: multiorg (路径: src/main/java/com/yljr/user/basicgeneral/beans/resp/multiorg)
2025-07-20 21:37:16 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 基于API关键字 'multiorgManage' 找到现有路径: /Users/renyu/Documents/create_project/链数中建一局_1753017893/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general/src/main/java/com/yljr/user/basicgeneral/beans/resp/multiorg
2025-07-20 21:37:16 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -  分析目标项目: /Users/renyu/Documents/create_project/链数中建一局_1753017893/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general/src/main/java/com/yljr/user/basicgeneral/beans/resp/multiorg
2025-07-20 21:37:16 - src.apis.project_analysis_api - INFO - 🔍 开始分析项目用于代码生成: /Users/renyu/Documents/create_project/链数中建一局_1753017893/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general/src/main/java/com/yljr/user/basicgeneral/beans/resp/multiorg
2025-07-20 21:37:16 - src.apis.project_analysis_api - INFO - 🔍 在 /Users/renyu/Documents/create_project/链数中建一局_1753017893/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general/src/main/java/com/yljr/user/basicgeneral/beans/resp/multiorg 中查找最佳Java项目路径...
2025-07-20 21:37:16 - src.apis.project_analysis_api - INFO - 🎯 目标服务名: 用户服务
2025-07-20 21:37:16 - src.apis.project_analysis_api - WARNING - ⚠️ 在 /Users/renyu/Documents/create_project/链数中建一局_1753017893/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general/src/main/java/com/yljr/user/basicgeneral/beans/resp/multiorg 中未找到包含Java文件的src/main/java结构
2025-07-20 21:37:16 - src.apis.project_analysis_api - INFO - 📂 实际分析路径: /Users/renyu/Documents/create_project/链数中建一局_1753017893/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general/src/main/java/com/yljr/user/basicgeneral/beans/resp/multiorg
2025-07-20 21:37:16 - src.utils.java_code_analyzer - INFO - 🔍 开始分析企业级Java项目: /Users/renyu/Documents/create_project/链数中建一局_1753017893/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general/src/main/java/com/yljr/user/basicgeneral/beans/resp/multiorg
2025-07-20 21:37:16 - src.utils.java_code_analyzer - INFO - ✅ 企业级项目分析完成，共分析 6 个Java文件
2025-07-20 21:37:16 - src.apis.project_analysis_api - INFO - 📦 动态检测到基础包: com.yljr.user.basicgeneral (出现6次)
2025-07-20 21:37:16 - src.apis.project_analysis_api - INFO - 📦 动态检测到基础包: com.yljr.user.basicgeneral (出现6次)
2025-07-20 21:37:16 - src.apis.project_analysis_api - INFO - 📦 动态检测到基础包: com.yljr.user.basicgeneral (出现6次)
2025-07-20 21:37:16 - src.apis.project_analysis_api - INFO - ✅ 项目分析完成，已提取代码生成上下文
2025-07-20 21:37:16 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 从编码代理获取设计文档内容 (4936 字符)
2025-07-20 21:37:16 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 设计文档内容已添加到项目上下文 (4936 字符)
2025-07-20 21:37:16 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 项目中未检测到Controller
2025-07-20 21:37:16 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 Controller关联性分析:
2025-07-20 21:37:16 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 总Controller数: 0
2025-07-20 21:37:16 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 相关Controller数: 0
2025-07-20 21:37:16 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 关联度得分: 0.00
2025-07-20 21:37:16 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🤖 调用volcengine分析项目策略...发送的prompt信息: Java文件数=6, Controller数=0
2025-07-20 21:37:20 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-20 21:37:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 项目策略判断: create_new - 项目中没有找到任何相关的Controller（Controller总数为0），且业务关联度为0.00，表明这是一个全新的业务领域或现有项目中尚未开发相关功能。根据策略判断标准，当无相关Controller或关联度较低时，应创建新的Controller。
2025-07-20 21:37:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📁 策略2：直接使用新文件生成策略，原因: 项目中没有找到任何相关的Controller（Controller总数为0），且业务关联度为0.00，表明这是一个全新的业务领域或现有项目中尚未开发相关功能。根据策略判断标准，当无相关Controller或关联度较低时，应创建新的Controller。
2025-07-20 21:37:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -  调用volcengine大模型生成代码...
2025-07-20 21:37:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 开始代码生成...
2025-07-20 21:37:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎨 使用模板+AI混合模式生成代码
2025-07-20 21:37:20 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - 🎨 开始增强版代码生成: CompanyUnitList
2025-07-20 21:37:20 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - 🔍 解析到表结构: t_cust_multiorg_unit (14列)
2025-07-20 21:37:20 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - 🤖 使用智能文件复用和专门化提示词模板增强代码...
2025-07-20 21:37:20 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 设置设计文档内容，长度: 4936
2025-07-20 21:37:20 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO - 🔍 分析项目结构: /Users/renyu/Documents/create_project/链数中建一局_1753017893/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general/src/main/java/com/yljr/user/basicgeneral/beans/resp/multiorg
2025-07-20 21:37:20 - src.corder_integration.code_generator.intelligent_file_reuse_manager - WARNING - ⚠️ 未找到Java源码目录: /Users/renyu/Documents/create_project/链数中建一局_1753017893/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general/src/main/java/com/yljr/user/basicgeneral/beans/resp/multiorg/src/main/java
2025-07-20 21:37:20 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO - 🤔 决策文件复用策略: CompanyUnitList
2025-07-20 21:37:20 - src.corder_integration.code_generator.intelligent_file_reuse_manager - WARNING - ⚠️ 项目结构未初始化，使用默认策略
2025-07-20 21:37:20 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - 📋 智能文件复用策略:
2025-07-20 21:37:20 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO -    controller: create_new - 项目结构未分析，创建新文件
2025-07-20 21:37:20 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO -    application_service: create_new - 项目结构未分析，创建新文件
2025-07-20 21:37:20 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO -    domain_service: create_new - 项目结构未分析，创建新文件
2025-07-20 21:37:20 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO -    mapper: create_new - 项目结构未分析，创建新文件
2025-07-20 21:37:20 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO -    feign_client: create_new - 项目结构未分析，创建新文件
2025-07-20 21:37:20 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO -    xml_file: create_new - 项目结构未分析，创建新文件
2025-07-20 21:37:20 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO - 🔗 生成完整调用链: CompanyUnitList
2025-07-20 21:37:20 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO - 🔍 找到表结构: T_CUST_MULTIORG_UNIT
2025-07-20 21:37:20 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO - ✅ 解析到 14 个字段
2025-07-20 21:37:20 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO - ✅ 调用链代码生成完成，包含 9 个组件
2025-07-20 21:37:20 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 智能文件复用生成了 9 个组件
2025-07-20 21:37:20 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - 📝 需要创建 9 个新文件
2025-07-20 21:37:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI生成成功，生成代码类型: ['controller_method', 'application_service', 'domain_service', 'domain_service_impl', 'request_dto', 'response_dto', 'mapper', 'feign_client', 'xml_mapping']
2025-07-20 21:37:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 开始写入生成的代码文件...
2025-07-20 21:37:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔧 统一类名基础: CompanyUnitList
2025-07-20 21:37:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ controller_method 类名: CompanyUnitListController
2025-07-20 21:37:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ application_service 类名: CompanyUnitListApplication
2025-07-20 21:37:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ domain_service_impl 类名: CompanyUnitListServiceImpl
2025-07-20 21:37:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ request_dto 类名: CompanyUnitListReq
2025-07-20 21:37:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ response_dto 类名: CompanyUnitListResp
2025-07-20 21:37:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 标准化后的代码类型: ['controller_method', 'application_service', 'domain_service', 'domain_service_impl', 'request_dto', 'response_dto', 'mapper', 'feign_client', 'xml_mapping']
2025-07-20 21:37:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🤖 调用volcengine判断Java文件输出路径...
2025-07-20 21:37:42 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-20 21:37:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM路径判断成功，配置了 9 个Java文件路径
2025-07-20 21:37:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 controller_method: CompanyUnitListController.java
2025-07-20 21:37:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 application_service: CompanyUnitListApplication.java
2025-07-20 21:37:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 domain_service: CompanyUnitListService.java
2025-07-20 21:37:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 domain_service_impl: CompanyUnitListServiceImpl.java
2025-07-20 21:37:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 request_dto: CompanyUnitListReq.java
2025-07-20 21:37:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 response_dto: CompanyUnitListResp.java
2025-07-20 21:37:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 mapper: CompanyUnitListMapper.java
2025-07-20 21:37:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 feign_client: CompanyUnitListFeignClient.java
2025-07-20 21:37:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 xml_mapping: CompanyUnitListMapper.xml
2025-07-20 21:37:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 代码内容 (controller_method):

package com.yljr.crcl.interfaces;

import com.yljr.crcl.interfaces.dto.CompanyUnitListReq;
import com.yljr.crcl.interfaces.dto.CompanyUnitListResp;
import com.yljr.common.dto.Response;
import org.springframework.web.bind.annotation.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.validation.annotation.Validated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import io.swagger.annotations.ApiOperation;

import javax.validation.Valid;

/**
 * CompanyUnitList Controller
 * 根据查询条件查询组织单元信息，支持按编码、状态等条件筛选
 */
@Validated
@RestController
@RequestMapping("/api/companyUnitList")
public class CompanyUnitListController {

    private final Logger logger = LoggerFactory.getLogger(this.getClass());
    
    @Autowired
    private CompanyUnitListApplication companyUnitListApplication;

    /**
     * 根据查询条件查询组织单元信息，支持按编码、状态等条件筛选
     */
    @PostMapping("/companyUnitList")
    @ApiOperation(value = "根据查询条件查询组织单元信息，支持按编码、状态等条件筛选")
    public Response<CompanyUnitListResp> companyUnitList(@RequestBody @Valid CompanyUnitListReq request) {
        try {
            logger.info("开始执行companyUnitList，请求参数: {}", request);
            
            return companyUnitListApplication.companyUnitList(request);
            
        } catch (Exception e) {
            logger.error("执行companyUnitList失败", e);
            return Response.error("执行失败: " + e.getMessage());
        }
    }
}
2025-07-20 21:37:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: /Users/renyu/Documents/create_project/链数中建一局_1753017893/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general/src/main/java/com/yljr/user/basicgeneral/beans/resp/multiorg/src/main/java/com/yljr/user/basicgeneral/interfaces/facade/CompanyUnitListController.java
2025-07-20 21:37:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: /Users/renyu/Documents/create_project/链数中建一局_1753017893/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general/src/main/java/com/yljr/user/basicgeneral/beans/resp/multiorg/src/main/java/com/yljr/user/basicgeneral/interfaces/facade/CompanyUnitListController.java
2025-07-20 21:37:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 代码内容 (application_service):

package com.yljr.crcl.application.service;

import com.yljr.crcl.interfaces.dto.CompanyUnitListReq;
import com.yljr.crcl.interfaces.dto.CompanyUnitListResp;
import org.springframework.stereotype.Service;
import org.springframework.beans.factory.annotation.Autowired;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * CompanyUnitList Application Service
 * 根据查询条件查询组织单元信息，支持按编码、状态等条件筛选
 */
@Service
public class CompanyUnitListApplication {

    private static final Logger logger = LoggerFactory.getLogger(CompanyUnitListApplication.class);
    
    @Autowired
    private CompanyUnitListFeignClient companyunitlistFeignClient;

    /**
     * 根据查询条件查询组织单元信息，支持按编码、状态等条件筛选
     */
    public CompanyUnitListResp CompanyUnitList(CompanyUnitListReq request) {
        logger.info("Application Service执行CompanyUnitList，参数: {}", request);
        
        try {
            return companyunitlistFeignClient.CompanyUnitList(request);
        } catch (Exception e) {
            logger.error("Application Service执行CompanyUnitList失败", e);
            throw new RuntimeException("执行失败: " + e.getMessage(), e);
        }
    }
}
2025-07-20 21:37:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: /Users/renyu/Documents/create_project/链数中建一局_1753017893/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general/src/main/java/com/yljr/user/basicgeneral/beans/resp/multiorg/src/main/java/com/yljr/user/basicgeneral/application/service/CompanyUnitListApplication.java
2025-07-20 21:37:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: /Users/renyu/Documents/create_project/链数中建一局_1753017893/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general/src/main/java/com/yljr/user/basicgeneral/beans/resp/multiorg/src/main/java/com/yljr/user/basicgeneral/application/service/CompanyUnitListApplication.java
2025-07-20 21:37:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 代码内容 (domain_service):
package com.yljr.crcl.domain.service;

import com.yljr.crcl.interfaces.dto.CompanyUnitListReq;
import com.yljr.crcl.interfaces.dto.CompanyUnitListResp;

/**
 * CompanyUnitList Domain Service Interface
 * 根据查询条件查询组织单元信息，支持按编码、状态等条件筛选
 */
public interface CompanyUnitListService {

    /**
     * 根据查询条件查询组织单元信息，支持按编码、状态等条件筛选
     */
    CompanyUnitListResp companyUnitList(CompanyUnitListReq request);
}
2025-07-20 21:37:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: /Users/renyu/Documents/create_project/链数中建一局_1753017893/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general/src/main/java/com/yljr/user/basicgeneral/beans/resp/multiorg/src/main/java/com/yljr/user/basicgeneral/domain/service/CompanyUnitListService.java
2025-07-20 21:37:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: /Users/renyu/Documents/create_project/链数中建一局_1753017893/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general/src/main/java/com/yljr/user/basicgeneral/beans/resp/multiorg/src/main/java/com/yljr/user/basicgeneral/domain/service/CompanyUnitListService.java
2025-07-20 21:37:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 代码内容 (domain_service_impl):
package com.yljr.crcl.domain.service.impl;

import com.yljr.crcl.domain.service.CompanyUnitListService;
import com.yljr.crcl.interfaces.dto.CompanyUnitListReq;
import com.yljr.crcl.interfaces.dto.CompanyUnitListResp;
import com.yljr.crcl.domain.entity.CompanyUnitList;
import com.yljr.crcl.domain.mapper.CompanyUnitListMapper;
import org.springframework.stereotype.Service;
import org.springframework.beans.factory.annotation.Autowired;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import java.util.List;

/**
 * CompanyUnitList Domain Service Implementation
 * 根据查询条件查询组织单元信息，支持按编码、状态等条件筛选
 */
@Service
public class CompanyUnitListServiceImpl implements CompanyUnitListService {

    private static final Logger logger = LoggerFactory.getLogger(CompanyUnitListServiceImpl.class);
    
    @Autowired
    private CompanyUnitListMapper companyunitlistMapper;

    /**
     * 根据查询条件查询组织单元信息，支持按编码、状态等条件筛选
     */
    @Override
    public CompanyUnitListResp companyUnitList(CompanyUnitListReq request) {
        logger.info("Domain Service执行CompanyUnitList，参数: {}", request);
        
        try {
        // 调用Mapper查询数据
        List<CompanyUnitList> dataList = companyunitlistMapper.selectCompanyUnitListList(request);
        
        // 构建响应
        CompanyUnitListResp response = new CompanyUnitListResp();
        response.setDataList(dataList);
        response.setTotalCount(dataList.size());
        
        return response;
        } catch (Exception e) {
            logger.error("Domain Service执行CompanyUnitList失败", e);
            throw new RuntimeException("执行失败: " + e.getMessage(), e);
        }
    }
}
2025-07-20 21:37:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: /Users/renyu/Documents/create_project/链数中建一局_1753017893/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general/src/main/java/com/yljr/user/basicgeneral/beans/resp/multiorg/src/main/java/com/yljr/user/basicgeneral/domain/service/impl/CompanyUnitListServiceImpl.java
2025-07-20 21:37:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: /Users/renyu/Documents/create_project/链数中建一局_1753017893/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general/src/main/java/com/yljr/user/basicgeneral/beans/resp/multiorg/src/main/java/com/yljr/user/basicgeneral/domain/service/impl/CompanyUnitListServiceImpl.java
2025-07-20 21:37:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 代码内容 (request_dto):

package com.yljr.crcl.interfaces.dto;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Date;
import java.math.BigDecimal;

/**
 * CompanyUnitList 请求DTO
 * 根据查询条件查询组织单元信息，支持按编码、状态等条件筛选
 */
@ApiModel(value = "CompanyUnitListReq", description = "根据查询条件查询组织单元信息，支持按编码、状态等条件筛选")
public class CompanyUnitListReq {

    /**
     * 组织单元编码(可选)
     */
    @ApiModelProperty(value = "组织单元编码(可选)")
    private String unitCode;
    /**
     * 开通状态(可选)
     */
    @ApiModelProperty(value = "开通状态(可选)")
    private String openStatus;
    /**
     * 组织单元列表(可选)
     */
    @ApiModelProperty(value = "组织单元列表(可选)")
    private String unitList;

    public String getUnitCode() {
        return unitCode;
    }

    public void setUnitCode(String unitCode) {
        this.unitCode = unitCode;
    }
    public String getOpenStatus() {
        return openStatus;
    }

    public void setOpenStatus(String openStatus) {
        this.openStatus = openStatus;
    }
    public String getUnitList() {
        return unitList;
    }

    public void setUnitList(String unitList) {
        this.unitList = unitList;
    }

    @Override
    public String toString() {
        return "CompanyUnitListReq{" +
                "unitCode=" + unitCode + ", " +
                "openStatus=" + openStatus + ", " +
                "unitList=" + unitList +
                "};";
    }
}
2025-07-20 21:37:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: /Users/renyu/Documents/create_project/链数中建一局_1753017893/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general/src/main/java/com/yljr/user/basicgeneral/beans/resp/multiorg/src/main/java/com/yljr/user/basicgeneral/interfaces/dto/CompanyUnitListReq.java
2025-07-20 21:37:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: /Users/renyu/Documents/create_project/链数中建一局_1753017893/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general/src/main/java/com/yljr/user/basicgeneral/beans/resp/multiorg/src/main/java/com/yljr/user/basicgeneral/interfaces/dto/CompanyUnitListReq.java
2025-07-20 21:37:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 代码内容 (response_dto):

package com.yljr.crcl.interfaces.dto;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.List;
import java.util.Date;
import java.math.BigDecimal;

/**
 * CompanyUnitList 响应DTO
 * 根据查询条件查询组织单元信息，支持按编码、状态等条件筛选
 */
@ApiModel(value = "CompanyUnitListResp", description = "根据查询条件查询组织单元信息，支持按编码、状态等条件筛选")
public class CompanyUnitListResp {

    /**
     * 组织单元ID
     */
    @ApiModelProperty(value = "组织单元ID")
    private String unitId;
    /**
     * 组织单元类型字典类型
     */
    @ApiModelProperty(value = "组织单元类型字典类型")
    private String unitTypeDicType;
    /**
     * 组织单元类型ID
     */
    @ApiModelProperty(value = "组织单元类型ID")
    private String unitTypeId;
    /**
     * 开通状态
     */
    @ApiModelProperty(value = "开通状态")
    private String openStatus;
    /**
     * 组织单元编码
     */
    @ApiModelProperty(value = "组织单元编码")
    private String unitCode;
    /**
     * 组织单元名称
     */
    @ApiModelProperty(value = "组织单元名称")
    private String unitName;

    public String getUnitId() {
        return unitId;
    }

    public void setUnitId(String unitId) {
        this.unitId = unitId;
    }
    public String getUnitTypeDicType() {
        return unitTypeDicType;
    }

    public void setUnitTypeDicType(String unitTypeDicType) {
        this.unitTypeDicType = unitTypeDicType;
    }
    public String getUnitTypeId() {
        return unitTypeId;
    }

    public void setUnitTypeId(String unitTypeId) {
        this.unitTypeId = unitTypeId;
    }
    public String getOpenStatus() {
        return openStatus;
    }

    public void setOpenStatus(String openStatus) {
        this.openStatus = openStatus;
    }
    public String getUnitCode() {
        return unitCode;
    }

    public void setUnitCode(String unitCode) {
        this.unitCode = unitCode;
    }
    public String getUnitName() {
        return unitName;
    }

    public void setUnitName(String unitName) {
        this.unitName = unitName;
    }

    @Override
    public String toString() {
        return "CompanyUnitListResp{" +
                "unitId=" + unitId + ", " +
                "unitTypeDicType=" + unitTypeDicType + ", " +
                "unitTypeId=" + unitTypeId + ", " +
                "openStatus=" + openStatus + ", " +
                "unitCode=" + unitCode + ", " +
                "unitName=" + unitName +
                "};";
    }
}
2025-07-20 21:37:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: /Users/renyu/Documents/create_project/链数中建一局_1753017893/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general/src/main/java/com/yljr/user/basicgeneral/beans/resp/multiorg/src/main/java/com/yljr/user/basicgeneral/interfaces/dto/CompanyUnitListResp.java
2025-07-20 21:37:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: /Users/renyu/Documents/create_project/链数中建一局_1753017893/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general/src/main/java/com/yljr/user/basicgeneral/beans/resp/multiorg/src/main/java/com/yljr/user/basicgeneral/interfaces/dto/CompanyUnitListResp.java
2025-07-20 21:37:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 代码内容 (mapper):

package com.yljr.crcl.domain.mapper;

import com.yljr.crcl.interfaces.dto.CompanyUnitListReq;
import com.yljr.crcl.domain.entity.CompanyUnitList;
import org.apache.ibatis.annotations.Mapper;
import org.apache.ibatis.annotations.Param;
import java.util.List;

/**
 * CompanyUnitList Mapper接口
 * 根据查询条件查询组织单元信息，支持按编码、状态等条件筛选
 */
@Mapper
public interface CompanyUnitListMapper {

    /**
     * 根据条件查询CompanyUnitList列表
     */
    List<CompanyUnitList> selectCompanyUnitListList(@Param("condition") CompanyUnitListReq condition);

    /**
     * 根据主键查询CompanyUnitList
     */
    CompanyUnitList selectByPrimaryKey(@Param("id") Long id);

    /**
     * 新增CompanyUnitList记录
     */
    int insert(CompanyUnitList record);

    /**
     * 更新CompanyUnitList记录
     */
    int updateByPrimaryKey(CompanyUnitList record);

    /**
     * 删除CompanyUnitList记录
     */
    int deleteByPrimaryKey(@Param("id") Long id);
}
2025-07-20 21:37:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: /Users/renyu/Documents/create_project/链数中建一局_1753017893/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general/src/main/java/com/yljr/user/basicgeneral/beans/resp/multiorg/src/main/java/com/yljr/user/basicgeneral/domain/mapper/CompanyUnitListMapper.java
2025-07-20 21:37:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: /Users/renyu/Documents/create_project/链数中建一局_1753017893/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general/src/main/java/com/yljr/user/basicgeneral/beans/resp/multiorg/src/main/java/com/yljr/user/basicgeneral/domain/mapper/CompanyUnitListMapper.java
2025-07-20 21:37:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 代码内容 (feign_client):

package com.yljr.crcl.application.feign;

import com.yljr.crcl.interfaces.dto.CompanyUnitListReq;
import com.yljr.crcl.interfaces.dto.CompanyUnitListResp;
import com.yljr.common.dto.ResponseInfo;
import org.springframework.cloud.openfeign.FeignClient;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.http.MediaType;

/**
 * CompanyUnitList Feign接口
 * 根据查询条件查询组织单元信息，支持按编码、状态等条件筛选
 */
@FeignClient(name = "zqyl-user-auth", path = "/userCenter/server")
public interface CompanyUnitListFeignClient {

    /**
     * 根据查询条件查询组织单元信息，支持按编码、状态等条件筛选
     */
    @PostMapping(value = "/queryCompanyInfo", consumes = MediaType.APPLICATION_JSON_UTF8_VALUE)
    ResponseInfo<CompanyUnitListResp> CompanyUnitList(@RequestBody CompanyUnitListReq request);
}
2025-07-20 21:37:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: /Users/renyu/Documents/create_project/链数中建一局_1753017893/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general/src/main/java/com/yljr/user/basicgeneral/beans/resp/multiorg/src/main/java/com/yljr/user/basicgeneral/application/feign/CompanyUnitListFeignClient.java
2025-07-20 21:37:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: /Users/renyu/Documents/create_project/链数中建一局_1753017893/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general/src/main/java/com/yljr/user/basicgeneral/beans/resp/multiorg/src/main/java/com/yljr/user/basicgeneral/application/feign/CompanyUnitListFeignClient.java
2025-07-20 21:37:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 代码内容 (xml_mapping):
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yljr.crcl.domain.mapper.CompanyUnitListMapper">

    <resultMap id="BaseResultMap" type="com.yljr.crcl.domain.entity.CompanyUnitList">
        <id column="id" jdbcType="BIGINT" property="id" />
        <result column="company_id" jdbcType="BIGINT" property="companyId" />
        <result column="mutilorg_id" jdbcType="BIGINT" property="mutilorgId" />
        <result column="unit_code" jdbcType="VARCHAR" property="unitCode" />
        <result column="unit_name" jdbcType="VARCHAR" property="unitName" />
        <result column="remark" jdbcType="VARCHAR" property="remark" />
        <result column="platform_type" jdbcType="INTEGER" property="platformType" />
        <result column="status" jdbcType="INTEGER" property="status" />
        <result column="create_id" jdbcType="BIGINT" property="createId" />
        <result column="oper_user_name" jdbcType="VARCHAR" property="operUserName" />
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
        <result column="modify_id" jdbcType="BIGINT" property="modifyId" />
        <result column="modify_user_name" jdbcType="VARCHAR" property="modifyUserName" />
        <result column="modify_time" jdbcType="TIMESTAMP" property="modifyTime" />
    </resultMap>

    <sql id="Base_Column_List">
        id, company_id, mutilorg_id, unit_code, unit_name, remark, platform_type, status, create_id, oper_user_name,
        create_time, modify_id, modify_user_name, modify_time
    </sql>

    <select id="selectCompanyUnitListList" parameterType="com.yljr.crcl.interfaces.dto.CompanyUnitListReq" 
            resultMap="BaseResultMap">
        SELECT 
        <include refid="Base_Column_List" />
        FROM T_CUST_MULTIORG_UNIT
        WHERE 1=1
        <if test="condition.unitCode != null and condition.unitCode != ''">
            AND unit_code = #{condition.unitCode}
        </if>
        <if test="condition.status != null">
            AND status = #{condition.status}
        </if>
        ORDER BY CREATE_TIME DESC
    </select>

    <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
        SELECT 
        <include refid="Base_Column_List" />
        FROM T_CUST_MULTIORG_UNIT
        WHERE ID = #{id,jdbcType=BIGINT}
    </select>

    <insert id="insert" parameterType="com.yljr.crcl.domain.entity.CompanyUnitList">
        INSERT INTO T_CUST_MULTIORG_UNIT (company_id, mutilorg_id, unit_code, unit_name, remark, platform_type, status, create_id, oper_user_name, create_time, modify_id, modify_user_name, modify_time)
        VALUES (#{companyId}, #{mutilorgId}, #{unitCode}, #{unitName}, #{remark}, #{platformType}, #{status}, #{createId}, #{operUserName}, #{createTime}, #{modifyId}, #{modifyUserName}, #{modifyTime})
    </insert>

    <update id="updateByPrimaryKey" parameterType="com.yljr.crcl.domain.entity.CompanyUnitList">
        UPDATE T_CUST_MULTIORG_UNIT
        SET company_id = #{companyId},
            mutilorg_id = #{mutilorgId},
            unit_code = #{unitCode},
            unit_name = #{unitName},
            remark = #{remark},
            platform_type = #{platformType},
            status = #{status},
            create_id = #{createId},
            oper_user_name = #{operUserName},
            modify_id = #{modifyId},
            modify_user_name = #{modifyUserName},
            modify_time = #{modifyTime}
        WHERE ID = #{id}
    </update>

    <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
        DELETE FROM T_CUST_MULTIORG_UNIT
        WHERE ID = #{id,jdbcType=BIGINT}
    </delete>

</mapper>
2025-07-20 21:37:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: /Users/renyu/Documents/create_project/链数中建一局_1753017893/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general/src/main/java/com/yljr/user/basicgeneral/beans/resp/multiorg/src/main/resources/mapper/CompanyUnitListMapper.xml
2025-07-20 21:37:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: /Users/renyu/Documents/create_project/链数中建一局_1753017893/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general/src/main/java/com/yljr/user/basicgeneral/beans/resp/multiorg/src/main/resources/mapper/CompanyUnitListMapper.xml
2025-07-20 21:37:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📊 代码生成完成，共写入 9 个文件到项目中
2025-07-20 21:37:42 - src.corder_integration.code_generator.interface_adder - INFO - ℹ️ 没有找到需要清理的备份文件
2025-07-20 21:37:42 - src.apis.project_analysis_api - INFO - 🗑️ 已清除缓存: /Users/renyu/Documents/create_project/链数中建一局_1753017893/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general/src/main/java/com/yljr/user/basicgeneral/beans/resp/multiorg_用户服务
2025-07-20 21:37:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🗑️ 已清理项目分析缓存，确保下次分析获取最新状态
2025-07-20 21:37:42 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_008 状态更新为 completed
2025-07-20 21:37:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 任务 task_008 执行成功
2025-07-20 21:37:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 第4轮执行完成，处理了 1 个任务
2025-07-20 21:37:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第5轮任务检查...
2025-07-20 21:37:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 第5轮找到 1 个可执行任务
2025-07-20 21:37:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 开始执行任务: task_009 (api)
2025-07-20 21:37:42 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_009 已被 intelligent_coding_node 领取
2025-07-20 21:37:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🌐 执行API接口生成任务: task_009
2025-07-20 21:37:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 解析的接口信息:
2025-07-20 21:37:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 接口名称: UnitLimitByCompanyId
2025-07-20 21:37:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - API路径: /crcl-open-api/lsLimit/listUnitLimitByCompanyId
2025-07-20 21:37:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - HTTP方法: GET
2025-07-20 21:37:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 输入参数: 6个
2025-07-20 21:37:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 输出参数: 4个
2025-07-20 21:37:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 业务描述: 根据公司ID和筛选条件查询组织单元额度信息，调用用户服务获取组织单元基础信息
2025-07-20 21:37:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 在 /Users/renyu/Documents/create_project/链数中建一局_1753017893/crcl-open 中查找最佳Java项目路径...
2025-07-20 21:37:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 目标服务名: 确权开立服务
2025-07-20 21:37:44 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-20 21:37:44 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 发现Java项目: crcl-open
2025-07-20 21:37:44 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       🎯 相对路径: crcl-open
2025-07-20 21:37:44 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       📊 Java文件: 2251个
2025-07-20 21:37:44 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       📐 目录深度: 1
2025-07-20 21:37:44 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       🏆 优先级分数: 650
2025-07-20 21:37:44 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 排序后的候选路径（前3个）:
2025-07-20 21:37:44 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    1. crcl-open (优先级: 650)
2025-07-20 21:37:44 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 选择最佳Java项目路径:
2025-07-20 21:37:44 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 完整路径: /Users/renyu/Documents/create_project/链数中建一局_1753017893/crcl-open/crcl-open
2025-07-20 21:37:44 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📋 相对路径: crcl-open
2025-07-20 21:37:44 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    🏆 最终优先级: 650
2025-07-20 21:37:44 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 从API路径 /crcl-open-api/lsLimit/listUnitLimitByCompanyId 提取关键字: lsLimit
2025-07-20 21:37:44 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 在项目中搜索关键字相关路径: lsLimit
2025-07-20 21:37:44 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 找到匹配目录: limit (得分: 25)
2025-07-20 21:37:44 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 找到匹配目录: limit (得分: 25)
2025-07-20 21:37:44 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 找到匹配目录: ls (得分: 25)
2025-07-20 21:37:44 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 找到匹配目录: ls (得分: 25)
2025-07-20 21:37:44 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 找到匹配目录: ls (得分: 25)
2025-07-20 21:37:44 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    ✅ 选择最佳匹配目录: limit (路径: src/test/java/com/yljr/limit)
2025-07-20 21:37:44 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 基于API关键字 'lsLimit' 找到现有路径: /Users/renyu/Documents/create_project/链数中建一局_1753017893/crcl-open/crcl-open/src/test/java/com/yljr/limit
2025-07-20 21:37:44 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -  分析目标项目: /Users/renyu/Documents/create_project/链数中建一局_1753017893/crcl-open/crcl-open/src/test/java/com/yljr/limit
2025-07-20 21:37:44 - src.apis.project_analysis_api - INFO - 🔍 开始分析项目用于代码生成: /Users/renyu/Documents/create_project/链数中建一局_1753017893/crcl-open/crcl-open/src/test/java/com/yljr/limit
2025-07-20 21:37:44 - src.apis.project_analysis_api - INFO - 🔍 在 /Users/renyu/Documents/create_project/链数中建一局_1753017893/crcl-open/crcl-open/src/test/java/com/yljr/limit 中查找最佳Java项目路径...
2025-07-20 21:37:44 - src.apis.project_analysis_api - INFO - 🎯 目标服务名: 确权开立服务
2025-07-20 21:37:44 - src.apis.project_analysis_api - WARNING - ⚠️ 在 /Users/renyu/Documents/create_project/链数中建一局_1753017893/crcl-open/crcl-open/src/test/java/com/yljr/limit 中未找到包含Java文件的src/main/java结构
2025-07-20 21:37:44 - src.apis.project_analysis_api - INFO - 📂 实际分析路径: /Users/renyu/Documents/create_project/链数中建一局_1753017893/crcl-open/crcl-open/src/test/java/com/yljr/limit
2025-07-20 21:37:44 - src.utils.java_code_analyzer - INFO - 🔍 开始分析企业级Java项目: /Users/renyu/Documents/create_project/链数中建一局_1753017893/crcl-open/crcl-open/src/test/java/com/yljr/limit
2025-07-20 21:37:44 - src.utils.java_code_analyzer - INFO - ✅ 企业级项目分析完成，共分析 9 个Java文件
2025-07-20 21:37:44 - src.apis.project_analysis_api - INFO - 📦 动态检测到基础包: com.yljr.limit (出现9次)
2025-07-20 21:37:44 - src.apis.project_analysis_api - INFO - 📦 动态检测到基础包: com.yljr.limit (出现9次)
2025-07-20 21:37:44 - src.apis.project_analysis_api - INFO - 📦 动态检测到基础包: com.yljr.limit (出现9次)
2025-07-20 21:37:44 - src.apis.project_analysis_api - INFO - ✅ 项目分析完成，已提取代码生成上下文
2025-07-20 21:37:44 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 从编码代理获取设计文档内容 (4936 字符)
2025-07-20 21:37:44 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 设计文档内容已添加到项目上下文 (4936 字符)
2025-07-20 21:37:44 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 项目中未检测到Controller
2025-07-20 21:37:44 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 Controller关联性分析:
2025-07-20 21:37:44 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 总Controller数: 0
2025-07-20 21:37:44 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 相关Controller数: 0
2025-07-20 21:37:44 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 关联度得分: 0.00
2025-07-20 21:37:44 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🤖 调用volcengine分析项目策略...发送的prompt信息: Java文件数=9, Controller数=0
2025-07-20 21:37:48 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-20 21:37:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 项目策略判断: create_new - 项目中没有找到任何相关的Controller（Controller总数为0，相关Controller数为0，业务关联度为0.00），且这是一个全新的业务领域（确权开立服务）。根据策略判断标准，当无相关Controller或关联度较低时，应创建新的Controller。
2025-07-20 21:37:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📁 策略2：直接使用新文件生成策略，原因: 项目中没有找到任何相关的Controller（Controller总数为0，相关Controller数为0，业务关联度为0.00），且这是一个全新的业务领域（确权开立服务）。根据策略判断标准，当无相关Controller或关联度较低时，应创建新的Controller。
2025-07-20 21:37:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -  调用volcengine大模型生成代码...
2025-07-20 21:37:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 开始代码生成...
2025-07-20 21:37:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎨 使用模板+AI混合模式生成代码
2025-07-20 21:37:48 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - 🎨 开始增强版代码生成: UnitLimitByCompanyId
2025-07-20 21:37:48 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - 🔍 解析到表结构: t_cust_multiorg_unit (14列)
2025-07-20 21:37:48 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - 🤖 使用智能文件复用和专门化提示词模板增强代码...
2025-07-20 21:37:48 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 设置设计文档内容，长度: 4936
2025-07-20 21:37:48 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO - 🔍 分析项目结构: /Users/renyu/Documents/create_project/链数中建一局_1753017893/crcl-open/crcl-open/src/test/java/com/yljr/limit
2025-07-20 21:37:48 - src.corder_integration.code_generator.intelligent_file_reuse_manager - WARNING - ⚠️ 未找到Java源码目录: /Users/renyu/Documents/create_project/链数中建一局_1753017893/crcl-open/crcl-open/src/test/java/com/yljr/limit/src/main/java
2025-07-20 21:37:48 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO - 🤔 决策文件复用策略: UnitLimitByCompanyId
2025-07-20 21:37:48 - src.corder_integration.code_generator.intelligent_file_reuse_manager - WARNING - ⚠️ 项目结构未初始化，使用默认策略
2025-07-20 21:37:48 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - 📋 智能文件复用策略:
2025-07-20 21:37:48 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO -    controller: create_new - 项目结构未分析，创建新文件
2025-07-20 21:37:48 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO -    application_service: create_new - 项目结构未分析，创建新文件
2025-07-20 21:37:48 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO -    domain_service: create_new - 项目结构未分析，创建新文件
2025-07-20 21:37:48 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO -    mapper: create_new - 项目结构未分析，创建新文件
2025-07-20 21:37:48 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO -    feign_client: create_new - 项目结构未分析，创建新文件
2025-07-20 21:37:48 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO -    xml_file: create_new - 项目结构未分析，创建新文件
2025-07-20 21:37:48 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO - 🔗 生成完整调用链: UnitLimitByCompanyId
2025-07-20 21:37:48 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO - 🔍 找到表结构: T_CUST_MULTIORG_UNIT
2025-07-20 21:37:48 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO - ✅ 解析到 14 个字段
2025-07-20 21:37:48 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO - ✅ 调用链代码生成完成，包含 9 个组件
2025-07-20 21:37:48 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 智能文件复用生成了 9 个组件
2025-07-20 21:37:48 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - 📝 需要创建 9 个新文件
2025-07-20 21:37:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI生成成功，生成代码类型: ['controller_method', 'application_service', 'domain_service', 'domain_service_impl', 'request_dto', 'response_dto', 'mapper', 'feign_client', 'xml_mapping']
2025-07-20 21:37:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 开始写入生成的代码文件...
2025-07-20 21:37:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔧 统一类名基础: UnitLimitByCompanyId
2025-07-20 21:37:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ controller_method 类名: UnitLimitByCompanyIdController
2025-07-20 21:37:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ application_service 类名: UnitLimitByCompanyIdApplication
2025-07-20 21:37:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ domain_service_impl 类名: UnitLimitByCompanyIdServiceImpl
2025-07-20 21:37:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ request_dto 类名: UnitLimitByCompanyIdReq
2025-07-20 21:37:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ response_dto 类名: UnitLimitByCompanyIdResp
2025-07-20 21:37:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 标准化后的代码类型: ['controller_method', 'application_service', 'domain_service', 'domain_service_impl', 'request_dto', 'response_dto', 'mapper', 'feign_client', 'xml_mapping']
2025-07-20 21:37:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🤖 调用volcengine判断Java文件输出路径...
2025-07-20 21:38:13 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-20 21:38:13 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM路径判断成功，配置了 9 个Java文件路径
2025-07-20 21:38:13 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 controller_method: UnitLimitByCompanyIdController.java
2025-07-20 21:38:13 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 application_service: UnitLimitByCompanyIdApplication.java
2025-07-20 21:38:13 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 domain_service: UnitLimitByCompanyIdService.java
2025-07-20 21:38:13 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 domain_service_impl: UnitLimitByCompanyIdServiceImpl.java
2025-07-20 21:38:13 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 request_dto: UnitLimitByCompanyIdReq.java
2025-07-20 21:38:13 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 response_dto: UnitLimitByCompanyIdResp.java
2025-07-20 21:38:13 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 mapper: UnitLimitByCompanyIdMapper.java
2025-07-20 21:38:13 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 feign_client: UnitLimitByCompanyIdFeignClient.java
2025-07-20 21:38:13 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 xml_mapping: UnitLimitByCompanyIdMapper.xml
2025-07-20 21:38:13 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 代码内容 (controller_method):

package com.yljr.crcl.interfaces;

import com.yljr.crcl.interfaces.dto.UnitLimitByCompanyIdReq;
import com.yljr.crcl.interfaces.dto.UnitLimitByCompanyIdResp;
import com.yljr.common.dto.Response;
import org.springframework.web.bind.annotation.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.validation.annotation.Validated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import io.swagger.annotations.ApiOperation;

import javax.validation.Valid;

/**
 * UnitLimitByCompanyId Controller
 * 根据公司ID和筛选条件查询组织单元额度信息，调用用户服务获取组织单元基础信息
 */
@Validated
@RestController
@RequestMapping("/api/unitLimitByCompanyId")
public class UnitLimitByCompanyIdController {

    private final Logger logger = LoggerFactory.getLogger(this.getClass());
    
    @Autowired
    private UnitLimitByCompanyIdApplication unitLimitByCompanyIdApplication;

    /**
     * 根据公司ID和筛选条件查询组织单元额度信息，调用用户服务获取组织单元基础信息
     */
    @PostMapping("/unitLimitByCompanyId")
    @ApiOperation(value = "根据公司ID和筛选条件查询组织单元额度信息，调用用户服务获取组织单元基础信息")
    public Response<UnitLimitByCompanyIdResp> unitLimitByCompanyId(@RequestBody @Valid UnitLimitByCompanyIdReq request) {
        try {
            logger.info("开始执行unitLimitByCompanyId，请求参数: {}", request);
            
            return unitLimitByCompanyIdApplication.unitLimitByCompanyId(request);
            
        } catch (Exception e) {
            logger.error("执行unitLimitByCompanyId失败", e);
            return Response.error("执行失败: " + e.getMessage());
        }
    }
}
2025-07-20 21:38:13 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: /Users/renyu/Documents/create_project/链数中建一局_1753017893/crcl-open/crcl-open/src/test/java/com/yljr/limit/src/main/java/com/yljr/limit/interfaces/facade/UnitLimitByCompanyIdController.java
2025-07-20 21:38:13 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: /Users/renyu/Documents/create_project/链数中建一局_1753017893/crcl-open/crcl-open/src/test/java/com/yljr/limit/src/main/java/com/yljr/limit/interfaces/facade/UnitLimitByCompanyIdController.java
2025-07-20 21:38:13 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 代码内容 (application_service):

package com.yljr.crcl.application.service;

import com.yljr.crcl.interfaces.dto.UnitLimitByCompanyIdReq;
import com.yljr.crcl.interfaces.dto.UnitLimitByCompanyIdResp;
import org.springframework.stereotype.Service;
import org.springframework.beans.factory.annotation.Autowired;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * UnitLimitByCompanyId Application Service
 * 根据公司ID和筛选条件查询组织单元额度信息，调用用户服务获取组织单元基础信息
 */
@Service
public class UnitLimitByCompanyIdApplication {

    private static final Logger logger = LoggerFactory.getLogger(UnitLimitByCompanyIdApplication.class);
    
    @Autowired
    private UnitLimitByCompanyIdFeignClient unitlimitbycompanyidFeignClient;

    /**
     * 根据公司ID和筛选条件查询组织单元额度信息，调用用户服务获取组织单元基础信息
     */
    public UnitLimitByCompanyIdResp UnitLimitByCompanyId(UnitLimitByCompanyIdReq request) {
        logger.info("Application Service执行UnitLimitByCompanyId，参数: {}", request);
        
        try {
            return unitlimitbycompanyidFeignClient.UnitLimitByCompanyId(request);
        } catch (Exception e) {
            logger.error("Application Service执行UnitLimitByCompanyId失败", e);
            throw new RuntimeException("执行失败: " + e.getMessage(), e);
        }
    }
}
2025-07-20 21:38:13 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: /Users/renyu/Documents/create_project/链数中建一局_1753017893/crcl-open/crcl-open/src/test/java/com/yljr/limit/src/main/java/com/yljr/limit/application/service/UnitLimitByCompanyIdApplication.java
2025-07-20 21:38:13 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: /Users/renyu/Documents/create_project/链数中建一局_1753017893/crcl-open/crcl-open/src/test/java/com/yljr/limit/src/main/java/com/yljr/limit/application/service/UnitLimitByCompanyIdApplication.java
2025-07-20 21:38:13 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 代码内容 (domain_service):
package com.yljr.crcl.domain.service;

import com.yljr.crcl.interfaces.dto.UnitLimitByCompanyIdReq;
import com.yljr.crcl.interfaces.dto.UnitLimitByCompanyIdResp;

/**
 * UnitLimitByCompanyId Domain Service Interface
 * 根据公司ID和筛选条件查询组织单元额度信息，调用用户服务获取组织单元基础信息
 */
public interface UnitLimitByCompanyIdService {

    /**
     * 根据公司ID和筛选条件查询组织单元额度信息，调用用户服务获取组织单元基础信息
     */
    UnitLimitByCompanyIdResp unitLimitByCompanyId(UnitLimitByCompanyIdReq request);
}
2025-07-20 21:38:13 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: /Users/renyu/Documents/create_project/链数中建一局_1753017893/crcl-open/crcl-open/src/test/java/com/yljr/limit/src/main/java/com/yljr/limit/domain/service/UnitLimitByCompanyIdService.java
2025-07-20 21:38:13 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: /Users/renyu/Documents/create_project/链数中建一局_1753017893/crcl-open/crcl-open/src/test/java/com/yljr/limit/src/main/java/com/yljr/limit/domain/service/UnitLimitByCompanyIdService.java
2025-07-20 21:38:13 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 代码内容 (domain_service_impl):
package com.yljr.crcl.domain.service.impl;

import com.yljr.crcl.domain.service.UnitLimitByCompanyIdService;
import com.yljr.crcl.interfaces.dto.UnitLimitByCompanyIdReq;
import com.yljr.crcl.interfaces.dto.UnitLimitByCompanyIdResp;
import com.yljr.crcl.domain.entity.UnitLimitByCompanyId;
import com.yljr.crcl.domain.mapper.UnitLimitByCompanyIdMapper;
import org.springframework.stereotype.Service;
import org.springframework.beans.factory.annotation.Autowired;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import java.util.List;

/**
 * UnitLimitByCompanyId Domain Service Implementation
 * 根据公司ID和筛选条件查询组织单元额度信息，调用用户服务获取组织单元基础信息
 */
@Service
public class UnitLimitByCompanyIdServiceImpl implements UnitLimitByCompanyIdService {

    private static final Logger logger = LoggerFactory.getLogger(UnitLimitByCompanyIdServiceImpl.class);
    
    @Autowired
    private UnitLimitByCompanyIdMapper unitlimitbycompanyidMapper;

    /**
     * 根据公司ID和筛选条件查询组织单元额度信息，调用用户服务获取组织单元基础信息
     */
    @Override
    public UnitLimitByCompanyIdResp unitLimitByCompanyId(UnitLimitByCompanyIdReq request) {
        logger.info("Domain Service执行UnitLimitByCompanyId，参数: {}", request);
        
        try {
        // 调用Mapper查询数据
        List<UnitLimitByCompanyId> dataList = unitlimitbycompanyidMapper.selectUnitLimitByCompanyIdList(request);
        
        // 构建响应
        UnitLimitByCompanyIdResp response = new UnitLimitByCompanyIdResp();
        response.setDataList(dataList);
        response.setTotalCount(dataList.size());
        
        return response;
        } catch (Exception e) {
            logger.error("Domain Service执行UnitLimitByCompanyId失败", e);
            throw new RuntimeException("执行失败: " + e.getMessage(), e);
        }
    }
}
2025-07-20 21:38:13 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: /Users/renyu/Documents/create_project/链数中建一局_1753017893/crcl-open/crcl-open/src/test/java/com/yljr/limit/src/main/java/com/yljr/limit/domain/service/impl/UnitLimitByCompanyIdServiceImpl.java
2025-07-20 21:38:13 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: /Users/renyu/Documents/create_project/链数中建一局_1753017893/crcl-open/crcl-open/src/test/java/com/yljr/limit/src/main/java/com/yljr/limit/domain/service/impl/UnitLimitByCompanyIdServiceImpl.java
2025-07-20 21:38:13 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 代码内容 (request_dto):

package com.yljr.crcl.interfaces.dto;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Date;
import java.math.BigDecimal;

/**
 * UnitLimitByCompanyId 请求DTO
 * 根据公司ID和筛选条件查询组织单元额度信息，调用用户服务获取组织单元基础信息
 */
@ApiModel(value = "UnitLimitByCompanyIdReq", description = "根据公司ID和筛选条件查询组织单元额度信息，调用用户服务获取组织单元基础信息")
public class UnitLimitByCompanyIdReq {

    /**
     * 公司ID(必填)
     */
    @ApiModelProperty(value = "公司ID(必填)")
    private String gwCompanyId;
    /**
     * 组织单元名称(可选)
     */
    @ApiModelProperty(value = "组织单元名称(可选)")
    private String unitName;
    /**
     * 额度来源(可选)
     */
    @ApiModelProperty(value = "额度来源(可选)")
    private String limitSource;
    /**
     * 业务类型(必填)
     */
    @ApiModelProperty(value = "业务类型(必填)")
    private String bizType;
    /**
     * 页码(可选,默认1)
     */
    @ApiModelProperty(value = "页码(可选,默认1)")
    private String page;
    /**
     * 每页行数(可选,默认10)
     */
    @ApiModelProperty(value = "每页行数(可选,默认10)")
    private String pageRow;

    public String getGwCompanyId() {
        return gwCompanyId;
    }

    public void setGwCompanyId(String gwCompanyId) {
        this.gwCompanyId = gwCompanyId;
    }
    public String getUnitName() {
        return unitName;
    }

    public void setUnitName(String unitName) {
        this.unitName = unitName;
    }
    public String getLimitSource() {
        return limitSource;
    }

    public void setLimitSource(String limitSource) {
        this.limitSource = limitSource;
    }
    public String getBizType() {
        return bizType;
    }

    public void setBizType(String bizType) {
        this.bizType = bizType;
    }
    public String getPage() {
        return page;
    }

    public void setPage(String page) {
        this.page = page;
    }
    public String getPageRow() {
        return pageRow;
    }

    public void setPageRow(String pageRow) {
        this.pageRow = pageRow;
    }

    @Override
    public String toString() {
        return "UnitLimitByCompanyIdReq{" +
                "gwCompanyId=" + gwCompanyId + ", " +
                "unitName=" + unitName + ", " +
                "limitSource=" + limitSource + ", " +
                "bizType=" + bizType + ", " +
                "page=" + page + ", " +
                "pageRow=" + pageRow +
                "};";
    }
}
2025-07-20 21:38:13 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: /Users/renyu/Documents/create_project/链数中建一局_1753017893/crcl-open/crcl-open/src/test/java/com/yljr/limit/src/main/java/com/yljr/limit/interfaces/dto/UnitLimitByCompanyIdReq.java
2025-07-20 21:38:13 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: /Users/renyu/Documents/create_project/链数中建一局_1753017893/crcl-open/crcl-open/src/test/java/com/yljr/limit/src/main/java/com/yljr/limit/interfaces/dto/UnitLimitByCompanyIdReq.java
2025-07-20 21:38:13 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 代码内容 (response_dto):

package com.yljr.crcl.interfaces.dto;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.List;
import java.util.Date;
import java.math.BigDecimal;

/**
 * UnitLimitByCompanyId 响应DTO
 * 根据公司ID和筛选条件查询组织单元额度信息，调用用户服务获取组织单元基础信息
 */
@ApiModel(value = "UnitLimitByCompanyIdResp", description = "根据公司ID和筛选条件查询组织单元额度信息，调用用户服务获取组织单元基础信息")
public class UnitLimitByCompanyIdResp {

    /**
     * 总额度金额
     */
    @ApiModelProperty(value = "总额度金额")
    private String totalLimitAmt;
    /**
     * 已用额度金额
     */
    @ApiModelProperty(value = "已用额度金额")
    private String usedLimitAmt;
    /**
     * 可用额度金额
     */
    @ApiModelProperty(value = "可用额度金额")
    private String usableLimitAmt;
    /**
     * 单元额度详情列表
     */
    @ApiModelProperty(value = "单元额度详情列表")
    private String unitLimitListDetail;

    public String getTotalLimitAmt() {
        return totalLimitAmt;
    }

    public void setTotalLimitAmt(String totalLimitAmt) {
        this.totalLimitAmt = totalLimitAmt;
    }
    public String getUsedLimitAmt() {
        return usedLimitAmt;
    }

    public void setUsedLimitAmt(String usedLimitAmt) {
        this.usedLimitAmt = usedLimitAmt;
    }
    public String getUsableLimitAmt() {
        return usableLimitAmt;
    }

    public void setUsableLimitAmt(String usableLimitAmt) {
        this.usableLimitAmt = usableLimitAmt;
    }
    public String getUnitLimitListDetail() {
        return unitLimitListDetail;
    }

    public void setUnitLimitListDetail(String unitLimitListDetail) {
        this.unitLimitListDetail = unitLimitListDetail;
    }

    @Override
    public String toString() {
        return "UnitLimitByCompanyIdResp{" +
                "totalLimitAmt=" + totalLimitAmt + ", " +
                "usedLimitAmt=" + usedLimitAmt + ", " +
                "usableLimitAmt=" + usableLimitAmt + ", " +
                "unitLimitListDetail=" + unitLimitListDetail +
                "};";
    }
}
2025-07-20 21:38:13 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: /Users/renyu/Documents/create_project/链数中建一局_1753017893/crcl-open/crcl-open/src/test/java/com/yljr/limit/src/main/java/com/yljr/limit/interfaces/dto/UnitLimitByCompanyIdResp.java
2025-07-20 21:38:13 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: /Users/renyu/Documents/create_project/链数中建一局_1753017893/crcl-open/crcl-open/src/test/java/com/yljr/limit/src/main/java/com/yljr/limit/interfaces/dto/UnitLimitByCompanyIdResp.java
2025-07-20 21:38:13 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 代码内容 (mapper):

package com.yljr.crcl.domain.mapper;

import com.yljr.crcl.interfaces.dto.UnitLimitByCompanyIdReq;
import com.yljr.crcl.domain.entity.UnitLimitByCompanyId;
import org.apache.ibatis.annotations.Mapper;
import org.apache.ibatis.annotations.Param;
import java.util.List;

/**
 * UnitLimitByCompanyId Mapper接口
 * 根据公司ID和筛选条件查询组织单元额度信息，调用用户服务获取组织单元基础信息
 */
@Mapper
public interface UnitLimitByCompanyIdMapper {

    /**
     * 根据条件查询UnitLimitByCompanyId列表
     */
    List<UnitLimitByCompanyId> selectUnitLimitByCompanyIdList(@Param("condition") UnitLimitByCompanyIdReq condition);

    /**
     * 根据主键查询UnitLimitByCompanyId
     */
    UnitLimitByCompanyId selectByPrimaryKey(@Param("id") Long id);

    /**
     * 新增UnitLimitByCompanyId记录
     */
    int insert(UnitLimitByCompanyId record);

    /**
     * 更新UnitLimitByCompanyId记录
     */
    int updateByPrimaryKey(UnitLimitByCompanyId record);

    /**
     * 删除UnitLimitByCompanyId记录
     */
    int deleteByPrimaryKey(@Param("id") Long id);
}
2025-07-20 21:38:13 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: /Users/renyu/Documents/create_project/链数中建一局_1753017893/crcl-open/crcl-open/src/test/java/com/yljr/limit/src/main/java/com/yljr/limit/domain/mapper/UnitLimitByCompanyIdMapper.java
2025-07-20 21:38:13 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: /Users/renyu/Documents/create_project/链数中建一局_1753017893/crcl-open/crcl-open/src/test/java/com/yljr/limit/src/main/java/com/yljr/limit/domain/mapper/UnitLimitByCompanyIdMapper.java
2025-07-20 21:38:13 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 代码内容 (feign_client):

package com.yljr.crcl.application.feign;

import com.yljr.crcl.interfaces.dto.UnitLimitByCompanyIdReq;
import com.yljr.crcl.interfaces.dto.UnitLimitByCompanyIdResp;
import com.yljr.common.dto.ResponseInfo;
import org.springframework.cloud.openfeign.FeignClient;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.http.MediaType;

/**
 * UnitLimitByCompanyId Feign接口
 * 根据公司ID和筛选条件查询组织单元额度信息，调用用户服务获取组织单元基础信息
 */
@FeignClient(name = "zqyl-user-auth", path = "/userCenter/server")
public interface UnitLimitByCompanyIdFeignClient {

    /**
     * 根据公司ID和筛选条件查询组织单元额度信息，调用用户服务获取组织单元基础信息
     */
    @PostMapping(value = "/queryCompanyInfo", consumes = MediaType.APPLICATION_JSON_UTF8_VALUE)
    ResponseInfo<UnitLimitByCompanyIdResp> UnitLimitByCompanyId(@RequestBody UnitLimitByCompanyIdReq request);
}
2025-07-20 21:38:13 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: /Users/renyu/Documents/create_project/链数中建一局_1753017893/crcl-open/crcl-open/src/test/java/com/yljr/limit/src/main/java/com/yljr/limit/application/feign/UnitLimitByCompanyIdFeignClient.java
2025-07-20 21:38:13 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: /Users/renyu/Documents/create_project/链数中建一局_1753017893/crcl-open/crcl-open/src/test/java/com/yljr/limit/src/main/java/com/yljr/limit/application/feign/UnitLimitByCompanyIdFeignClient.java
2025-07-20 21:38:13 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 代码内容 (xml_mapping):
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yljr.crcl.domain.mapper.UnitLimitByCompanyIdMapper">

    <resultMap id="BaseResultMap" type="com.yljr.crcl.domain.entity.UnitLimitByCompanyId">
        <id column="id" jdbcType="BIGINT" property="id" />
        <result column="company_id" jdbcType="BIGINT" property="companyId" />
        <result column="mutilorg_id" jdbcType="BIGINT" property="mutilorgId" />
        <result column="unit_code" jdbcType="VARCHAR" property="unitCode" />
        <result column="unit_name" jdbcType="VARCHAR" property="unitName" />
        <result column="remark" jdbcType="VARCHAR" property="remark" />
        <result column="platform_type" jdbcType="INTEGER" property="platformType" />
        <result column="status" jdbcType="INTEGER" property="status" />
        <result column="create_id" jdbcType="BIGINT" property="createId" />
        <result column="oper_user_name" jdbcType="VARCHAR" property="operUserName" />
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
        <result column="modify_id" jdbcType="BIGINT" property="modifyId" />
        <result column="modify_user_name" jdbcType="VARCHAR" property="modifyUserName" />
        <result column="modify_time" jdbcType="TIMESTAMP" property="modifyTime" />
    </resultMap>

    <sql id="Base_Column_List">
        id, company_id, mutilorg_id, unit_code, unit_name, remark, platform_type, status, create_id, oper_user_name,
        create_time, modify_id, modify_user_name, modify_time
    </sql>

    <select id="selectUnitLimitByCompanyIdList" parameterType="com.yljr.crcl.interfaces.dto.UnitLimitByCompanyIdReq" 
            resultMap="BaseResultMap">
        SELECT 
        <include refid="Base_Column_List" />
        FROM T_CUST_MULTIORG_UNIT
        WHERE 1=1
        <if test="condition.unitName != null and condition.unitName != ''">
            AND unit_name LIKE CONCAT('%', #{condition.unitName}, '%')
        </if>
        <if test="condition.status != null">
            AND status = #{condition.status}
        </if>
        ORDER BY CREATE_TIME DESC
    </select>

    <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
        SELECT 
        <include refid="Base_Column_List" />
        FROM T_CUST_MULTIORG_UNIT
        WHERE ID = #{id,jdbcType=BIGINT}
    </select>

    <insert id="insert" parameterType="com.yljr.crcl.domain.entity.UnitLimitByCompanyId">
        INSERT INTO T_CUST_MULTIORG_UNIT (company_id, mutilorg_id, unit_code, unit_name, remark, platform_type, status, create_id, oper_user_name, create_time, modify_id, modify_user_name, modify_time)
        VALUES (#{companyId}, #{mutilorgId}, #{unitCode}, #{unitName}, #{remark}, #{platformType}, #{status}, #{createId}, #{operUserName}, #{createTime}, #{modifyId}, #{modifyUserName}, #{modifyTime})
    </insert>

    <update id="updateByPrimaryKey" parameterType="com.yljr.crcl.domain.entity.UnitLimitByCompanyId">
        UPDATE T_CUST_MULTIORG_UNIT
        SET company_id = #{companyId},
            mutilorg_id = #{mutilorgId},
            unit_code = #{unitCode},
            unit_name = #{unitName},
            remark = #{remark},
            platform_type = #{platformType},
            status = #{status},
            create_id = #{createId},
            oper_user_name = #{operUserName},
            modify_id = #{modifyId},
            modify_user_name = #{modifyUserName},
            modify_time = #{modifyTime}
        WHERE ID = #{id}
    </update>

    <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
        DELETE FROM T_CUST_MULTIORG_UNIT
        WHERE ID = #{id,jdbcType=BIGINT}
    </delete>

</mapper>
2025-07-20 21:38:13 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: /Users/renyu/Documents/create_project/链数中建一局_1753017893/crcl-open/crcl-open/src/test/java/com/yljr/limit/src/main/resources/mapper/UnitLimitByCompanyIdMapper.xml
2025-07-20 21:38:13 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: /Users/renyu/Documents/create_project/链数中建一局_1753017893/crcl-open/crcl-open/src/test/java/com/yljr/limit/src/main/resources/mapper/UnitLimitByCompanyIdMapper.xml
2025-07-20 21:38:13 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📊 代码生成完成，共写入 9 个文件到项目中
2025-07-20 21:38:13 - src.corder_integration.code_generator.interface_adder - INFO - ℹ️ 没有找到需要清理的备份文件
2025-07-20 21:38:13 - src.apis.project_analysis_api - INFO - 🗑️ 已清除缓存: /Users/renyu/Documents/create_project/链数中建一局_1753017893/crcl-open/crcl-open/src/test/java/com/yljr/limit_确权开立服务
2025-07-20 21:38:13 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🗑️ 已清理项目分析缓存，确保下次分析获取最新状态
2025-07-20 21:38:13 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_009 状态更新为 completed
2025-07-20 21:38:13 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 任务 task_009 执行成功
2025-07-20 21:38:13 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 第5轮执行完成，处理了 1 个任务
2025-07-20 21:38:13 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第6轮任务检查...
2025-07-20 21:38:13 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 第6轮找到 1 个可执行任务
2025-07-20 21:38:13 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 开始执行任务: task_010 (api)
2025-07-20 21:38:13 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_010 已被 intelligent_coding_node 领取
2025-07-20 21:38:13 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🌐 执行API接口生成任务: task_010
2025-07-20 21:38:13 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 解析的接口信息:
2025-07-20 21:38:13 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 接口名称: UnitLimitByCompanyIdExport
2025-07-20 21:38:13 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - API路径: /crcl-open-api/lsLimit/listUnitLimitByCompanyIdExport
2025-07-20 21:38:13 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - HTTP方法: GET
2025-07-20 21:38:13 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 输入参数: 4个
2025-07-20 21:38:13 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 输出参数: 3个
2025-07-20 21:38:13 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 业务描述: 复用listUnitLimitByCompanyId接口的查询逻辑，将结果导出为Excel格式
2025-07-20 21:38:13 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 在 /Users/renyu/Documents/create_project/链数中建一局_1753017893/crcl-open 中查找最佳Java项目路径...
2025-07-20 21:38:13 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 目标服务名: 确权开立服务
2025-07-20 21:38:14 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-20 21:38:14 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 发现Java项目: crcl-open
2025-07-20 21:38:14 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       🎯 相对路径: crcl-open
2025-07-20 21:38:14 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       📊 Java文件: 2251个
2025-07-20 21:38:14 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       📐 目录深度: 1
2025-07-20 21:38:14 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       🏆 优先级分数: 650
2025-07-20 21:38:15 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-20 21:38:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 发现Java项目: limit
2025-07-20 21:38:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       🎯 相对路径: crcl-open/src/test/java/com/yljr/limit
2025-07-20 21:38:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       📊 Java文件: 8个
2025-07-20 21:38:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       📐 目录深度: 7
2025-07-20 21:38:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       🏆 优先级分数: 650
2025-07-20 21:38:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 排序后的候选路径（前3个）:
2025-07-20 21:38:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    1. crcl-open/src/test/java/com/yljr/limit (优先级: 650)
2025-07-20 21:38:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    2. crcl-open (优先级: 650)
2025-07-20 21:38:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 选择最佳Java项目路径:
2025-07-20 21:38:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 完整路径: /Users/renyu/Documents/create_project/链数中建一局_1753017893/crcl-open/crcl-open/src/test/java/com/yljr/limit
2025-07-20 21:38:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📋 相对路径: crcl-open/src/test/java/com/yljr/limit
2025-07-20 21:38:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    🏆 最终优先级: 650
2025-07-20 21:38:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 从API路径 /crcl-open-api/lsLimit/listUnitLimitByCompanyIdExport 提取关键字: lsLimit
2025-07-20 21:38:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 在项目中搜索关键字相关路径: lsLimit
2025-07-20 21:38:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 找到匹配目录: limit (得分: 25)
2025-07-20 21:38:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    ✅ 选择最佳匹配目录: limit (路径: src/main/java/com/yljr/limit)
2025-07-20 21:38:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 基于API关键字 'lsLimit' 找到现有路径: /Users/renyu/Documents/create_project/链数中建一局_1753017893/crcl-open/crcl-open/src/test/java/com/yljr/limit/src/main/java/com/yljr/limit
2025-07-20 21:38:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -  分析目标项目: /Users/renyu/Documents/create_project/链数中建一局_1753017893/crcl-open/crcl-open/src/test/java/com/yljr/limit/src/main/java/com/yljr/limit
2025-07-20 21:38:15 - src.apis.project_analysis_api - INFO - 🔍 开始分析项目用于代码生成: /Users/renyu/Documents/create_project/链数中建一局_1753017893/crcl-open/crcl-open/src/test/java/com/yljr/limit/src/main/java/com/yljr/limit
2025-07-20 21:38:15 - src.apis.project_analysis_api - INFO - 🔍 在 /Users/renyu/Documents/create_project/链数中建一局_1753017893/crcl-open/crcl-open/src/test/java/com/yljr/limit/src/main/java/com/yljr/limit 中查找最佳Java项目路径...
2025-07-20 21:38:15 - src.apis.project_analysis_api - INFO - 🎯 目标服务名: 确权开立服务
2025-07-20 21:38:15 - src.apis.project_analysis_api - WARNING - ⚠️ 在 /Users/renyu/Documents/create_project/链数中建一局_1753017893/crcl-open/crcl-open/src/test/java/com/yljr/limit/src/main/java/com/yljr/limit 中未找到包含Java文件的src/main/java结构
2025-07-20 21:38:15 - src.apis.project_analysis_api - INFO - 📂 实际分析路径: /Users/renyu/Documents/create_project/链数中建一局_1753017893/crcl-open/crcl-open/src/test/java/com/yljr/limit/src/main/java/com/yljr/limit
2025-07-20 21:38:15 - src.utils.java_code_analyzer - INFO - 🔍 开始分析企业级Java项目: /Users/renyu/Documents/create_project/链数中建一局_1753017893/crcl-open/crcl-open/src/test/java/com/yljr/limit/src/main/java/com/yljr/limit
2025-07-20 21:38:15 - src.utils.java_code_analyzer - INFO - ✅ 企业级项目分析完成，共分析 8 个Java文件
2025-07-20 21:38:15 - src.apis.project_analysis_api - INFO - 📦 动态检测到基础包: com.yljr.crcl (出现8次)
2025-07-20 21:38:15 - src.apis.project_analysis_api - INFO - 📦 动态检测到基础包: com.yljr.crcl (出现8次)
2025-07-20 21:38:15 - src.apis.project_analysis_api - INFO - 📦 动态检测到基础包: com.yljr.crcl (出现8次)
2025-07-20 21:38:15 - src.apis.project_analysis_api - INFO - ✅ 项目分析完成，已提取代码生成上下文
2025-07-20 21:38:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 从编码代理获取设计文档内容 (4936 字符)
2025-07-20 21:38:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 设计文档内容已添加到项目上下文 (4936 字符)
2025-07-20 21:38:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 项目中未检测到Controller
2025-07-20 21:38:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 Controller关联性分析:
2025-07-20 21:38:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 总Controller数: 0
2025-07-20 21:38:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 相关Controller数: 0
2025-07-20 21:38:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 关联度得分: 0.00
2025-07-20 21:38:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🤖 调用volcengine分析项目策略...发送的prompt信息: Java文件数=8, Controller数=0
2025-07-20 21:38:20 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-20 21:38:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 项目策略判断: create_new - 项目中没有找到相关的Controller（Controller总数为0），且业务关联度为0.00，表明这是一个全新的业务领域。此外，项目路径中显示的Java文件数量较少（8个），且未发现与API关键字'lsLimit'或路径'/crcl-open-api/lsLimit/listUnitLimitByCompanyIdExport'相关的现有Controller。因此，最适合的策略是创建新的Controller来处理这个API。
2025-07-20 21:38:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📁 策略2：直接使用新文件生成策略，原因: 项目中没有找到相关的Controller（Controller总数为0），且业务关联度为0.00，表明这是一个全新的业务领域。此外，项目路径中显示的Java文件数量较少（8个），且未发现与API关键字'lsLimit'或路径'/crcl-open-api/lsLimit/listUnitLimitByCompanyIdExport'相关的现有Controller。因此，最适合的策略是创建新的Controller来处理这个API。
2025-07-20 21:38:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -  调用volcengine大模型生成代码...
2025-07-20 21:38:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 开始代码生成...
2025-07-20 21:38:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎨 使用模板+AI混合模式生成代码
2025-07-20 21:38:20 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - 🎨 开始增强版代码生成: UnitLimitByCompanyIdExport
2025-07-20 21:38:20 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - 🔍 检测到Excel导出要求
2025-07-20 21:38:20 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - 🔍 解析到表结构: t_cust_multiorg_unit (14列)
2025-07-20 21:38:20 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - 🤖 使用智能文件复用和专门化提示词模板增强代码...
2025-07-20 21:38:20 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 设置设计文档内容，长度: 4936
2025-07-20 21:38:20 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO - 🔍 分析项目结构: /Users/renyu/Documents/create_project/链数中建一局_1753017893/crcl-open/crcl-open/src/test/java/com/yljr/limit/src/main/java/com/yljr/limit
2025-07-20 21:38:20 - src.corder_integration.code_generator.intelligent_file_reuse_manager - WARNING - ⚠️ 未找到Java源码目录: /Users/renyu/Documents/create_project/链数中建一局_1753017893/crcl-open/crcl-open/src/test/java/com/yljr/limit/src/main/java/com/yljr/limit/src/main/java
2025-07-20 21:38:20 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO - 🤔 决策文件复用策略: UnitLimitByCompanyIdExport
2025-07-20 21:38:20 - src.corder_integration.code_generator.intelligent_file_reuse_manager - WARNING - ⚠️ 项目结构未初始化，使用默认策略
2025-07-20 21:38:20 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - 📋 智能文件复用策略:
2025-07-20 21:38:20 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO -    controller: create_new - 项目结构未分析，创建新文件
2025-07-20 21:38:20 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO -    application_service: create_new - 项目结构未分析，创建新文件
2025-07-20 21:38:20 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO -    domain_service: create_new - 项目结构未分析，创建新文件
2025-07-20 21:38:20 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO -    mapper: create_new - 项目结构未分析，创建新文件
2025-07-20 21:38:20 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO -    feign_client: create_new - 项目结构未分析，创建新文件
2025-07-20 21:38:20 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO -    xml_file: create_new - 项目结构未分析，创建新文件
2025-07-20 21:38:20 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO - 🔗 生成完整调用链: UnitLimitByCompanyIdExport
2025-07-20 21:38:20 - src.corder_integration.code_generator.intelligent_file_reuse_manager - WARNING - ⚠️ 未找到表结构定义，使用默认字段
2025-07-20 21:38:20 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO - ✅ 调用链代码生成完成，包含 9 个组件
2025-07-20 21:38:20 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 智能文件复用生成了 9 个组件
2025-07-20 21:38:20 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - 📝 需要创建 9 个新文件
2025-07-20 21:38:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI生成成功，生成代码类型: ['controller_method', 'application_service', 'domain_service', 'domain_service_impl', 'request_dto', 'response_dto', 'mapper', 'feign_client', 'xml_mapping']
2025-07-20 21:38:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 开始写入生成的代码文件...
2025-07-20 21:38:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔧 统一类名基础: UnitLimitByCompanyIdExport
2025-07-20 21:38:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ controller_method 类名: UnitLimitByCompanyIdExportController
2025-07-20 21:38:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ application_service 类名: UnitLimitByCompanyIdExportApplication
2025-07-20 21:38:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ domain_service_impl 类名: UnitLimitByCompanyIdExportServiceImpl
2025-07-20 21:38:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ request_dto 类名: UnitLimitByCompanyIdExportReq
2025-07-20 21:38:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ response_dto 类名: UnitLimitByCompanyIdExportResp
2025-07-20 21:38:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 标准化后的代码类型: ['controller_method', 'application_service', 'domain_service', 'domain_service_impl', 'request_dto', 'response_dto', 'mapper', 'feign_client', 'xml_mapping']
2025-07-20 21:38:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🤖 调用volcengine判断Java文件输出路径...
2025-07-20 21:38:45 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-20 21:38:45 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM路径判断成功，配置了 9 个Java文件路径
2025-07-20 21:38:45 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 controller_method: UnitLimitByCompanyIdExportController.java
2025-07-20 21:38:45 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 application_service: UnitLimitByCompanyIdExportApplication.java
2025-07-20 21:38:45 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 domain_service: UnitLimitByCompanyIdExportService.java
2025-07-20 21:38:45 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 domain_service_impl: UnitLimitByCompanyIdExportServiceImpl.java
2025-07-20 21:38:45 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 request_dto: UnitLimitByCompanyIdExportReq.java
2025-07-20 21:38:45 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 response_dto: UnitLimitByCompanyIdExportResp.java
2025-07-20 21:38:45 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 mapper: UnitLimitByCompanyIdExportMapper.java
2025-07-20 21:38:45 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 feign_client: UnitLimitByCompanyIdExportFeignClient.java
2025-07-20 21:38:45 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 xml_mapping: UnitLimitByCompanyIdExportMapper.xml
2025-07-20 21:38:45 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 代码内容 (controller_method):

package com.yljr.crcl.interfaces;

import com.yljr.crcl.interfaces.dto.UnitLimitByCompanyIdExportReq;
import com.yljr.crcl.interfaces.dto.UnitLimitByCompanyIdExportResp;
import com.yljr.common.dto.Response;
import org.springframework.web.bind.annotation.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.validation.annotation.Validated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import io.swagger.annotations.ApiOperation;

import javax.validation.Valid;

/**
 * UnitLimitByCompanyIdExport Controller
 * 复用listUnitLimitByCompanyId接口的查询逻辑，将结果导出为Excel格式
 */
@Validated
@RestController
@RequestMapping("/api/unitLimitByCompanyIdExport")
public class UnitLimitByCompanyIdExportController {

    private final Logger logger = LoggerFactory.getLogger(this.getClass());
    
    @Autowired
    private UnitLimitByCompanyIdExportApplication unitLimitByCompanyIdExportApplication;

    /**
     * 复用listUnitLimitByCompanyId接口的查询逻辑，将结果导出为Excel格式
     */
    @PostMapping("/unitLimitByCompanyIdExport")
    @ApiOperation(value = "复用listUnitLimitByCompanyId接口的查询逻辑，将结果导出为Excel格式")
    public Response<UnitLimitByCompanyIdExportResp> unitLimitByCompanyIdExport(@RequestBody @Valid UnitLimitByCompanyIdExportReq request) {
        try {
            logger.info("开始执行unitLimitByCompanyIdExport，请求参数: {}", request);
            
            return unitLimitByCompanyIdExportApplication.unitLimitByCompanyIdExport(request);
            
        } catch (Exception e) {
            logger.error("执行unitLimitByCompanyIdExport失败", e);
            return Response.error("执行失败: " + e.getMessage());
        }
    }
}
2025-07-20 21:38:45 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: /Users/renyu/Documents/create_project/链数中建一局_1753017893/crcl-open/crcl-open/src/test/java/com/yljr/limit/src/main/java/com/yljr/limit/src/main/java/com/yljr/crcl/interfaces/facade/UnitLimitByCompanyIdExportController.java
2025-07-20 21:38:45 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: /Users/renyu/Documents/create_project/链数中建一局_1753017893/crcl-open/crcl-open/src/test/java/com/yljr/limit/src/main/java/com/yljr/limit/src/main/java/com/yljr/crcl/interfaces/facade/UnitLimitByCompanyIdExportController.java
2025-07-20 21:38:45 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 代码内容 (application_service):

package com.yljr.crcl.application.service;

import com.yljr.crcl.interfaces.dto.UnitLimitByCompanyIdExportReq;
import com.yljr.crcl.interfaces.dto.UnitLimitByCompanyIdExportResp;
import org.springframework.stereotype.Service;
import org.springframework.beans.factory.annotation.Autowired;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * UnitLimitByCompanyIdExport Application Service
 * 复用listUnitLimitByCompanyId接口的查询逻辑，将结果导出为Excel格式
 */
@Service
public class UnitLimitByCompanyIdExportApplication {

    private static final Logger logger = LoggerFactory.getLogger(UnitLimitByCompanyIdExportApplication.class);
    
    @Autowired
    private UnitLimitByCompanyIdExportFeignClient unitlimitbycompanyidexportFeignClient;

    /**
     * 复用listUnitLimitByCompanyId接口的查询逻辑，将结果导出为Excel格式
     */
    public UnitLimitByCompanyIdExportResp UnitLimitByCompanyIdExport(UnitLimitByCompanyIdExportReq request) {
        logger.info("Application Service执行UnitLimitByCompanyIdExport，参数: {}", request);
        
        try {
            return unitlimitbycompanyidexportFeignClient.UnitLimitByCompanyIdExport(request);
        } catch (Exception e) {
            logger.error("Application Service执行UnitLimitByCompanyIdExport失败", e);
            throw new RuntimeException("执行失败: " + e.getMessage(), e);
        }
    }
}
2025-07-20 21:38:45 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: /Users/renyu/Documents/create_project/链数中建一局_1753017893/crcl-open/crcl-open/src/test/java/com/yljr/limit/src/main/java/com/yljr/limit/src/main/java/com/yljr/crcl/application/service/UnitLimitByCompanyIdExportApplication.java
2025-07-20 21:38:45 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: /Users/renyu/Documents/create_project/链数中建一局_1753017893/crcl-open/crcl-open/src/test/java/com/yljr/limit/src/main/java/com/yljr/limit/src/main/java/com/yljr/crcl/application/service/UnitLimitByCompanyIdExportApplication.java
2025-07-20 21:38:45 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 代码内容 (domain_service):
package com.yljr.crcl.domain.service;

import com.yljr.crcl.interfaces.dto.UnitLimitByCompanyIdExportReq;
import com.yljr.crcl.interfaces.dto.UnitLimitByCompanyIdExportResp;

/**
 * UnitLimitByCompanyIdExport Domain Service Interface
 * 复用listUnitLimitByCompanyId接口的查询逻辑，将结果导出为Excel格式
 */
public interface UnitLimitByCompanyIdExportService {

    /**
     * 复用listUnitLimitByCompanyId接口的查询逻辑，将结果导出为Excel格式
     */
    UnitLimitByCompanyIdExportResp unitLimitByCompanyIdExport(UnitLimitByCompanyIdExportReq request);
}
2025-07-20 21:38:45 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: /Users/renyu/Documents/create_project/链数中建一局_1753017893/crcl-open/crcl-open/src/test/java/com/yljr/limit/src/main/java/com/yljr/limit/src/main/java/com/yljr/crcl/domain/service/UnitLimitByCompanyIdExportService.java
2025-07-20 21:38:45 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: /Users/renyu/Documents/create_project/链数中建一局_1753017893/crcl-open/crcl-open/src/test/java/com/yljr/limit/src/main/java/com/yljr/limit/src/main/java/com/yljr/crcl/domain/service/UnitLimitByCompanyIdExportService.java
2025-07-20 21:38:45 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 代码内容 (domain_service_impl):
package com.yljr.crcl.domain.service.impl;

import com.yljr.crcl.domain.service.UnitLimitByCompanyIdExportService;
import com.yljr.crcl.interfaces.dto.UnitLimitByCompanyIdExportReq;
import com.yljr.crcl.interfaces.dto.UnitLimitByCompanyIdExportResp;
import com.yljr.crcl.domain.entity.UnitLimitByCompanyIdExport;
import com.yljr.crcl.domain.mapper.UnitLimitByCompanyIdExportMapper;
import org.springframework.stereotype.Service;
import org.springframework.beans.factory.annotation.Autowired;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import java.util.List;

/**
 * UnitLimitByCompanyIdExport Domain Service Implementation
 * 复用listUnitLimitByCompanyId接口的查询逻辑，将结果导出为Excel格式
 */
@Service
public class UnitLimitByCompanyIdExportServiceImpl implements UnitLimitByCompanyIdExportService {

    private static final Logger logger = LoggerFactory.getLogger(UnitLimitByCompanyIdExportServiceImpl.class);
    
    @Autowired
    private UnitLimitByCompanyIdExportMapper unitlimitbycompanyidexportMapper;

    /**
     * 复用listUnitLimitByCompanyId接口的查询逻辑，将结果导出为Excel格式
     */
    @Override
    public UnitLimitByCompanyIdExportResp unitLimitByCompanyIdExport(UnitLimitByCompanyIdExportReq request) {
        logger.info("Domain Service执行UnitLimitByCompanyIdExport，参数: {}", request);
        
        try {
        // 调用Mapper查询数据
        List<UnitLimitByCompanyIdExport> dataList = unitlimitbycompanyidexportMapper.selectUnitLimitByCompanyIdExportList(request);
        
        // 构建响应
        UnitLimitByCompanyIdExportResp response = new UnitLimitByCompanyIdExportResp();
        response.setDataList(dataList);
        response.setTotalCount(dataList.size());
        
        return response;
        } catch (Exception e) {
            logger.error("Domain Service执行UnitLimitByCompanyIdExport失败", e);
            throw new RuntimeException("执行失败: " + e.getMessage(), e);
        }
    }
}
2025-07-20 21:38:45 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: /Users/renyu/Documents/create_project/链数中建一局_1753017893/crcl-open/crcl-open/src/test/java/com/yljr/limit/src/main/java/com/yljr/limit/src/main/java/com/yljr/crcl/domain/service/impl/UnitLimitByCompanyIdExportServiceImpl.java
2025-07-20 21:38:45 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: /Users/renyu/Documents/create_project/链数中建一局_1753017893/crcl-open/crcl-open/src/test/java/com/yljr/limit/src/main/java/com/yljr/limit/src/main/java/com/yljr/crcl/domain/service/impl/UnitLimitByCompanyIdExportServiceImpl.java
2025-07-20 21:38:45 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 代码内容 (request_dto):

package com.yljr.crcl.interfaces.dto;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Date;
import java.math.BigDecimal;

/**
 * UnitLimitByCompanyIdExport 请求DTO
 * 复用listUnitLimitByCompanyId接口的查询逻辑，将结果导出为Excel格式
 */
@ApiModel(value = "UnitLimitByCompanyIdExportReq", description = "复用listUnitLimitByCompanyId接口的查询逻辑，将结果导出为Excel格式")
public class UnitLimitByCompanyIdExportReq {

    /**
     * 公司ID(必填)
     */
    @ApiModelProperty(value = "公司ID(必填)")
    private String gwCompanyId;
    /**
     * 组织单元名称(可选)
     */
    @ApiModelProperty(value = "组织单元名称(可选)")
    private String unitName;
    /**
     * 额度来源(可选)
     */
    @ApiModelProperty(value = "额度来源(可选)")
    private String limitSource;
    /**
     * 业务类型(必填)
     */
    @ApiModelProperty(value = "业务类型(必填)")
    private String bizType;

    public String getGwCompanyId() {
        return gwCompanyId;
    }

    public void setGwCompanyId(String gwCompanyId) {
        this.gwCompanyId = gwCompanyId;
    }
    public String getUnitName() {
        return unitName;
    }

    public void setUnitName(String unitName) {
        this.unitName = unitName;
    }
    public String getLimitSource() {
        return limitSource;
    }

    public void setLimitSource(String limitSource) {
        this.limitSource = limitSource;
    }
    public String getBizType() {
        return bizType;
    }

    public void setBizType(String bizType) {
        this.bizType = bizType;
    }

    @Override
    public String toString() {
        return "UnitLimitByCompanyIdExportReq{" +
                "gwCompanyId=" + gwCompanyId + ", " +
                "unitName=" + unitName + ", " +
                "limitSource=" + limitSource + ", " +
                "bizType=" + bizType +
                "};";
    }
}
2025-07-20 21:38:45 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: /Users/renyu/Documents/create_project/链数中建一局_1753017893/crcl-open/crcl-open/src/test/java/com/yljr/limit/src/main/java/com/yljr/limit/src/main/java/com/yljr/crcl/interfaces/dto/UnitLimitByCompanyIdExportReq.java
2025-07-20 21:38:45 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: /Users/renyu/Documents/create_project/链数中建一局_1753017893/crcl-open/crcl-open/src/test/java/com/yljr/limit/src/main/java/com/yljr/limit/src/main/java/com/yljr/crcl/interfaces/dto/UnitLimitByCompanyIdExportReq.java
2025-07-20 21:38:45 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 代码内容 (response_dto):

package com.yljr.crcl.interfaces.dto;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.List;
import java.util.Date;
import java.math.BigDecimal;

/**
 * UnitLimitByCompanyIdExport 响应DTO
 * 复用listUnitLimitByCompanyId接口的查询逻辑，将结果导出为Excel格式
 */
@ApiModel(value = "UnitLimitByCompanyIdExportResp", description = "复用listUnitLimitByCompanyId接口的查询逻辑，将结果导出为Excel格式")
public class UnitLimitByCompanyIdExportResp {

    /**
     * Excel文件流
     */
    @ApiModelProperty(value = "Excel文件流")
    private String file;
    /**
     * 导出文件名
     */
    @ApiModelProperty(value = "导出文件名")
    private String filename;
    /**
     * application/vnd.openxmlformats-officedocument.spreadsheetml.sheet
     */
    @ApiModelProperty(value = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
    private String contentType;

    public String getFile() {
        return file;
    }

    public void setFile(String file) {
        this.file = file;
    }
    public String getFilename() {
        return filename;
    }

    public void setFilename(String filename) {
        this.filename = filename;
    }
    public String getContentType() {
        return contentType;
    }

    public void setContentType(String contentType) {
        this.contentType = contentType;
    }

    @Override
    public String toString() {
        return "UnitLimitByCompanyIdExportResp{" +
                "file=" + file + ", " +
                "filename=" + filename + ", " +
                "contentType=" + contentType +
                "};";
    }
}
2025-07-20 21:38:45 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: /Users/renyu/Documents/create_project/链数中建一局_1753017893/crcl-open/crcl-open/src/test/java/com/yljr/limit/src/main/java/com/yljr/limit/src/main/java/com/yljr/crcl/interfaces/dto/UnitLimitByCompanyIdExportResp.java
2025-07-20 21:38:45 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: /Users/renyu/Documents/create_project/链数中建一局_1753017893/crcl-open/crcl-open/src/test/java/com/yljr/limit/src/main/java/com/yljr/limit/src/main/java/com/yljr/crcl/interfaces/dto/UnitLimitByCompanyIdExportResp.java
2025-07-20 21:38:45 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 代码内容 (mapper):

package com.yljr.crcl.domain.mapper;

import com.yljr.crcl.interfaces.dto.UnitLimitByCompanyIdExportReq;
import com.yljr.crcl.domain.entity.UnitLimitByCompanyIdExport;
import org.apache.ibatis.annotations.Mapper;
import org.apache.ibatis.annotations.Param;
import java.util.List;

/**
 * UnitLimitByCompanyIdExport Mapper接口
 * 复用listUnitLimitByCompanyId接口的查询逻辑，将结果导出为Excel格式
 */
@Mapper
public interface UnitLimitByCompanyIdExportMapper {

    /**
     * 根据条件查询UnitLimitByCompanyIdExport列表
     */
    List<UnitLimitByCompanyIdExport> selectUnitLimitByCompanyIdExportList(@Param("condition") UnitLimitByCompanyIdExportReq condition);

    /**
     * 根据主键查询UnitLimitByCompanyIdExport
     */
    UnitLimitByCompanyIdExport selectByPrimaryKey(@Param("id") Long id);

    /**
     * 新增UnitLimitByCompanyIdExport记录
     */
    int insert(UnitLimitByCompanyIdExport record);

    /**
     * 更新UnitLimitByCompanyIdExport记录
     */
    int updateByPrimaryKey(UnitLimitByCompanyIdExport record);

    /**
     * 删除UnitLimitByCompanyIdExport记录
     */
    int deleteByPrimaryKey(@Param("id") Long id);
}
2025-07-20 21:38:45 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: /Users/renyu/Documents/create_project/链数中建一局_1753017893/crcl-open/crcl-open/src/test/java/com/yljr/limit/src/main/java/com/yljr/limit/src/main/java/com/yljr/crcl/domain/mapper/UnitLimitByCompanyIdExportMapper.java
2025-07-20 21:38:45 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: /Users/renyu/Documents/create_project/链数中建一局_1753017893/crcl-open/crcl-open/src/test/java/com/yljr/limit/src/main/java/com/yljr/limit/src/main/java/com/yljr/crcl/domain/mapper/UnitLimitByCompanyIdExportMapper.java
2025-07-20 21:38:45 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 代码内容 (feign_client):

package com.yljr.crcl.application.feign;

import com.yljr.crcl.interfaces.dto.UnitLimitByCompanyIdExportReq;
import com.yljr.crcl.interfaces.dto.UnitLimitByCompanyIdExportResp;
import com.yljr.common.dto.ResponseInfo;
import org.springframework.cloud.openfeign.FeignClient;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.http.MediaType;

/**
 * UnitLimitByCompanyIdExport Feign接口
 * 复用listUnitLimitByCompanyId接口的查询逻辑，将结果导出为Excel格式
 */
@FeignClient(name = "external-service", path = "/api")
public interface UnitLimitByCompanyIdExportFeignClient {

    /**
     * 复用listUnitLimitByCompanyId接口的查询逻辑，将结果导出为Excel格式
     */
    @PostMapping(value = "/unitlimitbycompanyidexport", consumes = MediaType.APPLICATION_JSON_UTF8_VALUE)
    ResponseInfo<UnitLimitByCompanyIdExportResp> UnitLimitByCompanyIdExport(@RequestBody UnitLimitByCompanyIdExportReq request);
}
2025-07-20 21:38:45 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: /Users/renyu/Documents/create_project/链数中建一局_1753017893/crcl-open/crcl-open/src/test/java/com/yljr/limit/src/main/java/com/yljr/limit/src/main/java/com/yljr/crcl/application/feign/UnitLimitByCompanyIdExportFeignClient.java
2025-07-20 21:38:45 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: /Users/renyu/Documents/create_project/链数中建一局_1753017893/crcl-open/crcl-open/src/test/java/com/yljr/limit/src/main/java/com/yljr/limit/src/main/java/com/yljr/crcl/application/feign/UnitLimitByCompanyIdExportFeignClient.java
2025-07-20 21:38:45 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 代码内容 (xml_mapping):
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yljr.crcl.domain.mapper.UnitLimitByCompanyIdExportMapper">

    <resultMap id="BaseResultMap" type="com.yljr.crcl.domain.entity.UnitLimitByCompanyIdExport">
        <id column="ID" jdbcType="BIGINT" property="id" />
        <result column="NAME" jdbcType="VARCHAR" property="name" />
        <result column="STATUS" jdbcType="VARCHAR" property="status" />
        <result column="CREATE_TIME" jdbcType="TIMESTAMP" property="createTime" />
        <result column="UPDATE_TIME" jdbcType="TIMESTAMP" property="updateTime" />
    </resultMap>

    <sql id="Base_Column_List">
        ID, NAME, STATUS, CREATE_TIME, UPDATE_TIME
    </sql>

    <select id="selectUnitLimitByCompanyIdExportList" parameterType="com.yljr.crcl.interfaces.dto.UnitLimitByCompanyIdExportReq" 
            resultMap="BaseResultMap">
        SELECT 
        <include refid="Base_Column_List" />
        FROM T_UNITLIMITBYCOMPANYIDEXPORT
        WHERE 1=1
        <if test="condition.status != null">
            AND STATUS = #{condition.status}
        </if>
        ORDER BY CREATE_TIME DESC
    </select>

    <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
        SELECT 
        <include refid="Base_Column_List" />
        FROM T_UNITLIMITBYCOMPANYIDEXPORT
        WHERE ID = #{id,jdbcType=BIGINT}
    </select>

    <insert id="insert" parameterType="com.yljr.crcl.domain.entity.UnitLimitByCompanyIdExport">
        INSERT INTO T_UNITLIMITBYCOMPANYIDEXPORT (NAME, STATUS, CREATE_TIME, UPDATE_TIME)
        VALUES (#{name}, #{status}, #{createTime}, #{updateTime})
    </insert>

    <update id="updateByPrimaryKey" parameterType="com.yljr.crcl.domain.entity.UnitLimitByCompanyIdExport">
        UPDATE T_UNITLIMITBYCOMPANYIDEXPORT
        SET NAME = #{name},
            STATUS = #{status},
            UPDATE_TIME = #{updateTime}
        WHERE ID = #{id}
    </update>

    <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
        DELETE FROM T_UNITLIMITBYCOMPANYIDEXPORT
        WHERE ID = #{id,jdbcType=BIGINT}
    </delete>

</mapper>
2025-07-20 21:38:45 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: /Users/renyu/Documents/create_project/链数中建一局_1753017893/crcl-open/crcl-open/src/test/java/com/yljr/limit/src/main/java/com/yljr/limit/src/main/resources/mapper/UnitLimitByCompanyIdExportMapper.xml
2025-07-20 21:38:45 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: /Users/renyu/Documents/create_project/链数中建一局_1753017893/crcl-open/crcl-open/src/test/java/com/yljr/limit/src/main/java/com/yljr/limit/src/main/resources/mapper/UnitLimitByCompanyIdExportMapper.xml
2025-07-20 21:38:45 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📊 代码生成完成，共写入 9 个文件到项目中
2025-07-20 21:38:45 - src.corder_integration.code_generator.interface_adder - INFO - ℹ️ 没有找到需要清理的备份文件
2025-07-20 21:38:45 - src.apis.project_analysis_api - INFO - 🗑️ 已清除缓存: /Users/renyu/Documents/create_project/链数中建一局_1753017893/crcl-open/crcl-open/src/test/java/com/yljr/limit/src/main/java/com/yljr/limit_确权开立服务
2025-07-20 21:38:45 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🗑️ 已清理项目分析缓存，确保下次分析获取最新状态
2025-07-20 21:38:45 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_010 状态更新为 completed
2025-07-20 21:38:45 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 任务 task_010 执行成功
2025-07-20 21:38:45 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 第6轮执行完成，处理了 1 个任务
2025-07-20 21:38:45 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第7轮任务检查...
2025-07-20 21:38:45 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第7轮没有可执行的智能编码任务
2025-07-20 21:38:45 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 7 个任务，共7轮
2025-07-20 21:38:45 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 7 个任务
2025-07-20 21:38:45 - src.corder_integration.langgraph.workflow_orchestrator - WARNING - 没有识别到任何服务，结束编码流程
2025-07-20 21:38:45 - src.corder_integration.langgraph.workflow_orchestrator - INFO - 工作流执行成功: 链数中建一局_1753018627, 完成服务数: 0
2025-07-20 21:38:45 - werkzeug - INFO - 127.0.0.1 - - [20/Jul/2025 21:38:45] "POST /api/coder-agent/process-document HTTP/1.1" 200 -
