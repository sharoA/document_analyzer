2025-07-22 16:44:06 - system - INFO - ==================================================
2025-07-22 16:44:06 - system - INFO - 🚀 智能分析系统日志系统初始化完成
2025-07-22 16:44:06 - system - INFO - 📁 日志根目录: /Users/renyu/Documents/ai_project/document_analyzer/logs
2025-07-22 16:44:06 - system - INFO - 📊 日志级别: INFO
2025-07-22 16:44:06 - system - INFO - 📅 按日期轮转: 每天午夜自动轮转
2025-07-22 16:44:06 - system - INFO - 📂 按月分目录: logs/YYYY-MM/
2025-07-22 16:44:06 - system - INFO - 📝 主日志: logs/2025-07/app.log
2025-07-22 16:44:06 - system - INFO - 🔧 API日志: logs/2025-07/api_server.log
2025-07-22 16:44:06 - system - INFO - 🗂️ 保留天数: 7 天
2025-07-22 16:44:06 - system - INFO - ==================================================
2025-07-22 16:44:08 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-22 16:44:09 - root - WARNING - SQLite检查点不可用，将仅使用内存检查点
2025-07-22 16:44:09 - src.utils.task_storage - INFO - 数据库初始化成功
2025-07-22 16:44:09 - markdown_storage - INFO - Markdown存储管理器初始化完成
2025-07-22 16:44:09 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-22 16:44:09 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-22 16:44:09 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-22 16:44:10 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-22 16:44:10 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-22 16:44:10 - WeaviateVectorDatabase - INFO - ✅ Weaviate连接成功: http://localhost:8080 (gRPC: 50051)
2025-07-22 16:44:10 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/schema/AnalyDesignDocuments "HTTP/1.1 200 OK"
2025-07-22 16:44:10 - WeaviateVectorDatabase - INFO - ✅ Weaviate集合已存在: AnalyDesignDocuments
2025-07-22 16:44:10 - AnalysisServiceManager - INFO - 初始化向量数据库: weaviate
2025-07-22 16:44:10 - sentence_transformers.SentenceTransformer - INFO - Use pytorch device_name: mps
2025-07-22 16:44:10 - sentence_transformers.SentenceTransformer - INFO - Load pretrained SentenceTransformer: BAAI/bge-large-zh
2025-07-22 16:44:20 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-22 16:44:21 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-22 16:44:22 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-22 16:44:22 - src.utils.weaviate_helper - INFO - 成功连接到 Weaviate: localhost:8080
2025-07-22 16:44:22 - AnalysisServiceManager - INFO - 分析服务管理器初始化完成
2025-07-22 16:44:22 - src.utils.enhanced_analyzer - INFO - 增强分析器初始化完成
2025-07-22 16:44:27 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:8082
 * Running on http://26.26.26.1:8082
2025-07-22 16:44:27 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-07-22 16:44:27 - werkzeug - INFO -  * Restarting with stat
2025-07-22 16:44:27 - system - INFO - ==================================================
2025-07-22 16:44:27 - system - INFO - 🚀 智能分析系统日志系统初始化完成
2025-07-22 16:44:27 - system - INFO - 📁 日志根目录: /Users/renyu/Documents/ai_project/document_analyzer/logs
2025-07-22 16:44:27 - system - INFO - 📊 日志级别: INFO
2025-07-22 16:44:27 - system - INFO - 📅 按日期轮转: 每天午夜自动轮转
2025-07-22 16:44:27 - system - INFO - 📂 按月分目录: logs/YYYY-MM/
2025-07-22 16:44:27 - system - INFO - 📝 主日志: logs/2025-07/app.log
2025-07-22 16:44:27 - system - INFO - 🔧 API日志: logs/2025-07/api_server.log
2025-07-22 16:44:27 - system - INFO - 🗂️ 保留天数: 7 天
2025-07-22 16:44:27 - system - INFO - ==================================================
2025-07-22 16:44:29 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-22 16:44:30 - root - WARNING - SQLite检查点不可用，将仅使用内存检查点
2025-07-22 16:44:30 - src.utils.task_storage - INFO - 数据库初始化成功
2025-07-22 16:44:30 - markdown_storage - INFO - Markdown存储管理器初始化完成
2025-07-22 16:44:30 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-22 16:44:30 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-22 16:44:30 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-22 16:44:31 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-22 16:44:31 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-22 16:44:31 - WeaviateVectorDatabase - INFO - ✅ Weaviate连接成功: http://localhost:8080 (gRPC: 50051)
2025-07-22 16:44:31 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/schema/AnalyDesignDocuments "HTTP/1.1 200 OK"
2025-07-22 16:44:31 - WeaviateVectorDatabase - INFO - ✅ Weaviate集合已存在: AnalyDesignDocuments
2025-07-22 16:44:31 - AnalysisServiceManager - INFO - 初始化向量数据库: weaviate
2025-07-22 16:44:31 - sentence_transformers.SentenceTransformer - INFO - Use pytorch device_name: mps
2025-07-22 16:44:31 - sentence_transformers.SentenceTransformer - INFO - Load pretrained SentenceTransformer: BAAI/bge-large-zh
2025-07-22 16:44:40 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-22 16:44:41 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-22 16:44:41 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-22 16:44:41 - src.utils.weaviate_helper - INFO - 成功连接到 Weaviate: localhost:8080
2025-07-22 16:44:41 - AnalysisServiceManager - INFO - 分析服务管理器初始化完成
2025-07-22 16:44:41 - src.utils.enhanced_analyzer - INFO - 增强分析器初始化完成
2025-07-22 16:44:41 - werkzeug - WARNING -  * Debugger is active!
2025-07-22 16:44:41 - werkzeug - INFO -  * Debugger PIN: 686-644-562
2025-07-22 16:44:42 - src.apis.coder_agent_api - INFO - 开始处理文档: 链数中建一局_1753173882
2025-07-22 16:44:42 - src.apis.coder_agent_api - INFO - 文档长度: 7325 字符
2025-07-22 16:44:42 - src.apis.coder_agent_api - INFO - 使用LangGraph: True
2025-07-22 16:44:42 - src.apis.coder_agent_api - INFO - 代码输出路径: /Users/renyu/Documents/create_project
2025-07-22 16:44:42 - src.apis.coder_agent_api - INFO - 使用LangGraph工作流处理项目: 链数中建一局_1753173882
2025-07-22 16:44:42 - src.corder_integration.langgraph.workflow_orchestrator - INFO - 使用内存检查点
2025-07-22 16:44:42 - src.corder_integration.langgraph.workflow_orchestrator - INFO - 生成目标分支名称: 链数中建一局_1753173882 -> D_20250722_链数中建一局_1753173882
2025-07-22 16:44:42 - src.corder_integration.langgraph.workflow_orchestrator - INFO - 开始执行编码工作流: 链数中建一局_1753173882 -> /Users/renyu/Documents/create_project
2025-07-22 16:44:42 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🚀 Git管理节点开始执行...
2025-07-22 16:44:42 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-22 16:44:42 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🎯 git_management_node 开始执行任务...
2025-07-22 16:44:42 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 📋 找到 1 个可执行任务
2025-07-22 16:44:42 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🚀 开始执行任务: task_003 (git_clone)
2025-07-22 16:44:42 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_003 已被 git_management_node 领取
2025-07-22 16:44:42 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 📥 执行Git克隆任务: task_003
2025-07-22 16:44:42 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 📥 开始克隆仓库: http://localhost:30000/ls/crcl-open.git -> /Users/renyu/Documents/create_project/default_project/crcl-open
2025-07-22 16:44:42 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 已切换到分支: master
2025-07-22 16:44:42 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 仓库克隆成功: /Users/renyu/Documents/create_project/default_project/crcl-open
2025-07-22 16:44:42 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_003 状态更新为 completed
2025-07-22 16:44:42 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 任务 task_003 执行成功
2025-07-22 16:44:42 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ Git管理任务执行完成，共处理 1 个任务
2025-07-22 16:44:42 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ Git管理节点完成 - 提取: 0 个仓库, 克隆: 1 个仓库, 仓库初始化状态: True
2025-07-22 16:44:42 - src.corder_integration.langgraph.workflow_orchestrator - WARNING - 没有识别到任何服务，Git设置阶段结束
2025-07-22 16:44:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-22 16:44:42 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-22 16:44:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: /Users/renyu/Documents/ai_project/document_analyzer/config.yaml
2025-07-22 16:44:42 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-22 16:44:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-22 16:44:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-22 16:44:42 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-22 16:44:42 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-22 16:44:42 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 增强版模板+AI生成器初始化完成
2025-07-22 16:44:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 增强版模板+AI代码生成器初始化完成
2025-07-22 16:44:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 从工作流状态获取设计文档 (7324 字符)
2025-07-22 16:44:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-22 16:44:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-22 16:44:43 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 第1轮找到 1 个可执行任务
2025-07-22 16:44:43 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 开始执行任务: task_009 (api)
2025-07-22 16:44:43 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_009 已被 intelligent_coding_node 领取
2025-07-22 16:44:43 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🌐 执行API接口生成任务: task_009
2025-07-22 16:44:43 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 解析的接口信息:
2025-07-22 16:44:43 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 接口名称: UnitLimitByCompanyId
2025-07-22 16:44:43 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - API路径: /crcl-open-api/lsLimit/listUnitLimitByCompanyId
2025-07-22 16:44:43 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - HTTP方法: GET
2025-07-22 16:44:43 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 输入参数: 6个
2025-07-22 16:44:43 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 输出参数: 4个
2025-07-22 16:44:43 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 业务描述: 根据公司ID和筛选条件查询组织单元额度信息，调用用户服务获取组织单元基础信息
2025-07-22 16:44:43 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 在 /Users/renyu/Documents/create_project/链数中建一局_1753169454/crcl-open 中查找最佳Java项目路径...
2025-07-22 16:44:43 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 目标服务名: 确权开立服务
2025-07-22 16:44:43 - src.corder_integration.langgraph.nodes.intelligent_coding_node - WARNING - ⚠️ 未找到Java项目结构，使用规范化路径: /Users/renyu/Documents/create_project/链数中建一局_1753169454/crcl-open
2025-07-22 16:44:43 - src.corder_integration.config.domain_mapping_config - INFO - ✅ 成功加载业务领域映射配置: /Users/renyu/Documents/ai_project/document_analyzer/src/corder_integration/config/domain_mapping.yaml
2025-07-22 16:44:43 - src.corder_integration.config.domain_mapping_config - INFO - 🔍 映射API关键字到业务领域: lsLimit
2025-07-22 16:44:43 - src.corder_integration.config.domain_mapping_config - INFO - ✅ 精确匹配: lsLimit -> lsLimit
2025-07-22 16:44:43 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 API关键字映射: lsLimit -> lsLimit (API路径: /crcl-open-api/lsLimit/listUnitLimitByCompanyId)
2025-07-22 16:44:43 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 在项目中搜索关键字相关路径: lsLimit
2025-07-22 16:44:43 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    ❌ 未找到包含关键字 'lsLimit' 的相关目录
2025-07-22 16:44:43 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -  分析目标项目: /Users/renyu/Documents/create_project/链数中建一局_1753169454/crcl-open
2025-07-22 16:44:43 - src.apis.project_analysis_api - INFO - 🔍 开始分析项目用于代码生成: /Users/renyu/Documents/create_project/链数中建一局_1753169454/crcl-open
2025-07-22 16:44:43 - src.apis.project_analysis_api - INFO - 🔍 在 /Users/renyu/Documents/create_project/链数中建一局_1753169454/crcl-open 中查找最佳Java项目路径...
2025-07-22 16:44:43 - src.apis.project_analysis_api - INFO - 🎯 目标服务名: 确权开立服务
2025-07-22 16:44:43 - src.apis.project_analysis_api - WARNING - ⚠️ 在 /Users/renyu/Documents/create_project/链数中建一局_1753169454/crcl-open 中未找到包含Java文件的src/main/java结构
2025-07-22 16:44:43 - src.apis.project_analysis_api - INFO - 📂 实际分析路径: /Users/renyu/Documents/create_project/链数中建一局_1753169454/crcl-open
2025-07-22 16:44:43 - src.utils.java_code_analyzer - INFO - 🔍 开始分析企业级Java项目: /Users/renyu/Documents/create_project/链数中建一局_1753169454/crcl-open
2025-07-22 16:44:43 - src.apis.project_analysis_api - ERROR - ❌ 项目分析失败: 项目路径不存在: /Users/renyu/Documents/create_project/链数中建一局_1753169454/crcl-open
2025-07-22 16:44:43 - src.corder_integration.langgraph.nodes.intelligent_coding_node - ERROR - ❌ 项目路径不存在: 项目路径不存在: /Users/renyu/Documents/create_project/链数中建一局_1753169454/crcl-open
2025-07-22 16:44:43 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_009 状态更新为 failed
2025-07-22 16:44:43 - src.corder_integration.langgraph.nodes.intelligent_coding_node - ERROR - ❌ 任务 task_009 执行失败: 项目路径不存在: /Users/renyu/Documents/create_project/链数中建一局_1753169454/crcl-open
2025-07-22 16:44:43 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 第1轮执行完成，处理了 1 个任务
2025-07-22 16:44:43 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第2轮任务检查...
2025-07-22 16:44:43 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第2轮没有可执行的智能编码任务
2025-07-22 16:44:43 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 1 个任务，共2轮
2025-07-22 16:44:43 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 1 个任务
2025-07-22 16:44:43 - src.corder_integration.langgraph.workflow_orchestrator - WARNING - 没有识别到任何服务，结束编码流程
2025-07-22 16:44:43 - src.corder_integration.langgraph.workflow_orchestrator - INFO - 工作流执行成功: 链数中建一局_1753173882, 完成服务数: 0
2025-07-22 16:44:43 - werkzeug - INFO - 127.0.0.1 - - [22/Jul/2025 16:44:43] "POST /api/coder-agent/process-document HTTP/1.1" 200 -
2025-07-22 16:46:14 - src.apis.coder_agent_api - INFO - 开始处理文档: 链数中建一局_1753173974
2025-07-22 16:46:14 - src.apis.coder_agent_api - INFO - 文档长度: 7325 字符
2025-07-22 16:46:14 - src.apis.coder_agent_api - INFO - 使用LangGraph: True
2025-07-22 16:46:14 - src.apis.coder_agent_api - INFO - 代码输出路径: /Users/renyu/Documents/create_project
2025-07-22 16:46:14 - src.apis.coder_agent_api - INFO - 使用LangGraph工作流处理项目: 链数中建一局_1753173974
2025-07-22 16:46:14 - src.corder_integration.langgraph.workflow_orchestrator - INFO - 使用内存检查点
2025-07-22 16:46:14 - src.corder_integration.langgraph.workflow_orchestrator - INFO - 生成目标分支名称: 链数中建一局_1753173974 -> D_20250722_链数中建一局_1753173974
2025-07-22 16:46:14 - src.corder_integration.langgraph.workflow_orchestrator - INFO - 开始执行编码工作流: 链数中建一局_1753173974 -> /Users/renyu/Documents/create_project
2025-07-22 16:46:14 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🚀 Git管理节点开始执行...
2025-07-22 16:46:14 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-22 16:46:14 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🎯 git_management_node 开始执行任务...
2025-07-22 16:46:14 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ℹ️ 没有可执行的Git管理任务
2025-07-22 16:46:14 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ Git管理节点完成 - 提取: 0 个仓库, 克隆: 0 个仓库, 仓库初始化状态: False
2025-07-22 16:46:14 - src.corder_integration.langgraph.workflow_orchestrator - WARNING - 没有识别到任何服务，Git设置阶段结束
2025-07-22 16:46:14 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-22 16:46:14 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-22 16:46:14 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: /Users/renyu/Documents/ai_project/document_analyzer/config.yaml
2025-07-22 16:46:14 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-22 16:46:14 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-22 16:46:14 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-22 16:46:14 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-22 16:46:14 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-22 16:46:14 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 增强版模板+AI生成器初始化完成
2025-07-22 16:46:14 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 增强版模板+AI代码生成器初始化完成
2025-07-22 16:46:14 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 从工作流状态获取设计文档 (7324 字符)
2025-07-22 16:46:14 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-22 16:46:14 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-22 16:46:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 第1轮找到 1 个可执行任务
2025-07-22 16:46:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 开始执行任务: task_009 (api)
2025-07-22 16:46:15 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_009 已被 intelligent_coding_node 领取
2025-07-22 16:46:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🌐 执行API接口生成任务: task_009
2025-07-22 16:46:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 解析的接口信息:
2025-07-22 16:46:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 接口名称: UnitLimitByCompanyId
2025-07-22 16:46:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - API路径: /crcl-open-api/lsLimit/listUnitLimitByCompanyId
2025-07-22 16:46:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - HTTP方法: GET
2025-07-22 16:46:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 输入参数: 6个
2025-07-22 16:46:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 输出参数: 4个
2025-07-22 16:46:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 业务描述: 根据公司ID和筛选条件查询组织单元额度信息，调用用户服务获取组织单元基础信息
2025-07-22 16:46:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 在 /Users/renyu/Documents/create_project/链数中建一局_1753173882/crcl-open 中查找最佳Java项目路径...
2025-07-22 16:46:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 目标服务名: 确权开立服务
2025-07-22 16:46:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - WARNING - ⚠️ 未找到Java项目结构，使用规范化路径: /Users/renyu/Documents/create_project/链数中建一局_1753173882/crcl-open
2025-07-22 16:46:15 - src.corder_integration.config.domain_mapping_config - INFO - 🔍 映射API关键字到业务领域: lsLimit
2025-07-22 16:46:15 - src.corder_integration.config.domain_mapping_config - INFO - ✅ 精确匹配: lsLimit -> lsLimit
2025-07-22 16:46:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 API关键字映射: lsLimit -> lsLimit (API路径: /crcl-open-api/lsLimit/listUnitLimitByCompanyId)
2025-07-22 16:46:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 在项目中搜索关键字相关路径: lsLimit
2025-07-22 16:46:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    ❌ 未找到包含关键字 'lsLimit' 的相关目录
2025-07-22 16:46:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -  分析目标项目: /Users/renyu/Documents/create_project/链数中建一局_1753173882/crcl-open
2025-07-22 16:46:15 - src.apis.project_analysis_api - INFO - 🔍 开始分析项目用于代码生成: /Users/renyu/Documents/create_project/链数中建一局_1753173882/crcl-open
2025-07-22 16:46:15 - src.apis.project_analysis_api - INFO - 🔍 在 /Users/renyu/Documents/create_project/链数中建一局_1753173882/crcl-open 中查找最佳Java项目路径...
2025-07-22 16:46:15 - src.apis.project_analysis_api - INFO - 🎯 目标服务名: 确权开立服务
2025-07-22 16:46:15 - src.apis.project_analysis_api - WARNING - ⚠️ 在 /Users/renyu/Documents/create_project/链数中建一局_1753173882/crcl-open 中未找到包含Java文件的src/main/java结构
2025-07-22 16:46:15 - src.apis.project_analysis_api - INFO - 📂 实际分析路径: /Users/renyu/Documents/create_project/链数中建一局_1753173882/crcl-open
2025-07-22 16:46:15 - src.utils.java_code_analyzer - INFO - 🔍 开始分析企业级Java项目: /Users/renyu/Documents/create_project/链数中建一局_1753173882/crcl-open
2025-07-22 16:46:15 - src.apis.project_analysis_api - ERROR - ❌ 项目分析失败: 项目路径不存在: /Users/renyu/Documents/create_project/链数中建一局_1753173882/crcl-open
2025-07-22 16:46:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - ERROR - ❌ 项目路径不存在: 项目路径不存在: /Users/renyu/Documents/create_project/链数中建一局_1753173882/crcl-open
2025-07-22 16:46:15 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_009 状态更新为 failed
2025-07-22 16:46:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - ERROR - ❌ 任务 task_009 执行失败: 项目路径不存在: /Users/renyu/Documents/create_project/链数中建一局_1753173882/crcl-open
2025-07-22 16:46:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 第1轮执行完成，处理了 1 个任务
2025-07-22 16:46:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第2轮任务检查...
2025-07-22 16:46:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第2轮没有可执行的智能编码任务
2025-07-22 16:46:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 1 个任务，共2轮
2025-07-22 16:46:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 1 个任务
2025-07-22 16:46:15 - src.corder_integration.langgraph.workflow_orchestrator - WARNING - 没有识别到任何服务，结束编码流程
2025-07-22 16:46:15 - src.corder_integration.langgraph.workflow_orchestrator - INFO - 工作流执行成功: 链数中建一局_1753173974, 完成服务数: 0
2025-07-22 16:46:15 - werkzeug - INFO - 127.0.0.1 - - [22/Jul/2025 16:46:15] "POST /api/coder-agent/process-document HTTP/1.1" 200 -
2025-07-22 16:48:03 - src.apis.coder_agent_api - INFO - 开始处理文档: 链数中建一局_1753174083
2025-07-22 16:48:03 - src.apis.coder_agent_api - INFO - 文档长度: 7325 字符
2025-07-22 16:48:03 - src.apis.coder_agent_api - INFO - 使用LangGraph: True
2025-07-22 16:48:03 - src.apis.coder_agent_api - INFO - 代码输出路径: /Users/renyu/Documents/create_project
2025-07-22 16:48:03 - src.apis.coder_agent_api - INFO - 使用LangGraph工作流处理项目: 链数中建一局_1753174083
2025-07-22 16:48:03 - src.corder_integration.langgraph.workflow_orchestrator - INFO - 使用内存检查点
2025-07-22 16:48:03 - src.corder_integration.langgraph.workflow_orchestrator - INFO - 生成目标分支名称: 链数中建一局_1753174083 -> D_20250722_链数中建一局_1753174083
2025-07-22 16:48:03 - src.corder_integration.langgraph.workflow_orchestrator - INFO - 开始执行编码工作流: 链数中建一局_1753174083 -> /Users/renyu/Documents/create_project
2025-07-22 16:48:03 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🚀 Git管理节点开始执行...
2025-07-22 16:48:03 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-22 16:48:03 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🎯 git_management_node 开始执行任务...
2025-07-22 16:48:03 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ℹ️ 没有可执行的Git管理任务
2025-07-22 16:48:03 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ Git管理节点完成 - 提取: 0 个仓库, 克隆: 0 个仓库, 仓库初始化状态: False
2025-07-22 16:48:03 - src.corder_integration.langgraph.workflow_orchestrator - WARNING - 没有识别到任何服务，Git设置阶段结束
2025-07-22 16:48:03 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-22 16:48:03 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-22 16:48:03 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: /Users/renyu/Documents/ai_project/document_analyzer/config.yaml
2025-07-22 16:48:03 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-22 16:48:03 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-22 16:48:03 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-22 16:48:03 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-22 16:48:03 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-22 16:48:03 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 增强版模板+AI生成器初始化完成
2025-07-22 16:48:03 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 增强版模板+AI代码生成器初始化完成
2025-07-22 16:48:03 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 从工作流状态获取设计文档 (7324 字符)
2025-07-22 16:48:03 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-22 16:48:03 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-22 16:48:03 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 第1轮找到 1 个可执行任务
2025-07-22 16:48:03 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 开始执行任务: task_009 (api)
2025-07-22 16:48:03 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_009 已被 intelligent_coding_node 领取
2025-07-22 16:48:03 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🌐 执行API接口生成任务: task_009
2025-07-22 16:48:03 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 解析的接口信息:
2025-07-22 16:48:03 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 接口名称: UnitLimitByCompanyId
2025-07-22 16:48:03 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - API路径: /crcl-open-api/lsLimit/listUnitLimitByCompanyId
2025-07-22 16:48:03 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - HTTP方法: GET
2025-07-22 16:48:03 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 输入参数: 6个
2025-07-22 16:48:03 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 输出参数: 4个
2025-07-22 16:48:03 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 业务描述: 根据公司ID和筛选条件查询组织单元额度信息，调用用户服务获取组织单元基础信息
2025-07-22 16:48:03 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 在 /Users/renyu/Documents/create_project/链数中建一局_1753173882/crcl-open 中查找最佳Java项目路径...
2025-07-22 16:48:03 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 目标服务名: 确权开立服务
2025-07-22 16:48:03 - src.corder_integration.langgraph.nodes.intelligent_coding_node - WARNING - ⚠️ 未找到Java项目结构，使用规范化路径: /Users/renyu/Documents/create_project/链数中建一局_1753173882/crcl-open
2025-07-22 16:48:03 - src.corder_integration.config.domain_mapping_config - INFO - 🔍 映射API关键字到业务领域: lsLimit
2025-07-22 16:48:03 - src.corder_integration.config.domain_mapping_config - INFO - ✅ 精确匹配: lsLimit -> lsLimit
2025-07-22 16:48:03 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 API关键字映射: lsLimit -> lsLimit (API路径: /crcl-open-api/lsLimit/listUnitLimitByCompanyId)
2025-07-22 16:48:03 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 在项目中搜索关键字相关路径: lsLimit
2025-07-22 16:48:03 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    ❌ 未找到包含关键字 'lsLimit' 的相关目录
2025-07-22 16:48:03 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -  分析目标项目: /Users/renyu/Documents/create_project/链数中建一局_1753173882/crcl-open
2025-07-22 16:48:03 - src.apis.project_analysis_api - INFO - 🔍 开始分析项目用于代码生成: /Users/renyu/Documents/create_project/链数中建一局_1753173882/crcl-open
2025-07-22 16:48:03 - src.apis.project_analysis_api - INFO - 🔍 在 /Users/renyu/Documents/create_project/链数中建一局_1753173882/crcl-open 中查找最佳Java项目路径...
2025-07-22 16:48:03 - src.apis.project_analysis_api - INFO - 🎯 目标服务名: 确权开立服务
2025-07-22 16:48:03 - src.apis.project_analysis_api - WARNING - ⚠️ 在 /Users/renyu/Documents/create_project/链数中建一局_1753173882/crcl-open 中未找到包含Java文件的src/main/java结构
2025-07-22 16:48:03 - src.apis.project_analysis_api - INFO - 📂 实际分析路径: /Users/renyu/Documents/create_project/链数中建一局_1753173882/crcl-open
2025-07-22 16:48:03 - src.utils.java_code_analyzer - INFO - 🔍 开始分析企业级Java项目: /Users/renyu/Documents/create_project/链数中建一局_1753173882/crcl-open
2025-07-22 16:48:03 - src.apis.project_analysis_api - ERROR - ❌ 项目分析失败: 项目路径不存在: /Users/renyu/Documents/create_project/链数中建一局_1753173882/crcl-open
2025-07-22 16:48:03 - src.corder_integration.langgraph.nodes.intelligent_coding_node - ERROR - ❌ 项目路径不存在: 项目路径不存在: /Users/renyu/Documents/create_project/链数中建一局_1753173882/crcl-open
2025-07-22 16:48:03 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_009 状态更新为 failed
2025-07-22 16:48:03 - src.corder_integration.langgraph.nodes.intelligent_coding_node - ERROR - ❌ 任务 task_009 执行失败: 项目路径不存在: /Users/renyu/Documents/create_project/链数中建一局_1753173882/crcl-open
2025-07-22 16:48:03 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 第1轮执行完成，处理了 1 个任务
2025-07-22 16:48:03 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第2轮任务检查...
2025-07-22 16:48:03 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第2轮没有可执行的智能编码任务
2025-07-22 16:48:03 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 1 个任务，共2轮
2025-07-22 16:48:03 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 1 个任务
2025-07-22 16:48:03 - src.corder_integration.langgraph.workflow_orchestrator - WARNING - 没有识别到任何服务，结束编码流程
2025-07-22 16:48:03 - src.corder_integration.langgraph.workflow_orchestrator - INFO - 工作流执行成功: 链数中建一局_1753174083, 完成服务数: 0
2025-07-22 16:48:03 - werkzeug - INFO - 127.0.0.1 - - [22/Jul/2025 16:48:03] "POST /api/coder-agent/process-document HTTP/1.1" 200 -
2025-07-22 16:49:19 - src.apis.coder_agent_api - INFO - 开始处理文档: 链数中建一局_1753174159
2025-07-22 16:49:19 - src.apis.coder_agent_api - INFO - 文档长度: 7325 字符
2025-07-22 16:49:19 - src.apis.coder_agent_api - INFO - 使用LangGraph: True
2025-07-22 16:49:19 - src.apis.coder_agent_api - INFO - 代码输出路径: /Users/renyu/Documents/create_project
2025-07-22 16:49:19 - src.apis.coder_agent_api - INFO - 使用LangGraph工作流处理项目: 链数中建一局_1753174159
2025-07-22 16:49:19 - src.corder_integration.langgraph.workflow_orchestrator - INFO - 使用内存检查点
2025-07-22 16:49:19 - src.corder_integration.langgraph.workflow_orchestrator - INFO - 生成目标分支名称: 链数中建一局_1753174159 -> D_20250722_链数中建一局_1753174159
2025-07-22 16:49:19 - src.corder_integration.langgraph.workflow_orchestrator - INFO - 开始执行编码工作流: 链数中建一局_1753174159 -> /Users/renyu/Documents/create_project
2025-07-22 16:49:19 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🚀 Git管理节点开始执行...
2025-07-22 16:49:19 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-22 16:49:19 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🎯 git_management_node 开始执行任务...
2025-07-22 16:49:19 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ℹ️ 没有可执行的Git管理任务
2025-07-22 16:49:19 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ Git管理节点完成 - 提取: 0 个仓库, 克隆: 0 个仓库, 仓库初始化状态: False
2025-07-22 16:49:19 - src.corder_integration.langgraph.workflow_orchestrator - WARNING - 没有识别到任何服务，Git设置阶段结束
2025-07-22 16:49:19 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-22 16:49:19 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-22 16:49:19 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: /Users/renyu/Documents/ai_project/document_analyzer/config.yaml
2025-07-22 16:49:19 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-22 16:49:19 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-22 16:49:19 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-22 16:49:19 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-22 16:49:19 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-22 16:49:19 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 增强版模板+AI生成器初始化完成
2025-07-22 16:49:19 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 增强版模板+AI代码生成器初始化完成
2025-07-22 16:49:19 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 从工作流状态获取设计文档 (7324 字符)
2025-07-22 16:49:19 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-22 16:49:19 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-22 16:49:19 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-22 16:49:19 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-22 16:49:19 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-22 16:49:19 - src.corder_integration.langgraph.workflow_orchestrator - WARNING - 没有识别到任何服务，结束编码流程
2025-07-22 16:49:19 - src.corder_integration.langgraph.workflow_orchestrator - INFO - 工作流执行成功: 链数中建一局_1753174159, 完成服务数: 0
2025-07-22 16:49:19 - werkzeug - INFO - 127.0.0.1 - - [22/Jul/2025 16:49:19] "POST /api/coder-agent/process-document HTTP/1.1" 200 -
2025-07-22 16:50:04 - src.apis.coder_agent_api - INFO - 开始处理文档: 链数中建一局_1753174204
2025-07-22 16:50:04 - src.apis.coder_agent_api - INFO - 文档长度: 7325 字符
2025-07-22 16:50:04 - src.apis.coder_agent_api - INFO - 使用LangGraph: True
2025-07-22 16:50:04 - src.apis.coder_agent_api - INFO - 代码输出路径: /Users/renyu/Documents/create_project
2025-07-22 16:50:04 - src.apis.coder_agent_api - INFO - 使用LangGraph工作流处理项目: 链数中建一局_1753174204
2025-07-22 16:50:04 - src.corder_integration.langgraph.workflow_orchestrator - INFO - 使用内存检查点
2025-07-22 16:50:04 - src.corder_integration.langgraph.workflow_orchestrator - INFO - 生成目标分支名称: 链数中建一局_1753174204 -> D_20250722_链数中建一局_1753174204
2025-07-22 16:50:04 - src.corder_integration.langgraph.workflow_orchestrator - INFO - 开始执行编码工作流: 链数中建一局_1753174204 -> /Users/renyu/Documents/create_project
2025-07-22 16:50:04 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🚀 Git管理节点开始执行...
2025-07-22 16:50:04 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-22 16:50:04 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🎯 git_management_node 开始执行任务...
2025-07-22 16:50:04 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 📋 找到 1 个可执行任务
2025-07-22 16:50:04 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🚀 开始执行任务: task_001 (git_extraction)
2025-07-22 16:50:04 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_001 已被 git_management_node 领取
2025-07-22 16:50:04 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🔍 执行Git提取任务: task_001
2025-07-22 16:50:04 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 📄 提取源文本: 解析设计文档，提取用户服务 http://localhost:30000/ls/zqyl-user-center-service.git 和确权开立服务 http://localhost:30000/ls/crcl-open.git 仓库地址 从设计文档提取GitLab仓库地址...
2025-07-22 16:50:04 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🔍 开始从文本提取Git URL...
2025-07-22 16:50:04 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🔗 找到Git仓库: http://localhost:30000/ls/zqyl-user-center-service.git
2025-07-22 16:50:04 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🔗 找到Git仓库: http://localhost:30000/ls/crcl-open.git
2025-07-22 16:50:04 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 提取到 2 个Git仓库
2025-07-22 16:50:04 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_001 状态更新为 completed
2025-07-22 16:50:04 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 任务 task_001 执行成功
2025-07-22 16:50:04 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ Git管理任务执行完成，共处理 1 个任务
2025-07-22 16:50:04 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🚀 基于提取结果自动克隆 2 个仓库...
2025-07-22 16:50:04 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 📥 自动克隆仓库: http://localhost:30000/ls/zqyl-user-center-service.git -> /Users/renyu/Documents/create_project/链数中建一局_1753174204/zqyl-user-center-service
2025-07-22 16:50:04 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 📥 开始克隆仓库: http://localhost:30000/ls/zqyl-user-center-service.git -> /Users/renyu/Documents/create_project/链数中建一局_1753174204/zqyl-user-center-service
2025-07-22 16:50:04 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 已切换到分支: master
2025-07-22 16:50:04 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 仓库克隆成功: /Users/renyu/Documents/create_project/链数中建一局_1753174204/zqyl-user-center-service
2025-07-22 16:50:04 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 自动克隆成功: zqyl-user-center-service
2025-07-22 16:50:04 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 已标记任务 task_002 为完成状态
2025-07-22 16:50:04 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 📥 自动克隆仓库: http://localhost:30000/ls/crcl-open.git -> /Users/renyu/Documents/create_project/链数中建一局_1753174204/crcl-open
2025-07-22 16:50:04 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 📥 开始克隆仓库: http://localhost:30000/ls/crcl-open.git -> /Users/renyu/Documents/create_project/链数中建一局_1753174204/crcl-open
2025-07-22 16:50:05 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 已切换到分支: master
2025-07-22 16:50:05 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 仓库克隆成功: /Users/renyu/Documents/create_project/链数中建一局_1753174204/crcl-open
2025-07-22 16:50:05 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 自动克隆成功: crcl-open
2025-07-22 16:50:05 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 已标记任务 task_003 为完成状态
2025-07-22 16:50:05 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ Git管理节点完成 - 提取: 2 个仓库, 克隆: 2 个仓库, 仓库初始化状态: True
2025-07-22 16:50:05 - src.corder_integration.langgraph.workflow_orchestrator - WARNING - 没有识别到任何服务，Git设置阶段结束
2025-07-22 16:50:05 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-22 16:50:05 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-22 16:50:05 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: /Users/renyu/Documents/ai_project/document_analyzer/config.yaml
2025-07-22 16:50:05 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-22 16:50:05 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-22 16:50:05 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-22 16:50:05 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-22 16:50:05 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-22 16:50:05 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 增强版模板+AI生成器初始化完成
2025-07-22 16:50:05 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 增强版模板+AI代码生成器初始化完成
2025-07-22 16:50:05 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 从工作流状态获取设计文档 (7324 字符)
2025-07-22 16:50:05 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-22 16:50:05 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-22 16:50:05 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 第1轮找到 2 个可执行任务
2025-07-22 16:50:05 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 开始执行任务: task_004 (code_analysis)
2025-07-22 16:50:05 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_004 已被 intelligent_coding_node 领取
2025-07-22 16:50:05 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行代码分析任务: task_004
2025-07-22 16:50:05 - src.utils.java_code_analyzer - INFO - 🔍 开始分析企业级Java项目: /Users/renyu/Documents/create_project/链数中建一局_1753017893/zqyl-user-center-service
2025-07-22 16:50:05 - src.corder_integration.langgraph.nodes.intelligent_coding_node - ERROR - ❌ 项目路径不存在: 项目路径不存在: /Users/renyu/Documents/create_project/链数中建一局_1753017893/zqyl-user-center-service
2025-07-22 16:50:05 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_004 状态更新为 failed
2025-07-22 16:50:05 - src.corder_integration.langgraph.nodes.intelligent_coding_node - ERROR - ❌ 任务 task_004 执行失败: 项目路径不存在: /Users/renyu/Documents/create_project/链数中建一局_1753017893/zqyl-user-center-service
2025-07-22 16:50:05 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 开始执行任务: task_005 (code_analysis)
2025-07-22 16:50:05 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_005 已被 intelligent_coding_node 领取
2025-07-22 16:50:05 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行代码分析任务: task_005
2025-07-22 16:50:05 - src.utils.java_code_analyzer - INFO - 🔍 开始分析企业级Java项目: /Users/renyu/Documents/create_project/链数中建一局_1753017893/crcl-open
2025-07-22 16:50:05 - src.corder_integration.langgraph.nodes.intelligent_coding_node - ERROR - ❌ 项目路径不存在: 项目路径不存在: /Users/renyu/Documents/create_project/链数中建一局_1753017893/crcl-open
2025-07-22 16:50:05 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_005 状态更新为 failed
2025-07-22 16:50:05 - src.corder_integration.langgraph.nodes.intelligent_coding_node - ERROR - ❌ 任务 task_005 执行失败: 项目路径不存在: /Users/renyu/Documents/create_project/链数中建一局_1753017893/crcl-open
2025-07-22 16:50:05 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 第1轮执行完成，处理了 2 个任务
2025-07-22 16:50:05 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第2轮任务检查...
2025-07-22 16:50:05 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第2轮没有可执行的智能编码任务
2025-07-22 16:50:05 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 2 个任务，共2轮
2025-07-22 16:50:05 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 2 个任务
2025-07-22 16:50:05 - src.corder_integration.langgraph.workflow_orchestrator - WARNING - 没有识别到任何服务，结束编码流程
2025-07-22 16:50:05 - src.corder_integration.langgraph.workflow_orchestrator - INFO - 工作流执行成功: 链数中建一局_1753174204, 完成服务数: 0
2025-07-22 16:50:05 - werkzeug - INFO - 127.0.0.1 - - [22/Jul/2025 16:50:05] "POST /api/coder-agent/process-document HTTP/1.1" 200 -
2025-07-22 16:52:33 - src.apis.coder_agent_api - INFO - 开始处理文档: 链数中建一局_1753174353
2025-07-22 16:52:33 - src.apis.coder_agent_api - INFO - 文档长度: 7325 字符
2025-07-22 16:52:33 - src.apis.coder_agent_api - INFO - 使用LangGraph: True
2025-07-22 16:52:33 - src.apis.coder_agent_api - INFO - 代码输出路径: /Users/renyu/Documents/create_project
2025-07-22 16:52:33 - src.apis.coder_agent_api - INFO - 使用LangGraph工作流处理项目: 链数中建一局_1753174353
2025-07-22 16:52:33 - src.corder_integration.langgraph.workflow_orchestrator - INFO - 使用内存检查点
2025-07-22 16:52:33 - src.corder_integration.langgraph.workflow_orchestrator - INFO - 生成目标分支名称: 链数中建一局_1753174353 -> D_20250722_链数中建一局_1753174353
2025-07-22 16:52:33 - src.corder_integration.langgraph.workflow_orchestrator - INFO - 开始执行编码工作流: 链数中建一局_1753174353 -> /Users/renyu/Documents/create_project
2025-07-22 16:52:33 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🚀 Git管理节点开始执行...
2025-07-22 16:52:33 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-22 16:52:33 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🎯 git_management_node 开始执行任务...
2025-07-22 16:52:33 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ℹ️ 没有可执行的Git管理任务
2025-07-22 16:52:33 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ Git管理节点完成 - 提取: 0 个仓库, 克隆: 0 个仓库, 仓库初始化状态: False
2025-07-22 16:52:33 - src.corder_integration.langgraph.workflow_orchestrator - WARNING - 没有识别到任何服务，Git设置阶段结束
2025-07-22 16:52:33 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-22 16:52:33 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-22 16:52:33 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: /Users/renyu/Documents/ai_project/document_analyzer/config.yaml
2025-07-22 16:52:33 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-22 16:52:33 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-22 16:52:33 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-22 16:52:33 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-22 16:52:33 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-22 16:52:33 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 增强版模板+AI生成器初始化完成
2025-07-22 16:52:33 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 增强版模板+AI代码生成器初始化完成
2025-07-22 16:52:33 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 从工作流状态获取设计文档 (7324 字符)
2025-07-22 16:52:33 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-22 16:52:33 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-22 16:52:33 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 第1轮找到 2 个可执行任务
2025-07-22 16:52:33 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 开始执行任务: task_004 (code_analysis)
2025-07-22 16:52:33 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_004 已被 intelligent_coding_node 领取
2025-07-22 16:52:33 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行代码分析任务: task_004
2025-07-22 16:52:33 - src.utils.java_code_analyzer - INFO - 🔍 开始分析企业级Java项目: /Users/renyu/Documents/create_project/链数中建一局_1753174204/zqyl-user-center-service
2025-07-22 16:52:34 - src.utils.java_code_analyzer - INFO - ✅ 企业级项目分析完成，共分析 408 个Java文件
2025-07-22 16:52:34 - src.utils.java_code_analyzer - INFO - 📄 企业级分析报告已导出: outputs/用户服务_java_analysis_20250722_165234.md
2025-07-22 16:52:34 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_004 状态更新为 completed
2025-07-22 16:52:34 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 任务 task_004 执行成功
2025-07-22 16:52:34 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 开始执行任务: task_005 (code_analysis)
2025-07-22 16:52:34 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_005 已被 intelligent_coding_node 领取
2025-07-22 16:52:34 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行代码分析任务: task_005
2025-07-22 16:52:34 - src.utils.java_code_analyzer - INFO - 🔍 开始分析企业级Java项目: /Users/renyu/Documents/create_project/链数中建一局_1753174204/crcl-open
2025-07-22 16:52:39 - src.utils.java_code_analyzer - INFO - ✅ 企业级项目分析完成，共分析 2262 个Java文件
2025-07-22 16:52:39 - src.utils.java_code_analyzer - INFO - 📄 企业级分析报告已导出: outputs/确权开立服务_java_analysis_20250722_165239.md
2025-07-22 16:52:40 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_005 状态更新为 completed
2025-07-22 16:52:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 任务 task_005 执行成功
2025-07-22 16:52:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 第1轮执行完成，处理了 2 个任务
2025-07-22 16:52:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第2轮任务检查...
2025-07-22 16:52:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 第2轮找到 1 个可执行任务
2025-07-22 16:52:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 开始执行任务: task_006 (config)
2025-07-22 16:52:40 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_006 已被 intelligent_coding_node 领取
2025-07-22 16:52:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ⚙️ 执行配置生成任务: task_006
2025-07-22 16:52:40 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_006 状态更新为 completed
2025-07-22 16:52:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 任务 task_006 执行成功
2025-07-22 16:52:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 第2轮执行完成，处理了 1 个任务
2025-07-22 16:52:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第3轮任务检查...
2025-07-22 16:52:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 第3轮找到 1 个可执行任务
2025-07-22 16:52:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 开始执行任务: task_007 (database)
2025-07-22 16:52:40 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_007 已被 intelligent_coding_node 领取
2025-07-22 16:52:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🗄️ 执行数据库设计任务: task_007
2025-07-22 16:52:40 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_007 状态更新为 completed
2025-07-22 16:52:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 任务 task_007 执行成功
2025-07-22 16:52:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 第3轮执行完成，处理了 1 个任务
2025-07-22 16:52:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第4轮任务检查...
2025-07-22 16:52:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 第4轮找到 1 个可执行任务
2025-07-22 16:52:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 开始执行任务: task_008 (api)
2025-07-22 16:52:40 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_008 已被 intelligent_coding_node 领取
2025-07-22 16:52:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🌐 执行API接口生成任务: task_008
2025-07-22 16:52:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 解析的接口信息:
2025-07-22 16:52:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 接口名称: CompanyUnitList
2025-07-22 16:52:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - API路径: /general/multiorgManage/queryCompanyUnitList
2025-07-22 16:52:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - HTTP方法: GET
2025-07-22 16:52:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 输入参数: 3个
2025-07-22 16:52:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 输出参数: 6个
2025-07-22 16:52:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 业务描述: 根据查询条件查询组织单元信息，支持按编码、状态等条件筛选
2025-07-22 16:52:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 在 /Users/renyu/Documents/create_project/链数中建一局_1753174204/zqyl-user-center-service 中查找最佳Java项目路径...
2025-07-22 16:52:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 目标服务名: 用户服务
2025-07-22 16:52:43 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-22 16:52:43 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 发现Java项目: user-basic-general
2025-07-22 16:52:43 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       🎯 相对路径: zqyl-user-center-service/user-basic-service/user-basic-general
2025-07-22 16:52:43 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       📊 Java文件: 408个
2025-07-22 16:52:43 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       📐 目录深度: 3
2025-07-22 16:52:43 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       🏆 优先级分数: 750
2025-07-22 16:52:43 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 排序后的候选路径（前3个）:
2025-07-22 16:52:43 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    1. zqyl-user-center-service/user-basic-service/user-basic-general (优先级: 750)
2025-07-22 16:52:43 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 选择最佳Java项目路径:
2025-07-22 16:52:43 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 完整路径: /Users/renyu/Documents/create_project/链数中建一局_1753174204/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general
2025-07-22 16:52:43 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📋 相对路径: zqyl-user-center-service/user-basic-service/user-basic-general
2025-07-22 16:52:43 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    🏆 最终优先级: 750
2025-07-22 16:52:43 - src.corder_integration.config.domain_mapping_config - INFO - 🔍 映射API关键字到业务领域: multiorgManage
2025-07-22 16:52:43 - src.corder_integration.config.domain_mapping_config - INFO - ✅ 精确匹配: multiorgManage -> multiorgManage
2025-07-22 16:52:43 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 API关键字映射: multiorgManage -> multiorgManage (API路径: /general/multiorgManage/queryCompanyUnitList)
2025-07-22 16:52:43 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 在项目中搜索关键字相关路径: multiorgManage
2025-07-22 16:52:43 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 找到匹配目录: multiorg (得分: 25)
2025-07-22 16:52:43 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 找到匹配目录: multiorg (得分: 25)
2025-07-22 16:52:43 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 找到匹配目录: multiorg (得分: 25)
2025-07-22 16:52:43 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 找到匹配目录: multiorg (得分: 25)
2025-07-22 16:52:43 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 找到匹配目录: multiorg (得分: 25)
2025-07-22 16:52:43 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    ✅ 选择最佳匹配目录: multiorg (路径: src/main/java/com/yljr/user/basicgeneral/beans/resp/multiorg)
2025-07-22 16:52:43 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 基于API关键字 'multiorgManage' 找到现有路径: /Users/renyu/Documents/create_project/链数中建一局_1753174204/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general/src/main/java/com/yljr/user/basicgeneral/beans/resp/multiorg
2025-07-22 16:52:43 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -  分析目标项目: /Users/renyu/Documents/create_project/链数中建一局_1753174204/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general/src/main/java/com/yljr/user/basicgeneral/beans/resp/multiorg
2025-07-22 16:52:43 - src.apis.project_analysis_api - INFO - 🔍 开始分析项目用于代码生成: /Users/renyu/Documents/create_project/链数中建一局_1753174204/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general/src/main/java/com/yljr/user/basicgeneral/beans/resp/multiorg
2025-07-22 16:52:43 - src.apis.project_analysis_api - INFO - 🔍 在 /Users/renyu/Documents/create_project/链数中建一局_1753174204/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general/src/main/java/com/yljr/user/basicgeneral/beans/resp/multiorg 中查找最佳Java项目路径...
2025-07-22 16:52:43 - src.apis.project_analysis_api - INFO - 🎯 目标服务名: 用户服务
2025-07-22 16:52:43 - src.apis.project_analysis_api - WARNING - ⚠️ 在 /Users/renyu/Documents/create_project/链数中建一局_1753174204/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general/src/main/java/com/yljr/user/basicgeneral/beans/resp/multiorg 中未找到包含Java文件的src/main/java结构
2025-07-22 16:52:43 - src.apis.project_analysis_api - INFO - 📂 实际分析路径: /Users/renyu/Documents/create_project/链数中建一局_1753174204/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general/src/main/java/com/yljr/user/basicgeneral/beans/resp/multiorg
2025-07-22 16:52:43 - src.utils.java_code_analyzer - INFO - 🔍 开始分析企业级Java项目: /Users/renyu/Documents/create_project/链数中建一局_1753174204/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general/src/main/java/com/yljr/user/basicgeneral/beans/resp/multiorg
2025-07-22 16:52:43 - src.utils.java_code_analyzer - INFO - ✅ 企业级项目分析完成，共分析 6 个Java文件
2025-07-22 16:52:43 - src.apis.project_analysis_api - INFO - 📦 动态检测到基础包: com.yljr.user.basicgeneral (出现6次)
2025-07-22 16:52:43 - src.apis.project_analysis_api - INFO - 📦 动态检测到基础包: com.yljr.user.basicgeneral (出现6次)
2025-07-22 16:52:43 - src.apis.project_analysis_api - INFO - 📋 提取到0个Controller的详细信息
2025-07-22 16:52:43 - src.apis.project_analysis_api - INFO - 📦 动态检测到基础包: com.yljr.user.basicgeneral (出现6次)
2025-07-22 16:52:43 - src.apis.project_analysis_api - INFO - ✅ 项目分析完成，已提取代码生成上下文
2025-07-22 16:52:43 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 从编码代理获取设计文档内容 (7324 字符)
2025-07-22 16:52:43 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 设计文档内容已添加到项目上下文 (7324 字符)
2025-07-22 16:52:43 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 项目中未检测到Controller
2025-07-22 16:52:43 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 Controller关联性分析:
2025-07-22 16:52:43 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 总Controller数: 0
2025-07-22 16:52:43 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 相关Controller数: 0
2025-07-22 16:52:43 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 关联度得分: 0.00
2025-07-22 16:52:43 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🤖 调用volcengine分析项目策略...发送的prompt信息: Java文件数=6, Controller数=0
2025-07-22 16:52:47 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-22 16:52:47 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 项目策略判断: create_new - 项目中没有找到任何相关的Controller（Controller总数为0，相关Controller数也为0），且业务关联度为0.00，表明这是一个全新的业务领域或当前项目为空。根据策略判断标准，这种情况下应该创建新的Controller。
2025-07-22 16:52:47 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📁 策略2：直接使用新文件生成策略，原因: 项目中没有找到任何相关的Controller（Controller总数为0，相关Controller数也为0），且业务关联度为0.00，表明这是一个全新的业务领域或当前项目为空。根据策略判断标准，这种情况下应该创建新的Controller。
2025-07-22 16:52:47 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔧 规范化项目路径: /Users/renyu/Documents/create_project/链数中建一局_1753174204/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general/src/main/java/com/yljr/user/basicgeneral/beans/resp/multiorg -> /Users/renyu/Documents/create_project/链数中建一局_1753174204/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general
2025-07-22 16:52:47 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔧 策略2路径规范化:
2025-07-22 16:52:47 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    原始路径: /Users/renyu/Documents/create_project/链数中建一局_1753174204/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general/src/main/java/com/yljr/user/basicgeneral/beans/resp/multiorg
2025-07-22 16:52:47 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    规范化后: /Users/renyu/Documents/create_project/链数中建一局_1753174204/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general
2025-07-22 16:52:47 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -  调用volcengine大模型生成代码...
2025-07-22 16:52:47 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 开始代码生成...
2025-07-22 16:52:47 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎨 使用模板+AI混合模式生成代码
2025-07-22 16:52:47 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - 🎨 开始增强版代码生成: CompanyUnitList
2025-07-22 16:52:47 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - 🔍 解析到表结构: t_cust_multiorg_unit (14列)
2025-07-22 16:52:47 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - 🤖 使用智能文件复用和专门化提示词模板增强代码...
2025-07-22 16:52:47 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 设置设计文档内容，长度: 7324
2025-07-22 16:52:47 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO - 🔍 分析项目结构: /Users/renyu/Documents/create_project/链数中建一局_1753174204/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general
2025-07-22 16:52:47 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO - 🔍 从文件 GeneralApplication.java 推断基础包名: com.yljr.user.basicgeneral
2025-07-22 16:52:47 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO - ✅ 项目结构分析完成
2025-07-22 16:52:47 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO -    Controllers: 26
2025-07-22 16:52:47 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO -    Application Services: 0
2025-07-22 16:52:47 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO -    Domain Services: 0
2025-07-22 16:52:47 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO -    Mappers: 0
2025-07-22 16:52:47 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO -    Feign Clients: 0
2025-07-22 16:52:47 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO -    XML Files: 0
2025-07-22 16:52:47 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO - 🤔 决策文件复用策略: CompanyUnitList
2025-07-22 16:52:47 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO - 📋 文件复用策略决策完成:
2025-07-22 16:52:47 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO -    controller: create_new - 未找到合适的Controller (最高分数: 50)
2025-07-22 16:52:47 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO -    application_service: skip - 本地调用，可直接使用Domain Service
2025-07-22 16:52:47 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO -    domain_service: create_new - 未找到合适的Domain Service，需要创建
2025-07-22 16:52:47 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO -    mapper: create_new - 未找到合适的Mapper，需要创建
2025-07-22 16:52:47 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO -    feign_client: skip - 不需要外部服务调用
2025-07-22 16:52:47 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO -    xml_file: create_new - 需要创建新的XML文件
2025-07-22 16:52:47 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - 📋 智能文件复用策略:
2025-07-22 16:52:47 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO -    controller: create_new - 未找到合适的Controller (最高分数: 50)
2025-07-22 16:52:47 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO -    application_service: skip - 本地调用，可直接使用Domain Service
2025-07-22 16:52:47 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO -    domain_service: create_new - 未找到合适的Domain Service，需要创建
2025-07-22 16:52:47 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO -    mapper: create_new - 未找到合适的Mapper，需要创建
2025-07-22 16:52:47 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO -    feign_client: skip - 不需要外部服务调用
2025-07-22 16:52:47 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO -    xml_file: create_new - 需要创建新的XML文件
2025-07-22 16:52:47 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO - 🔗 生成完整调用链: CompanyUnitList
2025-07-22 16:52:47 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO - 🔍 找到表结构: T_CUST_MULTIORG_UNIT
2025-07-22 16:52:47 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO - ✅ 解析到 14 个字段
2025-07-22 16:52:47 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO - ✅ 调用链代码生成完成，包含 7 个组件
2025-07-22 16:52:47 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 智能文件复用生成了 7 个组件
2025-07-22 16:52:47 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - 📝 需要创建 7 个新文件
2025-07-22 16:52:47 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI生成成功，生成代码类型: ['controller_method', 'domain_service', 'domain_service_impl', 'request_dto', 'response_dto', 'mapper', 'xml_mapping']
2025-07-22 16:52:47 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 开始写入生成的代码文件...
2025-07-22 16:52:47 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔧 统一类名基础: CompanyUnitList
2025-07-22 16:52:47 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ controller_method 类名: CompanyUnitListController
2025-07-22 16:52:47 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ domain_service_impl 类名: CompanyUnitListServiceImpl
2025-07-22 16:52:47 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ request_dto 类名: CompanyUnitListReq
2025-07-22 16:52:47 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ response_dto 类名: CompanyUnitListResp
2025-07-22 16:52:47 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 标准化后的代码类型: ['controller_method', 'domain_service', 'domain_service_impl', 'request_dto', 'response_dto', 'mapper', 'xml_mapping']
2025-07-22 16:52:47 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🤖 调用volcengine判断Java文件输出路径...
2025-07-22 16:53:17 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-22 16:53:17 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM路径判断成功，配置了 7 个Java文件路径
2025-07-22 16:53:17 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 controller_method: CompanyUnitListController.java
2025-07-22 16:53:17 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 request_dto: CompanyUnitListReq.java
2025-07-22 16:53:17 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 response_dto: CompanyUnitListResp.java
2025-07-22 16:53:17 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 domain_service: CompanyUnitListService.java
2025-07-22 16:53:17 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 domain_service_impl: CompanyUnitListServiceImpl.java
2025-07-22 16:53:17 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 mapper: CompanyUnitListMapper.java
2025-07-22 16:53:17 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 xml_mapping: CompanyUnitListMapper.xml
2025-07-22 16:53:17 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 代码内容 (controller_method):

package com.yljr.user.basicgeneral.interfaces;

import com.yljr.user.basicgeneral.interfaces.dto.CompanyUnitListReq;
import com.yljr.user.basicgeneral.interfaces.dto.CompanyUnitListResp;
import com.yljr.common.dto.Response;
import org.springframework.web.bind.annotation.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.validation.annotation.Validated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import io.swagger.annotations.ApiOperation;

import javax.validation.Valid;

/**
 * CompanyUnitList Controller
 * 根据查询条件查询组织单元信息，支持按编码、状态等条件筛选
 */
@Validated
@RestController
@RequestMapping("/api/companyUnitList")
public class CompanyUnitListController {

    private final Logger logger = LoggerFactory.getLogger(this.getClass());
    
    @Autowired
    private CompanyUnitListService companyunitlistService;

    /**
     * 根据查询条件查询组织单元信息，支持按编码、状态等条件筛选
     */
    @PostMapping("/companyUnitList")
    @ApiOperation(value = "根据查询条件查询组织单元信息，支持按编码、状态等条件筛选")
    public Response<CompanyUnitListResp> companyUnitList(@RequestBody @Valid CompanyUnitListReq request) {
        try {
            logger.info("开始执行companyUnitList，请求参数: {}", request);
            
            return companyUnitListService.companyUnitList(request);
            
        } catch (Exception e) {
            logger.error("执行companyUnitList失败", e);
            return Response.error("执行失败: " + e.getMessage());
        }
    }
}
2025-07-22 16:53:17 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: /Users/renyu/Documents/create_project/链数中建一局_1753174204/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general/src/main/java/com/yljr/user/basicgeneral/interfaces/CompanyUnitListController.java
2025-07-22 16:53:17 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: /Users/renyu/Documents/create_project/链数中建一局_1753174204/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general/src/main/java/com/yljr/user/basicgeneral/interfaces/CompanyUnitListController.java
2025-07-22 16:53:17 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 代码内容 (domain_service):
package com.yljr.user.basicgeneral.domain.service;

import com.yljr.user.basicgeneral.interfaces.dto.CompanyUnitListReq;
import com.yljr.user.basicgeneral.interfaces.dto.CompanyUnitListResp;

/**
 * CompanyUnitList Domain Service Interface
 * 根据查询条件查询组织单元信息，支持按编码、状态等条件筛选
 */
public interface CompanyUnitListService {

    /**
     * 根据查询条件查询组织单元信息，支持按编码、状态等条件筛选
     */
    CompanyUnitListResp companyUnitList(CompanyUnitListReq request);
}
2025-07-22 16:53:17 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: /Users/renyu/Documents/create_project/链数中建一局_1753174204/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general/src/main/java/com/yljr/user/basicgeneral/domain/service/CompanyUnitListService.java
2025-07-22 16:53:17 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: /Users/renyu/Documents/create_project/链数中建一局_1753174204/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general/src/main/java/com/yljr/user/basicgeneral/domain/service/CompanyUnitListService.java
2025-07-22 16:53:17 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 代码内容 (domain_service_impl):
package com.yljr.user.basicgeneral.domain.service.impl;

import com.yljr.user.basicgeneral.domain.service.CompanyUnitListService;
import com.yljr.user.basicgeneral.interfaces.dto.CompanyUnitListReq;
import com.yljr.user.basicgeneral.interfaces.dto.CompanyUnitListResp;
import com.yljr.user.basicgeneral.domain.entity.CompanyUnitList;
import com.yljr.user.basicgeneral.domain.mapper.CompanyUnitListMapper;
import org.springframework.stereotype.Service;
import org.springframework.beans.factory.annotation.Autowired;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import java.util.List;

/**
 * CompanyUnitList Domain Service Implementation
 * 根据查询条件查询组织单元信息，支持按编码、状态等条件筛选
 */
@Service
public class CompanyUnitListServiceImpl implements CompanyUnitListService {

    private static final Logger logger = LoggerFactory.getLogger(CompanyUnitListServiceImpl.class);
    
    @Autowired
    private CompanyUnitListMapper companyunitlistMapper;

    /**
     * 根据查询条件查询组织单元信息，支持按编码、状态等条件筛选
     */
    @Override
    public CompanyUnitListResp companyUnitList(CompanyUnitListReq request) {
        logger.info("Domain Service执行CompanyUnitList，参数: {}", request);
        
        try {
        // 调用Mapper查询数据
        List<CompanyUnitList> dataList = companyunitlistMapper.selectCompanyUnitListList(request);
        
        // 构建响应
        CompanyUnitListResp response = new CompanyUnitListResp();
        response.setDataList(dataList);
        response.setTotalCount(dataList.size());
        
        return response;
        } catch (Exception e) {
            logger.error("Domain Service执行CompanyUnitList失败", e);
            throw new RuntimeException("执行失败: " + e.getMessage(), e);
        }
    }
}
2025-07-22 16:53:17 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: /Users/renyu/Documents/create_project/链数中建一局_1753174204/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general/src/main/java/com/yljr/user/basicgeneral/domain/service/impl/CompanyUnitListServiceImpl.java
2025-07-22 16:53:17 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: /Users/renyu/Documents/create_project/链数中建一局_1753174204/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general/src/main/java/com/yljr/user/basicgeneral/domain/service/impl/CompanyUnitListServiceImpl.java
2025-07-22 16:53:17 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 代码内容 (request_dto):

package com.yljr.user.basicgeneral.interfaces.dto;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Date;
import java.math.BigDecimal;

/**
 * CompanyUnitList 请求DTO
 * 根据查询条件查询组织单元信息，支持按编码、状态等条件筛选
 */
@ApiModel(value = "CompanyUnitListReq", description = "根据查询条件查询组织单元信息，支持按编码、状态等条件筛选")
public class CompanyUnitListReq {

    /**
     * 组织单元编码(可选)
     */
    @ApiModelProperty(value = "组织单元编码(可选)")
    private String unitCode;
    /**
     * 开通状态(可选)
     */
    @ApiModelProperty(value = "开通状态(可选)")
    private String openStatus;
    /**
     * 组织单元列表(可选)
     */
    @ApiModelProperty(value = "组织单元列表(可选)")
    private String unitList;

    public String getUnitCode() {
        return unitCode;
    }

    public void setUnitCode(String unitCode) {
        this.unitCode = unitCode;
    }
    public String getOpenStatus() {
        return openStatus;
    }

    public void setOpenStatus(String openStatus) {
        this.openStatus = openStatus;
    }
    public String getUnitList() {
        return unitList;
    }

    public void setUnitList(String unitList) {
        this.unitList = unitList;
    }

    @Override
    public String toString() {
        return "CompanyUnitListReq{" +
                "unitCode=" + unitCode + ", " +
                "openStatus=" + openStatus + ", " +
                "unitList=" + unitList +
                "};";
    }
}
2025-07-22 16:53:17 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: /Users/renyu/Documents/create_project/链数中建一局_1753174204/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general/src/main/java/com/yljr/user/basicgeneral/interfaces/dto/CompanyUnitListReq.java
2025-07-22 16:53:17 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: /Users/renyu/Documents/create_project/链数中建一局_1753174204/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general/src/main/java/com/yljr/user/basicgeneral/interfaces/dto/CompanyUnitListReq.java
2025-07-22 16:53:17 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 代码内容 (response_dto):

package com.yljr.user.basicgeneral.interfaces.dto;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.List;
import java.util.Date;
import java.math.BigDecimal;

/**
 * CompanyUnitList 响应DTO
 * 根据查询条件查询组织单元信息，支持按编码、状态等条件筛选
 */
@ApiModel(value = "CompanyUnitListResp", description = "根据查询条件查询组织单元信息，支持按编码、状态等条件筛选")
public class CompanyUnitListResp {

    /**
     * 组织单元ID
     */
    @ApiModelProperty(value = "组织单元ID")
    private String unitId;
    /**
     * 组织单元类型字典类型
     */
    @ApiModelProperty(value = "组织单元类型字典类型")
    private String unitTypeDicType;
    /**
     * 组织单元类型ID
     */
    @ApiModelProperty(value = "组织单元类型ID")
    private String unitTypeId;
    /**
     * 开通状态
     */
    @ApiModelProperty(value = "开通状态")
    private String openStatus;
    /**
     * 组织单元编码
     */
    @ApiModelProperty(value = "组织单元编码")
    private String unitCode;
    /**
     * 组织单元名称
     */
    @ApiModelProperty(value = "组织单元名称")
    private String unitName;

    public String getUnitId() {
        return unitId;
    }

    public void setUnitId(String unitId) {
        this.unitId = unitId;
    }
    public String getUnitTypeDicType() {
        return unitTypeDicType;
    }

    public void setUnitTypeDicType(String unitTypeDicType) {
        this.unitTypeDicType = unitTypeDicType;
    }
    public String getUnitTypeId() {
        return unitTypeId;
    }

    public void setUnitTypeId(String unitTypeId) {
        this.unitTypeId = unitTypeId;
    }
    public String getOpenStatus() {
        return openStatus;
    }

    public void setOpenStatus(String openStatus) {
        this.openStatus = openStatus;
    }
    public String getUnitCode() {
        return unitCode;
    }

    public void setUnitCode(String unitCode) {
        this.unitCode = unitCode;
    }
    public String getUnitName() {
        return unitName;
    }

    public void setUnitName(String unitName) {
        this.unitName = unitName;
    }

    @Override
    public String toString() {
        return "CompanyUnitListResp{" +
                "unitId=" + unitId + ", " +
                "unitTypeDicType=" + unitTypeDicType + ", " +
                "unitTypeId=" + unitTypeId + ", " +
                "openStatus=" + openStatus + ", " +
                "unitCode=" + unitCode + ", " +
                "unitName=" + unitName +
                "};";
    }
}
2025-07-22 16:53:17 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: /Users/renyu/Documents/create_project/链数中建一局_1753174204/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general/src/main/java/com/yljr/user/basicgeneral/interfaces/dto/CompanyUnitListResp.java
2025-07-22 16:53:17 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: /Users/renyu/Documents/create_project/链数中建一局_1753174204/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general/src/main/java/com/yljr/user/basicgeneral/interfaces/dto/CompanyUnitListResp.java
2025-07-22 16:53:17 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 代码内容 (mapper):

package com.yljr.user.basicgeneral.domain.mapper;

import com.yljr.user.basicgeneral.interfaces.dto.CompanyUnitListReq;
import com.yljr.user.basicgeneral.domain.entity.CompanyUnitList;
import org.apache.ibatis.annotations.Mapper;
import org.apache.ibatis.annotations.Param;
import java.util.List;

/**
 * CompanyUnitList Mapper接口
 * 根据查询条件查询组织单元信息，支持按编码、状态等条件筛选
 */
@Mapper
public interface CompanyUnitListMapper {

    /**
     * 根据条件查询CompanyUnitList列表
     */
    List<CompanyUnitList> selectCompanyUnitListList(@Param("condition") CompanyUnitListReq condition);

    /**
     * 根据主键查询CompanyUnitList
     */
    CompanyUnitList selectByPrimaryKey(@Param("id") Long id);

    /**
     * 新增CompanyUnitList记录
     */
    int insert(CompanyUnitList record);

    /**
     * 更新CompanyUnitList记录
     */
    int updateByPrimaryKey(CompanyUnitList record);

    /**
     * 删除CompanyUnitList记录
     */
    int deleteByPrimaryKey(@Param("id") Long id);
}
2025-07-22 16:53:17 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: /Users/renyu/Documents/create_project/链数中建一局_1753174204/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general/src/main/java/com/yljr/user/basicgeneral/domain/mapper/CompanyUnitListMapper.java
2025-07-22 16:53:17 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: /Users/renyu/Documents/create_project/链数中建一局_1753174204/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general/src/main/java/com/yljr/user/basicgeneral/domain/mapper/CompanyUnitListMapper.java
2025-07-22 16:53:17 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 代码内容 (xml_mapping):
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yljr.user.basicgeneral.domain.mapper.CompanyUnitListMapper">

    <resultMap id="BaseResultMap" type="com.yljr.user.basicgeneral.domain.entity.CompanyUnitList">
        <id column="id" jdbcType="BIGINT" property="id" />
        <result column="company_id" jdbcType="BIGINT" property="companyId" />
        <result column="mutilorg_id" jdbcType="BIGINT" property="mutilorgId" />
        <result column="unit_code" jdbcType="VARCHAR" property="unitCode" />
        <result column="unit_name" jdbcType="VARCHAR" property="unitName" />
        <result column="remark" jdbcType="VARCHAR" property="remark" />
        <result column="platform_type" jdbcType="INTEGER" property="platformType" />
        <result column="status" jdbcType="INTEGER" property="status" />
        <result column="create_id" jdbcType="BIGINT" property="createId" />
        <result column="oper_user_name" jdbcType="VARCHAR" property="operUserName" />
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
        <result column="modify_id" jdbcType="BIGINT" property="modifyId" />
        <result column="modify_user_name" jdbcType="VARCHAR" property="modifyUserName" />
        <result column="modify_time" jdbcType="TIMESTAMP" property="modifyTime" />
    </resultMap>

    <sql id="Base_Column_List">
        id, company_id, mutilorg_id, unit_code, unit_name, remark, platform_type, status, create_id, oper_user_name,
        create_time, modify_id, modify_user_name, modify_time
    </sql>

    <select id="selectCompanyUnitListList" parameterType="com.yljr.user.basicgeneral.interfaces.dto.CompanyUnitListReq" 
            resultMap="BaseResultMap">
        SELECT 
        <include refid="Base_Column_List" />
        FROM T_CUST_MULTIORG_UNIT
        WHERE 1=1
        <if test="condition.unitCode != null and condition.unitCode != ''">
            AND unit_code = #{condition.unitCode}
        </if>
        <if test="condition.status != null">
            AND status = #{condition.status}
        </if>
        ORDER BY CREATE_TIME DESC
    </select>

    <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
        SELECT 
        <include refid="Base_Column_List" />
        FROM T_CUST_MULTIORG_UNIT
        WHERE ID = #{id,jdbcType=BIGINT}
    </select>

    <insert id="insert" parameterType="com.yljr.user.basicgeneral.domain.entity.CompanyUnitList">
        INSERT INTO T_CUST_MULTIORG_UNIT (company_id, mutilorg_id, unit_code, unit_name, remark, platform_type, status, create_id, oper_user_name, create_time, modify_id, modify_user_name, modify_time)
        VALUES (#{companyId}, #{mutilorgId}, #{unitCode}, #{unitName}, #{remark}, #{platformType}, #{status}, #{createId}, #{operUserName}, #{createTime}, #{modifyId}, #{modifyUserName}, #{modifyTime})
    </insert>

    <update id="updateByPrimaryKey" parameterType="com.yljr.user.basicgeneral.domain.entity.CompanyUnitList">
        UPDATE T_CUST_MULTIORG_UNIT
        SET company_id = #{companyId},
            mutilorg_id = #{mutilorgId},
            unit_code = #{unitCode},
            unit_name = #{unitName},
            remark = #{remark},
            platform_type = #{platformType},
            status = #{status},
            create_id = #{createId},
            oper_user_name = #{operUserName},
            modify_id = #{modifyId},
            modify_user_name = #{modifyUserName},
            modify_time = #{modifyTime}
        WHERE ID = #{id}
    </update>

    <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
        DELETE FROM T_CUST_MULTIORG_UNIT
        WHERE ID = #{id,jdbcType=BIGINT}
    </delete>

</mapper>
2025-07-22 16:53:17 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: /Users/renyu/Documents/create_project/链数中建一局_1753174204/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general/src/main/resources/mapper/CompanyUnitListMapper.xml
2025-07-22 16:53:17 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: /Users/renyu/Documents/create_project/链数中建一局_1753174204/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general/src/main/resources/mapper/CompanyUnitListMapper.xml
2025-07-22 16:53:17 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📊 代码生成完成，共写入 7 个文件到项目中
2025-07-22 16:53:17 - src.corder_integration.utils.backup_cleaner - INFO - 🧹 开始清理项目备份: /Users/renyu/Documents/create_project/链数中建一局_1753174204/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general
2025-07-22 16:53:17 - src.corder_integration.utils.backup_cleaner - INFO - 🎉 备份清理完成: 删除 0 目录, 0 文件
2025-07-22 16:53:17 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🗑️ 已清理项目分析缓存，确保下次分析获取最新状态
2025-07-22 16:53:17 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_008 状态更新为 completed
2025-07-22 16:53:17 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 任务 task_008 执行成功
2025-07-22 16:53:17 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 第4轮执行完成，处理了 1 个任务
2025-07-22 16:53:17 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第5轮任务检查...
2025-07-22 16:53:17 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 第5轮找到 1 个可执行任务
2025-07-22 16:53:17 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 开始执行任务: task_009 (api)
2025-07-22 16:53:17 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_009 已被 intelligent_coding_node 领取
2025-07-22 16:53:17 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🌐 执行API接口生成任务: task_009
2025-07-22 16:53:17 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 解析的接口信息:
2025-07-22 16:53:17 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 接口名称: UnitLimitByCompanyId
2025-07-22 16:53:17 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - API路径: /crcl-open-api/lsLimit/listUnitLimitByCompanyId
2025-07-22 16:53:17 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - HTTP方法: GET
2025-07-22 16:53:17 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 输入参数: 6个
2025-07-22 16:53:17 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 输出参数: 4个
2025-07-22 16:53:17 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 业务描述: 根据公司ID和筛选条件查询组织单元额度信息，调用用户服务获取组织单元基础信息
2025-07-22 16:53:17 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 在 /Users/renyu/Documents/create_project/链数中建一局_1753174204/crcl-open 中查找最佳Java项目路径...
2025-07-22 16:53:17 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 目标服务名: 确权开立服务
2025-07-22 16:53:20 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-22 16:53:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 发现Java项目: crcl-open
2025-07-22 16:53:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       🎯 相对路径: crcl-open
2025-07-22 16:53:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       📊 Java文件: 2251个
2025-07-22 16:53:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       📐 目录深度: 1
2025-07-22 16:53:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       🏆 优先级分数: 650
2025-07-22 16:53:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 排序后的候选路径（前3个）:
2025-07-22 16:53:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    1. crcl-open (优先级: 650)
2025-07-22 16:53:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 选择最佳Java项目路径:
2025-07-22 16:53:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 完整路径: /Users/renyu/Documents/create_project/链数中建一局_1753174204/crcl-open/crcl-open
2025-07-22 16:53:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📋 相对路径: crcl-open
2025-07-22 16:53:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    🏆 最终优先级: 650
2025-07-22 16:53:20 - src.corder_integration.config.domain_mapping_config - INFO - 🔍 映射API关键字到业务领域: lsLimit
2025-07-22 16:53:20 - src.corder_integration.config.domain_mapping_config - INFO - ✅ 精确匹配: lsLimit -> lsLimit
2025-07-22 16:53:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 API关键字映射: lsLimit -> lsLimit (API路径: /crcl-open-api/lsLimit/listUnitLimitByCompanyId)
2025-07-22 16:53:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 在项目中搜索关键字相关路径: lsLimit
2025-07-22 16:53:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 找到匹配目录: limit (得分: 25)
2025-07-22 16:53:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 找到匹配目录: ls (得分: 25)
2025-07-22 16:53:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 找到匹配目录: ls (得分: 25)
2025-07-22 16:53:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 找到匹配目录: ls (得分: 25)
2025-07-22 16:53:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    ✅ 选择最佳匹配目录: limit (路径: src/main/java/com/yljr/crcl/limit)
2025-07-22 16:53:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 基于API关键字 'lsLimit' 找到现有路径: /Users/renyu/Documents/create_project/链数中建一局_1753174204/crcl-open/crcl-open/src/main/java/com/yljr/crcl/limit
2025-07-22 16:53:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -  分析目标项目: /Users/renyu/Documents/create_project/链数中建一局_1753174204/crcl-open/crcl-open/src/main/java/com/yljr/crcl/limit
2025-07-22 16:53:20 - src.apis.project_analysis_api - INFO - 🔍 开始分析项目用于代码生成: /Users/renyu/Documents/create_project/链数中建一局_1753174204/crcl-open/crcl-open/src/main/java/com/yljr/crcl/limit
2025-07-22 16:53:20 - src.apis.project_analysis_api - INFO - 🔍 在 /Users/renyu/Documents/create_project/链数中建一局_1753174204/crcl-open/crcl-open/src/main/java/com/yljr/crcl/limit 中查找最佳Java项目路径...
2025-07-22 16:53:20 - src.apis.project_analysis_api - INFO - 🎯 目标服务名: 确权开立服务
2025-07-22 16:53:20 - src.apis.project_analysis_api - WARNING - ⚠️ 在 /Users/renyu/Documents/create_project/链数中建一局_1753174204/crcl-open/crcl-open/src/main/java/com/yljr/crcl/limit 中未找到包含Java文件的src/main/java结构
2025-07-22 16:53:20 - src.apis.project_analysis_api - INFO - 📂 实际分析路径: /Users/renyu/Documents/create_project/链数中建一局_1753174204/crcl-open/crcl-open/src/main/java/com/yljr/crcl/limit
2025-07-22 16:53:20 - src.utils.java_code_analyzer - INFO - 🔍 开始分析企业级Java项目: /Users/renyu/Documents/create_project/链数中建一局_1753174204/crcl-open/crcl-open/src/main/java/com/yljr/crcl/limit
2025-07-22 16:53:21 - src.utils.java_code_analyzer - INFO - ✅ 企业级项目分析完成，共分析 533 个Java文件
2025-07-22 16:53:21 - src.apis.project_analysis_api - INFO - 📦 动态检测到基础包: com.yljr.crcl.limit (出现533次)
2025-07-22 16:53:21 - src.apis.project_analysis_api - INFO - 📦 动态检测到基础包: com.yljr.crcl.limit (出现533次)
2025-07-22 16:53:21 - src.apis.project_analysis_api - INFO - 📋 提取到19个Controller的详细信息
2025-07-22 16:53:21 - src.apis.project_analysis_api - INFO - 📦 动态检测到基础包: com.yljr.crcl.limit (出现533次)
2025-07-22 16:53:21 - src.apis.project_analysis_api - INFO - ✅ 项目分析完成，已提取代码生成上下文
2025-07-22 16:53:21 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 从编码代理获取设计文档内容 (7324 字符)
2025-07-22 16:53:21 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 设计文档内容已添加到项目上下文 (7324 字符)
2025-07-22 16:53:21 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 使用详细Controller信息，共19个Controller
2025-07-22 16:53:21 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 Controller关联性分析完成:
2025-07-22 16:53:21 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 总Controller数: 19
2025-07-22 16:53:21 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 相关Controller数: 1
2025-07-22 16:53:21 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 最高关联度: 0.45
2025-07-22 16:53:21 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 Controller关联性分析:
2025-07-22 16:53:21 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 总Controller数: 19
2025-07-22 16:53:21 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 相关Controller数: 1
2025-07-22 16:53:21 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 关联度得分: 0.45
2025-07-22 16:53:21 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 相关Controllers: ['LsLimitController']
2025-07-22 16:53:21 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🤖 调用volcengine分析项目策略...发送的prompt信息: Java文件数=533, Controller数=19
2025-07-22 16:53:26 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-22 16:53:26 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 项目策略判断: enhance_existing - 虽然业务关联度为0.45略低于0.6的标准，但存在名称包含API关键字'lsLimit'和业务关键词'limit'的相关Controller(LsLimitController)，且该Controller与API的业务领域明显相关。考虑到'业务关联性 > 简单数量统计'的原则，建议复用现有Controller。
2025-07-22 16:53:26 - src.corder_integration.langgraph.nodes.intelligent_coding_node - WARNING - ⚠️ 策略1异常: f-string: single '}' is not allowed (function_calling_code_generator.py, line 272), 将使用策略2
2025-07-22 16:53:26 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -  调用volcengine大模型生成代码...
2025-07-22 16:53:26 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 开始代码生成...
2025-07-22 16:53:26 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎨 使用模板+AI混合模式生成代码
2025-07-22 16:53:26 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - 🎨 开始增强版代码生成: UnitLimitByCompanyId
2025-07-22 16:53:26 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - 🔍 解析到表结构: t_cust_multiorg_unit (14列)
2025-07-22 16:53:26 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - 🤖 使用智能文件复用和专门化提示词模板增强代码...
2025-07-22 16:53:26 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 设置设计文档内容，长度: 7324
2025-07-22 16:53:26 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO - 🔍 分析项目结构: /Users/renyu/Documents/create_project/链数中建一局_1753174204/crcl-open/crcl-open/src/main/java/com/yljr/crcl/limit
2025-07-22 16:53:26 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO - 🔍 从文件 CreditRecordDto.java 推断基础包名: com.yljr.crcl.limit
2025-07-22 16:53:26 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO - ✅ 项目结构分析完成
2025-07-22 16:53:26 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO -    Controllers: 19
2025-07-22 16:53:26 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO -    Application Services: 31
2025-07-22 16:53:26 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO -    Domain Services: 33
2025-07-22 16:53:26 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO -    Mappers: 36
2025-07-22 16:53:26 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO -    Feign Clients: 0
2025-07-22 16:53:26 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO -    XML Files: 0
2025-07-22 16:53:26 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO - 🤔 决策文件复用策略: UnitLimitByCompanyId
2025-07-22 16:53:26 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO - 📋 文件复用策略决策完成:
2025-07-22 16:53:26 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO -    controller: create_new - 未找到合适的Controller (最高分数: 0)
2025-07-22 16:53:26 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO -    application_service: create_new - 需要Feign调用，创建新的Application Service
2025-07-22 16:53:26 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO -    domain_service: create_new - 未找到合适的Domain Service，需要创建
2025-07-22 16:53:26 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO -    mapper: create_new - 未找到合适的Mapper，需要创建
2025-07-22 16:53:26 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO -    feign_client: create_new - 未找到合适的Feign Client，需要创建
2025-07-22 16:53:26 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO -    xml_file: create_new - 需要创建新的XML文件
2025-07-22 16:53:26 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - 📋 智能文件复用策略:
2025-07-22 16:53:26 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO -    controller: create_new - 未找到合适的Controller (最高分数: 0)
2025-07-22 16:53:26 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO -    application_service: create_new - 需要Feign调用，创建新的Application Service
2025-07-22 16:53:26 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO -    domain_service: create_new - 未找到合适的Domain Service，需要创建
2025-07-22 16:53:26 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO -    mapper: create_new - 未找到合适的Mapper，需要创建
2025-07-22 16:53:26 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO -    feign_client: create_new - 未找到合适的Feign Client，需要创建
2025-07-22 16:53:26 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO -    xml_file: create_new - 需要创建新的XML文件
2025-07-22 16:53:26 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO - 🔗 生成完整调用链: UnitLimitByCompanyId
2025-07-22 16:53:26 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO - 🔍 找到表结构: T_CUST_MULTIORG_UNIT
2025-07-22 16:53:26 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO - ✅ 解析到 14 个字段
2025-07-22 16:53:26 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO - ✅ 调用链代码生成完成，包含 9 个组件
2025-07-22 16:53:26 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 智能文件复用生成了 9 个组件
2025-07-22 16:53:26 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - 📝 需要创建 9 个新文件
2025-07-22 16:53:26 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI生成成功，生成代码类型: ['controller_method', 'application_service', 'domain_service', 'domain_service_impl', 'request_dto', 'response_dto', 'mapper', 'feign_client', 'xml_mapping']
2025-07-22 16:53:26 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 开始写入生成的代码文件...
2025-07-22 16:53:26 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔧 统一类名基础: UnitLimitByCompanyId
2025-07-22 16:53:26 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ controller_method 类名: UnitLimitByCompanyIdController
2025-07-22 16:53:26 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ application_service 类名: UnitLimitByCompanyIdApplication
2025-07-22 16:53:26 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ domain_service_impl 类名: UnitLimitByCompanyIdServiceImpl
2025-07-22 16:53:26 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ request_dto 类名: UnitLimitByCompanyIdReq
2025-07-22 16:53:26 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ response_dto 类名: UnitLimitByCompanyIdResp
2025-07-22 16:53:26 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 标准化后的代码类型: ['controller_method', 'application_service', 'domain_service', 'domain_service_impl', 'request_dto', 'response_dto', 'mapper', 'feign_client', 'xml_mapping']
2025-07-22 16:53:26 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🤖 调用volcengine判断Java文件输出路径...
2025-07-22 16:53:52 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-22 16:53:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM路径判断成功，配置了 9 个Java文件路径
2025-07-22 16:53:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 controller_method: UnitLimitByCompanyIdController.java
2025-07-22 16:53:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 application_service: UnitLimitByCompanyIdApplication.java
2025-07-22 16:53:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 domain_service: UnitLimitByCompanyIdService.java
2025-07-22 16:53:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 domain_service_impl: UnitLimitByCompanyIdServiceImpl.java
2025-07-22 16:53:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 request_dto: UnitLimitByCompanyIdReq.java
2025-07-22 16:53:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 response_dto: UnitLimitByCompanyIdResp.java
2025-07-22 16:53:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 mapper: UnitLimitByCompanyIdMapper.java
2025-07-22 16:53:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 feign_client: UnitLimitByCompanyIdFeignClient.java
2025-07-22 16:53:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 xml_mapping: UnitLimitByCompanyIdMapper.xml
2025-07-22 16:53:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 代码内容 (controller_method):

package com.yljr.crcl.limit.interfaces;

import com.yljr.crcl.limit.interfaces.dto.UnitLimitByCompanyIdReq;
import com.yljr.crcl.limit.interfaces.dto.UnitLimitByCompanyIdResp;
import com.yljr.common.dto.Response;
import org.springframework.web.bind.annotation.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.validation.annotation.Validated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import io.swagger.annotations.ApiOperation;

import javax.validation.Valid;

/**
 * UnitLimitByCompanyId Controller
 * 根据公司ID和筛选条件查询组织单元额度信息，调用用户服务获取组织单元基础信息
 */
@Validated
@RestController
@RequestMapping("/api/unitLimitByCompanyId")
public class UnitLimitByCompanyIdController {

    private final Logger logger = LoggerFactory.getLogger(this.getClass());
    
    @Autowired
    private UnitLimitByCompanyIdApplication unitLimitByCompanyIdApplication;

    /**
     * 根据公司ID和筛选条件查询组织单元额度信息，调用用户服务获取组织单元基础信息
     */
    @PostMapping("/unitLimitByCompanyId")
    @ApiOperation(value = "根据公司ID和筛选条件查询组织单元额度信息，调用用户服务获取组织单元基础信息")
    public Response<UnitLimitByCompanyIdResp> unitLimitByCompanyId(@RequestBody @Valid UnitLimitByCompanyIdReq request) {
        try {
            logger.info("开始执行unitLimitByCompanyId，请求参数: {}", request);
            
            return unitLimitByCompanyIdApplication.unitLimitByCompanyId(request);
            
        } catch (Exception e) {
            logger.error("执行unitLimitByCompanyId失败", e);
            return Response.error("执行失败: " + e.getMessage());
        }
    }
}
2025-07-22 16:53:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: /Users/renyu/Documents/create_project/链数中建一局_1753174204/crcl-open/crcl-open/src/main/java/com/yljr/crcl/limit/src/main/java/com/yljr/crcl/limit/interfaces/UnitLimitByCompanyIdController.java
2025-07-22 16:53:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: /Users/renyu/Documents/create_project/链数中建一局_1753174204/crcl-open/crcl-open/src/main/java/com/yljr/crcl/limit/src/main/java/com/yljr/crcl/limit/interfaces/UnitLimitByCompanyIdController.java
2025-07-22 16:53:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 代码内容 (application_service):

package com.yljr.crcl.limit.application.service;

import com.yljr.crcl.limit.interfaces.dto.UnitLimitByCompanyIdReq;
import com.yljr.crcl.limit.interfaces.dto.UnitLimitByCompanyIdResp;
import org.springframework.stereotype.Service;
import org.springframework.beans.factory.annotation.Autowired;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * UnitLimitByCompanyId Application Service
 * 根据公司ID和筛选条件查询组织单元额度信息，调用用户服务获取组织单元基础信息
 */
@Service
public class UnitLimitByCompanyIdApplication {

    private static final Logger logger = LoggerFactory.getLogger(UnitLimitByCompanyIdApplication.class);
    
    @Autowired
    private UnitLimitByCompanyIdFeignClient unitlimitbycompanyidFeignClient;

    /**
     * 根据公司ID和筛选条件查询组织单元额度信息，调用用户服务获取组织单元基础信息
     */
    public UnitLimitByCompanyIdResp UnitLimitByCompanyId(UnitLimitByCompanyIdReq request) {
        logger.info("Application Service执行UnitLimitByCompanyId，参数: {}", request);
        
        try {
            return unitlimitbycompanyidFeignClient.UnitLimitByCompanyId(request);
        } catch (Exception e) {
            logger.error("Application Service执行UnitLimitByCompanyId失败", e);
            throw new RuntimeException("执行失败: " + e.getMessage(), e);
        }
    }
}
2025-07-22 16:53:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: /Users/renyu/Documents/create_project/链数中建一局_1753174204/crcl-open/crcl-open/src/main/java/com/yljr/crcl/limit/src/main/java/com/yljr/crcl/limit/application/service/UnitLimitByCompanyIdApplication.java
2025-07-22 16:53:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: /Users/renyu/Documents/create_project/链数中建一局_1753174204/crcl-open/crcl-open/src/main/java/com/yljr/crcl/limit/src/main/java/com/yljr/crcl/limit/application/service/UnitLimitByCompanyIdApplication.java
2025-07-22 16:53:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 代码内容 (domain_service):
package com.yljr.crcl.limit.domain.service;

import com.yljr.crcl.limit.interfaces.dto.UnitLimitByCompanyIdReq;
import com.yljr.crcl.limit.interfaces.dto.UnitLimitByCompanyIdResp;

/**
 * UnitLimitByCompanyId Domain Service Interface
 * 根据公司ID和筛选条件查询组织单元额度信息，调用用户服务获取组织单元基础信息
 */
public interface UnitLimitByCompanyIdService {

    /**
     * 根据公司ID和筛选条件查询组织单元额度信息，调用用户服务获取组织单元基础信息
     */
    UnitLimitByCompanyIdResp unitLimitByCompanyId(UnitLimitByCompanyIdReq request);
}
2025-07-22 16:53:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: /Users/renyu/Documents/create_project/链数中建一局_1753174204/crcl-open/crcl-open/src/main/java/com/yljr/crcl/limit/src/main/java/com/yljr/crcl/limit/domain/service/UnitLimitByCompanyIdService.java
2025-07-22 16:53:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: /Users/renyu/Documents/create_project/链数中建一局_1753174204/crcl-open/crcl-open/src/main/java/com/yljr/crcl/limit/src/main/java/com/yljr/crcl/limit/domain/service/UnitLimitByCompanyIdService.java
2025-07-22 16:53:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 代码内容 (domain_service_impl):
package com.yljr.crcl.limit.domain.service.impl;

import com.yljr.crcl.limit.domain.service.UnitLimitByCompanyIdService;
import com.yljr.crcl.limit.interfaces.dto.UnitLimitByCompanyIdReq;
import com.yljr.crcl.limit.interfaces.dto.UnitLimitByCompanyIdResp;
import com.yljr.crcl.limit.domain.entity.UnitLimitByCompanyId;
import com.yljr.crcl.limit.domain.mapper.UnitLimitByCompanyIdMapper;
import org.springframework.stereotype.Service;
import org.springframework.beans.factory.annotation.Autowired;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import java.util.List;

/**
 * UnitLimitByCompanyId Domain Service Implementation
 * 根据公司ID和筛选条件查询组织单元额度信息，调用用户服务获取组织单元基础信息
 */
@Service
public class UnitLimitByCompanyIdServiceImpl implements UnitLimitByCompanyIdService {

    private static final Logger logger = LoggerFactory.getLogger(UnitLimitByCompanyIdServiceImpl.class);
    
    @Autowired
    private UnitLimitByCompanyIdMapper unitlimitbycompanyidMapper;

    /**
     * 根据公司ID和筛选条件查询组织单元额度信息，调用用户服务获取组织单元基础信息
     */
    @Override
    public UnitLimitByCompanyIdResp unitLimitByCompanyId(UnitLimitByCompanyIdReq request) {
        logger.info("Domain Service执行UnitLimitByCompanyId，参数: {}", request);
        
        try {
        // 调用Mapper查询数据
        List<UnitLimitByCompanyId> dataList = unitlimitbycompanyidMapper.selectUnitLimitByCompanyIdList(request);
        
        // 构建响应
        UnitLimitByCompanyIdResp response = new UnitLimitByCompanyIdResp();
        response.setDataList(dataList);
        response.setTotalCount(dataList.size());
        
        return response;
        } catch (Exception e) {
            logger.error("Domain Service执行UnitLimitByCompanyId失败", e);
            throw new RuntimeException("执行失败: " + e.getMessage(), e);
        }
    }
}
2025-07-22 16:53:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: /Users/renyu/Documents/create_project/链数中建一局_1753174204/crcl-open/crcl-open/src/main/java/com/yljr/crcl/limit/src/main/java/com/yljr/crcl/limit/domain/service/impl/UnitLimitByCompanyIdServiceImpl.java
2025-07-22 16:53:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: /Users/renyu/Documents/create_project/链数中建一局_1753174204/crcl-open/crcl-open/src/main/java/com/yljr/crcl/limit/src/main/java/com/yljr/crcl/limit/domain/service/impl/UnitLimitByCompanyIdServiceImpl.java
2025-07-22 16:53:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 代码内容 (request_dto):

package com.yljr.crcl.limit.interfaces.dto;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Date;
import java.math.BigDecimal;

/**
 * UnitLimitByCompanyId 请求DTO
 * 根据公司ID和筛选条件查询组织单元额度信息，调用用户服务获取组织单元基础信息
 */
@ApiModel(value = "UnitLimitByCompanyIdReq", description = "根据公司ID和筛选条件查询组织单元额度信息，调用用户服务获取组织单元基础信息")
public class UnitLimitByCompanyIdReq {

    /**
     * 公司ID(必填)
     */
    @ApiModelProperty(value = "公司ID(必填)")
    private String gwCompanyId;
    /**
     * 组织单元名称(可选)
     */
    @ApiModelProperty(value = "组织单元名称(可选)")
    private String unitName;
    /**
     * 额度来源(可选)
     */
    @ApiModelProperty(value = "额度来源(可选)")
    private String limitSource;
    /**
     * 业务类型(必填)
     */
    @ApiModelProperty(value = "业务类型(必填)")
    private String bizType;
    /**
     * 页码(可选,默认1)
     */
    @ApiModelProperty(value = "页码(可选,默认1)")
    private String page;
    /**
     * 每页行数(可选,默认10)
     */
    @ApiModelProperty(value = "每页行数(可选,默认10)")
    private String pageRow;

    public String getGwCompanyId() {
        return gwCompanyId;
    }

    public void setGwCompanyId(String gwCompanyId) {
        this.gwCompanyId = gwCompanyId;
    }
    public String getUnitName() {
        return unitName;
    }

    public void setUnitName(String unitName) {
        this.unitName = unitName;
    }
    public String getLimitSource() {
        return limitSource;
    }

    public void setLimitSource(String limitSource) {
        this.limitSource = limitSource;
    }
    public String getBizType() {
        return bizType;
    }

    public void setBizType(String bizType) {
        this.bizType = bizType;
    }
    public String getPage() {
        return page;
    }

    public void setPage(String page) {
        this.page = page;
    }
    public String getPageRow() {
        return pageRow;
    }

    public void setPageRow(String pageRow) {
        this.pageRow = pageRow;
    }

    @Override
    public String toString() {
        return "UnitLimitByCompanyIdReq{" +
                "gwCompanyId=" + gwCompanyId + ", " +
                "unitName=" + unitName + ", " +
                "limitSource=" + limitSource + ", " +
                "bizType=" + bizType + ", " +
                "page=" + page + ", " +
                "pageRow=" + pageRow +
                "};";
    }
}
2025-07-22 16:53:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: /Users/renyu/Documents/create_project/链数中建一局_1753174204/crcl-open/crcl-open/src/main/java/com/yljr/crcl/limit/src/main/java/com/yljr/crcl/limit/interfaces/dto/UnitLimitByCompanyIdReq.java
2025-07-22 16:53:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: /Users/renyu/Documents/create_project/链数中建一局_1753174204/crcl-open/crcl-open/src/main/java/com/yljr/crcl/limit/src/main/java/com/yljr/crcl/limit/interfaces/dto/UnitLimitByCompanyIdReq.java
2025-07-22 16:53:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 代码内容 (response_dto):

package com.yljr.crcl.limit.interfaces.dto;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.List;
import java.util.Date;
import java.math.BigDecimal;

/**
 * UnitLimitByCompanyId 响应DTO
 * 根据公司ID和筛选条件查询组织单元额度信息，调用用户服务获取组织单元基础信息
 */
@ApiModel(value = "UnitLimitByCompanyIdResp", description = "根据公司ID和筛选条件查询组织单元额度信息，调用用户服务获取组织单元基础信息")
public class UnitLimitByCompanyIdResp {

    /**
     * 总额度金额
     */
    @ApiModelProperty(value = "总额度金额")
    private String totalLimitAmt;
    /**
     * 已用额度金额
     */
    @ApiModelProperty(value = "已用额度金额")
    private String usedLimitAmt;
    /**
     * 可用额度金额
     */
    @ApiModelProperty(value = "可用额度金额")
    private String usableLimitAmt;
    /**
     * 单元额度详情列表
     */
    @ApiModelProperty(value = "单元额度详情列表")
    private String unitLimitListDetail;

    public String getTotalLimitAmt() {
        return totalLimitAmt;
    }

    public void setTotalLimitAmt(String totalLimitAmt) {
        this.totalLimitAmt = totalLimitAmt;
    }
    public String getUsedLimitAmt() {
        return usedLimitAmt;
    }

    public void setUsedLimitAmt(String usedLimitAmt) {
        this.usedLimitAmt = usedLimitAmt;
    }
    public String getUsableLimitAmt() {
        return usableLimitAmt;
    }

    public void setUsableLimitAmt(String usableLimitAmt) {
        this.usableLimitAmt = usableLimitAmt;
    }
    public String getUnitLimitListDetail() {
        return unitLimitListDetail;
    }

    public void setUnitLimitListDetail(String unitLimitListDetail) {
        this.unitLimitListDetail = unitLimitListDetail;
    }

    @Override
    public String toString() {
        return "UnitLimitByCompanyIdResp{" +
                "totalLimitAmt=" + totalLimitAmt + ", " +
                "usedLimitAmt=" + usedLimitAmt + ", " +
                "usableLimitAmt=" + usableLimitAmt + ", " +
                "unitLimitListDetail=" + unitLimitListDetail +
                "};";
    }
}
2025-07-22 16:53:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: /Users/renyu/Documents/create_project/链数中建一局_1753174204/crcl-open/crcl-open/src/main/java/com/yljr/crcl/limit/src/main/java/com/yljr/crcl/limit/interfaces/dto/UnitLimitByCompanyIdResp.java
2025-07-22 16:53:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: /Users/renyu/Documents/create_project/链数中建一局_1753174204/crcl-open/crcl-open/src/main/java/com/yljr/crcl/limit/src/main/java/com/yljr/crcl/limit/interfaces/dto/UnitLimitByCompanyIdResp.java
2025-07-22 16:53:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 代码内容 (mapper):

package com.yljr.crcl.limit.domain.mapper;

import com.yljr.crcl.limit.interfaces.dto.UnitLimitByCompanyIdReq;
import com.yljr.crcl.limit.domain.entity.UnitLimitByCompanyId;
import org.apache.ibatis.annotations.Mapper;
import org.apache.ibatis.annotations.Param;
import java.util.List;

/**
 * UnitLimitByCompanyId Mapper接口
 * 根据公司ID和筛选条件查询组织单元额度信息，调用用户服务获取组织单元基础信息
 */
@Mapper
public interface UnitLimitByCompanyIdMapper {

    /**
     * 根据条件查询UnitLimitByCompanyId列表
     */
    List<UnitLimitByCompanyId> selectUnitLimitByCompanyIdList(@Param("condition") UnitLimitByCompanyIdReq condition);

    /**
     * 根据主键查询UnitLimitByCompanyId
     */
    UnitLimitByCompanyId selectByPrimaryKey(@Param("id") Long id);

    /**
     * 新增UnitLimitByCompanyId记录
     */
    int insert(UnitLimitByCompanyId record);

    /**
     * 更新UnitLimitByCompanyId记录
     */
    int updateByPrimaryKey(UnitLimitByCompanyId record);

    /**
     * 删除UnitLimitByCompanyId记录
     */
    int deleteByPrimaryKey(@Param("id") Long id);
}
2025-07-22 16:53:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: /Users/renyu/Documents/create_project/链数中建一局_1753174204/crcl-open/crcl-open/src/main/java/com/yljr/crcl/limit/src/main/java/com/yljr/crcl/limit/domain/mapper/UnitLimitByCompanyIdMapper.java
2025-07-22 16:53:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: /Users/renyu/Documents/create_project/链数中建一局_1753174204/crcl-open/crcl-open/src/main/java/com/yljr/crcl/limit/src/main/java/com/yljr/crcl/limit/domain/mapper/UnitLimitByCompanyIdMapper.java
2025-07-22 16:53:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 代码内容 (feign_client):

package com.yljr.crcl.limit.application.feign;

import com.yljr.crcl.limit.interfaces.dto.UnitLimitByCompanyIdReq;
import com.yljr.crcl.limit.interfaces.dto.UnitLimitByCompanyIdResp;
import com.yljr.common.dto.ResponseInfo;
import org.springframework.cloud.openfeign.FeignClient;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.http.MediaType;

/**
 * UnitLimitByCompanyId Feign接口
 * 根据公司ID和筛选条件查询组织单元额度信息，调用用户服务获取组织单元基础信息
 */
@FeignClient(name = "zqyl-user-auth", path = "/userCenter/server")
public interface UnitLimitByCompanyIdFeignClient {

    /**
     * 根据公司ID和筛选条件查询组织单元额度信息，调用用户服务获取组织单元基础信息
     */
    @PostMapping(value = "/queryCompanyInfo", consumes = MediaType.APPLICATION_JSON_UTF8_VALUE)
    ResponseInfo<UnitLimitByCompanyIdResp> UnitLimitByCompanyId(@RequestBody UnitLimitByCompanyIdReq request);
}
2025-07-22 16:53:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: /Users/renyu/Documents/create_project/链数中建一局_1753174204/crcl-open/crcl-open/src/main/java/com/yljr/crcl/limit/src/main/java/com/yljr/crcl/limit/application/feign/UnitLimitByCompanyIdFeignClient.java
2025-07-22 16:53:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: /Users/renyu/Documents/create_project/链数中建一局_1753174204/crcl-open/crcl-open/src/main/java/com/yljr/crcl/limit/src/main/java/com/yljr/crcl/limit/application/feign/UnitLimitByCompanyIdFeignClient.java
2025-07-22 16:53:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 代码内容 (xml_mapping):
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yljr.crcl.limit.domain.mapper.UnitLimitByCompanyIdMapper">

    <resultMap id="BaseResultMap" type="com.yljr.crcl.limit.domain.entity.UnitLimitByCompanyId">
        <id column="id" jdbcType="BIGINT" property="id" />
        <result column="company_id" jdbcType="BIGINT" property="companyId" />
        <result column="mutilorg_id" jdbcType="BIGINT" property="mutilorgId" />
        <result column="unit_code" jdbcType="VARCHAR" property="unitCode" />
        <result column="unit_name" jdbcType="VARCHAR" property="unitName" />
        <result column="remark" jdbcType="VARCHAR" property="remark" />
        <result column="platform_type" jdbcType="INTEGER" property="platformType" />
        <result column="status" jdbcType="INTEGER" property="status" />
        <result column="create_id" jdbcType="BIGINT" property="createId" />
        <result column="oper_user_name" jdbcType="VARCHAR" property="operUserName" />
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
        <result column="modify_id" jdbcType="BIGINT" property="modifyId" />
        <result column="modify_user_name" jdbcType="VARCHAR" property="modifyUserName" />
        <result column="modify_time" jdbcType="TIMESTAMP" property="modifyTime" />
    </resultMap>

    <sql id="Base_Column_List">
        id, company_id, mutilorg_id, unit_code, unit_name, remark, platform_type, status, create_id, oper_user_name,
        create_time, modify_id, modify_user_name, modify_time
    </sql>

    <select id="selectUnitLimitByCompanyIdList" parameterType="com.yljr.crcl.limit.interfaces.dto.UnitLimitByCompanyIdReq" 
            resultMap="BaseResultMap">
        SELECT 
        <include refid="Base_Column_List" />
        FROM T_CUST_MULTIORG_UNIT
        WHERE 1=1
        <if test="condition.unitName != null and condition.unitName != ''">
            AND unit_name LIKE CONCAT('%', #{condition.unitName}, '%')
        </if>
        <if test="condition.status != null">
            AND status = #{condition.status}
        </if>
        ORDER BY CREATE_TIME DESC
    </select>

    <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
        SELECT 
        <include refid="Base_Column_List" />
        FROM T_CUST_MULTIORG_UNIT
        WHERE ID = #{id,jdbcType=BIGINT}
    </select>

    <insert id="insert" parameterType="com.yljr.crcl.limit.domain.entity.UnitLimitByCompanyId">
        INSERT INTO T_CUST_MULTIORG_UNIT (company_id, mutilorg_id, unit_code, unit_name, remark, platform_type, status, create_id, oper_user_name, create_time, modify_id, modify_user_name, modify_time)
        VALUES (#{companyId}, #{mutilorgId}, #{unitCode}, #{unitName}, #{remark}, #{platformType}, #{status}, #{createId}, #{operUserName}, #{createTime}, #{modifyId}, #{modifyUserName}, #{modifyTime})
    </insert>

    <update id="updateByPrimaryKey" parameterType="com.yljr.crcl.limit.domain.entity.UnitLimitByCompanyId">
        UPDATE T_CUST_MULTIORG_UNIT
        SET company_id = #{companyId},
            mutilorg_id = #{mutilorgId},
            unit_code = #{unitCode},
            unit_name = #{unitName},
            remark = #{remark},
            platform_type = #{platformType},
            status = #{status},
            create_id = #{createId},
            oper_user_name = #{operUserName},
            modify_id = #{modifyId},
            modify_user_name = #{modifyUserName},
            modify_time = #{modifyTime}
        WHERE ID = #{id}
    </update>

    <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
        DELETE FROM T_CUST_MULTIORG_UNIT
        WHERE ID = #{id,jdbcType=BIGINT}
    </delete>

</mapper>
2025-07-22 16:53:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: /Users/renyu/Documents/create_project/链数中建一局_1753174204/crcl-open/crcl-open/src/main/java/com/yljr/crcl/limit/src/main/resources/mapper/UnitLimitByCompanyIdMapper.xml
2025-07-22 16:53:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: /Users/renyu/Documents/create_project/链数中建一局_1753174204/crcl-open/crcl-open/src/main/java/com/yljr/crcl/limit/src/main/resources/mapper/UnitLimitByCompanyIdMapper.xml
2025-07-22 16:53:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📊 代码生成完成，共写入 9 个文件到项目中
2025-07-22 16:53:52 - src.corder_integration.utils.backup_cleaner - INFO - 🧹 开始清理项目备份: /Users/renyu/Documents/create_project/链数中建一局_1753174204/crcl-open/crcl-open/src/main/java/com/yljr/crcl/limit
2025-07-22 16:53:52 - src.corder_integration.utils.backup_cleaner - INFO - 🎉 备份清理完成: 删除 0 目录, 0 文件
2025-07-22 16:53:52 - src.apis.project_analysis_api - INFO - 🗑️ 已清除缓存: /Users/renyu/Documents/create_project/链数中建一局_1753174204/crcl-open/crcl-open/src/main/java/com/yljr/crcl/limit_确权开立服务
2025-07-22 16:53:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🗑️ 已清理项目分析缓存，确保下次分析获取最新状态
2025-07-22 16:53:52 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_009 状态更新为 completed
2025-07-22 16:53:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 任务 task_009 执行成功
2025-07-22 16:53:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 第5轮执行完成，处理了 1 个任务
2025-07-22 16:53:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第6轮任务检查...
2025-07-22 16:53:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 第6轮找到 1 个可执行任务
2025-07-22 16:53:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 开始执行任务: task_010 (api)
2025-07-22 16:53:52 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_010 已被 intelligent_coding_node 领取
2025-07-22 16:53:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🌐 执行API接口生成任务: task_010
2025-07-22 16:53:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 解析的接口信息:
2025-07-22 16:53:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 接口名称: UnitLimitByCompanyIdExport
2025-07-22 16:53:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - API路径: /crcl-open-api/lsLimit/listUnitLimitByCompanyIdExport
2025-07-22 16:53:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - HTTP方法: GET
2025-07-22 16:53:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 输入参数: 4个
2025-07-22 16:53:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 输出参数: 3个
2025-07-22 16:53:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 业务描述: 复用listUnitLimitByCompanyId接口的查询逻辑，将结果导出为Excel格式
2025-07-22 16:53:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 在 /Users/renyu/Documents/create_project/链数中建一局_1753174204/crcl-open 中查找最佳Java项目路径...
2025-07-22 16:53:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 目标服务名: 确权开立服务
2025-07-22 16:53:54 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-22 16:53:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 发现Java项目: crcl-open
2025-07-22 16:53:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       🎯 相对路径: crcl-open
2025-07-22 16:53:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       📊 Java文件: 2259个
2025-07-22 16:53:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       📐 目录深度: 1
2025-07-22 16:53:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       🏆 优先级分数: 650
2025-07-22 16:53:54 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-22 16:53:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 发现Java项目: limit
2025-07-22 16:53:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       🎯 相对路径: crcl-open/src/main/java/com/yljr/crcl/limit
2025-07-22 16:53:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       📊 Java文件: 8个
2025-07-22 16:53:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       📐 目录深度: 8
2025-07-22 16:53:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       🏆 优先级分数: 650
2025-07-22 16:53:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 排序后的候选路径（前3个）:
2025-07-22 16:53:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    1. crcl-open/src/main/java/com/yljr/crcl/limit (优先级: 650)
2025-07-22 16:53:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    2. crcl-open (优先级: 650)
2025-07-22 16:53:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 选择最佳Java项目路径:
2025-07-22 16:53:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 完整路径: /Users/renyu/Documents/create_project/链数中建一局_1753174204/crcl-open/crcl-open/src/main/java/com/yljr/crcl/limit
2025-07-22 16:53:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📋 相对路径: crcl-open/src/main/java/com/yljr/crcl/limit
2025-07-22 16:53:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    🏆 最终优先级: 650
2025-07-22 16:53:54 - src.corder_integration.config.domain_mapping_config - INFO - 🔍 映射API关键字到业务领域: lsLimit
2025-07-22 16:53:54 - src.corder_integration.config.domain_mapping_config - INFO - ✅ 精确匹配: lsLimit -> lsLimit
2025-07-22 16:53:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 API关键字映射: lsLimit -> lsLimit (API路径: /crcl-open-api/lsLimit/listUnitLimitByCompanyIdExport)
2025-07-22 16:53:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 在项目中搜索关键字相关路径: lsLimit
2025-07-22 16:53:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - WARNING - ⚠️ 跳过重复嵌套路径: /Users/renyu/Documents/create_project/链数中建一局_1753174204/crcl-open/crcl-open/src/main/java/com/yljr/crcl/limit/src/main/java/com/yljr/crcl/limit
2025-07-22 16:53:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    ❌ 未找到包含关键字 'lsLimit' 的相关目录
2025-07-22 16:53:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -  分析目标项目: /Users/renyu/Documents/create_project/链数中建一局_1753174204/crcl-open/crcl-open/src/main/java/com/yljr/crcl/limit
2025-07-22 16:53:54 - src.apis.project_analysis_api - INFO - 🔍 开始分析项目用于代码生成: /Users/renyu/Documents/create_project/链数中建一局_1753174204/crcl-open/crcl-open/src/main/java/com/yljr/crcl/limit
2025-07-22 16:53:54 - src.apis.project_analysis_api - INFO - 🔍 在 /Users/renyu/Documents/create_project/链数中建一局_1753174204/crcl-open/crcl-open/src/main/java/com/yljr/crcl/limit 中查找最佳Java项目路径...
2025-07-22 16:53:54 - src.apis.project_analysis_api - INFO - 🎯 目标服务名: 确权开立服务
2025-07-22 16:53:54 - src.apis.project_analysis_api - INFO -    📐 深层目录结构 (深度15) -> +200
2025-07-22 16:53:54 - src.apis.project_analysis_api - INFO -    📦 服务模块匹配: main -> +120
2025-07-22 16:53:54 - src.apis.project_analysis_api - INFO -    🏢 业务域匹配: user -> +60
2025-07-22 16:53:54 - src.apis.project_analysis_api - INFO -    🏗️ 架构层级匹配: src/main/java -> +100
2025-07-22 16:53:54 - src.apis.project_analysis_api - INFO -    📁 发现Java项目: limit
2025-07-22 16:53:54 - src.apis.project_analysis_api - INFO -       🎯 相对路径: .
2025-07-22 16:53:54 - src.apis.project_analysis_api - INFO -       📊 Java文件: 8个
2025-07-22 16:53:54 - src.apis.project_analysis_api - INFO -       📐 目录深度: 0
2025-07-22 16:53:54 - src.apis.project_analysis_api - INFO -       🏆 优先级分数: 480
2025-07-22 16:53:54 - src.apis.project_analysis_api - INFO - 📋 排序后的候选路径（前3个）:
2025-07-22 16:53:54 - src.apis.project_analysis_api - INFO -    1. . (优先级: 480)
2025-07-22 16:53:54 - src.apis.project_analysis_api - INFO - ✅ 选择最佳Java项目路径:
2025-07-22 16:53:54 - src.apis.project_analysis_api - INFO -    📁 完整路径: /Users/renyu/Documents/create_project/链数中建一局_1753174204/crcl-open/crcl-open/src/main/java/com/yljr/crcl/limit
2025-07-22 16:53:54 - src.apis.project_analysis_api - INFO -    📋 相对路径: .
2025-07-22 16:53:54 - src.apis.project_analysis_api - INFO -    🏆 最终优先级: 480
2025-07-22 16:53:54 - src.apis.project_analysis_api - INFO - 📂 实际分析路径: /Users/renyu/Documents/create_project/链数中建一局_1753174204/crcl-open/crcl-open/src/main/java/com/yljr/crcl/limit
2025-07-22 16:53:54 - src.utils.java_code_analyzer - INFO - 🔍 开始分析企业级Java项目: /Users/renyu/Documents/create_project/链数中建一局_1753174204/crcl-open/crcl-open/src/main/java/com/yljr/crcl/limit
2025-07-22 16:53:56 - src.utils.java_code_analyzer - INFO - ✅ 企业级项目分析完成，共分析 541 个Java文件
2025-07-22 16:53:56 - src.apis.project_analysis_api - INFO - 📦 动态检测到基础包: com.yljr.crcl.limit (出现541次)
2025-07-22 16:53:56 - src.apis.project_analysis_api - INFO - 📦 动态检测到基础包: com.yljr.crcl.limit (出现541次)
2025-07-22 16:53:56 - src.apis.project_analysis_api - INFO - 📋 提取到20个Controller的详细信息
2025-07-22 16:53:56 - src.apis.project_analysis_api - INFO - 📦 动态检测到基础包: com.yljr.crcl.limit (出现541次)
2025-07-22 16:53:56 - src.apis.project_analysis_api - INFO - ✅ 项目分析完成，已提取代码生成上下文
2025-07-22 16:53:56 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 从编码代理获取设计文档内容 (7324 字符)
2025-07-22 16:53:56 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 设计文档内容已添加到项目上下文 (7324 字符)
2025-07-22 16:53:56 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 使用详细Controller信息，共20个Controller
2025-07-22 16:53:56 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 Controller关联性分析完成:
2025-07-22 16:53:56 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 总Controller数: 20
2025-07-22 16:53:56 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 相关Controller数: 1
2025-07-22 16:53:56 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 最高关联度: 0.45
2025-07-22 16:53:56 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 Controller关联性分析:
2025-07-22 16:53:56 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 总Controller数: 20
2025-07-22 16:53:56 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 相关Controller数: 1
2025-07-22 16:53:56 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 关联度得分: 0.45
2025-07-22 16:53:56 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 相关Controllers: ['LsLimitController']
2025-07-22 16:53:56 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🤖 调用volcengine分析项目策略...发送的prompt信息: Java文件数=541, Controller数=20
2025-07-22 16:53:59 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-22 16:53:59 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 项目策略判断: enhance_existing - 虽然业务关联度为0.45略低于0.6的标准阈值，但存在名称包含API关键字'lsLimit'的LsLimitController，且该Controller的业务关键词'limit'与API功能高度相关。考虑到业务关联性优先原则，建议在现有Controller上进行增强。
2025-07-22 16:53:59 - src.corder_integration.langgraph.nodes.intelligent_coding_node - WARNING - ⚠️ 策略1异常: f-string: single '}' is not allowed (function_calling_code_generator.py, line 272), 将使用策略2
2025-07-22 16:53:59 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -  调用volcengine大模型生成代码...
2025-07-22 16:53:59 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 开始代码生成...
2025-07-22 16:53:59 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎨 使用模板+AI混合模式生成代码
2025-07-22 16:53:59 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - 🎨 开始增强版代码生成: UnitLimitByCompanyIdExport
2025-07-22 16:53:59 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - 🔍 检测到Excel导出要求
2025-07-22 16:53:59 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - 🔍 解析到表结构: t_cust_multiorg_unit (14列)
2025-07-22 16:53:59 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - 🤖 使用智能文件复用和专门化提示词模板增强代码...
2025-07-22 16:53:59 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 设置设计文档内容，长度: 7324
2025-07-22 16:53:59 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO - 🔍 分析项目结构: /Users/renyu/Documents/create_project/链数中建一局_1753174204/crcl-open/crcl-open/src/main/java/com/yljr/crcl/limit
2025-07-22 16:53:59 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO - 🔍 从文件 CreditRecordDto.java 推断基础包名: com.yljr.crcl.limit
2025-07-22 16:53:59 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO - ✅ 项目结构分析完成
2025-07-22 16:53:59 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO -    Controllers: 20
2025-07-22 16:53:59 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO -    Application Services: 32
2025-07-22 16:53:59 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO -    Domain Services: 34
2025-07-22 16:53:59 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO -    Mappers: 37
2025-07-22 16:53:59 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO -    Feign Clients: 1
2025-07-22 16:53:59 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO -    XML Files: 1
2025-07-22 16:53:59 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO - 🤔 决策文件复用策略: UnitLimitByCompanyIdExport
2025-07-22 16:53:59 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO - 📋 文件复用策略决策完成:
2025-07-22 16:53:59 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO -    controller: create_new - 未找到合适的Controller (最高分数: 0)
2025-07-22 16:53:59 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO -    application_service: create_new - 需要Feign调用，创建新的Application Service
2025-07-22 16:53:59 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO -    domain_service: create_new - 未找到合适的Domain Service，需要创建
2025-07-22 16:53:59 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO -    mapper: create_new - 未找到合适的Mapper，需要创建
2025-07-22 16:53:59 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO -    feign_client: create_new - 未找到合适的Feign Client，需要创建
2025-07-22 16:53:59 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO -    xml_file: create_new - 需要创建新的XML文件
2025-07-22 16:53:59 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - 📋 智能文件复用策略:
2025-07-22 16:53:59 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO -    controller: create_new - 未找到合适的Controller (最高分数: 0)
2025-07-22 16:53:59 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO -    application_service: create_new - 需要Feign调用，创建新的Application Service
2025-07-22 16:53:59 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO -    domain_service: create_new - 未找到合适的Domain Service，需要创建
2025-07-22 16:53:59 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO -    mapper: create_new - 未找到合适的Mapper，需要创建
2025-07-22 16:53:59 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO -    feign_client: create_new - 未找到合适的Feign Client，需要创建
2025-07-22 16:53:59 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO -    xml_file: create_new - 需要创建新的XML文件
2025-07-22 16:53:59 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO - 🔗 生成完整调用链: UnitLimitByCompanyIdExport
2025-07-22 16:53:59 - src.corder_integration.code_generator.intelligent_file_reuse_manager - WARNING - ⚠️ 未找到表结构定义，使用默认字段
2025-07-22 16:53:59 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO - ✅ 调用链代码生成完成，包含 9 个组件
2025-07-22 16:53:59 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 智能文件复用生成了 9 个组件
2025-07-22 16:53:59 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - 📝 需要创建 9 个新文件
2025-07-22 16:53:59 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI生成成功，生成代码类型: ['controller_method', 'application_service', 'domain_service', 'domain_service_impl', 'request_dto', 'response_dto', 'mapper', 'feign_client', 'xml_mapping']
2025-07-22 16:53:59 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 开始写入生成的代码文件...
2025-07-22 16:53:59 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔧 统一类名基础: UnitLimitByCompanyIdExport
2025-07-22 16:53:59 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ controller_method 类名: UnitLimitByCompanyIdExportController
2025-07-22 16:53:59 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ application_service 类名: UnitLimitByCompanyIdExportApplication
2025-07-22 16:53:59 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ domain_service_impl 类名: UnitLimitByCompanyIdExportServiceImpl
2025-07-22 16:53:59 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ request_dto 类名: UnitLimitByCompanyIdExportReq
2025-07-22 16:53:59 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ response_dto 类名: UnitLimitByCompanyIdExportResp
2025-07-22 16:53:59 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 标准化后的代码类型: ['controller_method', 'application_service', 'domain_service', 'domain_service_impl', 'request_dto', 'response_dto', 'mapper', 'feign_client', 'xml_mapping']
2025-07-22 16:53:59 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🤖 调用volcengine判断Java文件输出路径...
2025-07-22 16:54:35 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-22 16:54:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM路径判断成功，配置了 9 个Java文件路径
2025-07-22 16:54:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 controller_method: UnitLimitByCompanyIdExportController.java
2025-07-22 16:54:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 application_service: UnitLimitByCompanyIdExportApplication.java
2025-07-22 16:54:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 domain_service: UnitLimitByCompanyIdExportService.java
2025-07-22 16:54:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 domain_service_impl: UnitLimitByCompanyIdExportServiceImpl.java
2025-07-22 16:54:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 request_dto: UnitLimitByCompanyIdExportReq.java
2025-07-22 16:54:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 response_dto: UnitLimitByCompanyIdExportResp.java
2025-07-22 16:54:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 mapper: UnitLimitByCompanyIdExportMapper.java
2025-07-22 16:54:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 feign_client: UnitLimitByCompanyIdExportFeignClient.java
2025-07-22 16:54:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 xml_mapping: UnitLimitByCompanyIdExportMapper.xml
2025-07-22 16:54:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 代码内容 (controller_method):

package com.yljr.crcl.limit.interfaces;

import com.yljr.crcl.limit.interfaces.dto.UnitLimitByCompanyIdExportReq;
import com.yljr.crcl.limit.interfaces.dto.UnitLimitByCompanyIdExportResp;
import com.yljr.common.dto.Response;
import org.springframework.web.bind.annotation.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.validation.annotation.Validated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import io.swagger.annotations.ApiOperation;

import javax.validation.Valid;

/**
 * UnitLimitByCompanyIdExport Controller
 * 复用listUnitLimitByCompanyId接口的查询逻辑，将结果导出为Excel格式
 */
@Validated
@RestController
@RequestMapping("/api/unitLimitByCompanyIdExport")
public class UnitLimitByCompanyIdExportController {

    private final Logger logger = LoggerFactory.getLogger(this.getClass());
    
    @Autowired
    private UnitLimitByCompanyIdExportApplication unitLimitByCompanyIdExportApplication;

    /**
     * 复用listUnitLimitByCompanyId接口的查询逻辑，将结果导出为Excel格式
     */
    @PostMapping("/unitLimitByCompanyIdExport")
    @ApiOperation(value = "复用listUnitLimitByCompanyId接口的查询逻辑，将结果导出为Excel格式")
    public Response<UnitLimitByCompanyIdExportResp> unitLimitByCompanyIdExport(@RequestBody @Valid UnitLimitByCompanyIdExportReq request) {
        try {
            logger.info("开始执行unitLimitByCompanyIdExport，请求参数: {}", request);
            
            return unitLimitByCompanyIdExportApplication.unitLimitByCompanyIdExport(request);
            
        } catch (Exception e) {
            logger.error("执行unitLimitByCompanyIdExport失败", e);
            return Response.error("执行失败: " + e.getMessage());
        }
    }
}
2025-07-22 16:54:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: /Users/renyu/Documents/create_project/链数中建一局_1753174204/crcl-open/crcl-open/src/main/java/com/yljr/crcl/limit/interfaces/UnitLimitByCompanyIdExportController.java
2025-07-22 16:54:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: /Users/renyu/Documents/create_project/链数中建一局_1753174204/crcl-open/crcl-open/src/main/java/com/yljr/crcl/limit/interfaces/UnitLimitByCompanyIdExportController.java
2025-07-22 16:54:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 代码内容 (application_service):

package com.yljr.crcl.limit.application.service;

import com.yljr.crcl.limit.interfaces.dto.UnitLimitByCompanyIdExportReq;
import com.yljr.crcl.limit.interfaces.dto.UnitLimitByCompanyIdExportResp;
import org.springframework.stereotype.Service;
import org.springframework.beans.factory.annotation.Autowired;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * UnitLimitByCompanyIdExport Application Service
 * 复用listUnitLimitByCompanyId接口的查询逻辑，将结果导出为Excel格式
 */
@Service
public class UnitLimitByCompanyIdExportApplication {

    private static final Logger logger = LoggerFactory.getLogger(UnitLimitByCompanyIdExportApplication.class);
    
    @Autowired
    private UnitLimitByCompanyIdExportFeignClient unitlimitbycompanyidexportFeignClient;

    /**
     * 复用listUnitLimitByCompanyId接口的查询逻辑，将结果导出为Excel格式
     */
    public UnitLimitByCompanyIdExportResp UnitLimitByCompanyIdExport(UnitLimitByCompanyIdExportReq request) {
        logger.info("Application Service执行UnitLimitByCompanyIdExport，参数: {}", request);
        
        try {
            return unitlimitbycompanyidexportFeignClient.UnitLimitByCompanyIdExport(request);
        } catch (Exception e) {
            logger.error("Application Service执行UnitLimitByCompanyIdExport失败", e);
            throw new RuntimeException("执行失败: " + e.getMessage(), e);
        }
    }
}
2025-07-22 16:54:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: /Users/renyu/Documents/create_project/链数中建一局_1753174204/crcl-open/crcl-open/src/main/java/com/yljr/crcl/limit/application/service/UnitLimitByCompanyIdExportApplication.java
2025-07-22 16:54:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: /Users/renyu/Documents/create_project/链数中建一局_1753174204/crcl-open/crcl-open/src/main/java/com/yljr/crcl/limit/application/service/UnitLimitByCompanyIdExportApplication.java
2025-07-22 16:54:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 代码内容 (domain_service):
package com.yljr.crcl.limit.domain.service;

import com.yljr.crcl.limit.interfaces.dto.UnitLimitByCompanyIdExportReq;
import com.yljr.crcl.limit.interfaces.dto.UnitLimitByCompanyIdExportResp;

/**
 * UnitLimitByCompanyIdExport Domain Service Interface
 * 复用listUnitLimitByCompanyId接口的查询逻辑，将结果导出为Excel格式
 */
public interface UnitLimitByCompanyIdExportService {

    /**
     * 复用listUnitLimitByCompanyId接口的查询逻辑，将结果导出为Excel格式
     */
    UnitLimitByCompanyIdExportResp unitLimitByCompanyIdExport(UnitLimitByCompanyIdExportReq request);
}
2025-07-22 16:54:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: /Users/renyu/Documents/create_project/链数中建一局_1753174204/crcl-open/crcl-open/src/main/java/com/yljr/crcl/limit/domain/service/UnitLimitByCompanyIdExportService.java
2025-07-22 16:54:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: /Users/renyu/Documents/create_project/链数中建一局_1753174204/crcl-open/crcl-open/src/main/java/com/yljr/crcl/limit/domain/service/UnitLimitByCompanyIdExportService.java
2025-07-22 16:54:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 代码内容 (domain_service_impl):
package com.yljr.crcl.limit.domain.service.impl;

import com.yljr.crcl.limit.domain.service.UnitLimitByCompanyIdExportService;
import com.yljr.crcl.limit.interfaces.dto.UnitLimitByCompanyIdExportReq;
import com.yljr.crcl.limit.interfaces.dto.UnitLimitByCompanyIdExportResp;
import com.yljr.crcl.limit.domain.entity.UnitLimitByCompanyIdExport;
import com.yljr.crcl.limit.domain.mapper.UnitLimitByCompanyIdExportMapper;
import org.springframework.stereotype.Service;
import org.springframework.beans.factory.annotation.Autowired;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import java.util.List;

/**
 * UnitLimitByCompanyIdExport Domain Service Implementation
 * 复用listUnitLimitByCompanyId接口的查询逻辑，将结果导出为Excel格式
 */
@Service
public class UnitLimitByCompanyIdExportServiceImpl implements UnitLimitByCompanyIdExportService {

    private static final Logger logger = LoggerFactory.getLogger(UnitLimitByCompanyIdExportServiceImpl.class);
    
    @Autowired
    private UnitLimitByCompanyIdExportMapper unitlimitbycompanyidexportMapper;

    /**
     * 复用listUnitLimitByCompanyId接口的查询逻辑，将结果导出为Excel格式
     */
    @Override
    public UnitLimitByCompanyIdExportResp unitLimitByCompanyIdExport(UnitLimitByCompanyIdExportReq request) {
        logger.info("Domain Service执行UnitLimitByCompanyIdExport，参数: {}", request);
        
        try {
        // 调用Mapper查询数据
        List<UnitLimitByCompanyIdExport> dataList = unitlimitbycompanyidexportMapper.selectUnitLimitByCompanyIdExportList(request);
        
        // 构建响应
        UnitLimitByCompanyIdExportResp response = new UnitLimitByCompanyIdExportResp();
        response.setDataList(dataList);
        response.setTotalCount(dataList.size());
        
        return response;
        } catch (Exception e) {
            logger.error("Domain Service执行UnitLimitByCompanyIdExport失败", e);
            throw new RuntimeException("执行失败: " + e.getMessage(), e);
        }
    }
}
2025-07-22 16:54:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: /Users/renyu/Documents/create_project/链数中建一局_1753174204/crcl-open/crcl-open/src/main/java/com/yljr/crcl/limit/domain/service/impl/UnitLimitByCompanyIdExportServiceImpl.java
2025-07-22 16:54:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: /Users/renyu/Documents/create_project/链数中建一局_1753174204/crcl-open/crcl-open/src/main/java/com/yljr/crcl/limit/domain/service/impl/UnitLimitByCompanyIdExportServiceImpl.java
2025-07-22 16:54:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 代码内容 (request_dto):

package com.yljr.crcl.limit.interfaces.dto;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Date;
import java.math.BigDecimal;

/**
 * UnitLimitByCompanyIdExport 请求DTO
 * 复用listUnitLimitByCompanyId接口的查询逻辑，将结果导出为Excel格式
 */
@ApiModel(value = "UnitLimitByCompanyIdExportReq", description = "复用listUnitLimitByCompanyId接口的查询逻辑，将结果导出为Excel格式")
public class UnitLimitByCompanyIdExportReq {

    /**
     * 公司ID(必填)
     */
    @ApiModelProperty(value = "公司ID(必填)")
    private String gwCompanyId;
    /**
     * 组织单元名称(可选)
     */
    @ApiModelProperty(value = "组织单元名称(可选)")
    private String unitName;
    /**
     * 额度来源(可选)
     */
    @ApiModelProperty(value = "额度来源(可选)")
    private String limitSource;
    /**
     * 业务类型(必填)
     */
    @ApiModelProperty(value = "业务类型(必填)")
    private String bizType;

    public String getGwCompanyId() {
        return gwCompanyId;
    }

    public void setGwCompanyId(String gwCompanyId) {
        this.gwCompanyId = gwCompanyId;
    }
    public String getUnitName() {
        return unitName;
    }

    public void setUnitName(String unitName) {
        this.unitName = unitName;
    }
    public String getLimitSource() {
        return limitSource;
    }

    public void setLimitSource(String limitSource) {
        this.limitSource = limitSource;
    }
    public String getBizType() {
        return bizType;
    }

    public void setBizType(String bizType) {
        this.bizType = bizType;
    }

    @Override
    public String toString() {
        return "UnitLimitByCompanyIdExportReq{" +
                "gwCompanyId=" + gwCompanyId + ", " +
                "unitName=" + unitName + ", " +
                "limitSource=" + limitSource + ", " +
                "bizType=" + bizType +
                "};";
    }
}
2025-07-22 16:54:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: /Users/renyu/Documents/create_project/链数中建一局_1753174204/crcl-open/crcl-open/src/main/java/com/yljr/crcl/limit/interfaces/dto/UnitLimitByCompanyIdExportReq.java
2025-07-22 16:54:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: /Users/renyu/Documents/create_project/链数中建一局_1753174204/crcl-open/crcl-open/src/main/java/com/yljr/crcl/limit/interfaces/dto/UnitLimitByCompanyIdExportReq.java
2025-07-22 16:54:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 代码内容 (response_dto):

package com.yljr.crcl.limit.interfaces.dto;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.List;
import java.util.Date;
import java.math.BigDecimal;

/**
 * UnitLimitByCompanyIdExport 响应DTO
 * 复用listUnitLimitByCompanyId接口的查询逻辑，将结果导出为Excel格式
 */
@ApiModel(value = "UnitLimitByCompanyIdExportResp", description = "复用listUnitLimitByCompanyId接口的查询逻辑，将结果导出为Excel格式")
public class UnitLimitByCompanyIdExportResp {

    /**
     * Excel文件流
     */
    @ApiModelProperty(value = "Excel文件流")
    private String file;
    /**
     * 导出文件名
     */
    @ApiModelProperty(value = "导出文件名")
    private String filename;
    /**
     * application/vnd.openxmlformats-officedocument.spreadsheetml.sheet
     */
    @ApiModelProperty(value = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
    private String contentType;

    public String getFile() {
        return file;
    }

    public void setFile(String file) {
        this.file = file;
    }
    public String getFilename() {
        return filename;
    }

    public void setFilename(String filename) {
        this.filename = filename;
    }
    public String getContentType() {
        return contentType;
    }

    public void setContentType(String contentType) {
        this.contentType = contentType;
    }

    @Override
    public String toString() {
        return "UnitLimitByCompanyIdExportResp{" +
                "file=" + file + ", " +
                "filename=" + filename + ", " +
                "contentType=" + contentType +
                "};";
    }
}
2025-07-22 16:54:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: /Users/renyu/Documents/create_project/链数中建一局_1753174204/crcl-open/crcl-open/src/main/java/com/yljr/crcl/limit/interfaces/dto/UnitLimitByCompanyIdExportResp.java
2025-07-22 16:54:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: /Users/renyu/Documents/create_project/链数中建一局_1753174204/crcl-open/crcl-open/src/main/java/com/yljr/crcl/limit/interfaces/dto/UnitLimitByCompanyIdExportResp.java
2025-07-22 16:54:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 代码内容 (mapper):

package com.yljr.crcl.limit.domain.mapper;

import com.yljr.crcl.limit.interfaces.dto.UnitLimitByCompanyIdExportReq;
import com.yljr.crcl.limit.domain.entity.UnitLimitByCompanyIdExport;
import org.apache.ibatis.annotations.Mapper;
import org.apache.ibatis.annotations.Param;
import java.util.List;

/**
 * UnitLimitByCompanyIdExport Mapper接口
 * 复用listUnitLimitByCompanyId接口的查询逻辑，将结果导出为Excel格式
 */
@Mapper
public interface UnitLimitByCompanyIdExportMapper {

    /**
     * 根据条件查询UnitLimitByCompanyIdExport列表
     */
    List<UnitLimitByCompanyIdExport> selectUnitLimitByCompanyIdExportList(@Param("condition") UnitLimitByCompanyIdExportReq condition);

    /**
     * 根据主键查询UnitLimitByCompanyIdExport
     */
    UnitLimitByCompanyIdExport selectByPrimaryKey(@Param("id") Long id);

    /**
     * 新增UnitLimitByCompanyIdExport记录
     */
    int insert(UnitLimitByCompanyIdExport record);

    /**
     * 更新UnitLimitByCompanyIdExport记录
     */
    int updateByPrimaryKey(UnitLimitByCompanyIdExport record);

    /**
     * 删除UnitLimitByCompanyIdExport记录
     */
    int deleteByPrimaryKey(@Param("id") Long id);
}
2025-07-22 16:54:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: /Users/renyu/Documents/create_project/链数中建一局_1753174204/crcl-open/crcl-open/src/main/java/com/yljr/crcl/limit/domain/mapper/UnitLimitByCompanyIdExportMapper.java
2025-07-22 16:54:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: /Users/renyu/Documents/create_project/链数中建一局_1753174204/crcl-open/crcl-open/src/main/java/com/yljr/crcl/limit/domain/mapper/UnitLimitByCompanyIdExportMapper.java
2025-07-22 16:54:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 代码内容 (feign_client):

package com.yljr.crcl.limit.application.feign;

import com.yljr.crcl.limit.interfaces.dto.UnitLimitByCompanyIdExportReq;
import com.yljr.crcl.limit.interfaces.dto.UnitLimitByCompanyIdExportResp;
import com.yljr.common.dto.ResponseInfo;
import org.springframework.cloud.openfeign.FeignClient;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.http.MediaType;

/**
 * UnitLimitByCompanyIdExport Feign接口
 * 复用listUnitLimitByCompanyId接口的查询逻辑，将结果导出为Excel格式
 */
@FeignClient(name = "external-service", path = "/api")
public interface UnitLimitByCompanyIdExportFeignClient {

    /**
     * 复用listUnitLimitByCompanyId接口的查询逻辑，将结果导出为Excel格式
     */
    @PostMapping(value = "/unitlimitbycompanyidexport", consumes = MediaType.APPLICATION_JSON_UTF8_VALUE)
    ResponseInfo<UnitLimitByCompanyIdExportResp> UnitLimitByCompanyIdExport(@RequestBody UnitLimitByCompanyIdExportReq request);
}
2025-07-22 16:54:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: /Users/renyu/Documents/create_project/链数中建一局_1753174204/crcl-open/crcl-open/src/main/java/com/yljr/crcl/limit/application/feign/UnitLimitByCompanyIdExportFeignClient.java
2025-07-22 16:54:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: /Users/renyu/Documents/create_project/链数中建一局_1753174204/crcl-open/crcl-open/src/main/java/com/yljr/crcl/limit/application/feign/UnitLimitByCompanyIdExportFeignClient.java
2025-07-22 16:54:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 代码内容 (xml_mapping):
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yljr.crcl.limit.domain.mapper.UnitLimitByCompanyIdExportMapper">

    <resultMap id="BaseResultMap" type="com.yljr.crcl.limit.domain.entity.UnitLimitByCompanyIdExport">
        <id column="ID" jdbcType="BIGINT" property="id" />
        <result column="NAME" jdbcType="VARCHAR" property="name" />
        <result column="STATUS" jdbcType="VARCHAR" property="status" />
        <result column="CREATE_TIME" jdbcType="TIMESTAMP" property="createTime" />
        <result column="UPDATE_TIME" jdbcType="TIMESTAMP" property="updateTime" />
    </resultMap>

    <sql id="Base_Column_List">
        ID, NAME, STATUS, CREATE_TIME, UPDATE_TIME
    </sql>

    <select id="selectUnitLimitByCompanyIdExportList" parameterType="com.yljr.crcl.limit.interfaces.dto.UnitLimitByCompanyIdExportReq" 
            resultMap="BaseResultMap">
        SELECT 
        <include refid="Base_Column_List" />
        FROM T_UNITLIMITBYCOMPANYIDEXPORT
        WHERE 1=1
        <if test="condition.status != null">
            AND STATUS = #{condition.status}
        </if>
        ORDER BY CREATE_TIME DESC
    </select>

    <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
        SELECT 
        <include refid="Base_Column_List" />
        FROM T_UNITLIMITBYCOMPANYIDEXPORT
        WHERE ID = #{id,jdbcType=BIGINT}
    </select>

    <insert id="insert" parameterType="com.yljr.crcl.limit.domain.entity.UnitLimitByCompanyIdExport">
        INSERT INTO T_UNITLIMITBYCOMPANYIDEXPORT (NAME, STATUS, CREATE_TIME, UPDATE_TIME)
        VALUES (#{name}, #{status}, #{createTime}, #{updateTime})
    </insert>

    <update id="updateByPrimaryKey" parameterType="com.yljr.crcl.limit.domain.entity.UnitLimitByCompanyIdExport">
        UPDATE T_UNITLIMITBYCOMPANYIDEXPORT
        SET NAME = #{name},
            STATUS = #{status},
            UPDATE_TIME = #{updateTime}
        WHERE ID = #{id}
    </update>

    <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
        DELETE FROM T_UNITLIMITBYCOMPANYIDEXPORT
        WHERE ID = #{id,jdbcType=BIGINT}
    </delete>

</mapper>
2025-07-22 16:54:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: /Users/renyu/Documents/create_project/链数中建一局_1753174204/crcl-open/crcl-open/src/main/resources/mapper/UnitLimitByCompanyIdExportMapper.xml
2025-07-22 16:54:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: /Users/renyu/Documents/create_project/链数中建一局_1753174204/crcl-open/crcl-open/src/main/resources/mapper/UnitLimitByCompanyIdExportMapper.xml
2025-07-22 16:54:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📊 代码生成完成，共写入 9 个文件到项目中
2025-07-22 16:54:35 - src.corder_integration.utils.backup_cleaner - INFO - 🧹 开始清理项目备份: /Users/renyu/Documents/create_project/链数中建一局_1753174204/crcl-open/crcl-open/src/main/java/com/yljr/crcl/limit
2025-07-22 16:54:35 - src.corder_integration.utils.backup_cleaner - INFO - 🎉 备份清理完成: 删除 0 目录, 0 文件
2025-07-22 16:54:35 - src.apis.project_analysis_api - INFO - 🗑️ 已清除缓存: /Users/renyu/Documents/create_project/链数中建一局_1753174204/crcl-open/crcl-open/src/main/java/com/yljr/crcl/limit_确权开立服务
2025-07-22 16:54:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🗑️ 已清理项目分析缓存，确保下次分析获取最新状态
2025-07-22 16:54:35 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_010 状态更新为 completed
2025-07-22 16:54:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 任务 task_010 执行成功
2025-07-22 16:54:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 第6轮执行完成，处理了 1 个任务
2025-07-22 16:54:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第7轮任务检查...
2025-07-22 16:54:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第7轮没有可执行的智能编码任务
2025-07-22 16:54:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 7 个任务，共7轮
2025-07-22 16:54:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 7 个任务
2025-07-22 16:54:35 - src.corder_integration.langgraph.workflow_orchestrator - WARNING - 没有识别到任何服务，结束编码流程
2025-07-22 16:54:35 - src.corder_integration.langgraph.workflow_orchestrator - INFO - 工作流执行成功: 链数中建一局_1753174353, 完成服务数: 0
2025-07-22 16:54:35 - werkzeug - INFO - 127.0.0.1 - - [22/Jul/2025 16:54:35] "POST /api/coder-agent/process-document HTTP/1.1" 200 -
2025-07-22 17:04:35 - werkzeug - INFO -  * Detected change in '/Users/renyu/Documents/ai_project/document_analyzer/src/corder_integration/code_generator/function_calling_code_generator.py', reloading
2025-07-22 17:04:35 - werkzeug - INFO -  * Restarting with stat
2025-07-22 17:04:36 - system - INFO - ==================================================
2025-07-22 17:04:36 - system - INFO - 🚀 智能分析系统日志系统初始化完成
2025-07-22 17:04:36 - system - INFO - 📁 日志根目录: /Users/renyu/Documents/ai_project/document_analyzer/logs
2025-07-22 17:04:36 - system - INFO - 📊 日志级别: INFO
2025-07-22 17:04:36 - system - INFO - 📅 按日期轮转: 每天午夜自动轮转
2025-07-22 17:04:36 - system - INFO - 📂 按月分目录: logs/YYYY-MM/
2025-07-22 17:04:36 - system - INFO - 📝 主日志: logs/2025-07/app.log
2025-07-22 17:04:36 - system - INFO - 🔧 API日志: logs/2025-07/api_server.log
2025-07-22 17:04:36 - system - INFO - 🗂️ 保留天数: 7 天
2025-07-22 17:04:36 - system - INFO - ==================================================
2025-07-22 17:04:39 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-22 17:04:39 - root - WARNING - SQLite检查点不可用，将仅使用内存检查点
2025-07-22 17:04:39 - src.utils.task_storage - INFO - 数据库初始化成功
2025-07-22 17:04:39 - markdown_storage - INFO - Markdown存储管理器初始化完成
2025-07-22 17:04:39 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-22 17:04:39 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-22 17:04:39 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-22 17:04:40 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-22 17:04:40 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-22 17:04:40 - WeaviateVectorDatabase - INFO - ✅ Weaviate连接成功: http://localhost:8080 (gRPC: 50051)
2025-07-22 17:04:40 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/schema/AnalyDesignDocuments "HTTP/1.1 200 OK"
2025-07-22 17:04:40 - WeaviateVectorDatabase - INFO - ✅ Weaviate集合已存在: AnalyDesignDocuments
2025-07-22 17:04:40 - AnalysisServiceManager - INFO - 初始化向量数据库: weaviate
2025-07-22 17:04:40 - sentence_transformers.SentenceTransformer - INFO - Use pytorch device_name: mps
2025-07-22 17:04:40 - sentence_transformers.SentenceTransformer - INFO - Load pretrained SentenceTransformer: BAAI/bge-large-zh
2025-07-22 17:04:49 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-22 17:04:51 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-22 17:04:51 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-22 17:04:51 - src.utils.weaviate_helper - INFO - 成功连接到 Weaviate: localhost:8080
2025-07-22 17:04:51 - AnalysisServiceManager - INFO - 分析服务管理器初始化完成
2025-07-22 17:04:51 - src.utils.enhanced_analyzer - INFO - 增强分析器初始化完成
2025-07-22 17:04:51 - werkzeug - WARNING -  * Debugger is active!
2025-07-22 17:04:51 - werkzeug - INFO -  * Debugger PIN: 686-644-562
2025-07-22 17:06:32 - werkzeug - INFO -  * Detected change in '/Users/renyu/Documents/ai_project/document_analyzer/src/corder_integration/code_generator/function_calling_code_generator.py', reloading
2025-07-22 17:06:32 - werkzeug - INFO -  * Restarting with stat
2025-07-22 17:06:32 - system - INFO - ==================================================
2025-07-22 17:06:32 - system - INFO - 🚀 智能分析系统日志系统初始化完成
2025-07-22 17:06:32 - system - INFO - 📁 日志根目录: /Users/renyu/Documents/ai_project/document_analyzer/logs
2025-07-22 17:06:32 - system - INFO - 📊 日志级别: INFO
2025-07-22 17:06:32 - system - INFO - 📅 按日期轮转: 每天午夜自动轮转
2025-07-22 17:06:32 - system - INFO - 📂 按月分目录: logs/YYYY-MM/
2025-07-22 17:06:32 - system - INFO - 📝 主日志: logs/2025-07/app.log
2025-07-22 17:06:32 - system - INFO - 🔧 API日志: logs/2025-07/api_server.log
2025-07-22 17:06:32 - system - INFO - 🗂️ 保留天数: 7 天
2025-07-22 17:06:32 - system - INFO - ==================================================
2025-07-22 17:06:35 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-22 17:06:35 - root - WARNING - SQLite检查点不可用，将仅使用内存检查点
2025-07-22 17:06:35 - src.utils.task_storage - INFO - 数据库初始化成功
2025-07-22 17:06:35 - markdown_storage - INFO - Markdown存储管理器初始化完成
2025-07-22 17:06:35 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-22 17:06:35 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-22 17:06:36 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-22 17:06:36 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-22 17:06:36 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-22 17:06:36 - WeaviateVectorDatabase - INFO - ✅ Weaviate连接成功: http://localhost:8080 (gRPC: 50051)
2025-07-22 17:06:36 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/schema/AnalyDesignDocuments "HTTP/1.1 200 OK"
2025-07-22 17:06:36 - WeaviateVectorDatabase - INFO - ✅ Weaviate集合已存在: AnalyDesignDocuments
2025-07-22 17:06:36 - AnalysisServiceManager - INFO - 初始化向量数据库: weaviate
2025-07-22 17:06:36 - sentence_transformers.SentenceTransformer - INFO - Use pytorch device_name: mps
2025-07-22 17:06:36 - sentence_transformers.SentenceTransformer - INFO - Load pretrained SentenceTransformer: BAAI/bge-large-zh
2025-07-22 17:06:44 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-22 17:06:45 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-22 17:06:45 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-22 17:06:45 - src.utils.weaviate_helper - INFO - 成功连接到 Weaviate: localhost:8080
2025-07-22 17:06:45 - AnalysisServiceManager - INFO - 分析服务管理器初始化完成
2025-07-22 17:06:45 - src.utils.enhanced_analyzer - INFO - 增强分析器初始化完成
2025-07-22 17:06:45 - werkzeug - WARNING -  * Debugger is active!
2025-07-22 17:06:45 - werkzeug - INFO -  * Debugger PIN: 686-644-562
2025-07-22 17:09:19 - werkzeug - INFO -  * Detected change in '/Users/renyu/Documents/ai_project/document_analyzer/src/corder_integration/code_generator/function_calling_code_generator.py', reloading
2025-07-22 17:09:19 - werkzeug - INFO -  * Restarting with stat
2025-07-22 17:09:19 - system - INFO - ==================================================
2025-07-22 17:09:19 - system - INFO - 🚀 智能分析系统日志系统初始化完成
2025-07-22 17:09:19 - system - INFO - 📁 日志根目录: /Users/renyu/Documents/ai_project/document_analyzer/logs
2025-07-22 17:09:19 - system - INFO - 📊 日志级别: INFO
2025-07-22 17:09:19 - system - INFO - 📅 按日期轮转: 每天午夜自动轮转
2025-07-22 17:09:19 - system - INFO - 📂 按月分目录: logs/YYYY-MM/
2025-07-22 17:09:19 - system - INFO - 📝 主日志: logs/2025-07/app.log
2025-07-22 17:09:19 - system - INFO - 🔧 API日志: logs/2025-07/api_server.log
2025-07-22 17:09:19 - system - INFO - 🗂️ 保留天数: 7 天
2025-07-22 17:09:19 - system - INFO - ==================================================
2025-07-22 17:09:22 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-22 17:09:22 - root - WARNING - SQLite检查点不可用，将仅使用内存检查点
2025-07-22 17:09:22 - src.utils.task_storage - INFO - 数据库初始化成功
2025-07-22 17:09:22 - markdown_storage - INFO - Markdown存储管理器初始化完成
2025-07-22 17:09:22 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-22 17:09:22 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-22 17:09:22 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-22 17:09:23 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-22 17:09:23 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-22 17:09:23 - WeaviateVectorDatabase - INFO - ✅ Weaviate连接成功: http://localhost:8080 (gRPC: 50051)
2025-07-22 17:09:23 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/schema/AnalyDesignDocuments "HTTP/1.1 200 OK"
2025-07-22 17:09:23 - WeaviateVectorDatabase - INFO - ✅ Weaviate集合已存在: AnalyDesignDocuments
2025-07-22 17:09:23 - AnalysisServiceManager - INFO - 初始化向量数据库: weaviate
2025-07-22 17:09:23 - sentence_transformers.SentenceTransformer - INFO - Use pytorch device_name: mps
2025-07-22 17:09:23 - sentence_transformers.SentenceTransformer - INFO - Load pretrained SentenceTransformer: BAAI/bge-large-zh
2025-07-22 17:09:31 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-22 17:09:31 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-22 17:09:31 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-22 17:09:31 - src.utils.weaviate_helper - INFO - 成功连接到 Weaviate: localhost:8080
2025-07-22 17:09:31 - AnalysisServiceManager - INFO - 分析服务管理器初始化完成
2025-07-22 17:09:31 - src.utils.enhanced_analyzer - INFO - 增强分析器初始化完成
2025-07-22 17:09:31 - werkzeug - WARNING -  * Debugger is active!
2025-07-22 17:09:31 - werkzeug - INFO -  * Debugger PIN: 686-644-562
2025-07-22 17:10:28 - werkzeug - INFO -  * Detected change in '/Users/renyu/Documents/ai_project/document_analyzer/src/corder_integration/code_generator/function_calling_code_generator.py', reloading
2025-07-22 17:10:28 - werkzeug - INFO -  * Restarting with stat
2025-07-22 17:10:29 - system - INFO - ==================================================
2025-07-22 17:10:29 - system - INFO - 🚀 智能分析系统日志系统初始化完成
2025-07-22 17:10:29 - system - INFO - 📁 日志根目录: /Users/renyu/Documents/ai_project/document_analyzer/logs
2025-07-22 17:10:29 - system - INFO - 📊 日志级别: INFO
2025-07-22 17:10:29 - system - INFO - 📅 按日期轮转: 每天午夜自动轮转
2025-07-22 17:10:29 - system - INFO - 📂 按月分目录: logs/YYYY-MM/
2025-07-22 17:10:29 - system - INFO - 📝 主日志: logs/2025-07/app.log
2025-07-22 17:10:29 - system - INFO - 🔧 API日志: logs/2025-07/api_server.log
2025-07-22 17:10:29 - system - INFO - 🗂️ 保留天数: 7 天
2025-07-22 17:10:29 - system - INFO - ==================================================
2025-07-22 17:10:31 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-22 17:10:31 - root - WARNING - SQLite检查点不可用，将仅使用内存检查点
2025-07-22 17:10:32 - src.utils.task_storage - INFO - 数据库初始化成功
2025-07-22 17:10:32 - markdown_storage - INFO - Markdown存储管理器初始化完成
2025-07-22 17:10:32 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-22 17:10:32 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-22 17:10:32 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-22 17:10:32 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-22 17:10:33 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-22 17:10:33 - WeaviateVectorDatabase - INFO - ✅ Weaviate连接成功: http://localhost:8080 (gRPC: 50051)
2025-07-22 17:10:33 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/schema/AnalyDesignDocuments "HTTP/1.1 200 OK"
2025-07-22 17:10:33 - WeaviateVectorDatabase - INFO - ✅ Weaviate集合已存在: AnalyDesignDocuments
2025-07-22 17:10:33 - AnalysisServiceManager - INFO - 初始化向量数据库: weaviate
2025-07-22 17:10:33 - sentence_transformers.SentenceTransformer - INFO - Use pytorch device_name: mps
2025-07-22 17:10:33 - sentence_transformers.SentenceTransformer - INFO - Load pretrained SentenceTransformer: BAAI/bge-large-zh
2025-07-22 17:10:41 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-22 17:10:41 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-22 17:10:42 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-22 17:10:42 - src.utils.weaviate_helper - INFO - 成功连接到 Weaviate: localhost:8080
2025-07-22 17:10:42 - AnalysisServiceManager - INFO - 分析服务管理器初始化完成
2025-07-22 17:10:42 - src.utils.enhanced_analyzer - INFO - 增强分析器初始化完成
2025-07-22 17:10:42 - werkzeug - WARNING -  * Debugger is active!
2025-07-22 17:10:42 - werkzeug - INFO -  * Debugger PIN: 686-644-562
2025-07-22 17:12:19 - werkzeug - INFO -  * Detected change in '/Users/renyu/Documents/ai_project/document_analyzer/src/corder_integration/code_generator/function_calling_code_generator.py', reloading
2025-07-22 17:12:19 - werkzeug - INFO -  * Restarting with stat
2025-07-22 17:12:19 - system - INFO - ==================================================
2025-07-22 17:12:19 - system - INFO - 🚀 智能分析系统日志系统初始化完成
2025-07-22 17:12:19 - system - INFO - 📁 日志根目录: /Users/renyu/Documents/ai_project/document_analyzer/logs
2025-07-22 17:12:19 - system - INFO - 📊 日志级别: INFO
2025-07-22 17:12:19 - system - INFO - 📅 按日期轮转: 每天午夜自动轮转
2025-07-22 17:12:19 - system - INFO - 📂 按月分目录: logs/YYYY-MM/
2025-07-22 17:12:19 - system - INFO - 📝 主日志: logs/2025-07/app.log
2025-07-22 17:12:19 - system - INFO - 🔧 API日志: logs/2025-07/api_server.log
2025-07-22 17:12:19 - system - INFO - 🗂️ 保留天数: 7 天
2025-07-22 17:12:19 - system - INFO - ==================================================
2025-07-22 17:12:22 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-22 17:12:23 - root - WARNING - SQLite检查点不可用，将仅使用内存检查点
2025-07-22 17:12:23 - src.utils.task_storage - INFO - 数据库初始化成功
2025-07-22 17:12:23 - markdown_storage - INFO - Markdown存储管理器初始化完成
2025-07-22 17:12:23 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-22 17:12:23 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-22 17:12:23 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-22 17:12:23 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-22 17:12:23 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-22 17:12:23 - WeaviateVectorDatabase - INFO - ✅ Weaviate连接成功: http://localhost:8080 (gRPC: 50051)
2025-07-22 17:12:23 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/schema/AnalyDesignDocuments "HTTP/1.1 200 OK"
2025-07-22 17:12:23 - WeaviateVectorDatabase - INFO - ✅ Weaviate集合已存在: AnalyDesignDocuments
2025-07-22 17:12:23 - AnalysisServiceManager - INFO - 初始化向量数据库: weaviate
2025-07-22 17:12:23 - sentence_transformers.SentenceTransformer - INFO - Use pytorch device_name: mps
2025-07-22 17:12:23 - sentence_transformers.SentenceTransformer - INFO - Load pretrained SentenceTransformer: BAAI/bge-large-zh
2025-07-22 17:12:30 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-22 17:12:31 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-22 17:12:31 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-22 17:12:31 - src.utils.weaviate_helper - INFO - 成功连接到 Weaviate: localhost:8080
2025-07-22 17:12:31 - AnalysisServiceManager - INFO - 分析服务管理器初始化完成
2025-07-22 17:12:31 - src.utils.enhanced_analyzer - INFO - 增强分析器初始化完成
2025-07-22 17:12:31 - werkzeug - WARNING -  * Debugger is active!
2025-07-22 17:12:31 - werkzeug - INFO -  * Debugger PIN: 686-644-562
2025-07-22 17:13:42 - werkzeug - INFO -  * Detected change in '/Users/renyu/Documents/ai_project/document_analyzer/src/corder_integration/code_generator/function_calling_code_generator.py', reloading
2025-07-22 17:13:42 - werkzeug - INFO -  * Restarting with stat
2025-07-22 17:13:43 - system - INFO - ==================================================
2025-07-22 17:13:43 - system - INFO - 🚀 智能分析系统日志系统初始化完成
2025-07-22 17:13:43 - system - INFO - 📁 日志根目录: /Users/renyu/Documents/ai_project/document_analyzer/logs
2025-07-22 17:13:43 - system - INFO - 📊 日志级别: INFO
2025-07-22 17:13:43 - system - INFO - 📅 按日期轮转: 每天午夜自动轮转
2025-07-22 17:13:43 - system - INFO - 📂 按月分目录: logs/YYYY-MM/
2025-07-22 17:13:43 - system - INFO - 📝 主日志: logs/2025-07/app.log
2025-07-22 17:13:43 - system - INFO - 🔧 API日志: logs/2025-07/api_server.log
2025-07-22 17:13:43 - system - INFO - 🗂️ 保留天数: 7 天
2025-07-22 17:13:43 - system - INFO - ==================================================
2025-07-22 17:13:45 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-22 17:13:46 - root - WARNING - SQLite检查点不可用，将仅使用内存检查点
2025-07-22 17:13:46 - src.utils.task_storage - INFO - 数据库初始化成功
2025-07-22 17:13:46 - markdown_storage - INFO - Markdown存储管理器初始化完成
2025-07-22 17:13:46 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-22 17:13:46 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-22 17:13:46 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-22 17:13:46 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-22 17:13:46 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-22 17:13:46 - WeaviateVectorDatabase - INFO - ✅ Weaviate连接成功: http://localhost:8080 (gRPC: 50051)
2025-07-22 17:13:46 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/schema/AnalyDesignDocuments "HTTP/1.1 200 OK"
2025-07-22 17:13:46 - WeaviateVectorDatabase - INFO - ✅ Weaviate集合已存在: AnalyDesignDocuments
2025-07-22 17:13:47 - AnalysisServiceManager - INFO - 初始化向量数据库: weaviate
2025-07-22 17:13:47 - sentence_transformers.SentenceTransformer - INFO - Use pytorch device_name: mps
2025-07-22 17:13:47 - sentence_transformers.SentenceTransformer - INFO - Load pretrained SentenceTransformer: BAAI/bge-large-zh
2025-07-22 17:13:53 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-22 17:13:55 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-22 17:13:55 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-22 17:13:55 - src.utils.weaviate_helper - INFO - 成功连接到 Weaviate: localhost:8080
2025-07-22 17:13:55 - AnalysisServiceManager - INFO - 分析服务管理器初始化完成
2025-07-22 17:13:55 - src.utils.enhanced_analyzer - INFO - 增强分析器初始化完成
2025-07-22 17:13:55 - werkzeug - WARNING -  * Debugger is active!
2025-07-22 17:13:55 - werkzeug - INFO -  * Debugger PIN: 686-644-562
