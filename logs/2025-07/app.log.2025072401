2025-07-24 10:40:13 - system - INFO - ==================================================
2025-07-24 10:40:13 - system - INFO - 🚀 智能分析系统日志系统初始化完成
2025-07-24 10:40:13 - system - INFO - 📁 日志根目录: /Users/renyu/Documents/ai_project/document_analyzer/logs
2025-07-24 10:40:13 - system - INFO - 📊 日志级别: INFO
2025-07-24 10:40:13 - system - INFO - 📅 按日期轮转: 每天午夜自动轮转
2025-07-24 10:40:13 - system - INFO - 📂 按月分目录: logs/YYYY-MM/
2025-07-24 10:40:13 - system - INFO - 📝 主日志: logs/2025-07/app.log
2025-07-24 10:40:13 - system - INFO - 🔧 API日志: logs/2025-07/api_server.log
2025-07-24 10:40:13 - system - INFO - 🗂️ 保留天数: 7 天
2025-07-24 10:40:13 - system - INFO - ==================================================
2025-07-24 10:40:15 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-24 10:40:15 - src.corder_integration.langgraph.nodes.task_simple_splitting_node - INFO - ✅ 成功加载配置文件: config.yaml
2025-07-24 10:40:15 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-24 10:40:15 - src.corder_integration.langgraph.nodes.task_simple_splitting_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250724094351-pnjf4(编码智能体专用)
2025-07-24 10:40:15 - src.corder_integration.langgraph.nodes.task_simple_splitting_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-24 10:40:15 - src.utils.task_storage - INFO - 数据库初始化成功
2025-07-24 10:40:15 - markdown_storage - INFO - Markdown存储管理器初始化完成
2025-07-24 10:40:15 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-24 10:40:15 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-24 10:40:15 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-24 10:40:16 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-24 10:40:16 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-24 10:40:16 - WeaviateVectorDatabase - INFO - ✅ Weaviate连接成功: http://localhost:8080 (gRPC: 50051)
2025-07-24 10:40:16 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/schema/AnalyDesignDocuments "HTTP/1.1 200 OK"
2025-07-24 10:40:16 - WeaviateVectorDatabase - INFO - ✅ Weaviate集合已存在: AnalyDesignDocuments
2025-07-24 10:40:16 - AnalysisServiceManager - INFO - 初始化向量数据库: weaviate
2025-07-24 10:40:16 - sentence_transformers.SentenceTransformer - INFO - Use pytorch device_name: mps
2025-07-24 10:40:16 - sentence_transformers.SentenceTransformer - INFO - Load pretrained SentenceTransformer: BAAI/bge-large-zh
2025-07-24 10:40:24 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-24 10:40:25 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-24 10:40:25 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-24 10:40:25 - src.utils.weaviate_helper - INFO - 成功连接到 Weaviate: localhost:8080
2025-07-24 10:40:25 - AnalysisServiceManager - INFO - 分析服务管理器初始化完成
2025-07-24 10:40:25 - src.utils.enhanced_analyzer - INFO - 增强分析器初始化完成
2025-07-24 10:40:30 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:8082
 * Running on http://26.26.26.1:8082
2025-07-24 10:40:30 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-07-24 10:40:30 - werkzeug - INFO -  * Restarting with stat
2025-07-24 10:40:30 - system - INFO - ==================================================
2025-07-24 10:40:30 - system - INFO - 🚀 智能分析系统日志系统初始化完成
2025-07-24 10:40:30 - system - INFO - 📁 日志根目录: /Users/renyu/Documents/ai_project/document_analyzer/logs
2025-07-24 10:40:30 - system - INFO - 📊 日志级别: INFO
2025-07-24 10:40:30 - system - INFO - 📅 按日期轮转: 每天午夜自动轮转
2025-07-24 10:40:30 - system - INFO - 📂 按月分目录: logs/YYYY-MM/
2025-07-24 10:40:30 - system - INFO - 📝 主日志: logs/2025-07/app.log
2025-07-24 10:40:30 - system - INFO - 🔧 API日志: logs/2025-07/api_server.log
2025-07-24 10:40:30 - system - INFO - 🗂️ 保留天数: 7 天
2025-07-24 10:40:30 - system - INFO - ==================================================
2025-07-24 10:40:33 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-24 10:40:33 - src.corder_integration.langgraph.nodes.task_simple_splitting_node - INFO - ✅ 成功加载配置文件: config.yaml
2025-07-24 10:40:33 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-24 10:40:33 - src.corder_integration.langgraph.nodes.task_simple_splitting_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250724094351-pnjf4(编码智能体专用)
2025-07-24 10:40:33 - src.corder_integration.langgraph.nodes.task_simple_splitting_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-24 10:40:33 - src.utils.task_storage - INFO - 数据库初始化成功
2025-07-24 10:40:33 - markdown_storage - INFO - Markdown存储管理器初始化完成
2025-07-24 10:40:33 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-24 10:40:33 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-24 10:40:33 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-24 10:40:34 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-24 10:40:34 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-24 10:40:34 - WeaviateVectorDatabase - INFO - ✅ Weaviate连接成功: http://localhost:8080 (gRPC: 50051)
2025-07-24 10:40:34 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/schema/AnalyDesignDocuments "HTTP/1.1 200 OK"
2025-07-24 10:40:34 - WeaviateVectorDatabase - INFO - ✅ Weaviate集合已存在: AnalyDesignDocuments
2025-07-24 10:40:34 - AnalysisServiceManager - INFO - 初始化向量数据库: weaviate
2025-07-24 10:40:34 - sentence_transformers.SentenceTransformer - INFO - Use pytorch device_name: mps
2025-07-24 10:40:34 - sentence_transformers.SentenceTransformer - INFO - Load pretrained SentenceTransformer: BAAI/bge-large-zh
2025-07-24 10:40:43 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-24 10:40:44 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-24 10:40:44 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-24 10:40:44 - src.utils.weaviate_helper - INFO - 成功连接到 Weaviate: localhost:8080
2025-07-24 10:40:44 - AnalysisServiceManager - INFO - 分析服务管理器初始化完成
2025-07-24 10:40:44 - src.utils.enhanced_analyzer - INFO - 增强分析器初始化完成
2025-07-24 10:40:44 - werkzeug - WARNING -  * Debugger is active!
2025-07-24 10:40:44 - werkzeug - INFO -  * Debugger PIN: 587-510-452
2025-07-24 10:40:44 - src.apis.coder_agent_api - INFO - 开始处理文档: 链数中建一局_1753324841
2025-07-24 10:40:44 - src.apis.coder_agent_api - INFO - 项目唯一标识: 1231000003
2025-07-24 10:40:44 - src.apis.coder_agent_api - INFO - 文档长度: 7417 字符
2025-07-24 10:40:44 - src.apis.coder_agent_api - INFO - 使用LangGraph: True
2025-07-24 10:40:44 - src.apis.coder_agent_api - INFO - 代码输出路径: /Users/renyu/Documents/create_project
2025-07-24 10:40:44 - src.apis.coder_agent_api - INFO - 使用LangGraph工作流处理项目: 链数中建一局_1753324841
2025-07-24 10:40:44 - src.corder_integration.langgraph.workflow_orchestrator - INFO - 生成目标分支名称: 链数中建一局_1753324841 -> D_20250724_链数中建一局_1753324841
2025-07-24 10:40:44 - src.corder_integration.langgraph.workflow_orchestrator - INFO - 开始执行编码工作流: 链数中建一局_1753324841 -> /Users/renyu/Documents/create_project
2025-07-24 10:40:44 - src.corder_integration.langgraph.nodes.task_simple_splitting_node - INFO - 🚀 简化版任务拆分节点开始执行...
2025-07-24 10:40:44 - src.corder_integration.langgraph.nodes.task_simple_splitting_node - INFO - 🚀 开始简化版任务拆分
2025-07-24 10:40:44 - src.corder_integration.langgraph.nodes.task_simple_splitting_node - INFO - 📄 设计文档长度: 7416
2025-07-24 10:40:44 - src.corder_integration.langgraph.nodes.task_simple_splitting_node - INFO - 📋 项目名称: 链数中建一局_1753324841
2025-07-24 10:40:44 - src.corder_integration.langgraph.nodes.task_simple_splitting_node - INFO - 🏷️ 项目标识: 1231000003
2025-07-24 10:40:44 - src.corder_integration.langgraph.nodes.task_simple_splitting_node - INFO - 🎯 使用Jinja2模板生成任务...
2025-07-24 10:40:44 - src.corder_integration.langgraph.nodes.task_simple_splitting_node - INFO - 📝 渲染后的提示词长度: 22403
2025-07-24 10:40:44 - src.corder_integration.langgraph.nodes.task_simple_splitting_node - INFO - 📄 提示词内容:
你是资深任务管理专家，基于设计文档生成具体的开发任务。

详细设计文档：设计文档 - 一局对接链数优化V0.1
1. 系统架构设计
1.1 项目介绍
一局对接链数的项目上线后，核心企业反馈，希望就已推送至平台的数据，在核心企业内部系统内修改部分信息（如额度信息）后，使用原业务编号再次推送至平台。就目前的接口校验逻辑，相同业务编号的业务数据不可重复推送。因而，需要结合核心企业需求，对接口的校验逻辑进行调整。
建设目标及路线。调整接口校验逻辑，兼容核心企业重推数据的场景。
1.2 功能需求说明
1.2.1 链数额度功能调整
调整说明:本期，对原"链数额度"功能做如下调整：
- 功能名称由"链数额度"变更为"额度管理"；
- 页面右上方新增"组织单元额度"按钮，当且仅当当前登录企业为多组织企业时展示该按钮。用户点击"组织单元额度"按钮，则跳转至"组织单元额度"列表页。
- 列表新增字段"额度类型"，置于"额度名称"之后，若为链数额度则取值为"链数额度"。
1.2.2 新增组织单元额度功能
调整说明:本期在核心企业侧链数额度功能下，新增"组织单元额度"列表页。支持用户查询当前登录企业下的具体组织单元的链数额度、云信额度明细。
a.筛选字段：
序号	字段名	类型格式	长度	默认值	必填	规则
1	组织单元名称	文本输入框	-	-	-	模糊搜索
2	额度名称	文本输入框	-	-	-	模糊搜索
3	额度类型	下拉列表	-	链数额度	-	下拉选项：链数额度、云信额度、全部
b.汇总字段：
序号	字段名	类型格式	规则
1	总额度（元）	数值	满足筛选条件的列表数据的“已分配额度（元）”之和
2	已用额度（元）	数值	满足筛选条件的列表数据的“已用额度（元）”之和
3	可用额度（元）	数值	满足筛选条件的列表数据的“可用额度（元）”之和
备注：筛选条件更新后，汇总值需要同步更新计算。
c.列表字段：
序号	字段名	类型格式	规则
1	组织单元名称	字符串	无
2	额度名称	字符串	无
3	额度类型	字符串	无
4	已分配额度（元）	数值	无
5	已用额度（元）	数值	无
6	可用额度（元）	数值	无
备注：列表默认按照组织单元名称为主要关键字、额度类型为次要关键字降序排列。

1.3 总体架构
采用微服务架构模式，实现松耦合、高可扩展的系统设计：
- 涉及2个后端服务：
1. 用户服务：zqyl-user-center-service
2. 确权开立服务：crcl-open

- 涉及2个数据库：
1. 用户数据库：MySQL 
2. 缓存：Redis

1.4 技术栈选型
- 后端框架：Spring Boot 2.7.x + Spring Cloud 2021.x
- 数据访问：MyBatis Plus 3.5.x
- 数据库：MySQL 8.0
- 缓存：Redis 6.0
- 消息队列：RabbitMQ 3.8
- 服务发现：Nacos
- 配置中心：Nacos
- 后端分页：pageHelper
- 部署：将代码提交到git分支即可

2. 服务设计

2.1 用户服务 (zqyl-user-center-service)
职责：用户管理、权限控制、角色管理

2.1.1 核心模块：
- 组织单元管理

2.1.2 API设计：
2.1.2.1 新增接口：
uri : GET /general/multiorgManage/queryCompanyUnitList    
method: GET
description:查询企业组织单元列表
入参示例：
{
  "unitCode": "sdf1",  #组织单元编号
  "openStatus": 1 ,    #组织单元状态 1：正常；0：禁用 默认全部
  "unitList" :[1,2,234]  #组织单元id 必传 
}

返参示例：
{
  "data": [
    {
      "unitId" : 234234 ,     #组织单元id 必传 
      "unitTypeDicType" : 1 , #组织单元类型 1：开立，2：支付
      "unitTypeId" : 12   ,   #组织单元类型表id 
      "openStatus" : 1   ,    #组织单元状态  1：正常；0：禁用 默认全部
      "unitCode" : "sdfsdfsd",#组织编号
      "unitName" : "测试单元" #组织单元名称
    }
  ]
}

2.1.3 数据库表设计：
CREATE TABLE t_cust_multiorg_unit(
  id bigint(20) NOT NULL COMMENT '主键id...
2025-07-24 10:42:26 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 10:42:26 - src.corder_integration.langgraph.nodes.task_simple_splitting_node - INFO - ✅ LLM响应接收完成，长度: 12312
2025-07-24 10:42:26 - src.corder_integration.langgraph.nodes.task_simple_splitting_node - INFO - 📄 LLM完整响应内容:
```json
{
  "tasks": [
    {
      "task_id": "task_001",
      "project_task_id": "1231000003",
      "service_name": "系统",
      "task_type": "git_extraction",
      "priority": 1,
      "dependencies": [],
      "estimated_duration": "5分钟",
      "description": "从设计文档提取GitLab仓库地址",
      "implementation_details": "解析设计文档，提取用户服务 http://localhost:30000/ls/zqyl-user-center-service.git 和确权开立服务 http://localhost:30000/ls/crcl-open.git 仓库地址",
      "deliverables": ["GitLab仓库地址清单", "仓库访问验证报告"],
      "completion_criteria": "成功提取并验证两个GitLab仓库地址可访问性",
      "parameters": {
        "repositories": ["zqyl-user-center-service", "crcl-open"]
      }
    },
    {
      "task_id": "task_002",
      "project_task_id": "1231000003",
      "service_name": "用户服务",
      "task_type": "git_clone",
      "priority": 2,
      "dependencies": ["task_001"],
      "estimated_duration": "10分钟",
      "description": "下载用户服务代码到/Users/renyu/Documents/create_project/链数中建一局_1753324841/zqyl-user-center-service",
      "implementation_details": "使用git clone命令下载用户服务代码到指定目录，确保项目结构完整可编译",
      "deliverables": ["用户服务源码目录"],
      "completion_criteria": "代码下载完成，项目目录存在且包含pom.xml文件",
      "parameters": {
        "git_url": "http://localhost:30000/ls/zqyl-user-center-service.git",
        "local_path": "/Users/renyu/Documents/create_project/链数中建一局_1753324841/zqyl-user-center-service"
      }
    },
    {
      "task_id": "task_003",
      "project_task_id": "1231000003",
      "service_name": "确权开立服务",
      "task_type": "git_clone",
      "priority": 2,
      "dependencies": ["task_001"],
      "estimated_duration": "10分钟",
      "description": "下载确权开立服务代码到/Users/renyu/Documents/create_project/链数中建一局_1753324841/crcl-open",
      "implementation_details": "使用git clone命令下载确权开立服务代码到指定目录，确保项目结构完整可编译",
      "deliverables": ["确权开立服务源码目录"],
      "completion_criteria": "代码下载完成，项目目录存在且包含pom.xml文件",
      "parameters": {
        "git_url": "http://localhost:30000/ls/crcl-open.git",
        "local_path": "/Users/renyu/Documents/create_project/链数中建一局_1753324841/crcl-open"
      }
    },
    {
      "task_id": "task_004",
      "project_task_id": "1231000003",
      "service_name": "用户服务",
      "task_type": "code_analysis",
      "priority": 3,
      "dependencies": ["task_002"],
      "estimated_duration": "20分钟",
      "description": "分析用户服务代码结构，确定MultiorgManageController添加位置",
      "implementation_details": "分析项目package结构和controller层，找到或创建MultiorgManageController类的最佳位置",
      "deliverables": ["代码结构从Controller层开始到数据获取的完整路径"],
      "completion_criteria": "确定MultiorgManageController的包路径和文件位置，明确依赖的Service层结构",
      "parameters": {
        "project_path": "/Users/renyu/Documents/create_project/链数中建一局_1753324841/zqyl-user-center-service",
        "target_controller": "MultiorgManageController",
        "target_api": "/general/multiorgManage/queryCompanyUnitList"
      }
    },
    {
      "task_id": "task_005",
      "project_task_id": "1231000003",
      "service_name": "确权开立服务",
      "task_type": "code_analysis",
      "priority": 3,
      "dependencies": ["task_003"],
      "estimated_duration": "20分钟",
      "description": "分析确权开立服务代码结构，确定LsLimitController添加位置",
      "implementation_details": "分析项目package结构和controller层，找到或创建LsLimitController类的最佳位置，支持两个接口开发",
      "deliverables": ["代码结构从Controller层开始到数据获取的完整路径", "Feign客户端配置方案"],
      "completion_criteria": "确定LsLimitController的包路径和文件位置，明确服务间调用的Feign配置",
      "parameters": {
        "project_path": "/Users/renyu/Documents/create_project/链数中建一局_1753324841/crcl-open",
        "target_controller": "LsLimitController",
        "target_apis": ["/crcl-open-api/lsLimit/listUnitLimitByCompanyId", "/crcl-open-api/lsLimit/listUnitLimitByCompanyIdExport"]
      }
    },
    {
      "task_id": "task_006",
      "project_task_id": "1231000003",
      "service_name": "用户服务",
      "task_type": "config",
      "priority": 4,
      "dependencies": ["task_004"],
      "estimated_duration": "15分钟",
      "description": "配置用户服务数据库连接：jdbc:mysql://localhost:6446/dbwebappdb",
      "implementation_details": "修改application.yml文件，配置数据库连接信息包括URL、用户名密码和连接池设置",
      "deliverables": ["数据库配置文件", "连接测试报告"],
      "completion_criteria": "application.yml文件已更新，数据库连接配置正确且可连通",
      "parameters": {
        "config_file": "/Users/renyu/Documents/create_project/链数中建一局_1753324841/zqyl-user-center-service/src/main/resources/application.yml",
        "database_url": "jdbc:mysql://localhost:6446/dbwebappdb?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC&characterEncoding=utf8&useUnicode=true",
        "username": "dbwebapp",
        "password": "dbwebapp"
      }
    },
    {
      "task_id": "task_007",
      "project_task_id": "1231000003",
      "service_name": "用户服务",
      "task_type": "database",
      "priority": 5,
      "dependencies": ["task_006"],
      "estimated_duration": "15分钟",
      "description": "创建t_cust_multiorg_unit表，包含id,company_id,unit_code,unit_name等字段",
      "implementation_details": "编写建表SQL脚本，定义主键、索引和字段约束，创建对应的Entity和Mapper文件",
      "deliverables": ["建表SQL脚本", "Entity实体类", "Mapper接口文件"],
      "completion_criteria": "表结构创建成功，Entity和Mapper文件可正常编译，支持基本CRUD操作",
      "parameters": {
        "table_name": "t_cust_multiorg_unit",
        "sql_location": "src/main/resources/sql/t_cust_multiorg_unit.sql"
      }
    },
    {
      "task_id": "task_008",
      "project_task_id": "1231000003",
      "service_name": "用户服务",
      "task_type": "api",
      "priority": 6,
      "dependencies": ["task_007"],
      "estimated_duration": "60分钟",
      "description": "实现GET /general/multiorgManage/queryCompanyUnitList接口",
      "implementation_details": "在MultiorgManageController中实现查询接口，支持条件查询和分页，返回规定的字段格式",
      "deliverables": ["MultiorgManageController类", "Service业务逻辑层", "接口文档"],
      "completion_criteria": "接口可正常访问，返回数据格式符合规范，支持条件查询和分页功能",
      "parameters": {
        "project_path": "/Users/renyu/Documents/create_project/链数中建一局_1753324841/zqyl-user-center-service",
        "api_path": "/general/multiorgManage/queryCompanyUnitList",
        "http_method": "GET",
        "content_type": "application/json",
        "request_params": {
          "unitCode": "组织单元编号(可选)",
          "openStatus": "组织单元状态 1：正常；0：禁用(可选)",
          "unitList": "组织单元id列表(可选)"
        },
        "response_params": {
          "unitId": "组织单元id",
          "unitTypeDicType": "组织单元类型 1：开立，2：支付",
          "unitTypeId": "组织单元类型表id",
          "openStatus": "组织单元状态 1：正常；0：禁用",
          "unitCode": "组织编号",
          "unitName": "组织单元名称"
        },
        "business_logic": "根据查询条件查询组织单元信息，支持按编码、状态等条件筛选",
        "data_source": "t_cust_multiorg_unit表",
        "validation_rules": {
          "unitCode": "长度不超过50字符",
          "openStatus": "取值范围0-1"
        }
      }
    },
    {
      "task_id": "task_009",
      "project_task_id": "1231000003",
      "service_name": "确权开立服务",
      "task_type": "api",
      "priority": 7,
      "dependencies": ["task_008"],
      "estimated_duration": "90分钟",
      "description": "实现GET /crcl-open-api/lsLimit/listUnitLimitByCompanyId接口，调用用户服务",
      "implementation_details": "在LsLimitController中实现额度查询接口，配置Feign客户端调用用户服务接口获取组织单元信息，采用pagehelper进行分页，需要调用zqyl-user-center-service服务的/queryCompanyUnitList接口获取组织单元详细信息",
      "deliverables": ["LsLimitController类", "Feign客户端配置", "业务逻辑层"],
      "completion_criteria": "接口可正常访问，能成功调用用户服务，返回额度数据格式正确",
      "parameters": {
        "project_path": "/Users/renyu/Documents/create_project/链数中建一局_1753324841/crcl-open",
        "api_path": "/crcl-open-api/lsLimit/listUnitLimitByCompanyId",
        "http_method": "GET",
        "content_type": "application/json",
        "request_params": {
          "gwCompanyId": "当前登录企业id(必填)",
          "unitName": "组织单元名称(模糊搜索)(可选)",
          "limitSource": "额度名称(模糊搜索)(可选)",
          "bizType": "10：云信额度，80：链数额度(默认)(可选)",
          "page": "页码(必填)",
          "pageRow": "每页记录数(必填)"
        },
        "response_params": {
          "totalLimitAmt": "总额度",
          "usedLimitAmt": "已用额度",
          "usableLimitAmt": "可用额度",
          "unitLimitListDetail": "额度信息列表"
        },
        "business_logic": "根据公司ID和筛选条件查询组织单元额度信息，调用用户服务获取组织单元详细信息，采用pagehelper进行分页，需要调用zqyl-user-center-service服务的/queryCompanyUnitList接口获取组织单元详细信息",
        "data_source": "本地额度表 + 用户服务接口",
        "validation_rules": {
          "gwCompanyId": "必填，数值类型",
          "page": "正整数，默认1",
          "pageRow": "正整数，范围1-100"
        }
      }
    },
    {
      "task_id": "task_010",
      "project_task_id": "1231000003",
      "service_name": "确权开立服务",
      "task_type": "api",
      "priority": 8,
      "dependencies": ["task_009"],
      "estimated_duration": "45分钟",
      "description": "实现GET /crcl-open-api/lsLimit/listUnitLimitByCompanyIdExport导出接口",
      "implementation_details": "在LsLimitController中实现Excel导出接口，复用listUnitLimitByCompanyId的数据逻辑，文件生成在本地目录，采用本地链接形式返回路径，文件类型为Excel列表，文件类型：xlsx，列表头列内容：组织单元名称、额度名称、额度类型、已分配额度（元）、已用额度（元）、可用额度（元），需要调用zqyl-user-center-service服务的/queryCompanyUnitList接口获取组织单元详细信息",
      "deliverables": ["导出接口方法", "Excel工具类", "导出模板文件"],
      "completion_criteria": "接口可正常访问，能成功导出Excel文件，表头和数据格式正确",
      "parameters": {
        "project_path": "/Users/renyu/Documents/create_project/链数中建一局_1753324841/crcl-open",
        "api_path": "/crcl-open-api/lsLimit/listUnitLimitByCompanyIdExport",
        "http_method": "GET",
        "content_type": "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
        "request_params": {
          "gwCompanyId": "当前登录企业id(必填)",
          "unitName": "组织单元名称(模糊搜索)(可选)",
          "limitSource": "额度名称(模糊搜索)(可选)",
          "bizType": "10：云信额度，80：链数额度(默认)(可选)",
          "page": "页码(必填)",
          "pageRow": "每页记录数(必填)"
        },
        "response_params": {
          "flag": "0文件生成失败，1文件生成成功",
          "msg": "flag=0 提示内容",
          "data": "flag=1 文件下载地址"
        },
        "business_logic": "复用listUnitLimitByCompanyId接口的查询逻辑，将结果导出为Excel格式，文件生成在本地目录，采用本地链接形式返回路径，文件类型为Excel列表，文件类型：xlsx，列表头列内容：组织单元名称、额度名称、额度类型、已分配额度（元）、已用额度（元）、可用额度（元），需要调用zqyl-user-center-service服务的/queryCompanyUnitList接口获取组织单元详细信息",
        "data_source": "调用listUnitLimitByCompanyId接口获取数据",
        "validation_rules": {
          "gwCompanyId": "必填，数值类型",
          "page": "正整数，默认1",
          "pageRow": "正整数，范围1-100"
        }
      }
    },
    {
      "task_id": "task_011",
      "project_task_id": "1231000003",
      "service_name": "系统",
      "task_type": "integration_test",
      "priority": 9,
      "dependencies": ["task_008", "task_009", "task_010"],
      "estimated_duration": "30分钟",
      "description": "测试确权开立服务调用用户服务接口的完整流程",
      "implementation_details": "编写集成测试用例，验证服务间调用正确性和数据完整性",
      "deliverables": ["集成测试用例", "测试数据脚本", "测试报告"],
      "completion_criteria": "所有测试用例通过，接口调用链路正常，数据返回格式正确",
      "parameters": {
        "test_scenarios": ["组织单元额度查询测试", "组织单元额度导出测试"],
        "test_data": {"gwCompanyId": 1, "unitName": "测试单元", "bizType": 80}
      }
    },
    {
      "task_id": "task_012",
      "project_task_id": "1231000003",
      "service_name": "系统",
      "task_type": "deployment",
      "priority": 10,
      "dependencies": ["task_011"],
      "estimated_duration": "20分钟",
      "description": "提交代码到GitLab仓库，commit message: feat: 新增组织单元额度管理功能",
      "implementation_details": "执行git add、git commit和git push命令，提交所有新增和修改的代码文件",
      "deliverables": ["Git提交记录", "代码合并报告", "部署文档"],
      "completion_criteria": "代码成功提交到GitLab仓库，commit信息清晰，无冲突",
      "parameters": {
        "repositories": [
          {"path": "/Users/renyu/Documents/create_project/链数中建一局_1753324841/zqyl-user-center-service", "changes": "新增组织单元查询接口"},
          {"path": "/Users/renyu/Documents/create_project/链数中建一局_1753324841/crcl-open", "changes": "新增组织单元额度列表和导出接口"}
        ]
      }
    }
  ],
  "task_summary": {
    "total_tasks": 12,
    "execution_phases": [
      {"phase": "代码管理", "tasks": ["task_001", "task_002", "task_003"]},
      {"phase": "结构分析", "tasks": ["task_004", "task_005"]},
      {"phase": "环境配置", "tasks": ["task_006", "task_007"]},
      {"phase": "接口开发", "tasks": ["task_008", "task_009", "task_010"]},
      {"phase": "测试部署", "tasks": ["task_011", "task_012"]}
    ]
  },
  "summary": "生成任务：GitLab代码下载->结构分析->环境配置->接口开发->测试部署。严格使用设计文档中的真实接口路径和参数，确保先开发用户服务接口，再开发依赖它的确权开立服务接口。"
}
```
2025-07-24 10:42:26 - src.corder_integration.langgraph.nodes.task_simple_splitting_node - INFO - ✅ JSON解析成功，数据类型: <class 'dict'>
2025-07-24 10:42:26 - src.corder_integration.langgraph.nodes.task_simple_splitting_node - INFO - 📋 从JSON中提取的任务数量: 12
2025-07-24 10:42:26 - src.corder_integration.langgraph.nodes.task_simple_splitting_node - INFO - ✅ 已为 12 个任务添加项目标识: 1231000003
2025-07-24 10:42:26 - src.corder_integration.langgraph.nodes.task_simple_splitting_node - INFO - ✅ 任务拆分完成，生成 12 个任务
2025-07-24 10:42:26 - src.corder_integration.langgraph.nodes.task_simple_splitting_node - INFO - 📋 任务 1: git_extraction - 从设计文档提取GitLab仓库地址...
2025-07-24 10:42:26 - src.corder_integration.langgraph.nodes.task_simple_splitting_node - INFO - 📋 任务 2: git_clone - 下载用户服务代码到/Users/renyu/Documents/create_project/链数中...
2025-07-24 10:42:26 - src.corder_integration.langgraph.nodes.task_simple_splitting_node - INFO - 📋 任务 3: git_clone - 下载确权开立服务代码到/Users/renyu/Documents/create_project/链...
2025-07-24 10:42:26 - src.corder_integration.langgraph.nodes.task_simple_splitting_node - INFO - 📋 还有 9 个任务未显示
2025-07-24 10:42:26 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-24 10:42:26 - src.corder_integration.langgraph.nodes.task_simple_splitting_node - INFO - 🔄 将项目 1231000003 的旧任务设置为过期状态...
2025-07-24 10:42:26 - src.corder_integration.langgraph.nodes.task_simple_splitting_node - INFO - ✅ 成功将 0 个旧任务设置为过期状态
2025-07-24 10:42:26 - src.corder_integration.langgraph.nodes.task_simple_splitting_node - INFO - 💾 开始保存 12 个任务到数据库...
2025-07-24 10:42:26 - src.corder_integration.langgraph.nodes.task_simple_splitting_node - INFO - ✅ 任务已保存到数据库，共 12 个
2025-07-24 10:42:26 - src.corder_integration.langgraph.nodes.task_simple_splitting_node - INFO - ✅ 简化版任务拆分完成，识别 3 个服务
2025-07-24 10:42:26 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🚀 Git管理节点开始执行...
2025-07-24 10:42:26 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-24 10:42:26 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🎯 git_management_node 开始执行任务...
2025-07-24 10:42:26 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 📋 找到 3 个可执行任务
2025-07-24 10:42:26 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🚀 开始执行任务: task_001 (git_extraction)
2025-07-24 10:42:26 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_001 已被 git_management_node 领取
2025-07-24 10:42:26 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🔍 执行Git提取任务: task_001
2025-07-24 10:42:26 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 📄 提取源文本: 解析设计文档，提取用户服务 http://localhost:30000/ls/zqyl-user-center-service.git 和确权开立服务 http://localhost:30000/ls/crcl-open.git 仓库地址 从设计文档提取GitLab仓库地址...
2025-07-24 10:42:26 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🔍 开始从文本提取Git URL...
2025-07-24 10:42:26 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🔗 找到Git仓库: http://localhost:30000/ls/zqyl-user-center-service.git
2025-07-24 10:42:26 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🔗 找到Git仓库: http://localhost:30000/ls/crcl-open.git
2025-07-24 10:42:26 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 提取到 2 个Git仓库
2025-07-24 10:42:26 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_001 状态更新为 completed
2025-07-24 10:42:26 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 任务 task_001 执行成功
2025-07-24 10:42:26 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🚀 开始执行任务: task_002 (git_clone)
2025-07-24 10:42:26 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_002 已被 git_management_node 领取
2025-07-24 10:42:26 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 📥 执行Git克隆任务: task_002
2025-07-24 10:42:26 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🔍 任务参数中无repo_url，尝试从git_extraction任务结果获取...
2025-07-24 10:42:26 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 📋 从任务 task_001 的parameters中获取到 2 个仓库
2025-07-24 10:42:26 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 通过名称匹配找到仓库: zqyl-user-center-service
2025-07-24 10:42:26 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 从git_extraction结果获取到仓库地址: http://localhost:30000/ls/zqyl-user-center-service.git
2025-07-24 10:42:26 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🌿 生成新分支名称: D_202507241042_defaultproject
2025-07-24 10:42:26 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 📥 开始克隆仓库: http://localhost:30000/ls/zqyl-user-center-service.git -> /Users/renyu/Documents/create_project/default_project/zqyl-user-center-service
2025-07-24 10:42:27 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 已创建并切换到新分支: D_202507241042_defaultproject
2025-07-24 10:42:27 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 仓库克隆成功: /Users/renyu/Documents/create_project/default_project/zqyl-user-center-service
2025-07-24 10:42:27 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_002 状态更新为 completed
2025-07-24 10:42:27 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 任务 task_002 执行成功
2025-07-24 10:42:27 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🚀 开始执行任务: task_003 (git_clone)
2025-07-24 10:42:27 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_003 已被 git_management_node 领取
2025-07-24 10:42:27 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 📥 执行Git克隆任务: task_003
2025-07-24 10:42:27 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🔍 任务参数中无repo_url，尝试从git_extraction任务结果获取...
2025-07-24 10:42:27 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 📋 从任务 task_001 的parameters中获取到 2 个仓库
2025-07-24 10:42:27 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 通过名称匹配找到仓库: zqyl-user-center-service
2025-07-24 10:42:27 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 从git_extraction结果获取到仓库地址: http://localhost:30000/ls/zqyl-user-center-service.git
2025-07-24 10:42:27 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🌿 生成新分支名称: D_202507241042_defaultproject
2025-07-24 10:42:27 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 📥 开始克隆仓库: http://localhost:30000/ls/zqyl-user-center-service.git -> /Users/renyu/Documents/create_project/default_project/zqyl-user-center-service
2025-07-24 10:42:27 - src.corder_integration.langgraph.nodes.git_management_node - ERROR - ❌ 仓库克隆失败: fatal: destination path '/Users/renyu/Documents/create_project/default_project/zqyl-user-center-service' already exists and is not an empty directory.

2025-07-24 10:42:27 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_003 状态更新为 failed
2025-07-24 10:42:27 - src.corder_integration.langgraph.nodes.git_management_node - ERROR - ❌ 任务 task_003 执行失败: 仓库克隆失败: 仓库克隆失败: fatal: destination path '/Users/renyu/Documents/create_project/default_project/zqyl-user-center-service' already exists and is not an empty directory.

2025-07-24 10:42:27 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ Git管理任务执行完成，共处理 3 个任务
2025-07-24 10:42:27 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🚀 基于提取结果自动克隆 2 个仓库...
2025-07-24 10:42:27 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 📥 自动克隆仓库: http://localhost:30000/ls/zqyl-user-center-service.git -> /Users/renyu/Documents/create_project/链数中建一局_1753324841/zqyl-user-center-service
2025-07-24 10:42:27 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 📥 开始克隆仓库: http://localhost:30000/ls/zqyl-user-center-service.git -> /Users/renyu/Documents/create_project/链数中建一局_1753324841/zqyl-user-center-service
2025-07-24 10:42:27 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 已创建并切换到新分支: D_202507241042_链数中建一局
2025-07-24 10:42:27 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 仓库克隆成功: /Users/renyu/Documents/create_project/链数中建一局_1753324841/zqyl-user-center-service
2025-07-24 10:42:27 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 自动克隆成功: zqyl-user-center-service
2025-07-24 10:42:27 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 📥 自动克隆仓库: http://localhost:30000/ls/crcl-open.git -> /Users/renyu/Documents/create_project/链数中建一局_1753324841/crcl-open
2025-07-24 10:42:27 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 📥 开始克隆仓库: http://localhost:30000/ls/crcl-open.git -> /Users/renyu/Documents/create_project/链数中建一局_1753324841/crcl-open
2025-07-24 10:42:28 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 已创建并切换到新分支: D_202507241042_链数中建一局
2025-07-24 10:42:28 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 仓库克隆成功: /Users/renyu/Documents/create_project/链数中建一局_1753324841/crcl-open
2025-07-24 10:42:28 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 自动克隆成功: crcl-open
2025-07-24 10:42:28 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ Git管理节点完成 - 提取: 2 个仓库, 克隆: 3 个仓库, 仓库初始化状态: True
2025-07-24 10:42:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-24 10:42:28 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-24 10:42:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: config.yaml
2025-07-24 10:42:28 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-24 10:42:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250724094351-pnjf4(编码智能体专用)
2025-07-24 10:42:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-24 10:42:28 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-24 10:42:28 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-24 10:42:28 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 增强版模板+AI生成器初始化完成
2025-07-24 10:42:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 增强版模板+AI代码生成器初始化完成
2025-07-24 10:42:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 从工作流状态获取设计文档 (7416 字符)
2025-07-24 10:42:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🏷️ 智能编码节点获取项目标识: 1231000003
2025-07-24 10:42:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-24 10:42:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🏷️ 过滤项目任务标识: 1231000003
2025-07-24 10:42:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-24 10:42:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 第1轮找到 6 个可执行任务
2025-07-24 10:42:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 开始执行任务: task_004 (code_analysis)
2025-07-24 10:42:28 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_004 已被 intelligent_coding_node 领取
2025-07-24 10:42:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行代码分析任务: task_004
2025-07-24 10:42:28 - src.utils.java_code_analyzer - INFO - 🔍 开始分析企业级Java项目: /Users/renyu/Documents/create_project/链数中建一局_1753324841/zqyl-user-center-service
2025-07-24 10:42:29 - src.utils.java_code_analyzer - INFO - ✅ 企业级项目分析完成，共分析 408 个Java文件
2025-07-24 10:42:29 - src.utils.java_code_analyzer - INFO - 📄 企业级分析报告已导出: outputs/用户服务_java_analysis_20250724_104229.md
2025-07-24 10:42:29 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_004 状态更新为 completed
2025-07-24 10:42:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 任务 task_004 执行成功
2025-07-24 10:42:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 开始执行任务: task_006 (config)
2025-07-24 10:42:29 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_006 已被 intelligent_coding_node 领取
2025-07-24 10:42:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ⚙️ 执行配置生成任务: task_006
2025-07-24 10:42:29 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_006 状态更新为 completed
2025-07-24 10:42:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 任务 task_006 执行成功
2025-07-24 10:42:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 开始执行任务: task_007 (database)
2025-07-24 10:42:29 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_007 已被 intelligent_coding_node 领取
2025-07-24 10:42:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🗄️ 执行数据库设计任务: task_007
2025-07-24 10:42:29 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_007 状态更新为 completed
2025-07-24 10:42:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 任务 task_007 执行成功
2025-07-24 10:42:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 开始执行任务: task_008 (api)
2025-07-24 10:42:29 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_008 已被 intelligent_coding_node 领取
2025-07-24 10:42:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🌐 执行API接口生成任务: task_008
2025-07-24 10:42:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 解析的接口信息:
2025-07-24 10:42:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 接口名称: CompanyUnitList
2025-07-24 10:42:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - API路径: /general/multiorgManage/queryCompanyUnitList
2025-07-24 10:42:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - HTTP方法: GET
2025-07-24 10:42:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 输入参数: 3个
2025-07-24 10:42:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 输出参数: 6个
2025-07-24 10:42:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 业务描述: 根据查询条件查询组织单元信息，支持按编码、状态等条件筛选
2025-07-24 10:42:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 在 /Users/renyu/Documents/create_project/链数中建一局_1753324841/zqyl-user-center-service 中查找最佳Java项目路径...
2025-07-24 10:42:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 目标服务名: 用户服务
2025-07-24 10:42:31 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 10:42:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 发现Java项目: user-basic-general
2025-07-24 10:42:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       🎯 相对路径: zqyl-user-center-service/user-basic-service/user-basic-general
2025-07-24 10:42:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       📊 Java文件: 408个
2025-07-24 10:42:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       📐 目录深度: 3
2025-07-24 10:42:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       🏆 优先级分数: 680
2025-07-24 10:42:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 排序后的候选路径（前3个）:
2025-07-24 10:42:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    1. zqyl-user-center-service/user-basic-service/user-basic-general (优先级: 680)
2025-07-24 10:42:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 选择最佳Java项目路径:
2025-07-24 10:42:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 完整路径: /Users/renyu/Documents/create_project/链数中建一局_1753324841/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general
2025-07-24 10:42:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📋 相对路径: zqyl-user-center-service/user-basic-service/user-basic-general
2025-07-24 10:42:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    🏆 最终优先级: 680
2025-07-24 10:42:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📁 基础项目路径: /Users/renyu/Documents/create_project/链数中建一局_1753324841/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general
2025-07-24 10:42:31 - src.corder_integration.config.domain_mapping_config - INFO - ✅ 成功加载业务领域映射配置: /Users/renyu/Documents/ai_project/document_analyzer/src/corder_integration/config/domain_mapping.yaml
2025-07-24 10:42:31 - src.corder_integration.config.domain_mapping_config - INFO - 🔍 映射API关键字到业务领域: multiorgManage
2025-07-24 10:42:31 - src.corder_integration.config.domain_mapping_config - INFO - ✅ 精确匹配: multiorgManage -> multiorg
2025-07-24 10:42:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 API关键字映射: multiorgManage -> multiorg (API路径: /general/multiorgManage/queryCompanyUnitList)
2025-07-24 10:42:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🤖 使用大模型智能匹配Controller: multiorg (API: /general/multiorgManage/queryCompanyUnitList)
2025-07-24 10:42:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功扫描到 26 个Controller文件
2025-07-24 10:42:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 找到 26 个Controller文件
2025-07-24 10:42:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🤖 调用volcengine分析Controller相似度...
2025-07-24 10:42:36 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 10:42:36 - src.corder_integration.langgraph.nodes.intelligent_coding_node - ERROR - ❌ LLM响应JSON解析失败: Expecting value: line 1 column 1 (char 0)
2025-07-24 10:42:36 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 使用规则匹配方式查找Controller: multiorg
2025-07-24 10:42:36 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 智能匹配找到相似Controller: CompanyMultiorgManageController
2025-07-24 10:42:36 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 Controller路径: /Users/renyu/Documents/create_project/链数中建一局_1753324841/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general/src/main/java/com/yljr/user/basicgeneral/interfaces/controller/multiorg/CompanyMultiorgManageController.java
2025-07-24 10:42:36 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    🔢 相似度分数: 0.77
2025-07-24 10:42:36 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    💡 匹配原因: 类名包含关键字: multiorg, 路径包含关键字: multiorg, 路径片段匹配: ['general']
2025-07-24 10:42:36 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 分析目标项目: /Users/renyu/Documents/create_project/链数中建一局_1753324841/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general/src/main/java
2025-07-24 10:42:36 - src.apis.project_analysis_api - INFO - 🔍 开始分析项目用于代码生成: /Users/renyu/Documents/create_project/链数中建一局_1753324841/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general/src/main/java
2025-07-24 10:42:36 - src.apis.project_analysis_api - INFO - 🔍 在 /Users/renyu/Documents/create_project/链数中建一局_1753324841/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general/src/main/java 中查找最佳Java项目路径...
2025-07-24 10:42:36 - src.apis.project_analysis_api - INFO - 🎯 目标服务名: 用户服务
2025-07-24 10:42:36 - src.apis.project_analysis_api - WARNING - ⚠️ 在 /Users/renyu/Documents/create_project/链数中建一局_1753324841/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general/src/main/java 中未找到包含Java文件的src/main/java结构
2025-07-24 10:42:36 - src.apis.project_analysis_api - INFO - 📂 实际分析路径: /Users/renyu/Documents/create_project/链数中建一局_1753324841/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general/src/main/java
2025-07-24 10:42:36 - src.utils.java_code_analyzer - INFO - 🔍 开始分析企业级Java项目: /Users/renyu/Documents/create_project/链数中建一局_1753324841/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general/src/main/java
2025-07-24 10:42:38 - src.utils.java_code_analyzer - INFO - ✅ 企业级项目分析完成，共分析 408 个Java文件
2025-07-24 10:42:38 - src.apis.project_analysis_api - INFO - 📦 动态检测到基础包: com.yljr.user.basicgeneral (出现408次)
2025-07-24 10:42:38 - src.apis.project_analysis_api - INFO - 📦 动态检测到基础包: com.yljr.user.basicgeneral (出现408次)
2025-07-24 10:42:38 - src.apis.project_analysis_api - INFO - 📋 提取到26个Controller的详细信息
2025-07-24 10:42:38 - src.apis.project_analysis_api - INFO - 📦 动态检测到基础包: com.yljr.user.basicgeneral (出现408次)
2025-07-24 10:42:38 - src.apis.project_analysis_api - INFO - ✅ 项目分析完成，已提取代码生成上下文
2025-07-24 10:42:38 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 从编码代理获取设计文档内容 (7416 字符)
2025-07-24 10:42:38 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 设计文档内容已添加到项目上下文 (7416 字符)
2025-07-24 10:42:38 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 使用详细Controller信息，共26个Controller
2025-07-24 10:42:38 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 Controller关联性分析完成:
2025-07-24 10:42:38 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 总Controller数: 26
2025-07-24 10:42:38 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 相关Controller数: 1
2025-07-24 10:42:38 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 最高关联度: 0.45
2025-07-24 10:42:38 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 Controller关联性分析:
2025-07-24 10:42:38 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 总Controller数: 26
2025-07-24 10:42:38 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 相关Controller数: 1
2025-07-24 10:42:38 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 关联度得分: 0.45
2025-07-24 10:42:38 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 相关Controllers: ['CompanyMultiorgManageController']
2025-07-24 10:42:38 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🤖 调用volcengine分析项目策略...发送的prompt信息: Java文件数=408, Controller数=26
2025-07-24 10:42:43 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 10:42:43 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 项目策略判断: enhance_existing - 虽然当前仅有一个Controller（CompanyMultiorgManageController）与API关键字“multiorg”直接相关，且关联度为0.45，但该项目已存在26个Controller，说明整体架构成熟。API路径“/general/multiorgManage/queryCompanyUnitList”与现有Controller的@RequestMapping前缀“/general/multiorgManage”完全匹配，属于同一业务领域“multiorgManage”。因此，将新接口直接追加到CompanyMultiorgManageController中，可以保持路径一致性、减少重复配置，并复用已有的权限、日志、异常处理等通用逻辑，符合Spring Boot项目“按业务模块聚合Controller”的最佳实践。
2025-07-24 10:42:43 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 进入策略1管理器========================
2025-07-24 10:42:43 - src.corder_integration.code_generator.strategy1_manager - INFO - 🚀 开始执行策略1: multiorg
2025-07-24 10:42:43 - src.corder_integration.code_generator.strategy1_manager - INFO - 🔧 从路径 /Users/renyu/Documents/create_project/链数中建一局_1753324841/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general/src/main/java 提取项目根目录: /Users/renyu/Documents/create_project/链数中建一局_1753324841/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general
2025-07-24 10:42:43 - src.corder_integration.code_generator.strategy1_manager - INFO - 📁 原始路径: /Users/renyu/Documents/create_project/链数中建一局_1753324841/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general/src/main/java
2025-07-24 10:42:43 - src.corder_integration.code_generator.strategy1_manager - INFO - 📁 项目根路径: /Users/renyu/Documents/create_project/链数中建一局_1753324841/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general
2025-07-24 10:42:43 - src.corder_integration.code_generator.strategy1_manager - INFO - 📊 第1步：分析项目结构
2025-07-24 10:42:43 - src.corder_integration.code_generator.project_structure_analyzer - INFO - 🔍 开始分析项目结构: /Users/renyu/Documents/create_project/链数中建一局_1753324841/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general
2025-07-24 10:42:43 - src.corder_integration.code_generator.project_structure_analyzer - INFO - 📁 目录树结构生成完成
2025-07-24 10:42:43 - src.corder_integration.code_generator.project_structure_analyzer - INFO - 🔍 开始解析目录树结构...
2025-07-24 10:42:43 - src.corder_integration.code_generator.project_structure_analyzer - INFO - 📊 从目录树解析完成:
2025-07-24 10:42:43 - src.corder_integration.code_generator.project_structure_analyzer - INFO -    Controllers: 25
2025-07-24 10:42:43 - src.corder_integration.code_generator.project_structure_analyzer - INFO -    Services: 41
2025-07-24 10:42:43 - src.corder_integration.code_generator.project_structure_analyzer - INFO -    Mappers: 0
2025-07-24 10:42:43 - src.corder_integration.code_generator.project_structure_analyzer - INFO -    Entities: 12
2025-07-24 10:42:43 - src.corder_integration.code_generator.project_structure_analyzer - INFO -    DTOs: 256
2025-07-24 10:42:43 - src.corder_integration.code_generator.project_structure_analyzer - INFO -    总Java文件: 362
2025-07-24 10:42:43 - src.corder_integration.code_generator.project_structure_analyzer - WARNING - ⚠️ 无法从目录树推断包名，使用默认值
2025-07-24 10:42:43 - src.corder_integration.code_generator.project_structure_analyzer - INFO - ✅ 项目结构分析完成
2025-07-24 10:42:43 - src.corder_integration.code_generator.project_structure_analyzer - INFO -    基础包名: com.yljr.crcl.limit
2025-07-24 10:42:43 - src.corder_integration.code_generator.project_structure_analyzer - INFO -    总Java文件: 362
2025-07-24 10:42:43 - src.corder_integration.code_generator.project_structure_analyzer - INFO -    Controllers: 25
2025-07-24 10:42:43 - src.corder_integration.code_generator.project_structure_analyzer - INFO -    Services: 41
2025-07-24 10:42:43 - src.corder_integration.code_generator.project_structure_analyzer - INFO -    Mappers: 0
2025-07-24 10:42:43 - src.corder_integration.code_generator.project_structure_analyzer - INFO -    Entities: 12
2025-07-24 10:42:43 - src.corder_integration.code_generator.project_structure_analyzer - INFO -    DTOs: 256
2025-07-24 10:42:43 - src.corder_integration.code_generator.strategy1_manager - INFO - 🤖 第2步：LLM决策实现方案
2025-07-24 10:42:43 - src.corder_integration.code_generator.llm_decision_maker - INFO - 🤖 开始LLM决策：multiorg
2025-07-24 10:42:43 - src.corder_integration.code_generator.llm_decision_maker - INFO - 🔧 生成的LLM决策提示词长度: 39851 字符
2025-07-24 10:42:43 - src.corder_integration.code_generator.llm_decision_maker - INFO - 🔍 LLM决策提示词:你是一个Java Spring Boot项目的DDD架构师，需要分析项目结构并决定如何实现新的API接口功能。

## 项目信息
- API关键字: multiorg
- 业务逻辑: 根据查询条件查询组织单元信息，支持按编码、状态等条件筛选
- 基础包名: com.yljr.crcl.limit
- 项目路径: /Users/renyu/Documents/create_project/链数中建一局_1753324841/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general

### 📋 详细的API任务需求
**API路径**: /general/multiorgManage/queryCompanyUnitList
**HTTP方法**: GET
**Content-Type**: application/json
**接口名称**: CompanyUnitList
**接口描述**: N/A
**业务逻辑**: 根据查询条件查询组织单元信息，支持按编码、状态等条件筛选

**请求参数**:
  - unitCode: 组织单元编号(可选)
  - openStatus: 组织单元状态 1：正常；0：禁用(可选)
  - unitList: 组织单元id列表(可选)

**响应参数**:
  - unitId: 组织单元id
  - unitTypeDicType: 组织单元类型 1：开立，2：支付
  - unitTypeId: 组织单元类型表id
  - openStatus: 组织单元状态 1：正常；0：禁用
  - unitCode: 组织编号
  - unitName: 组织单元名称

**数据来源**: t_cust_multiorg_unit表
**外部服务调用**: 
**验证规则**:
  - unitCode: 长度不超过50字符
  - openStatus: 取值范围0-1

## 📁 完整项目结构
📁 user-basic-general/
📁 src/ (409 files)
└── 📁 main/ (409 files)
    ├── 📁 java/ (408 files)
    │   └── 📁 com/ (408 files)
    │       └── 📁 yljr/ (408 files)
    │           └── 📁 user/ (408 files)
    │               └── 📁 basicgeneral/ (408 files)
    │                   ├── 📁 application/ (94 files)
    │                   │   ├── 📁 dto/ (24 files)
    │                   │   │   ├── 📁 change/ (1 files)
    │                   │   │   │   └── ☕ CustChangeBfDTO.java (24.5KB)
    │                   │   │   ├── 📁 company/ (8 files)
    │                   │   │   │   ├── ☕ CompanyInfoDTO.java (3.6KB)
    │                   │   │   │   ├── ☕ CompanySimpleInfoDTO.java (1.9KB)
    │                   │   │   │   ├── ☕ CustAuditContentDTO.java (16.2KB)
    │                   │   │   │   ├── ☕ CustCompanyAuditRecordDTO.java (7.6KB)
    │                   │   │   │   ├── ☕ MutipleUkeyConfigureDto.java (4.7KB)
    │                   │   │   │   ├── ☕ TopAuditReqDTO.java (3.8KB)
    │                   │   │   │   ├── ☕ ValidCompanyIsRegisteredReqDTO.java (2.1KB)
    │                   │   │   │   └── ☕ YdCompanyLegalInfoRespDTO.java (2.2KB)
    │                   │   │   ├── 📁 dept/ (7 files)
    │                   │   │   │   ├── ☕ DeptBasicInfoResponse.java (2.4KB)
    │                   │   │   │   ├── ☕ DeptInfoResp.java (695B)
    │                   │   │   │   ├── ☕ DeptLeaderResp.java (1.0KB)
    │                   │   │   │   ├── ☕ DeptStructureDTO.java (1.7KB)
    │                   │   │   │   ├── ☕ MakeShrUserDeptTreeResultDTO.java (4.3KB)
    │                   │   │   │   ├── ☕ MakeUserDeptTreeDTO.java (1.5KB)
    │                   │   │   │   └── ☕ MakeUserDeptTreeResultDTO.java (4.3KB)
    │                   │   │   ├── 📁 dic/ (5 files)
    │                   │   │   │   ├── ☕ BatchUpdateCompanyTypeDto.java (2.8KB)
    │                   │   │   │   ├── ☕ DesireModeMsmDto.java (1.4KB)
    │                   │   │   │   ├── ☕ QueryCompanyByTypeAndNameRequest.java (2.4KB)
    │                   │   │   │   ├── ☕ SaveOrUpdateCompanyTypeConfigDTO.java (3.5KB)
    │                   │   │   │   └── ☕ VerifyDesireModeTransferDto.java (14.4KB)
    │                   │   │   └── 📁 user/ (3 files)
    │                   │   │       ├── ☕ CustUserSimpleRespDTO.java (1.1KB)
    │                   │   │       ├── ☕ QueryListByAgreeAndUserIdDTO.java (42.3KB)
    │                   │   │       └── ☕ UserAuthFileDTO.java (3.8KB)
    │                   │   └── 📁 service/ (70 files)
    │                   │       ├── 📁 change/ (1 files)
    │                   │       │   └── ☕ CustChangeManageService.java (1.4KB)
    │                   │       ├── 📁 company/ (4 files)
    │                   │       │   ├── ☕ CompanyAuthManageService.java (697B)
    │                   │       │   ├── ☕ CustAuditManageService.java (780B)
    │                   │       │   ├── ☕ SearchCompanyManageService.java (15.0KB)
    │                   │       │   └── ☕ SpecialVerificationConfigService.java (474B)
    │                   │       ├── 📁 custorg/ (1 files)
    │                   │       │   └── ☕ DataPermissionsService.java (537B)
    │                   │       ├── 📁 dept/ (7 files)
    │                   │       │   ├── ☕ DeptUserService.java (3.5KB)
    │                   │       │   ├── ☕ OsDeptManagerChangeApplyService.java (728B)
    │                   │       │   ├── ☕ OsDeptService.java (5.3KB)
    │                   │       │   ├── ☕ OsEmployeeApplyService.java (578B)
    │                   │       │   ├── ☕ OsGroupToDeptApplyService.java (1.1KB)
    │                   │       │   ├── ☕ OsUserDeptCommonService.java (1.9KB)
    │                   │       │   └── ☕ OsUserrelationalService.java (385B)
    │                   │       ├── 📁 digital/ (3 files)
    │                   │       │   ├── ☕ CustDesireModeRecordService.java (977B)
    │                   │       │   ├── ☕ DigitalCertInfoService.java (3.0KB)
    │                   │       │   └── ☕ DigitalGrantManageService.java (2.3KB)
    │                   │       ├── 📁 face/ (1 files)
    │                   │       │   └── ☕ SearchFaceService.java (1.5KB)
    │                   │       ├── 📁 fince/ (2 files)
    │                   │       │   ├── ☕ CompanyFinceManageService.java (5.2KB)
    │                   │       │   └── ☕ SendBankBlockCenterService.java (936B)
    │                   │       ├── 📁 friend/ (1 files)
    │                   │       │   └── ☕ CompanyFriendManageService.java (3.0KB)
    │                   │       ├── 📁 impl/ (35 files)
    │                   │       │   ├── 📁 change/ (1 files)
    │                   │       │   ├── 📁 company/ (4 files)
    │                   │       │   ├── 📁 custorg/ (1 files)
    │                   │       │   ├── 📁 dept/ (7 files)
    │                   │       │   ├── 📁 digital/ (3 files)
    │                   │       │   ├── 📁 face/ (1 files)
    │                   │       │   ├── 📁 fince/ (2 files)
    │                   │       │   ├── 📁 friend/ (1 files)
    │                   │       │   ├── 📁 multiorg/ (1 files)
    │                   │       │   ├── 📁 position/ (1 files)
    │                   │       │   ├── 📁 redis/ (1 files)
    │                   │       │   ├── 📁 role/ (2 files)
    │                   │       │   ├── 📁 shr/ (1 files)
    │                   │       │   ├── 📁 subsidiary/ (2 files)
    │                   │       │   ├── 📁 ukey/ (3 files)
    │                   │       │   └── 📁 user/ (4 files)
    │                   │       ├── 📁 multiorg/ (1 files)
    │                   │       │   └── ☕ CompanyMultorgManageService.java (5.1KB)
    │                   │       ├── 📁 position/ (1 files)
    │                   │       │   └── ☕ CompanyPositionManageService.java (4.5KB)
    │                   │       ├── 📁 redis/ (1 files)
    │                   │       │   └── ☕ SequenceService.java (638B)
    │                   │       ├── 📁 role/ (2 files)
    │                   │       │   ├── ☕ DataDicBusinessService.java (1008B)
    │                   │       │   └── ☕ UserRoleManageService.java (7.5KB)
    │                   │       ├── 📁 shr/ (1 files)
    │                   │       │   └── ☕ ShrUserManageService.java (2.1KB)
    │                   │       ├── 📁 subsidiary/ (2 files)
    │                   │       │   ├── ☕ CompanySubsidiaryInfoService.java (4.6KB)
    │                   │       │   └── ☕ CustCompanyInviteService.java (444B)
    │                   │       ├── 📁 ukey/ (3 files)
    │                   │       │   ├── ☕ CustSubjectTopRedService.java (1.3KB)
    │                   │       │   ├── ☕ SearchUkeyManageService.java (7.1KB)
    │                   │       │   └── ☕ VerifyUkeyManageService.java (1.4KB)
    │                   │       └── 📁 user/ (4 files)
    │                   │           ├── ☕ Cust2UserManageService.java (625B)
    │                   │           ├── ☕ SearchCust2ManageService.java (11.0KB)
    │                   │           ├── ☕ SearchUserCompanyService.java (2.8KB)
    │                   │           └── ☕ SearchUserManageService.java (5.3KB)
    │                   ├── 📁 beans/ (256 files)
    │                   │   ├── 📁 dto/ (13 files)
    │                   │   │   ├── ☕ FaceAuthInfoAppDTO.java (3.2KB)
    │                   │   │   ├── ☕ FaceIndentityInfoAppDTO.java (1.6KB)
    │                   │   │   ├── ☕ PushUserFaceResultDto.java (2.4KB)
    │                   │   │   ├── ☕ SignAndAccessTokenAppDTO.java (1.2KB)
    │                   │   │   ├── ☕ TencentFaceAccessTokenResultAppDTO.java (1.7KB)
    │                   │   │   ├── ☕ TencentFaceCommonResultAppDTO.java (1.6KB)
    │                   │   │   ├── ☕ TencentFaceOrderInfoDTO.java (2.5KB)
    │                   │   │   ├── ☕ TencentFaceOrderResultAppDTO.java (4.4KB)
    │                   │   │   ├── ☕ TencentFaceResultAppDTO.java (1.4KB)
    │                   │   │   ├── ☕ TencentFaceTicketAppDTO.java (1.6KB)
    │                   │   │   ├── ☕ TencentFaceTicketResultAppDTO.java (845B)
    │                   │   │   ├── ☕ TicketValueResultAppDTO.java (1.1KB)
    │                   │   │   └── ☕ UserCompareStatusDto.java (1.4KB)
    │                   │   ├── 📁 msg/ (3 files)
    │                   │   │   ├── ☕ CancelUserMsg.java (842B)
    │                   │   │   ├── ☕ UpdateUserMobileMsg.java (893B)
    │                   │   │   └── ☕ UpdateUserNameMsg.java (848B)
    │                   │   ├── 📁 req/ (138 files)
    │                   │   │   ├── 📁 change/ (5 files)
    │                   │   │   │   ├── ☕ CheckChangeCompanyRequest.java (1.4KB)
    │                   │   │   │   ├── ☕ CustChangeSubmitRequest.java (1.9KB)
    │                   │   │   │   ├── ☕ QueryAgreeByAgreementSourceListRequest.java (10.3KB)
    │                   │   │   │   ├── ☕ QueryCompanyChange4YzRequest.java (1.7KB)
    │                   │   │   │   └── ☕ QueryCompanyManageChangeList.java (1.2KB)
    │                   │   │   ├── 📁 company/ (21 files)
    │                   │   │   │   ├── ☕ AuditCompanyAuthRequest.java (5.4KB)
    │                   │   │   │   ├── ☕ CompanyAuthSubmitRequest.java (38.8KB)
    │                   │   │   │   ├── ☕ CompanyGrantInfoReq.java (4.4KB)
    │                   │   │   │   ├── ☕ GetCompanyListByIdsAndAuthStatus.java (2.6KB)
    │                   │   │   │   ├── ☕ GetCompanyUkeyConfigureRequest.java (1.8KB)
    │                   │   │   │   ├── ☕ QueryCompanyAuditResultRequest.java (2.5KB)
    │                   │   │   │   ├── ☕ QueryCompanyAuthResponse.java (31.2KB)
    │                   │   │   │   ├── ☕ QueryCompanyAuthStatusListRequest.java (2.4KB)
    │                   │   │   │   ├── ☕ QueryCompanyAuthStatusListResponse.java (1.7KB)
    │                   │   │   │   ├── ☕ QueryCompanyByCustRoleRequest.java (1.3KB)
    │                   │   │   │   ├── ☕ QueryCompanyByNotInIdsRequest.java (949B)
    │                   │   │   │   ├── ☕ QueryCompanyCard4LxRequest.java (920B)
    │                   │   │   │   ├── ☕ QueryCompanyDetailRequest.java (1.3KB)
    │                   │   │   │   ├── ☕ QueryCompanyInfoConfigurable.java (3.2KB)
    │                   │   │   │   ├── ☕ QueryCompanyIsSameTypeRequest.java (1.1KB)
    │                   │   │   │   ├── ☕ QueryCompanyLegalInfoRequest.java (1.4KB)
    │                   │   │   │   ├── ☕ QueryCompanyListRequest.java (1.9KB)
    │                   │   │   │   ├── ☕ QueryCurBankCompanyUserInfoResponse.java (1.1KB)
    │                   │   │   │   ├── ☕ QuerySignAgreementFileRequest.java (1.2KB)
    │                   │   │   │   ├── ☕ SaveCompanyUkeyConfigureRequest.java (4.1KB)
    │                   │   │   │   └── ☕ ValidCompanyIsRegisteredResp.java (2.5KB)
    │                   │   │   ├── 📁 cust2User/ (7 files)
    │                   │   │   │   ├── ☕ FindUserManageRequest.java (1.4KB)
    │                   │   │   │   ├── ☕ QueryCompanyManagerAndUkeyUserRequest.java (2.3KB)
    │                   │   │   │   ├── ☕ QueryCompanyManagerAndUkeyUserResponse.java (4.5KB)
    │                   │   │   │   ├── ☕ QueryCompanyUserBaseInfoRequest.java (2.8KB)
    │                   │   │   │   ├── ☕ QueryCompanyUserReq.java (934B)
    │                   │   │   │   ├── ☕ QueryUserBindCompanyRequest.java (901B)
    │                   │   │   │   └── ☕ QueryUserPermissionsRequest.java (2.8KB)
    │                   │   │   ├── 📁 dept/ (16 files)
    │                   │   │   │   ├── ☕ ExportOsDeptUserListExcelRequest.java (2.0KB)
    │                   │   │   │   ├── ☕ GetBatchUserCompanyDeptInfoPageRequest.java (4.7KB)
    │                   │   │   │   ├── ☕ GetBatchUserCompanyDeptInfoRequest.java (2.8KB)
    │                   │   │   │   ├── ☕ GetExcelByteParamsReq.java (1.1KB)
    │                   │   │   │   ├── ☕ GetJointLevelDeptRequest.java (2.7KB)
    │                   │   │   │   ├── ☕ OsDeptRequest.java (1.9KB)
    │                   │   │   │   ├── ☕ QueryBatchDeptRequest.java (1.7KB)
    │                   │   │   │   ├── ☕ QueryBatchUserRequest.java (4.1KB)
    │                   │   │   │   ├── ☕ QueryCompanyDeptListReq.java (924B)
    │                   │   │   │   ├── ☕ QueryCompanyOsDeptUserReq.java (932B)
    │                   │   │   │   ├── ☕ QueryCompanyUserDeptRequest.java (2.8KB)
    │                   │   │   │   ├── ☕ QueryDeptAllUserRequest.java (1.9KB)
    │                   │   │   │   ├── ☕ QueryOsDeptInfoReq.java (756B)
    │                   │   │   │   ├── ☕ ShowCompanyDeptListRequest.java (1.5KB)
    │                   │   │   │   ├── ☕ ShowCurrentAuditApplyInfoRequest.java (2.0KB)
    │                   │   │   │   └── ☕ SureUserIsExistCompanyOrDeptRequest.java (2.2KB)
    │                   │   │   ├── 📁 dic/ (8 files)
    │                   │   │   │   ├── ☕ AddCompanyTypeRequest.java (2.1KB)
    │                   │   │   │   ├── ☕ BatchCompanyTypeRequest.java (1.4KB)
    │                   │   │   │   ├── ☕ BatchUpdateCompanyDicRequest.java (1.6KB)
    │                   │   │   │   ├── ☕ CancelCompanyTypeRequest.java (3.6KB)
    │                   │   │   │   ├── ☕ CompanyTypeRequest.java (1.5KB)
    │                   │   │   │   ├── ☕ QueryBusinessAuthConfigRequest.java (1.4KB)
    │                   │   │   │   ├── ☕ SetCompanyTypeAndGrantUserRequest.java (5.3KB)
    │                   │   │   │   └── ☕ UpdateCompanyTypeRequest.java (1.6KB)
    │                   │   │   ├── 📁 digital/ (6 files)
    │                   │   │   │   ├── ☕ QueryCompanyGrantUserRequest.java (2.2KB)
    │                   │   │   │   ├── ☕ QueryDigitalCertGrantUserRequest.java (1.8KB)
    │                   │   │   │   ├── ☕ QueryGrantServerUserRequest.java (1.5KB)
    │                   │   │   │   ├── ☕ SendMessVerifyCodeRequest.java (1.2KB)
    │                   │   │   │   ├── ☕ VerifyCertBaseRequest.java (2.2KB)
    │                   │   │   │   └── ☕ VerifyMobileCodeRequest.java (1.9KB)
    │                   │   │   ├── 📁 face/ (4 files)
    │                   │   │   │   ├── ☕ FaceVeriftyBodyRequest.java (1.8KB)
    │                   │   │   │   ├── ☕ NoticeUserFaceCompareResultRequest.java (2.7KB)
    │                   │   │   │   ├── ☕ PushUserFaceRequest.java (2.1KB)
    │                   │   │   │   └── ☕ QueryFaceResultRequest.java (1.8KB)
    │                   │   │   ├── 📁 fince/ (21 files)
    │                   │   │   │   ├── ☕ ActualMasterRequest.java (13.4KB)
    │                   │   │   │   ├── ☕ BankBlockEV0028Body.java (2.4KB)
    │                   │   │   │   ├── ☕ BankBlockFinancingInfoSupplementVo.java (16.2KB)
    │                   │   │   │   ├── ☕ BankBlockRequest.java (1.2KB)
    │                   │   │   │   ├── ☕ BatchSaveBeneficiaryRequest.java (2.2KB)
    │                   │   │   │   ├── ☕ BeneficiaryInfoRequest.java (9.7KB)
    │                   │   │   │   ├── ☕ BeneficiaryListResponse.java (4.4KB)
    │                   │   │   │   ├── ☕ BuildUpdateCompanyFinaceInfoRequest.java (4.1KB)
    │                   │   │   │   ├── ☕ DeleteCompanyBeneficiaryRequest.java (1022B)
    │                   │   │   │   ├── ☕ QueryCompanyFilingApplyRequest.java (980B)
    │                   │   │   │   ├── ☕ QueryCompanyInfoByConfigRequest.java (2.2KB)
    │                   │   │   │   ├── ☕ QueryCompanyShareholderRequest.java (1.7KB)
    │                   │   │   │   ├── ☕ SaveBeneficiaryFileRequest.java (5.2KB)
    │                   │   │   │   ├── ☕ SaveCompanyBeneficiaryRequest.java (10.4KB)
    │                   │   │   │   ├── ☕ SaveCompanyFilingApplyRequest.java (2.1KB)
    │                   │   │   │   ├── ☕ SaveCompanyStakeholderInfoRequest.java (2.5KB)
    │                   │   │   │   ├── ☕ SendBankBlockCenterRequest.java (12.0KB)
    │                   │   │   │   ├── ☕ UpdateCompanyFinaceRequest.java (1.6KB)
    │                   │   │   │   ├── ☕ UpdateCompanyLegalRequest.java (7.9KB)
    │                   │   │   │   ├── ☕ UpdateCompanySpareRequest.java (2.6KB)
    │                   │   │   │   └── ☕ UpdateFinaceInfoRequest.java (6.5KB)
    │                   │   │   ├── 📁 friend/ (5 files)
    │                   │   │   │   ├── ☕ QueryCompanyFriendListRequest.java (872B)
    │                   │   │   │   ├── ☕ QueryUserMobileNameRequest.java (2.8KB)
    │                   │   │   │   ├── ☕ SaveCustFriendsByQueryCustFriendsRequest.java (1.4KB)
    │                   │   │   │   ├── ☕ SaveCustFriendsRequest.java (14.6KB)
    │                   │   │   │   └── ☕ SaveEachOtherCustFriendsRequest.java (1.9KB)
    │                   │   │   ├── 📁 multiorg/ (6 files)
    │                   │   │   │   ├── ☕ QueryCompanyUnitTypeListRequest.java (3.2KB)
    │                   │   │   │   ├── ☕ QueryMultiorgCompanyUnitListRequest.java (1.4KB)
    │                   │   │   │   ├── ☕ QueryMultiorgCompanyUnitTypeListRequest.java (3.8KB)
    │                   │   │   │   ├── ☕ QueryUserUnitAccessRequest.java (6.8KB)
    │                   │   │   │   ├── ☕ QueryUserUnitAndPositionRequest.java (6.1KB)
    │                   │   │   │   └── ☕ QueryUserUnitTypeRequest.java (5.5KB)
    │                   │   │   ├── 📁 position/ (7 files)
    │                   │   │   │   ├── ☕ BuildCompanyPositionRequest.java (2.6KB)
    │                   │   │   │   ├── ☕ CompanyPositionRequest.java (3.3KB)
    │                   │   │   │   ├── ☕ GetSignUserCompanyPositionRequest.java (1.2KB)
    │                   │   │   │   ├── ☕ InsertCompanyPositionRequest.java (3.1KB)
    │                   │   │   │   ├── ☕ QueryCompanyPositionUserRequest.java (2.3KB)
    │                   │   │   │   ├── ☕ QueryCompanyUserPositionUnitRequest.java (2.9KB)
    │                   │   │   │   └── ☕ QueryUserPositionsRequest.java (1.9KB)
    │                   │   │   ├── 📁 role/ (5 files)
    │                   │   │   │   ├── ☕ QueryCompanyOwnRoleUserListRequest.java (1.9KB)
    │                   │   │   │   ├── ☕ QueryCompanyUserWithCompanyRoleRequest.java (1.0KB)
    │                   │   │   │   ├── ☕ QueryRoleSourceRequest.java (812B)
    │                   │   │   │   ├── ☕ QueryUserBindCompanyAndCompanyTypeRequest.java (1003B)
    │                   │   │   │   └── ☕ QueryUserRoleSourceReq.java (7.0KB)
    │                   │   │   ├── 📁 specialVerificationConfig/ (1 files)
    │                   │   │   │   └── ☕ SpecialVerificationConfigRequest.java (625B)
    │                   │   │   ├── 📁 subsidiary/ (5 files)
    │                   │   │   │   ├── ☕ BatchInsertCompanyAuthfileRequest.java (1.9KB)
    │                   │   │   │   ├── ☕ CompanyAuthfileRequest.java (3.8KB)
    │                   │   │   │   ├── ☕ QuerySoftPaymentRecordRequest.java (1.4KB)
    │                   │   │   │   ├── ☕ SaveCompanyAuthRequest.java (9.9KB)
    │                   │   │   │   └── ☕ SaveCustCompanyAuthFileRequest.java (4.7KB)
    │                   │   │   ├── 📁 ukey/ (7 files)
    │                   │   │   │   ├── ☕ DeleteSurplusUkeysBindRoleRequest.java (1.3KB)
    │                   │   │   │   ├── ☕ GetBatchUserCompanyUkeyRequest.java (2.0KB)
    │                   │   │   │   ├── ☕ GetCompanyAuditInfoByCompanyIdRequest.java (1.1KB)
    │                   │   │   │   ├── ☕ IsUkeyBindRequest.java (1.8KB)
    │                   │   │   │   ├── ☕ QueryUkeyBindMainInfoRequest.java (1.3KB)
    │                   │   │   │   ├── ☕ QueryUserUkeyBusinessRequest.java (932B)
    │                   │   │   │   └── ☕ VerifyUkeyRequest.java (1.9KB)
    │                   │   │   └── 📁 user/ (14 files)
    │                   │   │       ├── ☕ BatchQueryUserListRequest.java (1.2KB)
    │                   │   │       ├── ☕ CheckIdCardValidRequest.java (1.4KB)
    │                   │   │       ├── ☕ CustUserQueryRequest.java (1.4KB)
    │                   │   │       ├── ☕ QueryBatchCompanyUserRequest.java (2.9KB)
    │                   │   │       ├── ☕ QueryBatchMobileStatusReq.java (1.2KB)
    │                   │   │       ├── ☕ QueryBatchUserInfoParam.java (1.5KB)
    │                   │   │       ├── ☕ QueryBatchUserInfoRequest.java (1.0KB)
    │                   │   │       ├── ☕ QueryCompanyUserByNameReq.java (866B)
    │                   │   │       ├── ☕ QueryPlatformTypeCompanyUserRequest.java (5.4KB)
    │                   │   │       ├── ☕ QueryUserBindCompanyInfoRequest.java (2.3KB)
    │                   │   │       ├── ☕ UpdateUserMobileRequest.java (2.4KB)
    │                   │   │       ├── ☕ UserCompanyAuthStatusReq.java (908B)
    │                   │   │       ├── ☕ UserMobileCompanySearchRequest.java (1.1KB)
    │                   │   │       └── ☕ UserMobileRequest.java (1020B)
    │                   │   └── 📁 resp/ (102 files)
    │                   │       ├── 📁 change/ (2 files)
    │                   │       │   ├── ☕ CustChangeAfResponse.java (22.1KB)
    │                   │       │   └── ☕ QueryCompanyChange4YzResponse.java (7.5KB)
    │                   │       ├── 📁 company/ (13 files)
    │                   │       │   ├── ☕ CompanyAndDicResponse.java (5.4KB)
    │                   │       │   ├── ☕ CompanyAuditResultResponse.java (2.1KB)
    │                   │       │   ├── ☕ CompanyMangerPositionUserResponse.java (1.0KB)
    │                   │       │   ├── ☕ CompanySimpleInfoResponse.java (2.0KB)
    │                   │       │   ├── ☕ CompanyUserInfoResponse.java (8.1KB)
    │                   │       │   ├── ☕ CustCompanySimpleInfoResponse.java (5.5KB)
    │                   │       │   ├── ☕ CustCompanyUkeyConfigureEntity.java (3.2KB)
    │                   │       │   ├── ☕ CustCompanyUkeyConfigureVo.java (1.8KB)
    │                   │       │   ├── ☕ QiccCompanyInfoResponse.java (5.1KB)
    │                   │       │   ├── ☕ QueryCompanyAndManagerInfoResponse.java (4.3KB)
    │                   │       │   ├── ☕ QueryCompanyByNotInIdsResponse.java (1.7KB)
    │                   │       │   ├── ☕ QueryCompanyResponse.java (7.4KB)
    │                   │       │   └── ☕ SearchCompanyOrUserResponse.java (1.3KB)
    │                   │       ├── 📁 cust2User/ (7 files)
    │                   │       │   ├── ☕ Cust2CompanyUserListResp.java (836B)
    │                   │       │   ├── ☕ QueryCompanyAgentManageResponse.java (1.3KB)
    │                   │       │   ├── ☕ QueryCurCompanyUserInfoResponse.java (2.0KB)
    │                   │       │   ├── ☕ QueryPlatformTypeCompanyUserInfoResponse.java (6.3KB)
    │                   │       │   ├── ☕ QueryPlatformTypeCompanyUserResponse.java (2.0KB)
    │                   │       │   ├── ☕ QueryYxCompanyUserDetailResponse.java (11.8KB)
    │                   │       │   └── ☕ UserCardBaseInfoResponse.java (5.8KB)
    │                   │       ├── 📁 custorg/ (1 files)
    │                   │       │   └── ☕ OrgStructureDetailResp.java (1.8KB)
    │                   │       ├── 📁 dept/ (21 files)
    │                   │       │   ├── ☕ BatchGetDeptAndUserInfoResp.java (972B)
    │                   │       │   ├── ☕ BatchSimpleDeptInfoResponse.java (1.5KB)
    │                   │       │   ├── ☕ BatchSimpleDeptUserInfoResponse.java (1.7KB)
    │                   │       │   ├── ☕ CompanyDeptOfNotUserResponse.java (4.4KB)
    │                   │       │   ├── ☕ ExportCompanyUserListExcelResponse.java (1.5KB)
    │                   │       │   ├── ☕ GetBatchUserCompanyDeptInfoResponse.java (3.9KB)
    │                   │       │   ├── ☕ GetCompanyDeptStructureResponse.java (1.7KB)
    │                   │       │   ├── ☕ GetCompanyDeptUserResponse.java (1.7KB)
    │                   │       │   ├── ☕ GetExcelByteParamsReq.java (1.1KB)
    │                   │       │   ├── ☕ GetJointLevelDeptResponse.java (1.6KB)
    │                   │       │   ├── ☕ OsDeptResponse.java (3.3KB)
    │                   │       │   ├── ☕ QueryBatchUserResponse.java (3.9KB)
    │                   │       │   ├── ☕ QueryCompanyAllDeptResponse.java (2.0KB)
    │                   │       │   ├── ☕ QueryCompanyDeptListResponse.java (3.1KB)
    │                   │       │   ├── ☕ QueryCompanyosDeptUserResponse.java (2.7KB)
    │                   │       │   ├── ☕ ShowCompanyDeptListResponse.java (3.6KB)
    │                   │       │   ├── ☕ ShowCurrentAuditApplyInfoResponse.java (4.6KB)
    │                   │       │   ├── ☕ ShowCurrentOsDeptAndUserResponse.java (5.4KB)
    │                   │       │   ├── ☕ ShowRootDeptsResponse.java (3.3KB)
    │                   │       │   ├── ☕ UserCompanyDeptInfoResponse.java (4.0KB)
    │                   │       │   └── ☕ VerifyCertResponse.java (1.5KB)
    │                   │       ├── 📁 dic/ (2 files)
    │                   │       │   ├── ☕ BatchQueryCompanyTypeAndManagerResp.java (1.2KB)
    │                   │       │   └── ☕ SetCompanyTypeAndGrantUserResponse.java (775B)
    │                   │       ├── 📁 digital/ (4 files)
    │                   │       │   ├── ☕ QueryDigitalCertGrantUserResponse.java (1.7KB)
    │                   │       │   ├── ☕ VerifyCertBaseResponse.java (1.1KB)
    │                   │       │   ├── ☕ VerifyDesireModeResponse.java (2.4KB)
    │                   │       │   └── ☕ VerifyMsmResponse.java (1.2KB)
    │                   │       ├── 📁 face/ (1 files)
    │                   │       │   └── ☕ QueryFaceResultResponse.java (6.7KB)
    │                   │       ├── 📁 file/ (1 files)
    │                   │       │   └── ☕ FileDataResponse.java (2.6KB)
    │                   │       ├── 📁 fince/ (10 files)
    │                   │       │   ├── ☕ BankBlockEV0002Body.java (12.3KB)
    │                   │       │   ├── ☕ BankBlockRequestHead.java (5.5KB)
    │                   │       │   ├── ☕ FileList.java (4.3KB)
    │                   │       │   ├── ☕ QueryCompanyApplyResponse.java (6.5KB)
    │                   │       │   ├── ☕ QueryCompanyFilingApplyResponse.java (6.0KB)
    │                   │       │   ├── ☕ QueryCompanyFinceResponse.java (1.6KB)
    │                   │       │   ├── ☕ QueryCompanyInfoByConfigResponse.java (2.6KB)
    │                   │       │   ├── ☕ QueryCompanyShareholderActualMasterResponse.java (2.9KB)
    │                   │       │   ├── ☕ QueryCompanySpareResponse.java (6.5KB)
    │                   │       │   └── ☕ SaveCompanyStakeholderInfoResponse.java (2.0KB)
    │                   │       ├── 📁 friend/ (3 files)
    │                   │       │   ├── ☕ QueryFriendCompanyUserInfoResponse.java (2.9KB)
    │                   │       │   ├── ☕ QueryUserFriendForIMResponse.java (1.4KB)
    │                   │       │   └── ☕ QueryUserMobileNameForIMResponse.java (3.8KB)
    │                   │       ├── 📁 multiorg/ (6 files)
    │                   │       │   ├── ☕ IsRelUnitResponse.java (803B)
    │                   │       │   ├── ☕ QueryMultiorgCompanyUnitTypeListResponse.java (1.1KB)
    │                   │       │   ├── ☕ QueryPositionUnitIdResponse.java (2.0KB)
    │                   │       │   ├── ☕ QueryUserUnitAndPositionResponse.java (7.0KB)
    │                   │       │   ├── ☕ QueryUserUnitTypeResponse.java (4.7KB)
    │                   │       │   └── ☕ UserDetailOpenUnitListResponse.java (1.3KB)
    │                   │       ├── 📁 position/ (4 files)
    │                   │       │   ├── ☕ GetSignUserCompanyPositionResponse.java (2.8KB)
    │                   │       │   ├── ☕ PositionCommonResponse.java (1.9KB)
    │                   │       │   ├── ☕ QueryCompanyUserPositionUnitResponse.java (1.8KB)
    │                   │       │   └── ☕ QueryUserPositionsResponse.java (1.5KB)
    │                   │       ├── 📁 role/ (9 files)
    │                   │       │   ├── ☕ CompanyTypeCodeAndManagerResp.java (1.3KB)
    │                   │       │   ├── ☕ CompanyUserHaveAuthResponse.java (1.4KB)
    │                   │       │   ├── ☕ CompanyUserRolesResponse.java (1.2KB)
    │                   │       │   ├── ☕ GetCompanyUserResponse.java (1.2KB)
    │                   │       │   ├── ☕ GetUserRoleResponse.java (3.0KB)
    │                   │       │   ├── ☕ QueryCompanyOwnRoleUserListResponse.java (1.7KB)
    │                   │       │   ├── ☕ QueryCompanyUserRoleResponse.java (1.5KB)
    │                   │       │   ├── ☕ QueryCompanyUserWithCompanyRoleResponse.java (2.7KB)
    │                   │       │   └── ☕ UserPermissionsResponse.java (3.1KB)
    │                   │       ├── 📁 subsidiary/ (1 files)
    │                   │       │   └── ☕ QueryCompanyIndustryCategoryCountResponse.java (1.6KB)
    │                   │       ├── 📁 ukey/ (4 files)
    │                   │       │   ├── ☕ GetCustCompanyUnAssignmentUKeyResponse.java (3.5KB)
    │                   │       │   ├── ☕ QueryUkeyBindMainInfoResponse.java (2.2KB)
    │                   │       │   ├── ☕ QueryUkeyResponse.java (6.6KB)
    │                   │       │   └── ☕ QueryUserUkeyBusinessResponse.java (942B)
    │                   │       └── 📁 user/ (13 files)
    │                   │           ├── ☕ CompanyUserResponse.java (6.7KB)
    │                   │           ├── ☕ CustRegInfoTotal.java (719B)
    │                   │           ├── ☕ CustUserSimpleInfoResponse.java (7.7KB)
    │                   │           ├── ☕ GetYdUserDetailInfoResponse.java (2.3KB)
    │                   │           ├── ☕ QueryBatchMobileStatusResp.java (1.1KB)
    │                   │           ├── ☕ QueryCompanyUserInfoResp.java (1.3KB)
    │                   │           ├── ☕ QueryCompanyUserInfoResponse.java (1.6KB)
    │                   │           ├── ☕ SimpleUserInfoResponse.java (1.6KB)
    │                   │           ├── ☕ UserBindCompanySimpleInfoResp.java (982B)
    │                   │           ├── ☕ UserComapnyDetailResponse.java (5.6KB)
    │                   │           ├── ☕ UserCompanyAuthStatusResp.java (5.1KB)
    │                   │           ├── ☕ UserCompanySimpleInfoResp.java (1.4KB)
    │                   │           └── ☕ UserSimpleInfoResp.java (3.3KB)
    │                   ├── 📁 config/ (4 files)
    │                   │   ├── 📁 file/ (1 files)
    │                   │   │   └── ☕ FilePathAuthUtil.java (4.8KB)
    │                   │   ├── 📁 mq/ (2 files)
    │                   │   │   ├── ☕ MQProducerConfiguration.java (1.7KB)
    │                   │   │   └── ☕ TransferAmtListener.java (6.9KB)
    │                   │   └── ☕ TencentFaceConfig.java (724B)
    │                   ├── 📁 domain/ (16 files)
    │                   │   └── 📁 service/ (16 files)
    │                   │       ├── 📁 company/ (2 files)
    │                   │       │   ├── 📁 fince/ (1 files)
    │                   │       │   └── 📁 type/ (1 files)
    │                   │       ├── 📁 data/ (4 files)
    │                   │       │   ├── ☕ DataManageDomainService.java (1.5KB)
    │                   │       │   ├── ☕ DistributedAuthLocker.java (1.8KB)
    │                   │       │   ├── ☕ FileManagerAuthService.java (908B)
    │                   │       │   └── ☕ SendMqDesireModeGeneralService.java (378B)
    │                   │       ├── 📁 impl/ (8 files)
    │                   │       │   ├── 📁 company/ (2 files)
    │                   │       │   ├── 📁 data/ (4 files)
    │                   │       │   ├── 📁 ukey/ (1 files)
    │                   │       │   └── 📁 user/ (1 files)
    │                   │       ├── 📁 ukey/ (1 files)
    │                   │       │   └── ☕ CompanyUkeyDomainService.java (499B)
    │                   │       └── 📁 user/ (1 files)
    │                   │           └── ☕ UserManageDomainService.java (1.1KB)
    │                   ├── 📁 enums/ (1 files)
    │                   │   └── ☕ TencentFaceAppCodeEnum.java (812B)
    │                   ├── 📁 feign/ (1 files)
    │                   │   └── ☕ FileManagerCenterAuthFeinRemote.java (2.2KB)
    │                   ├── 📁 interfaces/ (26 files)
    │                   │   └── 📁 controller/ (26 files)
    │                   │       ├── 📁 basic/ (1 files)
    │                   │       │   └── ☕ BasicManageController.java (11.8KB)
    │                   │       ├── 📁 change/ (1 files)
    │                   │       │   └── ☕ CustChangeManageController.java (4.5KB)
    │                   │       ├── 📁 company/ (6 files)
    │                   │       │   ├── 📁 type/ (1 files)
    │                   │       │   ├── ☕ CompanyAuthManageController.java (2.5KB)
    │                   │       │   ├── ☕ CompanySpecialVerificationController.java (1.7KB)
    │                   │       │   ├── ☕ CustAuditManageController.java (2.1KB)
    │                   │       │   ├── ☕ SearchCompanyGeneralController.java (3.4KB)
    │                   │       │   └── ☕ SearchCompanyManageController.java (70.2KB)
    │                   │       ├── 📁 custorg/ (1 files)
    │                   │       │   └── ☕ DataPermissionsController.java (2.2KB)
    │                   │       ├── 📁 dept/ (2 files)
    │                   │       │   ├── ☕ DeptUserManageController.java (16.4KB)
    │                   │       │   └── ☕ OsDeptManageController.java (17.7KB)
    │                   │       ├── 📁 digital/ (2 files)
    │                   │       │   ├── ☕ DigitalCertInfoController.java (12.0KB)
    │                   │       │   └── ☕ DigitalGrantManageController.java (7.1KB)
    │                   │       ├── 📁 face/ (1 files)
    │                   │       │   └── ☕ SearchFaceController.java (4.8KB)
    │                   │       ├── 📁 fince/ (1 files)
    │                   │       │   └── ☕ CompanyFinceManageController.java (19.1KB)
    │                   │       ├── 📁 friend/ (1 files)
    │                   │       │   └── ☕ CompanyFriendManageController.java (11.5KB)
    │                   │       ├── 📁 multiorg/ (1 files)
    │                   │       │   └── ☕ CompanyMultiorgManageController.java (10.1KB)
    │                   │       ├── 📁 position/ (1 files)
    │                   │       │   └── ☕ CompanyPositionManageController.java (11.1KB)
    │                   │       ├── 📁 role/ (1 files)
    │                   │       │   └── ☕ UserRoleManageController.java (24.9KB)
    │                   │       ├── 📁 shr/ (1 files)
    │                   │       │   └── ☕ ShrUserManageController.java (4.1KB)
    │                   │       ├── 📁 subsidiary/ (1 files)
    │                   │       │   └── ☕ CompanySubsidiaryInfoController.java (12.5KB)
    │                   │       ├── 📁 ukey/ (2 files)
    │                   │       │   ├── ☕ SearchUkeyManageController.java (30.8KB)
    │                   │       │   └── ☕ VerifyUkeyManageController.java (5.6KB)
    │                   │       └── 📁 user/ (3 files)
    │                   │           ├── ☕ SearchCust2ManageController.java (44.3KB)
    │                   │           ├── ☕ SearchUserCompanyController.java (7.6KB)
    │                   │           └── ☕ SearchUserManageController.java (22.6KB)
    │                   ├── 📁 utils/ (9 files)
    │                   │   ├── ☕ CertUtils.java (2.7KB)
    │                   │   ├── ☕ DeptTreeUtil.java (9.6KB)
    │                   │   ├── ☕ ExcelReaderWriterUtil.java (5.1KB)
    │                   │   ├── ☕ ExcelUtil.java (2.4KB)
    │                   │   ├── ☕ GeneralLockRedisKeyConstant.java (330B)
    │                   │   ├── ☕ MockMultipart.java (3.7KB)
    │                   │   ├── ☕ NumberValidatorUtils.java (1.8KB)
    │                   │   ├── ☕ TencentSignUtil.java (1.3KB)
    │                   │   └── ☕ ThreadPoolUtil.java (656B)
    │                   └── ☕ GeneralApplication.java (1.1KB)
    └── 📁 resources/ (1 files)
        └── 🔧 bootstrap.properties (3.5KB)
📋 pom.xml (2.3KB)

## DDD架构分层要求
当前后端采用DDD（领域驱动设计）架构，请严格遵循以下分层结构：

1. **Controller层** (interfaces/): 对外REST接口，负责接收HTTP请求和参数校验
2. **Application Service层** (application/service): 应用服务，协调业务流程，不包含业务逻辑
3. **Domain Service层** (domain/service): 领域服务，核心业务逻辑的实现
4. **Domain Mapper层** (domain/mapper): 数据访问层接口，定义数据库操作方法
5. **Feign Client层** (application/feign): 外部服务调用接口，处理微服务间通信
6. **DTO层** (interfaces/dto): 数据传输对象，用于接口入参和出参
7. **Entity层** (domain/entity): 领域实体，表示业务核心概念
8. **XML映射** (resources/mapper): MyBatis SQL映射，具体的SQL实现



## 决策原则
请根据DDD架构原则和业务需求，决定如何实现新的API接口功能：

### Controller层决策原则
1. 如果存在功能相关的Controller且职责单一，优先选择 `enhance_existing`
2. 如果现有Controller职责过重或业务领域不同，选择 `create_new`
3. 考虑REST API的资源分组和版本管理
4. 如果Controller层不存在，则选择 `none`

### Application Service层决策原则
1. 如果存在相关的应用服务且流程相似，优先选择 `enhance_existing`
2. 如果业务流程复杂或涉及不同的业务上下文，选择 `create_new`
3. 应用服务应当薄薄一层，主要负责编排和协调
4. 如果应用服务层不存在，则选择 `none`

### Domain Service层决策原则
1. 如果存在相关的领域服务且业务逻辑相关，优先选择 `enhance_existing`
2. 如果涉及新的业务领域或核心逻辑差异很大，选择 `create_new`
3. 领域服务应当承载核心业务逻辑
4. 如果领域服务层不存在，则选择 `none`

### Domain Mapper层决策原则
1. 如果操作相同的数据表或实体，优先选择 `enhance_existing`
2. 如果涉及新的数据表或查询逻辑复杂，选择 `create_new`
3. 每个Mapper通常对应一个聚合根或核心实体
4. 如果Mapper层不存在，则选择 `none`

### Feign Client层决策原则
1. 如果调用相同的外部服务，优先选择 `enhance_existing`
2. 如果调用新的外部服务或不同的服务版本，选择 `create_new`
3. 按照外部服务进行分组
4. 如果Feign Client层不存在，则选择 `none`

## 输出格式
请严格按照以下JSON格式返回决策结果：

```json
{
  "controller": {
    "action": "enhance_existing 或 create_new",
    "target_class": "目标类名（如果是enhance_existing）",
    "package_path": "建议的包路径",
    "reason": "详细的决策原因，说明为什么选择这种方式"
  },
  "application_service": {
    "action": "enhance_existing 或 create_new",
    "target_class": "目标类名（如果是enhance_existing）",
    "package_path": "建议的包路径",
    "reason": "详细的决策原因，说明为什么选择这种方式"
  },
  "domain_service": {
    "action": "enhance_existing 或 create_new",
    "target_class": "目标类名（如果是enhance_existing）",
    "package_path": "建议的包路径",
    "reason": "详细的决策原因，说明为什么选择这种方式"
  },
  "mapper": {
    "action": "enhance_existing 或 create_new",
    "target_class": "目标类名（如果是enhance_existing）",
    "package_path": "建议的包路径",
    "reason": "详细的决策原因，说明为什么选择这种方式"
  },
  "feign_client": {
    "action": "enhance_existing 或 create_new",
    "target_class": "目标类名（如果是enhance_existing）",
    "package_path": "建议的包路径",
    "reason": "详细的决策原因，说明为什么选择这种方式"
  },
  "dto": {
    "action": "create_new",
    "request_dto": "请求DTO类名",
    "response_dto": "响应DTO类名",
    "package_path": "建议的包路径",
    "reason": "DTO通常需要为每个接口单独创建"
  },
  "entity": {
    "action": "enhance_existing 或 create_new",
    "target_class": "目标类名（如果是enhance_existing）",
    "package_path": "建议的包路径",
    "reason": "详细的决策原因，说明为什么选择这种方式"
  }
}
```

请仔细分析项目结构，遵循DDD架构原则，给出合理的决策建议。
2025-07-24 10:43:03 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 10:43:03 - src.corder_integration.code_generator.llm_decision_maker - INFO - 🤖 LLM响应: ```json
{
  "controller": {
    "action": "enhance_existing",
    "target_class": "CompanyMultiorgManageController",
    "package_path": "com.yljr.user.basicgeneral.interfaces.controller.multiorg",
    "reason": "根据项目结构，已存在CompanyMultiorgManageController位于multiorg目录下，职责单一且与multiorg业务直接相关，符合REST资源分组原则。该Controller已包含其他multiorg相关接口，新增查询组织单元列表接口属于同一业务领域，增强现有类可避免重复创建Controller，保持代码一致性。"
  },
  "application_service": {
    "action": "enhance_existing",
    "target_class": "CompanyMultorgManageService",
    "package_path": "com.yljr.user.basicgeneral.application.service.multiorg",
    "reason": "已存在CompanyMultorgManageService应用服务，位于multiorg目录下，专门处理多组织相关业务。查询组织单元列表属于该服务的核心职责范围，增强现有服务可复用已有业务编排逻辑，保持服务边界清晰。"
  },
  "domain_service": {
    "action": "create_new",
    "target_class": "MultiorgUnitQueryDomainService",
    "package_path": "com.yljr.user.basicgeneral.domain.service.multiorg",
    "reason": "当前domain/service层下无multiorg相关领域服务，查询组织单元信息涉及复杂的筛选逻辑（按编码、状态、ID列表等），属于核心业务规则，应独立封装为领域服务。新建服务可专注于组织单元查询的领域逻辑，符合DDD中领域服务应承载核心业务规则的原则。"
  },
  "mapper": {
    "action": "create_new",
    "target_class": "CustMultiorgUnitMapper",
    "package_path": "com.yljr.user.basicgeneral.domain.mapper.multiorg",
    "reason": "需操作t_cust_multiorg_unit表，当前结构中未发现该表的Mapper。根据DDD原则，每个聚合根应有独立的Mapper接口，新建Mapper可专门处理组织单元实体的持久化操作，支持动态查询条件构建。"
  },
  "feign_client": {
    "action": "none",
    "target_class": "",
    "package_path": "",
    "reason": "根据需求描述，该接口仅涉及内部数据库查询（t_cust_multiorg_unit表），无外部服务调用需求，因此无需创建或增强Feign Client。"
  },
  "dto": {
    "action": "create_new",
    "request_dto": "QueryCompanyUnitListRequest",
    "response_dto": "QueryCompanyUnitListResponse",
    "package_path": "com.yljr.user.basicgeneral.interfaces.dto.multiorg",
    "reason": "需创建专用的请求/响应DTO以匹配API参数结构。请求DTO需包含unitCode、openStatus、unitList等可选参数，响应DTO需匹配响应字段（unitId、unitTypeDicType等）。DTO应独立于其他接口，避免耦合。"
  },
  "entity": {
    "action": "create_new",
    "target_class": "CustMultiorgUnitEntity",
    "package_path": "com.yljr.user.basicgeneral.domain.entity.multiorg",
    "reason": "t_cust_multiorg_unit表对应的领域实体不存在，需新建实体类以映射数据库表结构。实体应包含unitId、unitTypeDicType、unitTypeId、openStatus、unitCode、unitName等字段，作为聚合根管理组织单元生命周期。"
  }
}
```
2025-07-24 10:43:03 - src.corder_integration.code_generator.llm_decision_maker - INFO - 🔍 提取到JSON: {
  "controller": {
    "action": "enhance_existing",
    "target_class": "CompanyMultiorgManageController",
    "package_path": "com.yljr.user.basicgeneral.interfaces.controller.multiorg",
    "reaso...
2025-07-24 10:43:03 - src.corder_integration.code_generator.llm_decision_maker - INFO - ✅ LLM决策结果验证通过，包含字段: ['controller', 'application_service', 'domain_service', 'mapper', 'feign_client', 'dto', 'entity']
2025-07-24 10:43:03 - src.corder_integration.code_generator.llm_decision_maker - INFO - 🔧 添加service字段以保持向后兼容
2025-07-24 10:43:03 - src.corder_integration.code_generator.llm_decision_maker - INFO - ✅ LLM决策完成
2025-07-24 10:43:03 - src.corder_integration.code_generator.strategy1_manager - INFO - 📋 决策结果:
2025-07-24 10:43:03 - src.corder_integration.code_generator.strategy1_manager - INFO -   controller:
2025-07-24 10:43:03 - src.corder_integration.code_generator.strategy1_manager - INFO -     - 操作: enhance_existing
2025-07-24 10:43:03 - src.corder_integration.code_generator.strategy1_manager - INFO -     - 目标类: CompanyMultiorgManageController
2025-07-24 10:43:03 - src.corder_integration.code_generator.strategy1_manager - INFO -     - 包路径: com.yljr.user.basicgeneral.interfaces.controller.multiorg
2025-07-24 10:43:03 - src.corder_integration.code_generator.strategy1_manager - INFO -     - 原因: 根据项目结构，已存在CompanyMultiorgManageController位于multiorg目录下，职责单一且与multiorg业务直接相关，符合REST资源分组原则。该Controller已包含其他multiorg相关接口，新增查询组织单元列表接口属于同一业务领域，增强现有类可避免重复创建Controller，保持代码一致性。
2025-07-24 10:43:03 - src.corder_integration.code_generator.strategy1_manager - INFO -   application_service:
2025-07-24 10:43:03 - src.corder_integration.code_generator.strategy1_manager - INFO -     - 操作: enhance_existing
2025-07-24 10:43:03 - src.corder_integration.code_generator.strategy1_manager - INFO -     - 目标类: CompanyMultorgManageService
2025-07-24 10:43:03 - src.corder_integration.code_generator.strategy1_manager - INFO -     - 包路径: com.yljr.user.basicgeneral.application.service.multiorg
2025-07-24 10:43:03 - src.corder_integration.code_generator.strategy1_manager - INFO -     - 原因: 已存在CompanyMultorgManageService应用服务，位于multiorg目录下，专门处理多组织相关业务。查询组织单元列表属于该服务的核心职责范围，增强现有服务可复用已有业务编排逻辑，保持服务边界清晰。
2025-07-24 10:43:03 - src.corder_integration.code_generator.strategy1_manager - INFO -   domain_service:
2025-07-24 10:43:03 - src.corder_integration.code_generator.strategy1_manager - INFO -     - 操作: create_new
2025-07-24 10:43:03 - src.corder_integration.code_generator.strategy1_manager - INFO -     - 目标类: MultiorgUnitQueryDomainService
2025-07-24 10:43:03 - src.corder_integration.code_generator.strategy1_manager - INFO -     - 包路径: com.yljr.user.basicgeneral.domain.service.multiorg
2025-07-24 10:43:03 - src.corder_integration.code_generator.strategy1_manager - INFO -     - 原因: 当前domain/service层下无multiorg相关领域服务，查询组织单元信息涉及复杂的筛选逻辑（按编码、状态、ID列表等），属于核心业务规则，应独立封装为领域服务。新建服务可专注于组织单元查询的领域逻辑，符合DDD中领域服务应承载核心业务规则的原则。
2025-07-24 10:43:03 - src.corder_integration.code_generator.strategy1_manager - INFO -   mapper:
2025-07-24 10:43:03 - src.corder_integration.code_generator.strategy1_manager - INFO -     - 操作: create_new
2025-07-24 10:43:03 - src.corder_integration.code_generator.strategy1_manager - INFO -     - 目标类: CustMultiorgUnitMapper
2025-07-24 10:43:03 - src.corder_integration.code_generator.strategy1_manager - INFO -     - 包路径: com.yljr.user.basicgeneral.domain.mapper.multiorg
2025-07-24 10:43:03 - src.corder_integration.code_generator.strategy1_manager - INFO -     - 原因: 需操作t_cust_multiorg_unit表，当前结构中未发现该表的Mapper。根据DDD原则，每个聚合根应有独立的Mapper接口，新建Mapper可专门处理组织单元实体的持久化操作，支持动态查询条件构建。
2025-07-24 10:43:03 - src.corder_integration.code_generator.strategy1_manager - INFO -   feign_client:
2025-07-24 10:43:03 - src.corder_integration.code_generator.strategy1_manager - INFO -     - 操作: none
2025-07-24 10:43:03 - src.corder_integration.code_generator.strategy1_manager - INFO -     - 目标类: 
2025-07-24 10:43:03 - src.corder_integration.code_generator.strategy1_manager - INFO -     - 包路径: 
2025-07-24 10:43:03 - src.corder_integration.code_generator.strategy1_manager - INFO -     - 原因: 根据需求描述，该接口仅涉及内部数据库查询（t_cust_multiorg_unit表），无外部服务调用需求，因此无需创建或增强Feign Client。
2025-07-24 10:43:03 - src.corder_integration.code_generator.strategy1_manager - INFO -   dto:
2025-07-24 10:43:03 - src.corder_integration.code_generator.strategy1_manager - INFO -     - 操作: create_new
2025-07-24 10:43:03 - src.corder_integration.code_generator.strategy1_manager - INFO -     - 目标类: unknown
2025-07-24 10:43:03 - src.corder_integration.code_generator.strategy1_manager - INFO -     - 包路径: com.yljr.user.basicgeneral.interfaces.dto.multiorg
2025-07-24 10:43:03 - src.corder_integration.code_generator.strategy1_manager - INFO -     - 原因: 需创建专用的请求/响应DTO以匹配API参数结构。请求DTO需包含unitCode、openStatus、unitList等可选参数，响应DTO需匹配响应字段（unitId、unitTypeDicType等）。DTO应独立于其他接口，避免耦合。
2025-07-24 10:43:03 - src.corder_integration.code_generator.strategy1_manager - INFO -   entity:
2025-07-24 10:43:03 - src.corder_integration.code_generator.strategy1_manager - INFO -     - 操作: create_new
2025-07-24 10:43:03 - src.corder_integration.code_generator.strategy1_manager - INFO -     - 目标类: CustMultiorgUnitEntity
2025-07-24 10:43:03 - src.corder_integration.code_generator.strategy1_manager - INFO -     - 包路径: com.yljr.user.basicgeneral.domain.entity.multiorg
2025-07-24 10:43:03 - src.corder_integration.code_generator.strategy1_manager - INFO -     - 原因: t_cust_multiorg_unit表对应的领域实体不存在，需新建实体类以映射数据库表结构。实体应包含unitId、unitTypeDicType、unitTypeId、openStatus、unitCode、unitName等字段，作为聚合根管理组织单元生命周期。
2025-07-24 10:43:03 - src.corder_integration.code_generator.strategy1_manager - INFO -   service:
2025-07-24 10:43:03 - src.corder_integration.code_generator.strategy1_manager - INFO -     - 操作: enhance_existing
2025-07-24 10:43:03 - src.corder_integration.code_generator.strategy1_manager - INFO -     - 目标类: CompanyMultorgManageService
2025-07-24 10:43:03 - src.corder_integration.code_generator.strategy1_manager - INFO -     - 包路径: com.yljr.user.basicgeneral.application.service.multiorg
2025-07-24 10:43:03 - src.corder_integration.code_generator.strategy1_manager - INFO -     - 原因: 已存在CompanyMultorgManageService应用服务，位于multiorg目录下，专门处理多组织相关业务。查询组织单元列表属于该服务的核心职责范围，增强现有服务可复用已有业务编排逻辑，保持服务边界清晰。
2025-07-24 10:43:03 - src.corder_integration.code_generator.strategy1_manager - INFO - 🔧 第3步：初始化代码生成器
2025-07-24 10:43:03 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 📁 初始化备份目录: /Users/renyu/Documents/create_project/链数中建一局_1753324841/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general/backup/strategy1_backup_20250724_104303
2025-07-24 10:43:03 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 LLM客户端支持chat方法: True
2025-07-24 10:43:03 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 检测到火山引擎客户端: True
2025-07-24 10:43:03 - src.corder_integration.code_generator.strategy1_manager - INFO - 💻 第4步：大模型自主生成代码并写入文件
2025-07-24 10:43:03 - src.corder_integration.code_generator.strategy1_manager - INFO - 🔨 生成dto层代码
2025-07-24 10:43:03 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🤖 开始生成dto代码（支持文件操作）
2025-07-24 10:43:03 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 使用_generate_with_function_calling生成dto层代码
2025-07-24 10:43:03 - src.corder_integration.code_generator.function_calling_code_generator - INFO -   - 操作: create_new
2025-07-24 10:43:03 - src.corder_integration.code_generator.function_calling_code_generator - INFO -   - 目标类: None
2025-07-24 10:43:03 - src.corder_integration.code_generator.function_calling_code_generator - INFO -   - 包路径: com.yljr.user.basicgeneral.interfaces.dto.multiorg
2025-07-24 10:43:03 - src.corder_integration.code_generator.function_calling_code_generator - INFO - ✅ 成功使用简单模板渲染function_calling_prompt
2025-07-24 10:43:03 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第1轮开始
2025-07-24 10:43:03 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 10:43:07 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 10:43:07 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 10:43:07 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: file_exists
2025-07-24 10:43:07 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 🔍 检查文件存在: src/main/java/com/yljr/user/basicgeneral/interfaces/dto/multiorg = False
2025-07-24 10:43:07 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: file_exists
2025-07-24 10:43:07 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第2轮开始
2025-07-24 10:43:07 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 10:43:09 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 10:43:09 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 10:43:09 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: file_exists
2025-07-24 10:43:09 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 🔍 检查文件存在: src/main/java/com/yljr/user/basicgeneral/interfaces/dto = False
2025-07-24 10:43:09 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: file_exists
2025-07-24 10:43:09 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第3轮开始
2025-07-24 10:43:09 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 10:43:11 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 10:43:11 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 10:43:11 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: list_files
2025-07-24 10:43:11 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 📂 列出文件: src/main/java/com/yljr/user/basicgeneral/interfaces (0 个文件)
2025-07-24 10:43:11 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: list_files
2025-07-24 10:43:11 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第4轮开始
2025-07-24 10:43:11 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 10:43:14 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 10:43:14 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 10:43:14 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: create_directory
2025-07-24 10:43:14 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 📁 创建目录: src/main/java/com/yljr/user/basicgeneral/interfaces/dto/multiorg
2025-07-24 10:43:14 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: create_directory
2025-07-24 10:43:14 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第5轮开始
2025-07-24 10:43:14 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 10:43:29 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 10:43:29 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 10:43:29 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: write_file
2025-07-24 10:43:29 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 📝 覆盖写入文件: src/main/java/com/yljr/user/basicgeneral/interfaces/dto/multiorg/QueryCompanyUnitListRequest.java (1725 字符)
2025-07-24 10:43:29 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: write_file
2025-07-24 10:43:29 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第6轮开始
2025-07-24 10:43:29 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 10:43:55 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 10:43:55 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 10:43:55 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: write_file
2025-07-24 10:43:55 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 📝 覆盖写入文件: src/main/java/com/yljr/user/basicgeneral/interfaces/dto/multiorg/QueryCompanyUnitListResponse.java (2554 字符)
2025-07-24 10:43:55 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: write_file
2025-07-24 10:43:55 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第7轮开始
2025-07-24 10:43:55 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 10:43:59 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 10:43:59 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 10:43:59 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: read_file
2025-07-24 10:43:59 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 📖 读取文件: src/main/java/com/yljr/user/basicgeneral/interfaces/dto/multiorg/QueryCompanyUnitListRequest.java (1725 字符)
2025-07-24 10:43:59 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: read_file
2025-07-24 10:43:59 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第8轮开始
2025-07-24 10:43:59 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 10:44:01 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 10:44:01 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 10:44:01 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: read_file
2025-07-24 10:44:01 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 📖 读取文件: src/main/java/com/yljr/user/basicgeneral/interfaces/dto/multiorg/QueryCompanyUnitListResponse.java (2554 字符)
2025-07-24 10:44:01 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: read_file
2025-07-24 10:44:01 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第9轮开始
2025-07-24 10:44:01 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 10:44:14 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 10:44:14 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'str'>
2025-07-24 10:44:14 - src.corder_integration.code_generator.function_calling_code_generator - WARNING - ⚠️ 收到意外的响应格式: <class 'str'>
2025-07-24 10:44:14 - src.corder_integration.code_generator.function_calling_code_generator - INFO - ✅ Function calling对话完成，共9轮
2025-07-24 10:44:14 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🗑️ Function Calling清理备份目录: /Users/renyu/Documents/create_project/链数中建一局_1753324841/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general/backup/strategy1_backup_20250724_104303
2025-07-24 10:44:14 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🗑️ 删除空的备份根目录: /Users/renyu/Documents/create_project/链数中建一局_1753324841/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general/backup
2025-07-24 10:44:14 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🧹 Function Calling备份清理完成，删除了 1 个目录
2025-07-24 10:44:14 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🧹 Function Calling完成后清理了 1 个备份文件
2025-07-24 10:44:14 - src.corder_integration.code_generator.strategy1_manager - INFO - 🔨 生成entity层代码
2025-07-24 10:44:14 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🤖 开始生成entity代码（支持文件操作）
2025-07-24 10:44:14 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 使用_generate_with_function_calling生成entity层代码
2025-07-24 10:44:14 - src.corder_integration.code_generator.function_calling_code_generator - INFO -   - 操作: create_new
2025-07-24 10:44:14 - src.corder_integration.code_generator.function_calling_code_generator - INFO -   - 目标类: CustMultiorgUnitEntity
2025-07-24 10:44:14 - src.corder_integration.code_generator.function_calling_code_generator - INFO -   - 包路径: com.yljr.user.basicgeneral.domain.entity.multiorg
2025-07-24 10:44:14 - src.corder_integration.code_generator.function_calling_code_generator - INFO - ✅ 成功使用简单模板渲染function_calling_prompt
2025-07-24 10:44:14 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第1轮开始
2025-07-24 10:44:14 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 10:44:18 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 10:44:18 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 10:44:18 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: file_exists
2025-07-24 10:44:18 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 🔍 检查文件存在: src/main/java/com/yljr/user/basicgeneral/domain/entity/multiorg/CustMultiorgUnitEntity.java = False
2025-07-24 10:44:18 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: file_exists
2025-07-24 10:44:18 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第2轮开始
2025-07-24 10:44:18 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 10:44:35 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 10:44:35 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 10:44:35 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: write_file
2025-07-24 10:44:35 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 📝 覆盖写入文件: src/main/java/com/yljr/user/basicgeneral/domain/entity/multiorg/CustMultiorgUnitEntity.java (1776 字符)
2025-07-24 10:44:35 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: write_file
2025-07-24 10:44:35 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第3轮开始
2025-07-24 10:44:35 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 10:44:38 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 10:44:38 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 10:44:38 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: read_file
2025-07-24 10:44:38 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 📖 读取文件: src/main/java/com/yljr/user/basicgeneral/domain/entity/multiorg/CustMultiorgUnitEntity.java (1776 字符)
2025-07-24 10:44:38 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: read_file
2025-07-24 10:44:38 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第4轮开始
2025-07-24 10:44:38 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 10:44:51 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 10:44:51 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'str'>
2025-07-24 10:44:51 - src.corder_integration.code_generator.function_calling_code_generator - WARNING - ⚠️ 收到意外的响应格式: <class 'str'>
2025-07-24 10:44:51 - src.corder_integration.code_generator.function_calling_code_generator - INFO - ✅ Function calling对话完成，共4轮
2025-07-24 10:44:51 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🧹 Function Calling备份清理完成，删除了 0 个目录
2025-07-24 10:44:51 - src.corder_integration.code_generator.strategy1_manager - INFO - 🔨 生成mapper层代码
2025-07-24 10:44:51 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🤖 开始生成mapper代码（支持文件操作）
2025-07-24 10:44:51 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 使用_generate_with_function_calling生成mapper层代码
2025-07-24 10:44:51 - src.corder_integration.code_generator.function_calling_code_generator - INFO -   - 操作: create_new
2025-07-24 10:44:51 - src.corder_integration.code_generator.function_calling_code_generator - INFO -   - 目标类: CustMultiorgUnitMapper
2025-07-24 10:44:51 - src.corder_integration.code_generator.function_calling_code_generator - INFO -   - 包路径: com.yljr.user.basicgeneral.domain.mapper.multiorg
2025-07-24 10:44:51 - src.corder_integration.code_generator.function_calling_code_generator - INFO - ✅ 成功使用简单模板渲染function_calling_prompt
2025-07-24 10:44:51 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第1轮开始
2025-07-24 10:44:51 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 10:44:55 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 10:44:55 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 10:44:55 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: file_exists
2025-07-24 10:44:55 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 🔍 检查文件存在: src/main/java/com/yljr/user/basicgeneral/domain/mapper/multiorg/CustMultiorgUnitMapper.java = False
2025-07-24 10:44:55 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: file_exists
2025-07-24 10:44:55 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第2轮开始
2025-07-24 10:44:55 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 10:45:13 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 10:45:13 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 10:45:13 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: write_file
2025-07-24 10:45:13 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 📝 覆盖写入文件: src/main/java/com/yljr/user/basicgeneral/domain/mapper/multiorg/CustMultiorgUnitMapper.java (1756 字符)
2025-07-24 10:45:13 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: write_file
2025-07-24 10:45:13 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第3轮开始
2025-07-24 10:45:13 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 10:45:15 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 10:45:15 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 10:45:15 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: file_exists
2025-07-24 10:45:15 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 🔍 检查文件存在: src/main/resources/mapper/CustMultiorgUnitMapper.xml = False
2025-07-24 10:45:15 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: file_exists
2025-07-24 10:45:15 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第4轮开始
2025-07-24 10:45:15 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 10:45:40 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 10:45:40 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 10:45:40 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: write_file
2025-07-24 10:45:40 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 📝 覆盖写入文件: src/main/resources/mapper/CustMultiorgUnitMapper.xml (3521 字符)
2025-07-24 10:45:40 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: write_file
2025-07-24 10:45:40 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第5轮开始
2025-07-24 10:45:40 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 10:45:44 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 10:45:44 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 10:45:44 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: read_file
2025-07-24 10:45:44 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 📖 读取文件: src/main/java/com/yljr/user/basicgeneral/domain/mapper/multiorg/CustMultiorgUnitMapper.java (1756 字符)
2025-07-24 10:45:44 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: read_file
2025-07-24 10:45:44 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第6轮开始
2025-07-24 10:45:44 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 10:45:47 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 10:45:47 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 10:45:47 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: read_file
2025-07-24 10:45:47 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 📖 读取文件: src/main/resources/mapper/CustMultiorgUnitMapper.xml (3521 字符)
2025-07-24 10:45:47 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: read_file
2025-07-24 10:45:47 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第7轮开始
2025-07-24 10:45:47 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 10:45:50 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 10:45:50 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 10:45:50 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: file_exists
2025-07-24 10:45:50 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 🔍 检查文件存在: src/main/java/com/yljr/user/basicgeneral/interfaces/dto/multiorg/QueryMultiorgCompanyUnitListRequest.java = False
2025-07-24 10:45:50 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: file_exists
2025-07-24 10:45:50 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第8轮开始
2025-07-24 10:45:50 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 10:45:55 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 10:45:55 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 10:45:55 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: file_exists
2025-07-24 10:45:55 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 🔍 检查文件存在: src/main/java/com/yljr/user/basicgeneral/interfaces/dto/multiorg/QueryMultiorgCompanyUnitListResponse.java = False
2025-07-24 10:45:55 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: file_exists
2025-07-24 10:45:55 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第9轮开始
2025-07-24 10:45:55 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 10:46:02 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 10:46:02 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 10:46:02 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: create_directory
2025-07-24 10:46:02 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 📁 创建目录: src/main/java/com/yljr/user/basicgeneral/interfaces/dto/multiorg
2025-07-24 10:46:02 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: create_directory
2025-07-24 10:46:02 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第10轮开始
2025-07-24 10:46:02 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 10:46:19 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 10:46:19 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 10:46:19 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: write_file
2025-07-24 10:46:19 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 📝 覆盖写入文件: src/main/java/com/yljr/user/basicgeneral/interfaces/dto/multiorg/QueryMultiorgCompanyUnitListRequest.java (1773 字符)
2025-07-24 10:46:19 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: write_file
2025-07-24 10:46:19 - src.corder_integration.code_generator.function_calling_code_generator - WARNING - ⚠️ Function calling达到最大轮数10
2025-07-24 10:46:19 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🧹 Function Calling备份清理完成，删除了 0 个目录
2025-07-24 10:46:19 - src.corder_integration.code_generator.strategy1_manager - INFO - 🔨 生成domain_service层代码
2025-07-24 10:46:19 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🤖 开始生成domain_service代码（支持文件操作）
2025-07-24 10:46:19 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 使用_generate_with_function_calling生成domain_service层代码
2025-07-24 10:46:19 - src.corder_integration.code_generator.function_calling_code_generator - INFO -   - 操作: create_new
2025-07-24 10:46:19 - src.corder_integration.code_generator.function_calling_code_generator - INFO -   - 目标类: MultiorgUnitQueryDomainService
2025-07-24 10:46:19 - src.corder_integration.code_generator.function_calling_code_generator - INFO -   - 包路径: com.yljr.user.basicgeneral.domain.service.multiorg
2025-07-24 10:46:19 - src.corder_integration.code_generator.function_calling_code_generator - INFO - ✅ 成功使用简单模板渲染function_calling_prompt
2025-07-24 10:46:19 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第1轮开始
2025-07-24 10:46:19 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 10:46:23 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 10:46:23 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 10:46:23 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: file_exists
2025-07-24 10:46:23 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 🔍 检查文件存在: src/main/java/com/yljr/user/basicgeneral/domain/service/multiorg/MultiorgUnitQueryDomainService.java = False
2025-07-24 10:46:23 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: file_exists
2025-07-24 10:46:23 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第2轮开始
2025-07-24 10:46:23 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 10:46:25 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 10:46:25 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 10:46:25 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: create_directory
2025-07-24 10:46:25 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 📁 创建目录: src/main/java/com/yljr/user/basicgeneral/domain/service/multiorg
2025-07-24 10:46:25 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: create_directory
2025-07-24 10:46:25 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第3轮开始
2025-07-24 10:46:25 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 10:47:12 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 10:47:12 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 10:47:12 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: write_file
2025-07-24 10:47:12 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 📝 覆盖写入文件: src/main/java/com/yljr/user/basicgeneral/domain/service/multiorg/MultiorgUnitQueryDomainService.java (6392 字符)
2025-07-24 10:47:12 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: write_file
2025-07-24 10:47:12 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第4轮开始
2025-07-24 10:47:12 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 10:47:15 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 10:47:15 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 10:47:15 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: read_file
2025-07-24 10:47:15 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 📖 读取文件: src/main/java/com/yljr/user/basicgeneral/domain/service/multiorg/MultiorgUnitQueryDomainService.java (6392 字符)
2025-07-24 10:47:15 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: read_file
2025-07-24 10:47:15 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第5轮开始
2025-07-24 10:47:15 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 10:47:18 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 10:47:18 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 10:47:18 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: file_exists
2025-07-24 10:47:18 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 🔍 检查文件存在: src/main/java/com/yljr/user/basicgeneral/interfaces/dto/multiorg/QueryMultiorgCompanyUnitListRequest.java = True
2025-07-24 10:47:18 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: file_exists
2025-07-24 10:47:18 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第6轮开始
2025-07-24 10:47:18 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 10:47:20 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 10:47:20 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 10:47:20 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: file_exists
2025-07-24 10:47:20 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 🔍 检查文件存在: src/main/java/com/yljr/user/basicgeneral/interfaces/dto/multiorg/QueryMultiorgCompanyUnitListResponse.java = False
2025-07-24 10:47:20 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: file_exists
2025-07-24 10:47:20 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第7轮开始
2025-07-24 10:47:20 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 10:47:23 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 10:47:23 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 10:47:23 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: file_exists
2025-07-24 10:47:23 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 🔍 检查文件存在: src/main/java/com/yljr/user/basicgeneral/interfaces/dto/multiorg/MultiorgCompanyUnitDTO.java = False
2025-07-24 10:47:23 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: file_exists
2025-07-24 10:47:23 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第8轮开始
2025-07-24 10:47:23 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 10:47:26 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 10:47:26 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 10:47:26 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: create_directory
2025-07-24 10:47:26 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 📁 创建目录: src/main/java/com/yljr/user/basicgeneral/interfaces/dto/multiorg
2025-07-24 10:47:26 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: create_directory
2025-07-24 10:47:26 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第9轮开始
2025-07-24 10:47:26 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 10:47:45 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 10:47:45 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 10:47:45 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: write_file
2025-07-24 10:47:45 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 📝 覆盖写入文件: src/main/java/com/yljr/user/basicgeneral/interfaces/dto/multiorg/MultiorgCompanyUnitDTO.java (2071 字符)
2025-07-24 10:47:45 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: write_file
2025-07-24 10:47:45 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第10轮开始
2025-07-24 10:47:45 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 10:47:58 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 10:47:58 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 10:47:58 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: write_file
2025-07-24 10:47:58 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 📝 覆盖写入文件: src/main/java/com/yljr/user/basicgeneral/interfaces/dto/multiorg/QueryMultiorgCompanyUnitListResponse.java (1006 字符)
2025-07-24 10:47:58 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: write_file
2025-07-24 10:47:58 - src.corder_integration.code_generator.function_calling_code_generator - WARNING - ⚠️ Function calling达到最大轮数10
2025-07-24 10:47:58 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🧹 Function Calling备份清理完成，删除了 0 个目录
2025-07-24 10:47:58 - src.corder_integration.code_generator.strategy1_manager - INFO - 🔨 生成application_service层代码
2025-07-24 10:47:58 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🤖 开始生成application_service代码（支持文件操作）
2025-07-24 10:47:58 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 使用_generate_with_function_calling生成application_service层代码
2025-07-24 10:47:58 - src.corder_integration.code_generator.function_calling_code_generator - INFO -   - 操作: enhance_existing
2025-07-24 10:47:58 - src.corder_integration.code_generator.function_calling_code_generator - INFO -   - 目标类: CompanyMultorgManageService
2025-07-24 10:47:58 - src.corder_integration.code_generator.function_calling_code_generator - INFO -   - 包路径: com.yljr.user.basicgeneral.application.service.multiorg
2025-07-24 10:47:58 - src.corder_integration.code_generator.function_calling_code_generator - INFO - ✅ 成功使用简单模板渲染function_calling_prompt
2025-07-24 10:47:58 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第1轮开始
2025-07-24 10:47:58 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 10:48:02 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 10:48:02 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 10:48:02 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: file_exists
2025-07-24 10:48:02 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 🔍 检查文件存在: src/main/java/com/yljr/user/basicgeneral/application/service/multiorg/CompanyMultorgManageService.java = True
2025-07-24 10:48:02 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: file_exists
2025-07-24 10:48:02 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第2轮开始
2025-07-24 10:48:02 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 10:48:10 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 10:48:10 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 10:48:10 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: read_file
2025-07-24 10:48:10 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 📖 读取文件: src/main/java/com/yljr/user/basicgeneral/application/service/multiorg/CompanyMultorgManageService.java (4784 字符)
2025-07-24 10:48:10 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: read_file
2025-07-24 10:48:10 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第3轮开始
2025-07-24 10:48:10 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 10:48:20 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 10:48:20 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 10:48:20 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: write_file
2025-07-24 10:48:20 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 📝 覆盖写入文件: src/main/java/com/yljr/user/basicgeneral/beans/req/multiorg/QueryCompanyUnitListRequest.java (722 字符)
2025-07-24 10:48:20 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: write_file
2025-07-24 10:48:20 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第4轮开始
2025-07-24 10:48:20 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 10:48:31 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 10:48:31 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 10:48:31 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: write_file
2025-07-24 10:48:31 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 📝 覆盖写入文件: src/main/java/com/yljr/user/basicgeneral/beans/resp/multiorg/QueryCompanyUnitListResponse.java (877 字符)
2025-07-24 10:48:31 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: write_file
2025-07-24 10:48:31 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第5轮开始
2025-07-24 10:48:31 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 10:48:39 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 10:48:39 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 10:48:39 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: replace_text
2025-07-24 10:48:39 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 📋 备份文件: src/main/java/com/yljr/user/basicgeneral/application/service/multiorg/CompanyMultorgManageService.java -> /Users/renyu/Documents/create_project/链数中建一局_1753324841/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general/backup/strategy1_backup_20250724_104303/src/main/java/com/yljr/user/basicgeneral/application/service/multiorg/CompanyMultorgManageService.java
2025-07-24 10:48:39 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 🔄 文本替换成功: src/main/java/com/yljr/user/basicgeneral/application/service/multiorg/CompanyMultorgManageService.java (替换了 1 处匹配)
2025-07-24 10:48:39 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO -    原文本长度: 248 字符
2025-07-24 10:48:39 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO -    新文本长度: 428 字符
2025-07-24 10:48:39 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: replace_text
2025-07-24 10:48:39 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第6轮开始
2025-07-24 10:48:39 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 10:48:42 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 10:48:42 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 10:48:42 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: file_exists
2025-07-24 10:48:42 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 🔍 检查文件存在: src/main/java/com/yljr/user/basicgeneral/application/service/impl/multiorg/CompanyMultorgManageServiceImpl.java = True
2025-07-24 10:48:42 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: file_exists
2025-07-24 10:48:42 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第7轮开始
2025-07-24 10:48:42 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 10:48:46 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 10:48:46 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 10:48:46 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: read_file
2025-07-24 10:48:46 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 📖 读取文件: src/main/java/com/yljr/user/basicgeneral/application/service/impl/multiorg/CompanyMultorgManageServiceImpl.java (43968 字符)
2025-07-24 10:48:46 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: read_file
2025-07-24 10:48:46 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第8轮开始
2025-07-24 10:48:46 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 10:49:12 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 10:49:12 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 10:49:12 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: replace_text
2025-07-24 10:49:12 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 📋 备份文件: src/main/java/com/yljr/user/basicgeneral/application/service/impl/multiorg/CompanyMultorgManageServiceImpl.java -> /Users/renyu/Documents/create_project/链数中建一局_1753324841/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general/backup/strategy1_backup_20250724_104303/src/main/java/com/yljr/user/basicgeneral/application/service/impl/multiorg/CompanyMultorgManageServiceImpl.java
2025-07-24 10:49:12 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 🔄 文本替换成功: src/main/java/com/yljr/user/basicgeneral/application/service/impl/multiorg/CompanyMultorgManageServiceImpl.java (替换了 1 处匹配)
2025-07-24 10:49:12 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO -    原文本长度: 689 字符
2025-07-24 10:49:12 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO -    新文本长度: 2881 字符
2025-07-24 10:49:12 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: replace_text
2025-07-24 10:49:12 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第9轮开始
2025-07-24 10:49:12 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 10:49:16 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 10:49:16 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 10:49:16 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: replace_text
2025-07-24 10:49:16 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 📋 备份文件: src/main/java/com/yljr/user/basicgeneral/application/service/impl/multiorg/CompanyMultorgManageServiceImpl.java -> /Users/renyu/Documents/create_project/链数中建一局_1753324841/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general/backup/strategy1_backup_20250724_104303/src/main/java/com/yljr/user/basicgeneral/application/service/impl/multiorg/CompanyMultorgManageServiceImpl.java
2025-07-24 10:49:16 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 🔄 文本替换成功: src/main/java/com/yljr/user/basicgeneral/application/service/impl/multiorg/CompanyMultorgManageServiceImpl.java (替换了 1 处匹配)
2025-07-24 10:49:16 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO -    原文本长度: 55 字符
2025-07-24 10:49:16 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO -    新文本长度: 139 字符
2025-07-24 10:49:16 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: replace_text
2025-07-24 10:49:16 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第10轮开始
2025-07-24 10:49:16 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 10:49:20 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 10:49:20 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 10:49:20 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: replace_text
2025-07-24 10:49:20 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 📋 备份文件: src/main/java/com/yljr/user/basicgeneral/application/service/impl/multiorg/CompanyMultorgManageServiceImpl.java -> /Users/renyu/Documents/create_project/链数中建一局_1753324841/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general/backup/strategy1_backup_20250724_104303/src/main/java/com/yljr/user/basicgeneral/application/service/impl/multiorg/CompanyMultorgManageServiceImpl.java
2025-07-24 10:49:20 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 🔄 文本替换成功: src/main/java/com/yljr/user/basicgeneral/application/service/impl/multiorg/CompanyMultorgManageServiceImpl.java (替换了 1 处匹配)
2025-07-24 10:49:20 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO -    原文本长度: 19 字符
2025-07-24 10:49:20 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO -    新文本长度: 55 字符
2025-07-24 10:49:20 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: replace_text
2025-07-24 10:49:20 - src.corder_integration.code_generator.function_calling_code_generator - WARNING - ⚠️ Function calling达到最大轮数10
2025-07-24 10:49:20 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🗑️ Function Calling清理备份目录: /Users/renyu/Documents/create_project/链数中建一局_1753324841/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general/backup/strategy1_backup_20250724_104303
2025-07-24 10:49:20 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🗑️ 删除空的备份根目录: /Users/renyu/Documents/create_project/链数中建一局_1753324841/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general/backup
2025-07-24 10:49:20 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🧹 Function Calling备份清理完成，删除了 1 个目录
2025-07-24 10:49:20 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🧹 Function Calling完成后清理了 1 个备份文件
2025-07-24 10:49:20 - src.corder_integration.code_generator.strategy1_manager - INFO - 🔨 生成controller层代码
2025-07-24 10:49:20 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🤖 开始生成controller代码（支持文件操作）
2025-07-24 10:49:20 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 使用_generate_with_function_calling生成controller层代码
2025-07-24 10:49:20 - src.corder_integration.code_generator.function_calling_code_generator - INFO -   - 操作: enhance_existing
2025-07-24 10:49:20 - src.corder_integration.code_generator.function_calling_code_generator - INFO -   - 目标类: CompanyMultiorgManageController
2025-07-24 10:49:20 - src.corder_integration.code_generator.function_calling_code_generator - INFO -   - 包路径: com.yljr.user.basicgeneral.interfaces.controller.multiorg
2025-07-24 10:49:20 - src.corder_integration.code_generator.function_calling_code_generator - INFO - ✅ 成功使用简单模板渲染function_calling_prompt
2025-07-24 10:49:20 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第1轮开始
2025-07-24 10:49:20 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 10:49:24 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 10:49:24 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 10:49:24 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: file_exists
2025-07-24 10:49:24 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 🔍 检查文件存在: src/main/java/com/yljr/user/basicgeneral/interfaces/controller/multiorg/CompanyMultiorgManageController.java = True
2025-07-24 10:49:24 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: file_exists
2025-07-24 10:49:24 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第2轮开始
2025-07-24 10:49:24 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 10:49:26 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 10:49:26 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 10:49:26 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: read_file
2025-07-24 10:49:26 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 📖 读取文件: src/main/java/com/yljr/user/basicgeneral/interfaces/controller/multiorg/CompanyMultiorgManageController.java (9382 字符)
2025-07-24 10:49:26 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: read_file
2025-07-24 10:49:26 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第3轮开始
2025-07-24 10:49:26 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 10:49:40 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 10:49:40 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 10:49:40 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: write_file
2025-07-24 10:49:40 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 📝 覆盖写入文件: src/main/java/com/yljr/user/basicgeneral/interfaces/controller/multiorg/dto/QueryCompanyUnitListRequest.java (1326 字符)
2025-07-24 10:49:40 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: write_file
2025-07-24 10:49:40 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第4轮开始
2025-07-24 10:49:40 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 10:49:56 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 10:49:56 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 10:49:56 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: write_file
2025-07-24 10:49:56 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 📝 覆盖写入文件: src/main/java/com/yljr/user/basicgeneral/interfaces/controller/multiorg/dto/QueryCompanyUnitListResponse.java (2060 字符)
2025-07-24 10:49:56 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: write_file
2025-07-24 10:49:56 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第5轮开始
2025-07-24 10:49:56 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 10:50:09 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 10:50:09 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 10:50:09 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: replace_text
2025-07-24 10:50:09 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 📋 备份文件: src/main/java/com/yljr/user/basicgeneral/interfaces/controller/multiorg/CompanyMultiorgManageController.java -> /Users/renyu/Documents/create_project/链数中建一局_1753324841/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general/backup/strategy1_backup_20250724_104303/src/main/java/com/yljr/user/basicgeneral/interfaces/controller/multiorg/CompanyMultiorgManageController.java
2025-07-24 10:50:09 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 🔄 文本替换成功: src/main/java/com/yljr/user/basicgeneral/interfaces/controller/multiorg/CompanyMultiorgManageController.java (替换了 1 处匹配)
2025-07-24 10:50:09 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO -    原文本长度: 1 字符
2025-07-24 10:50:09 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO -    新文本长度: 996 字符
2025-07-24 10:50:09 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: replace_text
2025-07-24 10:50:09 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第6轮开始
2025-07-24 10:50:09 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 10:50:39 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 10:50:39 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 10:50:39 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: replace_text
2025-07-24 10:50:39 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 📋 备份文件: src/main/java/com/yljr/user/basicgeneral/interfaces/controller/multiorg/CompanyMultiorgManageController.java -> /Users/renyu/Documents/create_project/链数中建一局_1753324841/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general/backup/strategy1_backup_20250724_104303/src/main/java/com/yljr/user/basicgeneral/interfaces/controller/multiorg/CompanyMultiorgManageController.java
2025-07-24 10:50:39 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 🔄 文本替换成功: src/main/java/com/yljr/user/basicgeneral/interfaces/controller/multiorg/CompanyMultiorgManageController.java (替换了 1 处匹配)
2025-07-24 10:50:39 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO -    原文本长度: 794 字符
2025-07-24 10:50:39 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO -    新文本长度: 892 字符
2025-07-24 10:50:39 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: replace_text
2025-07-24 10:50:39 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第7轮开始
2025-07-24 10:50:39 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 10:50:42 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 10:50:42 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 10:50:42 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: read_file
2025-07-24 10:50:42 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 📖 读取文件: src/main/java/com/yljr/user/basicgeneral/interfaces/controller/multiorg/dto/QueryCompanyUnitListRequest.java (1326 字符)
2025-07-24 10:50:42 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: read_file
2025-07-24 10:50:42 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第8轮开始
2025-07-24 10:50:42 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 10:50:47 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 10:50:47 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 10:50:47 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: read_file
2025-07-24 10:50:47 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 📖 读取文件: src/main/java/com/yljr/user/basicgeneral/interfaces/controller/multiorg/dto/QueryCompanyUnitListResponse.java (2060 字符)
2025-07-24 10:50:47 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: read_file
2025-07-24 10:50:47 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第9轮开始
2025-07-24 10:50:47 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 10:50:49 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 10:50:49 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 10:50:49 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: read_file
2025-07-24 10:50:49 - src.corder_integration.code_generator.file_operation_tool_invoker - ERROR - ❌ 函数调用失败: read_file, 错误: FileOperationToolInvoker._read_file() got an unexpected keyword argument 'offset'
2025-07-24 10:50:49 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第10轮开始
2025-07-24 10:50:49 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 10:50:52 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 10:50:52 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 10:50:52 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: read_file
2025-07-24 10:50:52 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 📖 读取文件: src/main/java/com/yljr/user/basicgeneral/interfaces/controller/multiorg/CompanyMultiorgManageController.java (10475 字符)
2025-07-24 10:50:52 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: read_file
2025-07-24 10:50:52 - src.corder_integration.code_generator.function_calling_code_generator - WARNING - ⚠️ Function calling达到最大轮数10
2025-07-24 10:50:52 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🗑️ Function Calling清理备份目录: /Users/renyu/Documents/create_project/链数中建一局_1753324841/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general/backup/strategy1_backup_20250724_104303
2025-07-24 10:50:52 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🗑️ 删除空的备份根目录: /Users/renyu/Documents/create_project/链数中建一局_1753324841/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general/backup
2025-07-24 10:50:52 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🧹 Function Calling备份清理完成，删除了 1 个目录
2025-07-24 10:50:52 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🧹 Function Calling完成后清理了 1 个备份文件
2025-07-24 10:50:52 - src.corder_integration.code_generator.strategy1_manager - INFO - ✅ 策略1执行完成，成功生成6层代码
2025-07-24 10:50:52 - src.apis.project_analysis_api - INFO - 🗑️ 已清除缓存: /Users/renyu/Documents/create_project/链数中建一局_1753324841/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general/src/main/java_用户服务
2025-07-24 10:50:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🗑️ 策略1完成后已清理项目分析缓存
2025-07-24 10:50:52 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_008 状态更新为 completed
2025-07-24 10:50:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 任务 task_008 执行成功
2025-07-24 10:50:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 开始执行任务: task_009 (api)
2025-07-24 10:50:52 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_009 已被 intelligent_coding_node 领取
2025-07-24 10:50:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🌐 执行API接口生成任务: task_009
2025-07-24 10:50:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 解析的接口信息:
2025-07-24 10:50:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 接口名称: UnitLimitByCompanyId
2025-07-24 10:50:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - API路径: /crcl-open-api/lsLimit/listUnitLimitByCompanyId
2025-07-24 10:50:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - HTTP方法: GET
2025-07-24 10:50:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 输入参数: 6个
2025-07-24 10:50:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 输出参数: 4个
2025-07-24 10:50:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 业务描述: 根据公司ID和筛选条件查询组织单元额度信息，调用用户服务获取组织单元详细信息，采用pagehelper进行分页，需要调用zqyl-user-center-service服务的/queryCompanyUnitList接口获取组织单元详细信息
2025-07-24 10:50:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 在 /Users/renyu/Documents/create_project/链数中建一局_1753324841/crcl-open 中查找最佳Java项目路径...
2025-07-24 10:50:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 目标服务名: 确权开立服务
2025-07-24 10:50:53 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 10:50:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 发现Java项目: crcl-open
2025-07-24 10:50:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       🎯 相对路径: crcl-open
2025-07-24 10:50:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       📊 Java文件: 2251个
2025-07-24 10:50:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       📐 目录深度: 1
2025-07-24 10:50:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       🏆 优先级分数: 650
2025-07-24 10:50:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 排序后的候选路径（前3个）:
2025-07-24 10:50:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    1. crcl-open (优先级: 650)
2025-07-24 10:50:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 选择最佳Java项目路径:
2025-07-24 10:50:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 完整路径: /Users/renyu/Documents/create_project/链数中建一局_1753324841/crcl-open/crcl-open
2025-07-24 10:50:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📋 相对路径: crcl-open
2025-07-24 10:50:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    🏆 最终优先级: 650
2025-07-24 10:50:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📁 基础项目路径: /Users/renyu/Documents/create_project/链数中建一局_1753324841/crcl-open/crcl-open
2025-07-24 10:50:53 - src.corder_integration.config.domain_mapping_config - INFO - 🔍 映射API关键字到业务领域: lsLimit
2025-07-24 10:50:53 - src.corder_integration.config.domain_mapping_config - INFO - ✅ 精确匹配: lsLimit -> lsLimit
2025-07-24 10:50:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 API关键字映射: lsLimit -> lsLimit (API路径: /crcl-open-api/lsLimit/listUnitLimitByCompanyId)
2025-07-24 10:50:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🤖 使用大模型智能匹配Controller: lsLimit (API: /crcl-open-api/lsLimit/listUnitLimitByCompanyId)
2025-07-24 10:50:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功扫描到 53 个Controller文件
2025-07-24 10:50:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 找到 53 个Controller文件
2025-07-24 10:50:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🤖 调用volcengine分析Controller相似度...
2025-07-24 10:50:59 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 10:50:59 - src.corder_integration.langgraph.nodes.intelligent_coding_node - ERROR - ❌ LLM响应JSON解析失败: Expecting value: line 1 column 1 (char 0)
2025-07-24 10:50:59 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 使用规则匹配方式查找Controller: lsLimit
2025-07-24 10:50:59 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 智能匹配找到相似Controller: LsLimitController
2025-07-24 10:50:59 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 Controller路径: /Users/renyu/Documents/create_project/链数中建一局_1753324841/crcl-open/crcl-open/src/main/java/com/yljr/crcl/limit/interfaces/LsLimitController.java
2025-07-24 10:50:59 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    🔢 相似度分数: 0.80
2025-07-24 10:50:59 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    💡 匹配原因: 类名包含关键字: lsLimit, 路径包含关键字: lsLimit, 包名业务相关: limit
2025-07-24 10:50:59 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 分析目标项目: /Users/renyu/Documents/create_project/链数中建一局_1753324841/crcl-open/crcl-open/src/main/java
2025-07-24 10:50:59 - src.apis.project_analysis_api - INFO - 🔍 开始分析项目用于代码生成: /Users/renyu/Documents/create_project/链数中建一局_1753324841/crcl-open/crcl-open/src/main/java
2025-07-24 10:50:59 - src.apis.project_analysis_api - INFO - 🔍 在 /Users/renyu/Documents/create_project/链数中建一局_1753324841/crcl-open/crcl-open/src/main/java 中查找最佳Java项目路径...
2025-07-24 10:50:59 - src.apis.project_analysis_api - INFO - 🎯 目标服务名: 确权开立服务
2025-07-24 10:50:59 - src.apis.project_analysis_api - WARNING - ⚠️ 在 /Users/renyu/Documents/create_project/链数中建一局_1753324841/crcl-open/crcl-open/src/main/java 中未找到包含Java文件的src/main/java结构
2025-07-24 10:50:59 - src.apis.project_analysis_api - INFO - 📂 实际分析路径: /Users/renyu/Documents/create_project/链数中建一局_1753324841/crcl-open/crcl-open/src/main/java
2025-07-24 10:50:59 - src.utils.java_code_analyzer - INFO - 🔍 开始分析企业级Java项目: /Users/renyu/Documents/create_project/链数中建一局_1753324841/crcl-open/crcl-open/src/main/java
2025-07-24 10:51:04 - src.utils.java_code_analyzer - INFO - ✅ 企业级项目分析完成，共分析 2240 个Java文件
2025-07-24 10:51:04 - src.apis.project_analysis_api - INFO - 📦 动态检测到基础包: com.yljr.crcl (出现2240次)
2025-07-24 10:51:04 - src.apis.project_analysis_api - INFO - 📦 动态检测到基础包: com.yljr.crcl (出现2240次)
2025-07-24 10:51:04 - src.apis.project_analysis_api - INFO - 📋 提取到48个Controller的详细信息
2025-07-24 10:51:04 - src.apis.project_analysis_api - INFO - 📦 动态检测到基础包: com.yljr.crcl (出现2240次)
2025-07-24 10:51:04 - src.apis.project_analysis_api - INFO - ✅ 项目分析完成，已提取代码生成上下文
2025-07-24 10:51:04 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 从编码代理获取设计文档内容 (7416 字符)
2025-07-24 10:51:04 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 设计文档内容已添加到项目上下文 (7416 字符)
2025-07-24 10:51:04 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 使用详细Controller信息，共48个Controller
2025-07-24 10:51:04 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 Controller关联性分析完成:
2025-07-24 10:51:04 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 总Controller数: 48
2025-07-24 10:51:04 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 相关Controller数: 1
2025-07-24 10:51:04 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 最高关联度: 0.45
2025-07-24 10:51:04 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 Controller关联性分析:
2025-07-24 10:51:04 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 总Controller数: 48
2025-07-24 10:51:04 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 相关Controller数: 1
2025-07-24 10:51:04 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 关联度得分: 0.45
2025-07-24 10:51:04 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 相关Controllers: ['LsLimitController']
2025-07-24 10:51:04 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🤖 调用volcengine分析项目策略...发送的prompt信息: Java文件数=2240, Controller数=48
2025-07-24 10:51:08 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 10:51:08 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 项目策略判断: enhance_existing - 虽然当前只有一个直接相关的LsLimitController，且关联度为0.45（略低于0.6），但该项目已存在48个Controller，说明代码结构已经成熟，且LsLimitController的命名与API关键字lsLimit完全一致，业务领域（limit）也高度匹配。强行新建Controller会导致相同业务逻辑分散，不利于后期维护。因此建议通过增强现有LsLimitController来复用已有代码结构。
2025-07-24 10:51:08 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 进入策略1管理器========================
2025-07-24 10:51:08 - src.corder_integration.code_generator.strategy1_manager - INFO - 🚀 开始执行策略1: lsLimit
2025-07-24 10:51:08 - src.corder_integration.code_generator.strategy1_manager - INFO - 🔧 从路径 /Users/renyu/Documents/create_project/链数中建一局_1753324841/crcl-open/crcl-open/src/main/java 提取项目根目录: /Users/renyu/Documents/create_project/链数中建一局_1753324841/crcl-open/crcl-open
2025-07-24 10:51:08 - src.corder_integration.code_generator.strategy1_manager - INFO - 📁 原始路径: /Users/renyu/Documents/create_project/链数中建一局_1753324841/crcl-open/crcl-open/src/main/java
2025-07-24 10:51:08 - src.corder_integration.code_generator.strategy1_manager - INFO - 📁 项目根路径: /Users/renyu/Documents/create_project/链数中建一局_1753324841/crcl-open/crcl-open
2025-07-24 10:51:08 - src.corder_integration.code_generator.strategy1_manager - INFO - 📊 第1步：分析项目结构
2025-07-24 10:51:08 - src.corder_integration.code_generator.project_structure_analyzer - INFO - 🔍 开始分析项目结构: /Users/renyu/Documents/create_project/链数中建一局_1753324841/crcl-open/crcl-open
2025-07-24 10:51:08 - src.corder_integration.code_generator.project_structure_analyzer - INFO - 📁 目录树结构生成完成
2025-07-24 10:51:08 - src.corder_integration.code_generator.project_structure_analyzer - INFO - 🔍 开始解析目录树结构...
2025-07-24 10:51:08 - src.corder_integration.code_generator.project_structure_analyzer - INFO - 📊 从目录树解析完成:
2025-07-24 10:51:08 - src.corder_integration.code_generator.project_structure_analyzer - INFO -    Controllers: 46
2025-07-24 10:51:08 - src.corder_integration.code_generator.project_structure_analyzer - INFO -    Services: 235
2025-07-24 10:51:08 - src.corder_integration.code_generator.project_structure_analyzer - INFO -    Mappers: 97
2025-07-24 10:51:08 - src.corder_integration.code_generator.project_structure_analyzer - INFO -    Entities: 240
2025-07-24 10:51:08 - src.corder_integration.code_generator.project_structure_analyzer - INFO -    DTOs: 352
2025-07-24 10:51:08 - src.corder_integration.code_generator.project_structure_analyzer - INFO -    总Java文件: 1519
2025-07-24 10:51:08 - src.corder_integration.code_generator.project_structure_analyzer - WARNING - ⚠️ 无法从目录树推断包名，使用默认值
2025-07-24 10:51:08 - src.corder_integration.code_generator.project_structure_analyzer - INFO - ✅ 项目结构分析完成
2025-07-24 10:51:08 - src.corder_integration.code_generator.project_structure_analyzer - INFO -    基础包名: com.yljr.crcl.limit
2025-07-24 10:51:08 - src.corder_integration.code_generator.project_structure_analyzer - INFO -    总Java文件: 1519
2025-07-24 10:51:08 - src.corder_integration.code_generator.project_structure_analyzer - INFO -    Controllers: 46
2025-07-24 10:51:08 - src.corder_integration.code_generator.project_structure_analyzer - INFO -    Services: 235
2025-07-24 10:51:08 - src.corder_integration.code_generator.project_structure_analyzer - INFO -    Mappers: 97
2025-07-24 10:51:08 - src.corder_integration.code_generator.project_structure_analyzer - INFO -    Entities: 240
2025-07-24 10:51:08 - src.corder_integration.code_generator.project_structure_analyzer - INFO -    DTOs: 352
2025-07-24 10:51:08 - src.corder_integration.code_generator.strategy1_manager - INFO - 🤖 第2步：LLM决策实现方案
2025-07-24 10:51:08 - src.corder_integration.code_generator.llm_decision_maker - INFO - 🤖 开始LLM决策：lsLimit
2025-07-24 10:51:08 - src.corder_integration.code_generator.llm_decision_maker - INFO - 🔧 生成的LLM决策提示词长度: 135173 字符
2025-07-24 10:51:08 - src.corder_integration.code_generator.llm_decision_maker - INFO - 🔍 LLM决策提示词:你是一个Java Spring Boot项目的DDD架构师，需要分析项目结构并决定如何实现新的API接口功能。

## 项目信息
- API关键字: lsLimit
- 业务逻辑: 根据公司ID和筛选条件查询组织单元额度信息，调用用户服务获取组织单元详细信息，采用pagehelper进行分页，需要调用zqyl-user-center-service服务的/queryCompanyUnitList接口获取组织单元详细信息
- 基础包名: com.yljr.crcl.limit
- 项目路径: /Users/renyu/Documents/create_project/链数中建一局_1753324841/crcl-open/crcl-open

### 📋 详细的API任务需求
**API路径**: /crcl-open-api/lsLimit/listUnitLimitByCompanyId
**HTTP方法**: GET
**Content-Type**: application/json
**接口名称**: UnitLimitByCompanyId
**接口描述**: N/A
**业务逻辑**: 根据公司ID和筛选条件查询组织单元额度信息，调用用户服务获取组织单元详细信息，采用pagehelper进行分页，需要调用zqyl-user-center-service服务的/queryCompanyUnitList接口获取组织单元详细信息

**请求参数**:
  - gwCompanyId: 当前登录企业id(必填)
  - unitName: 组织单元名称(模糊搜索)(可选)
  - limitSource: 额度名称(模糊搜索)(可选)
  - bizType: 10：云信额度，80：链数额度(默认)(可选)
  - page: 页码(必填)
  - pageRow: 每页记录数(必填)

**响应参数**:
  - totalLimitAmt: 总额度
  - usedLimitAmt: 已用额度
  - usableLimitAmt: 可用额度
  - unitLimitListDetail: 额度信息列表

**数据来源**: 本地额度表 + 用户服务接口
**外部服务调用**: 
**验证规则**:
  - gwCompanyId: 必填，数值类型
  - page: 正整数，默认1
  - pageRow: 正整数，范围1-100

## 📁 完整项目结构
📁 crcl-open/
📁 src/ (2372 files)
├── 📁 main/ (2350 files)
│   ├── 📁 java/ (2240 files)
│   │   └── 📁 com/ (2240 files)
│   │       └── 📁 yljr/ (2240 files)
│   │           └── 📁 crcl/ (2240 files)
│   │               ├── 📁 credit/ (94 files)
│   │               │   ├── 📁 application/ (31 files)
│   │               │   │   ├── 📁 dto/ (11 files)
│   │               │   │   │   ├── ☕ CreditAddDetailDto.java (1.2KB)
│   │               │   │   │   ├── ☕ CreditBankCodeDto.java (785B)
│   │               │   │   │   ├── ☕ CreditByUnitIdDto.java (977B)
│   │               │   │   │   ├── ☕ CreditDetailDto.java (4.8KB)
│   │               │   │   │   ├── ☕ CreditDetailUnitDto.java (3.9KB)
│   │               │   │   │   ├── ☕ CreditListDto.java (7.1KB)
│   │               │   │   │   ├── ☕ CreditMqDto.java (3.1KB)
│   │               │   │   │   ├── ☕ CreditSaveUnitDto.java (2.8KB)
│   │               │   │   │   ├── ☕ CreditUnitDto.java (1.1KB)
│   │               │   │   │   ├── ☕ SelectCreditListDto.java (5.2KB)
│   │               │   │   │   └── ☕ SumCreditAmtDto.java (2.0KB)
│   │               │   │   ├── 📁 feign/ (14 files)
│   │               │   │   │   ├── 📁 company/ (11 files)
│   │               │   │   │   │   ├── 📁 dto/ (7 files)
│   │               │   │   │   │   ├── ☕ CustCompanyCreditFeignApi.java (1.5KB)
│   │               │   │   │   │   ├── ☕ CustCompanyFeign.java (1.5KB)
│   │               │   │   │   │   ├── ☕ CustUnitCreditFeignApi.java (4.0KB)
│   │               │   │   │   │   └── ☕ CustUnitFeign.java (2.0KB)
│   │               │   │   │   └── 📁 lettercredit/ (3 files)
│   │               │   │   │       ├── ☕ CheckModelHavedDto.java (647B)
│   │               │   │   │       ├── ☕ LetterCreditFeign.java (1.1KB)
│   │               │   │   │       └── ☕ LetterCreditFeignApi.java (1.6KB)
│   │               │   │   ├── 📁 mqconsumer/ (1 files)
│   │               │   │   │   └── ☕ CreditConsumer.java (16.3KB)
│   │               │   │   └── 📁 service/ (5 files)
│   │               │   │       ├── ☕ CreditBuilderApplication.java (27.9KB)
│   │               │   │       ├── ☕ CreditFeignApiApplication.java (6.6KB)
│   │               │   │       ├── ☕ CreditManagerApplication.java (2.0KB)
│   │               │   │       ├── ☕ CreditVerifyApplication.java (28.9KB)
│   │               │   │       └── ☕ CreditWebApiApplication.java (31.7KB)
│   │               │   ├── 📁 base/ (19 files)
│   │               │   │   ├── 📁 dict/ (18 files)
│   │               │   │   │   ├── ☕ CreditBillTypeEnum.java (1.1KB)
│   │               │   │   │   ├── ☕ CreditCreditClassifyEnum.java (1017B)
│   │               │   │   │   ├── ☕ CreditCreditStatusEnum.java (1.0KB)
│   │               │   │   │   ├── ☕ CreditCreditUsePatternEnum.java (1005B)
│   │               │   │   │   ├── ☕ CreditFlagEnum.java (654B)
│   │               │   │   │   ├── ☕ CreditIdempotentStatusEnum.java (730B)
│   │               │   │   │   ├── ☕ CreditIsGivingMsgEnum.java (962B)
│   │               │   │   │   ├── ☕ CreditIsNeedTradeEnum.java (992B)
│   │               │   │   │   ├── ☕ CreditPayInterestWayEnum.java (1019B)
│   │               │   │   │   ├── ☕ CreditPlatFormTagEnum.java (1.0KB)
│   │               │   │   │   ├── ☕ CreditProductTypeEnum.java (1.2KB)
│   │               │   │   │   ├── ☕ CreditReceiveCreditTypeEnum.java (1.1KB)
│   │               │   │   │   ├── ☕ CreditRecordlTypeEnum.java (1.0KB)
│   │               │   │   │   ├── ☕ CreditRestrictTypeEnum.java (1.1KB)
│   │               │   │   │   ├── ☕ CreditRestructStatusEnum.java (1009B)
│   │               │   │   │   ├── ☕ CreditStatusEnum.java (1022B)
│   │               │   │   │   ├── ☕ CreditTypeEnum.java (1.0KB)
│   │               │   │   │   └── ☕ CreditUsePatternEnum.java (1008B)
│   │               │   │   └── 📁 util/ (1 files)
│   │               │   │       └── ☕ ResultCreditUtils.java (647B)
│   │               │   ├── 📁 domain/ (33 files)
│   │               │   │   ├── 📁 entity/ (10 files)
│   │               │   │   │   ├── ☕ CreditBillDetails.java (4.2KB)
│   │               │   │   │   ├── ☕ CreditBillMain.java (3.9KB)
│   │               │   │   │   ├── ☕ CreditFile.java (4.5KB)
│   │               │   │   │   ├── ☕ CreditIdempotent.java (2.1KB)
│   │               │   │   │   ├── ☕ CreditInfo.java (7.4KB)
│   │               │   │   │   ├── ☕ CreditInfoHistory.java (13.1KB)
│   │               │   │   │   ├── ☕ CreditMain.java (8.3KB)
│   │               │   │   │   ├── ☕ CreditMainHistory.java (13.6KB)
│   │               │   │   │   ├── ☕ CreditSource.java (6.0KB)
│   │               │   │   │   └── ☕ CreditSourceHistory.java (8.6KB)
│   │               │   │   ├── 📁 mapper/ (10 files)
│   │               │   │   │   ├── ☕ CreditBillDetailsMapper.java (1.1KB)
│   │               │   │   │   ├── ☕ CreditBillMainMapper.java (1.9KB)
│   │               │   │   │   ├── ☕ CreditFileMapper.java (1.1KB)
│   │               │   │   │   ├── ☕ CreditIdempotentMapper.java (1.3KB)
│   │               │   │   │   ├── ☕ CreditInfoHistoryMapper.java (1.1KB)
│   │               │   │   │   ├── ☕ CreditInfoMapper.java (1.3KB)
│   │               │   │   │   ├── ☕ CreditMainHistoryMapper.java (1.8KB)
│   │               │   │   │   ├── ☕ CreditMainMapper.java (3.9KB)
│   │               │   │   │   ├── ☕ CreditSourceHistoryMapper.java (1.1KB)
│   │               │   │   │   └── ☕ CreditSourceMapper.java (1.2KB)
│   │               │   │   ├── 📁 po/ (5 files)
│   │               │   │   │   ├── ☕ BillByMainCreditIdPo.java (1.4KB)
│   │               │   │   │   ├── ☕ CreditHistoryDetailPo.java (7.5KB)
│   │               │   │   │   ├── ☕ CreditUnitHistoryDetailPo.java (4.2KB)
│   │               │   │   │   ├── ☕ ListCreditByBankCodesPo.java (3.4KB)
│   │               │   │   │   └── ☕ ListCreditHistoryPo.java (4.2KB)
│   │               │   │   └── 📁 service/ (8 files)
│   │               │   │       ├── 📁 impl/ (4 files)
│   │               │   │       │   ├── ☕ CreditBillMainServiceImpl.java (3.9KB)
│   │               │   │       │   ├── ☕ CreditIdempotentServiceImpl.java (1.1KB)
│   │               │   │       │   ├── ☕ CreditMainHistoryServiceImpl.java (1.1KB)
│   │               │   │       │   └── ☕ CreditMainServiceImpl.java (7.8KB)
│   │               │   │       ├── ☕ CreditBillMainService.java (1.5KB)
│   │               │   │       ├── ☕ CreditIdempotentService.java (739B)
│   │               │   │       ├── ☕ CreditMainHistoryService.java (732B)
│   │               │   │       └── ☕ CreditMainService.java (3.5KB)
│   │               │   └── 📁 interfaces/ (11 files)
│   │               │       ├── 📁 facade/ (3 files)
│   │               │       │   ├── ☕ CreditFeignApiController.java (5.3KB)
│   │               │       │   ├── ☕ CreditManagerApiController.java (2.4KB)
│   │               │       │   └── ☕ CreditWebApiController.java (13.0KB)
│   │               │       ├── 📁 req/ (6 files)
│   │               │       │   ├── ☕ AddSaveCreditReq.java (5.0KB)
│   │               │       │   ├── ☕ AdjustSaveCreditReq.java (4.1KB)
│   │               │       │   ├── ☕ CreditByUnitIdReq.java (1.1KB)
│   │               │       │   ├── ☕ CreditListReq.java (1.6KB)
│   │               │       │   ├── ☕ CreditOccupyAmtReq.java (3.0KB)
│   │               │       │   └── ☕ ListCreditByBankCodesReq.java (1.7KB)
│   │               │       └── 📁 resp/ (2 files)
│   │               │           ├── ☕ CreditDetailResp.java (5.8KB)
│   │               │           └── ☕ CreditHistoryDetailResp.java (919B)
│   │               ├── 📁 limit/ (533 files)
│   │               │   ├── 📁 application/ (123 files)
│   │               │   │   ├── 📁 dto/ (45 files)
│   │               │   │   │   ├── 📁 creaditarchive/ (11 files)
│   │               │   │   │   │   ├── ☕ AlreadyArchiveByMainIdDto.java (3.2KB)
│   │               │   │   │   │   ├── ☕ AlreadyArchiveExportDto.java (2.9KB)
│   │               │   │   │   │   ├── ☕ ArchiveFileDto.java (1.5KB)
│   │               │   │   │   │   ├── ☕ ArchiveMangerDto.java (1.1KB)
│   │               │   │   │   │   ├── ☕ ArchiveOpenUnitDetailDto.java (2.1KB)
│   │               │   │   │   │   ├── ☕ CreditOvervieweaderListDto.java (1.2KB)
│   │               │   │   │   │   ├── ☕ CreditOverviewListDto.java (2.1KB)
│   │               │   │   │   │   ├── ☕ CreditUnitOverviewListDto.java (1.2KB)
│   │               │   │   │   │   ├── ☕ DetailsDto.java (1.5KB)
│   │               │   │   │   │   ├── ☕ FileListByMainIdDto.java (2.5KB)
│   │               │   │   │   │   └── ☕ StayArchiveByMainIdDto.java (3.3KB)
│   │               │   │   │   ├── ☕ ApplyListDto.java (1.8KB)
│   │               │   │   │   ├── ☕ CheckLimitAdjustOrEnoughReq.java (1.5KB)
│   │               │   │   │   ├── ☕ CheckPlansDto.java (1.8KB)
│   │               │   │   │   ├── ☕ CrclCollectionNoticeDto.java (3.4KB)
│   │               │   │   │   ├── ☕ CreaditArchiveListDto.java (2.7KB)
│   │               │   │   │   ├── ☕ CreditRecordDto.java (4.7KB)
│   │               │   │   │   ├── ☕ GetConstituteAllotDto.java (1.3KB)
│   │               │   │   │   ├── ☕ GetLimitAllotLoadDetailDto.java (1002B)
│   │               │   │   │   ├── ☕ GetLimitByShareIdDto.java (1.7KB)
│   │               │   │   │   ├── ☕ GetLimitUseDetailByLimitIdxDto.java (2.4KB)
│   │               │   │   │   ├── ☕ GetShareIdByShareNameDto.java (946B)
│   │               │   │   │   ├── ☕ LimitChangeDetailDto.java (1.1KB)
│   │               │   │   │   ├── ☕ LimitConstituteAllotDto.java (3.5KB)
│   │               │   │   │   ├── ☕ ListLimitByReceiveIdDto.java (1.1KB)
│   │               │   │   │   ├── ☕ ListLimitMainByShareIdDto.java (2.9KB)
│   │               │   │   │   ├── ☕ ListLsLimitByCompanyIdDto.java (2.1KB)
│   │               │   │   │   ├── ☕ ListLsLimitMainAmtDto.java (997B)
│   │               │   │   │   ├── ☕ ListLsLimitMainDto.java (4.1KB)
│   │               │   │   │   ├── ☕ LsBankCodeByBatchCodeDto.java (942B)
│   │               │   │   │   ├── ☕ LsLimitByLimitSourceDto.java (790B)
│   │               │   │   │   ├── ☕ LsLimitDetailUnitDto.java (1.3KB)
│   │               │   │   │   ├── ☕ LsLimitMainInfoDto.java (3.7KB)
│   │               │   │   │   ├── ☕ LsShareCompanysDto.java (1.2KB)
│   │               │   │   │   ├── ☕ LsUnitListDto.java (2.5KB)
│   │               │   │   │   ├── ☕ NeedCreateOpenCrclRelDto.java (1.4KB)
│   │               │   │   │   ├── ☕ OpenLimitRelReqDto.java (277B)
│   │               │   │   │   ├── ☕ OpenLimitWarningDto.java (1.5KB)
│   │               │   │   │   ├── ☕ OpenUnitLimitReqDto.java (280B)
│   │               │   │   │   ├── ☕ OpenUnitLimitRespDto.java (619B)
│   │               │   │   │   ├── ☕ OpenUnitRepayDto.java (1021B)
│   │               │   │   │   ├── ☕ RepayNoticeDto.java (1.8KB)
│   │               │   │   │   ├── ☕ SaveConstituteAllotDto.java (648B)
│   │               │   │   │   ├── ☕ SynBcpLimitDto.java (1.3KB)
│   │               │   │   │   └── ☕ UsableLimitListDto.java (5.7KB)
│   │               │   │   ├── 📁 feign/ (29 files)
│   │               │   │   │   ├── 📁 incentive/ (8 files)
│   │               │   │   │   │   ├── 📁 dto/ (4 files)
│   │               │   │   │   │   ├── ☕ IncentiveChangeFeign.java (865B)
│   │               │   │   │   │   ├── ☕ IncentiveChangeFeignApi.java (621B)
│   │               │   │   │   │   ├── ☕ IncentiveFeign.java (1.9KB)
│   │               │   │   │   │   └── ☕ IncentiveFeignApi.java (952B)
│   │               │   │   │   ├── 📁 zqylls/ (4 files)
│   │               │   │   │   │   ├── 📁 dto/ (2 files)
│   │               │   │   │   │   ├── ☕ ZqylLsFeign.java (1.1KB)
│   │               │   │   │   │   └── ☕ ZqylLsFeignApi.java (1.0KB)
│   │               │   │   │   ├── 📁 zqylmanager/ (2 files)
│   │               │   │   │   │   ├── ☕ ZqylManagerFeign.java (1.0KB)
│   │               │   │   │   │   └── ☕ ZqylManagerFeignApi.java (903B)
│   │               │   │   │   ├── 📁 zqylplan/ (3 files)
│   │               │   │   │   │   ├── 📁 dto/ (1 files)
│   │               │   │   │   │   ├── ☕ ZqylPlanFeign.java (1.2KB)
│   │               │   │   │   │   └── ☕ ZqylPlanFeignApi.java (1.1KB)
│   │               │   │   │   ├── 📁 zqylweb/ (5 files)
│   │               │   │   │   │   ├── 📁 dto/ (3 files)
│   │               │   │   │   │   ├── ☕ LimitZqylWebApi.java (3.2KB)
│   │               │   │   │   │   └── ☕ ZqylWebFeign.java (1.3KB)
│   │               │   │   │   └── 📁 zyapproval/ (7 files)
│   │               │   │   │       ├── 📁 dto/ (6 files)
│   │               │   │   │       └── ☕ ZyApprovalFeignApi.java (8.4KB)
│   │               │   │   ├── 📁 jobhandler/ (14 files)
│   │               │   │   │   ├── ☕ BcpQueryResultHandler.java (782B)
│   │               │   │   │   ├── ☕ BcpSendBookingHandler.java (1.3KB)
│   │               │   │   │   ├── ☕ CancelInvestorAuthHandler.java (1.0KB)
│   │               │   │   │   ├── ☕ ClearOpenServiceWarningHandler.java (1.5KB)
│   │               │   │   │   ├── ☕ CompanyNoticeCollectionHandler.java (6.3KB)
│   │               │   │   │   ├── ☕ CompanyNoticeRepayHandler.java (4.2KB)
│   │               │   │   │   ├── ☕ CrclLimitCredisExpireHandler.java (876B)
│   │               │   │   │   ├── ☕ CrclLimitDatedHandler.java (1.1KB)
│   │               │   │   │   ├── ☕ CrclLimitRecoverHandler.java (831B)
│   │               │   │   │   ├── ☕ CrclLimitToEffectHandler.java (860B)
│   │               │   │   │   ├── ☕ LimitAvailableExceptionWarning.java (1.7KB)
│   │               │   │   │   ├── ☕ LimitCrclExceptionWarning.java (1.7KB)
│   │               │   │   │   ├── ☕ LimitThreeValueExceptionWarningHandler.java (1.7KB)
│   │               │   │   │   └── ☕ LimitUnitExceptionWarningHandler.java (1.5KB)
│   │               │   │   ├── 📁 mqconsumer/ (4 files)
│   │               │   │   │   ├── 📁 dto/ (2 files)
│   │               │   │   │   │   ├── ☕ LimitArchiveBody.java (2.1KB)
│   │               │   │   │   │   └── ☕ MultiOrgMqDto.java (600B)
│   │               │   │   │   ├── ☕ CreaditArchiveMqConsumer.java (5.3KB)
│   │               │   │   │   └── ☕ MultiOrgComapnyMqConsumer.java (13.2KB)
│   │               │   │   └── 📁 service/ (31 files)
│   │               │   │       ├── ☕ BcpAccountApplication.java (18.1KB)
│   │               │   │       ├── ☕ BcpLimitApplication.java (12.5KB)
│   │               │   │       ├── ☕ BcpLimitSynApplication.java (20.6KB)
│   │               │   │       ├── ☕ CheckParamApplication.java (63.7KB)
│   │               │   │       ├── ☕ CrclCompanyApplication.java (3.1KB)
│   │               │   │       ├── ☕ CrclConstituteApplication.java (18.6KB)
│   │               │   │       ├── ☕ CrclLimitAdjustAuditApplication.java (47.3KB)
│   │               │   │       ├── ☕ CrclLimitByChangeApplication.java (49.4KB)
│   │               │   │       ├── ☕ CrclLimitByExtranalApplication.java (13.4KB)
│   │               │   │       ├── ☕ CrclLimitBySelectApplication.java (76.5KB)
│   │               │   │       ├── ☕ CrclLimitCheckApplication.java (3.0KB)
│   │               │   │       ├── ☕ CrclLimitMainByChangeApplication.java (46.5KB)
│   │               │   │       ├── ☕ CrclLimitMainBySelectApplication.java (104.3KB)
│   │               │   │       ├── ☕ CrclLimitMainTransactionalApplication.java (12.2KB)
│   │               │   │       ├── ☕ CrclLimitReceiveHisApplication.java (18.3KB)
│   │               │   │       ├── ☕ CrclLimitRecoverApplication.java (13.3KB)
│   │               │   │       ├── ☕ CrclLimitSharehisApplication.java (6.8KB)
│   │               │   │       ├── ☕ CrclLimitStatisticsApplication.java (9.0KB)
│   │               │   │       ├── ☕ CrclPerformanceApplication.java (22.8KB)
│   │               │   │       ├── ☕ CreaditArchiveApplication.java (45.3KB)
│   │               │   │       ├── ☕ FrontCrclLimitMainByChangeApplication.java (30.3KB)
│   │               │   │       ├── ☕ FrontCrclLimitMainBySelectApplication.java (75.3KB)
│   │               │   │       ├── ☕ LimitExceptionWarningApplication.java (31.3KB)
│   │               │   │       ├── ☕ LimitTransactionalApplication.java (23.7KB)
│   │               │   │       ├── ☕ LsLimitApplication.java (55.1KB)
│   │               │   │       ├── ☕ LsLimitMainTransactionalApplication.java (4.0KB)
│   │               │   │       ├── ☕ LsLimitValidate.java (15.6KB)
│   │               │   │       ├── ☕ OpenLimitBillDetailApplication.java (20.4KB)
│   │               │   │       ├── ☕ OpenLimitRelApplication.java (33.1KB)
│   │               │   │       ├── ☕ ParamCrclLimitApplication.java (3.5KB)
│   │               │   │       └── ☕ TradeBgPlanApplication.java (50.4KB)
│   │               │   ├── 📁 base/ (28 files)
│   │               │   │   ├── 📁 constants/ (1 files)
│   │               │   │   │   └── ☕ SysLogConstant.java (327B)
│   │               │   │   ├── 📁 dict/ (23 files)
│   │               │   │   │   ├── ☕ CompanyChangeLimitAllowedTypeEnum.java (1.0KB)
│   │               │   │   │   ├── ☕ ConstituteCreditTypeEnum.java (1.0KB)
│   │               │   │   │   ├── ☕ ConstituteLimitTypeEnum.java (978B)
│   │               │   │   │   ├── ☕ ConstituteUsePatternEnum.java (999B)
│   │               │   │   │   ├── ☕ CoreEntPayFlagEnum.java (1.3KB)
│   │               │   │   │   ├── ☕ CreaditArchiveBusinessTypeEnum.java (1.1KB)
│   │               │   │   │   ├── ☕ ExpireDayEnum.java (555B)
│   │               │   │   │   ├── ☕ InvestorAuthEnum.java (991B)
│   │               │   │   │   ├── ☕ LimitAdjustStatusEnum.java (974B)
│   │               │   │   │   ├── ☕ LimitAdjustTypeEnum.java (956B)
│   │               │   │   │   ├── ☕ LimitChangeFormulaEnum.java (928B)
│   │               │   │   │   ├── ☕ LimitChangeTypeEnum.java (1.2KB)
│   │               │   │   │   ├── ☕ LimitConstituteAllotStatusEnum.java (791B)
│   │               │   │   │   ├── ☕ LimitConstituteOperateTypeEnum.java (1.7KB)
│   │               │   │   │   ├── ☕ LimitConstituteStatusEnum.java (956B)
│   │               │   │   │   ├── ☕ LimitCrclTypeEnum.java (1014B)
│   │               │   │   │   ├── ☕ LimitFreezeStatusEnum.java (4.0KB)
│   │               │   │   │   ├── ☕ LimitReceiveOperateTypeEnum.java (1.3KB)
│   │               │   │   │   ├── ☕ OpenLimitBillDetailBusinessTypeEnum.java (993B)
│   │               │   │   │   ├── ☕ OpenServiceWarningTypeEnum.java (2.1KB)
│   │               │   │   │   ├── ☕ ResultStatusEnum.java (1.6KB)
│   │               │   │   │   ├── ☕ ShareStatusEnum.java (1.7KB)
│   │               │   │   │   └── ☕ ZyApprovalOrderStatusEnum.java (1004B)
│   │               │   │   └── 📁 util/ (4 files)
│   │               │   │       ├── ☕ BCPGeneraterUtils.java (467B)
│   │               │   │       ├── ☕ MockMultipart.java (3.7KB)
│   │               │   │       ├── ☕ SqlValidateUtils.java (2.7KB)
│   │               │   │       └── ☕ StaticUtil.java (4.2KB)
│   │               │   ├── 📁 domain/ (216 files)
│   │               │   │   ├── 📁 entity/ (41 files)
│   │               │   │   │   ├── 📁 change/ (4 files)
│   │               │   │   │   │   ├── ☕ CrclLimitAuditDTO.java (9.7KB)
│   │               │   │   │   │   ├── ☕ CrclLimitChangeDto.java (7.0KB)
│   │               │   │   │   │   ├── ☕ CrclLimitMainChangeDto.java (3.6KB)
│   │               │   │   │   │   └── ☕ LimitChangeDto.java (4.6KB)
│   │               │   │   │   ├── ☕ BcpLimitSyn.java (4.3KB)
│   │               │   │   │   ├── ☕ CodeRule.java (2.0KB)
│   │               │   │   │   ├── ☕ CrclCompany.java (1.8KB)
│   │               │   │   │   ├── ☕ CrclConstitute.java (6.2KB)
│   │               │   │   │   ├── ☕ CrclConstituteMain.java (5.8KB)
│   │               │   │   │   ├── ☕ CrclCredisExpire.java (4.6KB)
│   │               │   │   │   ├── ☕ CrclLimit.java (5.2KB)
│   │               │   │   │   ├── ☕ CrclLimitCheck.java (3.5KB)
│   │               │   │   │   ├── ☕ CrclLimitFile.java (4.2KB)
│   │               │   │   │   ├── ☕ CrclLimitInfo.java (5.0KB)
│   │               │   │   │   ├── ☕ CrclLimitInvestorAuth.java (4.1KB)
│   │               │   │   │   ├── ☕ CrclLimitMain.java (4.7KB)
│   │               │   │   │   ├── ☕ CrclLimitMainInfo.java (5.1KB)
│   │               │   │   │   ├── ☕ CrclLimitReceivehis.java (5.8KB)
│   │               │   │   │   ├── ☕ CrclLimitReceivehisInfo.java (5.3KB)
│   │               │   │   │   ├── ☕ CrclLimitRecover.java (3.5KB)
│   │               │   │   │   ├── ☕ CrclLimitSchedule.java (3.0KB)
│   │               │   │   │   ├── ☕ CrclLimitSharehis.java (5.9KB)
│   │               │   │   │   ├── ☕ CrclLimitSharehisInfo.java (9.0KB)
│   │               │   │   │   ├── ☕ CrclPerformancePlan.java (2.7KB)
│   │               │   │   │   ├── ☕ CrclPerformancePlanInfo.java (4.2KB)
│   │               │   │   │   ├── ☕ CrclZyApprovalOrder.java (3.9KB)
│   │               │   │   │   ├── ☕ CreaditArchiveAllotDetail.java (3.8KB)
│   │               │   │   │   ├── ☕ CreaditArchiveMain.java (1.8KB)
│   │               │   │   │   ├── ☕ CreaditArchiveRecord.java (4.8KB)
│   │               │   │   │   ├── ☕ LimitChangeLog.java (8.2KB)
│   │               │   │   │   ├── ☕ LimitConstituteAllotHis.java (5.6KB)
│   │               │   │   │   ├── ☕ LimitConstituteAllotMain.java (4.3KB)
│   │               │   │   │   ├── ☕ LsLimitCleaningAccount.java (856B)
│   │               │   │   │   ├── ☕ LsLimitCleaningAccountHis.java (2.4KB)
│   │               │   │   │   ├── ☕ MyLimitInfo.java (1.6KB)
│   │               │   │   │   ├── ☕ OpenLimitBillDetail.java (7.5KB)
│   │               │   │   │   ├── ☕ OpenLimitBillDetailExport.java (5.6KB)
│   │               │   │   │   ├── ☕ OpenLimitRel.java (5.3KB)
│   │               │   │   │   ├── ☕ OpenServiceWarning.java (3.0KB)
│   │               │   │   │   ├── ☕ OpenUnitLimit.java (3.7KB)
│   │               │   │   │   └── ☕ ParamCrclLimit.java (2.1KB)
│   │               │   │   ├── 📁 mapper/ (36 files)
│   │               │   │   │   ├── ☕ BcpLimitSynMapper.java (1.5KB)
│   │               │   │   │   ├── ☕ CodeRuleMapper.java (623B)
│   │               │   │   │   ├── ☕ CrclCompanyMapper.java (1.5KB)
│   │               │   │   │   ├── ☕ CrclConstituteMainMapper.java (3.2KB)
│   │               │   │   │   ├── ☕ CrclConstituteMapper.java (1.9KB)
│   │               │   │   │   ├── ☕ CrclCredisExpireMapper.java (1.1KB)
│   │               │   │   │   ├── ☕ CrclLimitCheckMapper.java (796B)
│   │               │   │   │   ├── ☕ CrclLimitFileMapper.java (1.7KB)
│   │               │   │   │   ├── ☕ CrclLimitInfoMapper.java (1.2KB)
│   │               │   │   │   ├── ☕ CrclLimitInvestorAuthMapper.java (1.2KB)
│   │               │   │   │   ├── ☕ CrclLimitMainInfoMapper.java (1.3KB)
│   │               │   │   │   ├── ☕ CrclLimitMainMapper.java (11.7KB)
│   │               │   │   │   ├── ☕ CrclLimitMapper.java (22.6KB)
│   │               │   │   │   ├── ☕ CrclLimitReceivehisInfoMapper.java (1.3KB)
│   │               │   │   │   ├── ☕ CrclLimitReceivehisMapper.java (4.5KB)
│   │               │   │   │   ├── ☕ CrclLimitRecoverMapper.java (848B)
│   │               │   │   │   ├── ☕ CrclLimitScheduleMapper.java (1.8KB)
│   │               │   │   │   ├── ☕ CrclLimitSharehisInfoMapper.java (1.3KB)
│   │               │   │   │   ├── ☕ CrclLimitSharehisMapper.java (7.0KB)
│   │               │   │   │   ├── ☕ CrclPerformancePlanInfoMapper.java (5.7KB)
│   │               │   │   │   ├── ☕ CrclPerformancePlanMapper.java (1.4KB)
│   │               │   │   │   ├── ☕ CrclZyApprovalOrderMapper.java (951B)
│   │               │   │   │   ├── ☕ CreaditArchiveAllotDetailMapper.java (993B)
│   │               │   │   │   ├── ☕ CreaditArchiveMainMapper.java (2.7KB)
│   │               │   │   │   ├── ☕ CreaditArchiveRecordMapper.java (1.0KB)
│   │               │   │   │   ├── ☕ LimitChangeLogMapper.java (1.0KB)
│   │               │   │   │   ├── ☕ LimitConstituteAllotHisMapper.java (4.3KB)
│   │               │   │   │   ├── ☕ LimitConstituteAllotMainMapper.java (2.3KB)
│   │               │   │   │   ├── ☕ LsLimitCleaningAccountHisMapper.java (904B)
│   │               │   │   │   ├── ☕ LsLimitCleaningAccountMapper.java (700B)
│   │               │   │   │   ├── ☕ LsLimitMapper.java (4.6KB)
│   │               │   │   │   ├── ☕ OpenLimitBillDetailMapper.java (765B)
│   │               │   │   │   ├── ☕ OpenLimitRelMapper.java (6.4KB)
│   │               │   │   │   ├── ☕ OpenServiceWarningMapper.java (597B)
│   │               │   │   │   ├── ☕ OpenUnitLimitMapper.java (3.6KB)
│   │               │   │   │   └── ☕ ParamCrclLimitMapper.java (2.3KB)
│   │               │   │   ├── 📁 po/ (51 files)
│   │               │   │   │   ├── ☕ AppTotalLimitPo.java (843B)
│   │               │   │   │   ├── ☕ AutoSavePo.java (1.5KB)
│   │               │   │   │   ├── ☕ AvailableLimitPo.java (3.8KB)
│   │               │   │   │   ├── ☕ AvailableLimitSubPo.java (2.2KB)
│   │               │   │   │   ├── ☕ BatchCodePo.java (1.5KB)
│   │               │   │   │   ├── ☕ CodeRulePo.java (752B)
│   │               │   │   │   ├── ☕ CodeRuleRequest.java (1.2KB)
│   │               │   │   │   ├── ☕ CountLimitByShareIdPo.java (949B)
│   │               │   │   │   ├── ☕ CrclConstituteMainPo.java (1.7KB)
│   │               │   │   │   ├── ☕ CrclConstitutePo.java (648B)
│   │               │   │   │   ├── ☕ CrclCredisExpirePo.java (1.6KB)
│   │               │   │   │   ├── ☕ CrclLimitBasicInfoPo.java (1.8KB)
│   │               │   │   │   ├── ☕ CrclLimitCheckMqPo.java (1.7KB)
│   │               │   │   │   ├── ☕ CrclLimitCheckPo.java (1.9KB)
│   │               │   │   │   ├── ☕ CrclLimitCredisPo.java (3.6KB)
│   │               │   │   │   ├── ☕ CrclLimitDetailPo.java (10.6KB)
│   │               │   │   │   ├── ☕ CrclLimitMainInfoPo.java (5.4KB)
│   │               │   │   │   ├── ☕ CrclLimitMainPo.java (5.6KB)
│   │               │   │   │   ├── ☕ CrclLimitPo.java (9.8KB)
│   │               │   │   │   ├── ☕ CrclLimitReceivehisPo.java (4.5KB)
│   │               │   │   │   ├── ☕ CrclLimitSharehisPo.java (13.3KB)
│   │               │   │   │   ├── ☕ CrclPerformancePlanPo.java (1.3KB)
│   │               │   │   │   ├── ☕ FactorDetailByCrclNoPo.java (3.3KB)
│   │               │   │   │   ├── ☕ FreezeLevelsPo.java (618B)
│   │               │   │   │   ├── ☕ GetLimitListByCoreIdsPo.java (1.5KB)
│   │               │   │   │   ├── ☕ GetLimitSharehisByBatchCodePo.java (1.4KB)
│   │               │   │   │   ├── ☕ HolidayResponseResponse.java (2.6KB)
│   │               │   │   │   ├── ☕ InvestorListResponse.java (913B)
│   │               │   │   │   ├── ☕ LimitAdjustCoreBillPo.java (1.9KB)
│   │               │   │   │   ├── ☕ LimitAdjustUnitBillPo.java (2.5KB)
│   │               │   │   │   ├── ☕ LimitByCrclNoPo.java (2.5KB)
│   │               │   │   │   ├── ☕ LimitByMainCrclNoPo.java (2.5KB)
│   │               │   │   │   ├── ☕ LimitCoreExceptionWarningPo.java (4.3KB)
│   │               │   │   │   ├── ☕ LimitExpirePo.java (2.6KB)
│   │               │   │   │   ├── ☕ LimitImgPo.java (534B)
│   │               │   │   │   ├── ☕ LimitMainByLimitSourcePo.java (1.2KB)
│   │               │   │   │   ├── ☕ LimitReceivehisPo.java (8.1KB)
│   │               │   │   │   ├── ☕ LimitShareExceptionWarningPo.java (3.4KB)
│   │               │   │   │   ├── ☕ LimitSourceCrclIdPo.java (787B)
│   │               │   │   │   ├── ☕ LimitUnitExceptionWarningPo.java (3.8KB)
│   │               │   │   │   ├── ☕ ListLsLimitByCompanyIdPo.java (4.2KB)
│   │               │   │   │   ├── ☕ MultiLimitDetailPo.java (3.2KB)
│   │               │   │   │   ├── ☕ MyConsumerLimitPo.java (1.1KB)
│   │               │   │   │   ├── ☕ MyLimitPo.java (2.0KB)
│   │               │   │   │   ├── ☕ NoScheduleCrclNoPo.java (936B)
│   │               │   │   │   ├── ☕ OpenLimitMainPo.java (1.3KB)
│   │               │   │   │   ├── ☕ OpenLimitRelPo.java (3.0KB)
│   │               │   │   │   ├── ☕ OpenMainLimitPlanPo.java (2.7KB)
│   │               │   │   │   ├── ☕ OpenUnitLimitPo.java (2.8KB)
│   │               │   │   │   ├── ☕ PerformInfoByCrclLimitIdPo.java (978B)
│   │               │   │   │   └── ☕ PlanRate.java (12.6KB)
│   │               │   │   ├── 📁 service/ (67 files)
│   │               │   │   │   ├── 📁 impl/ (34 files)
│   │               │   │   │   │   ├── ☕ BcpAccountServiceImpl.java (5.4KB)
│   │               │   │   │   │   ├── ☕ BcpLimitSynServiceImpl.java (2.0KB)
│   │               │   │   │   │   ├── ☕ CrclCompanyServiceImpl.java (1.4KB)
│   │               │   │   │   │   ├── ☕ CrclConstituteMainServiceImpl.java (5.0KB)
│   │               │   │   │   │   ├── ☕ CrclConstituteServiceImpl.java (26.0KB)
│   │               │   │   │   │   ├── ☕ CrclCredisExpireServiceImpl.java (1.1KB)
│   │               │   │   │   │   ├── ☕ CrclLimitCheckServiceImpl.java (1.1KB)
│   │               │   │   │   │   ├── ☕ CrclLimitFileServiceImpl.java (2.0KB)
│   │               │   │   │   │   ├── ☕ CrclLimitInfoServiceImpl.java (2.9KB)
│   │               │   │   │   │   ├── ☕ CrclLimitInvestorAuthServiceImpl.java (17.0KB)
│   │               │   │   │   │   ├── ☕ CrclLimitMainInfoServiceImpl.java (3.9KB)
│   │               │   │   │   │   ├── ☕ CrclLimitMainServiceImpl.java (26.9KB)
│   │               │   │   │   │   ├── ☕ CrclLimitModifyImpl.java (29.4KB)
│   │               │   │   │   │   ├── ☕ CrclLimitReceivehisServiceImpl.java (47.5KB)
│   │               │   │   │   │   ├── ☕ CrclLimitRecoverServiceImpl.java (1.5KB)
│   │               │   │   │   │   ├── ☕ CrclLimitScheduleServiceImpl.java (2.8KB)
│   │               │   │   │   │   ├── ☕ CrclLimitServiceImpl.java (67.4KB)
│   │               │   │   │   │   ├── ☕ CrclLimitSharehisInfoServiceImpl.java (1.0KB)
│   │               │   │   │   │   ├── ☕ CrclLimitSharehisServiceImpl.java (11.2KB)
│   │               │   │   │   │   ├── ☕ CrclPerformancePlanInfoServiceImpl.java (13.5KB)
│   │               │   │   │   │   ├── ☕ CrclPerformancePlanServiceImpl.java (1.4KB)
│   │               │   │   │   │   ├── ☕ CrclZyApprovalOrderServiceImpl.java (5.3KB)
│   │               │   │   │   │   ├── ☕ CreaditArchiveMainServiceImpl.java (17.7KB)
│   │               │   │   │   │   ├── ☕ FinanceUtil.java (7.9KB)
│   │               │   │   │   │   ├── ☕ GenerateCodeServiceImpl.java (5.5KB)
│   │               │   │   │   │   ├── ☕ LimitConstituteAllotHisServiceImpl.java (15.4KB)
│   │               │   │   │   │   ├── ☕ LimitConstituteAllotMainServiceImpl.java (10.1KB)
│   │               │   │   │   │   ├── ☕ LsLimitCleaningAccountHisServiceImpl.java (971B)
│   │               │   │   │   │   ├── ☕ LsLimitServiceImpl.java (3.8KB)
│   │               │   │   │   │   ├── ☕ OpenLimitBillDetailServiceImpl.java (3.9KB)
│   │               │   │   │   │   ├── ☕ OpenLimitRelServiceImpl.java (16.1KB)
│   │               │   │   │   │   ├── ☕ OpenServiceWarningServiceImpl.java (1.4KB)
│   │               │   │   │   │   ├── ☕ OpenUnitLimitServiceImpl.java (1.5KB)
│   │               │   │   │   │   └── ☕ ParamCrclLimitServiceImpl.java (13.2KB)
│   │               │   │   │   ├── ☕ BcpAccountService.java (1.1KB)
│   │               │   │   │   ├── ☕ BcpLimitSynService.java (1.2KB)
│   │               │   │   │   ├── ☕ CrclCompanyService.java (765B)
│   │               │   │   │   ├── ☕ CrclConstituteMainService.java (2.6KB)
│   │               │   │   │   ├── ☕ CrclConstituteService.java (2.7KB)
│   │               │   │   │   ├── ☕ CrclCredisExpireService.java (559B)
│   │               │   │   │   ├── ☕ CrclLimitCheckService.java (521B)
│   │               │   │   │   ├── ☕ CrclLimitFileService.java (739B)
│   │               │   │   │   ├── ☕ CrclLimitInfoService.java (1.3KB)
│   │               │   │   │   ├── ☕ CrclLimitInvestorAuthService.java (2.0KB)
│   │               │   │   │   ├── ☕ CrclLimitMainInfoService.java (1.7KB)
│   │               │   │   │   ├── ☕ CrclLimitMainService.java (13.2KB)
│   │               │   │   │   ├── ☕ CrclLimitModify.java (432B)
│   │               │   │   │   ├── ☕ CrclLimitReceivehisService.java (6.2KB)
│   │               │   │   │   ├── ☕ CrclLimitRecoverService.java (938B)
│   │               │   │   │   ├── ☕ CrclLimitScheduleService.java (1.4KB)
│   │               │   │   │   ├── ☕ CrclLimitService.java (19.7KB)
│   │               │   │   │   ├── ☕ CrclLimitSharehisInfoService.java (868B)
│   │               │   │   │   ├── ☕ CrclLimitSharehisService.java (7.1KB)
│   │               │   │   │   ├── ☕ CrclPerformancePlanInfoService.java (4.9KB)
│   │               │   │   │   ├── ☕ CrclPerformancePlanService.java (977B)
│   │               │   │   │   ├── ☕ CrclZyApprovalOrderService.java (825B)
│   │               │   │   │   ├── ☕ CreaditArchiveMainService.java (3.5KB)
│   │               │   │   │   ├── ☕ GenerateCodeService.java (629B)
│   │               │   │   │   ├── ☕ LimitConstituteAllotHisService.java (1.9KB)
│   │               │   │   │   ├── ☕ LimitConstituteAllotMainService.java (1.4KB)
│   │               │   │   │   ├── ☕ LsLimitCleaningAccountHisService.java (574B)
│   │               │   │   │   ├── ☕ LsLimitService.java (3.7KB)
│   │               │   │   │   ├── ☕ OpenLimitBillDetailService.java (1.3KB)
│   │               │   │   │   ├── ☕ OpenLimitRelService.java (5.8KB)
│   │               │   │   │   ├── ☕ OpenServiceWarningService.java (508B)
│   │               │   │   │   ├── ☕ OpenUnitLimitService.java (1.1KB)
│   │               │   │   │   └── ☕ ParamCrclLimitService.java (2.2KB)
│   │               │   │   └── 📁 tradebgplan/ (21 files)
│   │               │   │       ├── 📁 entity/ (5 files)
│   │               │   │       │   ├── ☕ TradeBgBaseField.java (5.2KB)
│   │               │   │       │   ├── ☕ TradeBgBaseFieldDetail.java (2.2KB)
│   │               │   │       │   ├── ☕ TradeBgBaseList.java (2.1KB)
│   │               │   │       │   ├── ☕ TradeBgPlan.java (5.5KB)
│   │               │   │       │   └── ☕ TradeBgPlanConfig.java (1.2KB)
│   │               │   │       ├── 📁 mapper/ (5 files)
│   │               │   │       │   ├── ☕ TradeBgBaseFieldDetailMapper.java (788B)
│   │               │   │       │   ├── ☕ TradeBgBaseFieldMapper.java (1.3KB)
│   │               │   │       │   ├── ☕ TradeBgBaseListMapper.java (570B)
│   │               │   │       │   ├── ☕ TradeBgPlanConfigMapper.java (1.2KB)
│   │               │   │       │   └── ☕ TradeBgPlanMapper.java (1.9KB)
│   │               │   │       ├── 📁 po/ (7 files)
│   │               │   │       │   ├── ☕ TradeBgBaseFieldBasicsPo.java (3.6KB)
│   │               │   │       │   ├── ☕ TradeBgBaseFieldPo.java (3.6KB)
│   │               │   │       │   ├── ☕ TradeBgBaseListBasicsPo.java (1.0KB)
│   │               │   │       │   ├── ☕ TradeBgBaseListPo.java (809B)
│   │               │   │       │   ├── ☕ TradeBgFieldPo.java (2.5KB)
│   │               │   │       │   ├── ☕ TradeBgPlanPo.java (5.5KB)
│   │               │   │       │   └── ☕ TradeBgPlanVersionsPo.java (1.9KB)
│   │               │   │       └── 📁 service/ (4 files)
│   │               │   │           ├── 📁 impl/ (2 files)
│   │               │   │           ├── ☕ TradeBgBaseFieldDetailService.java (349B)
│   │               │   │           └── ☕ TradeBgPlanService.java (2.8KB)
│   │               │   └── 📁 interfaces/ (166 files)
│   │               │       ├── 📁 req/ (66 files)
│   │               │       │   ├── ☕ ArchiveFileListReq.java (1.2KB)
│   │               │       │   ├── ☕ ArchiveOpenUnitDetailReq.java (1.2KB)
│   │               │       │   ├── ☕ ArchiveSaveOpenUnitDetailReq.java (1.9KB)
│   │               │       │   ├── ☕ CompanyUnitListReq.java (1.3KB)
│   │               │       │   ├── ☕ CrclCompanyCommonReq.java (3.0KB)
│   │               │       │   ├── ☕ CrclConstituteAdjustSaveReq.java (4.5KB)
│   │               │       │   ├── ☕ CrclConstituteSaveReq.java (3.7KB)
│   │               │       │   ├── ☕ CrclLimitAchievePlanSaveReq.java (1.1KB)
│   │               │       │   ├── ☕ CrclLimitAchievePlanUserReq.java (1.5KB)
│   │               │       │   ├── ☕ CrclLimitAdjustSaveReq.java (8.9KB)
│   │               │       │   ├── ☕ CrclLimitApprovalOrderSaveRequest.java (2.0KB)
│   │               │       │   ├── ☕ CrclLimitCommonReq.java (13.0KB)
│   │               │       │   ├── ☕ CrclLimitDetailReq.java (1.8KB)
│   │               │       │   ├── ☕ CrclLimitMainCommonReq.java (8.2KB)
│   │               │       │   ├── ☕ CrclLimitMainSreachReq.java (1010B)
│   │               │       │   ├── ☕ CrclLimitRateReq.java (1.2KB)
│   │               │       │   ├── ☕ CrclLimitReceivehisSaveRequest.java (5.2KB)
│   │               │       │   ├── ☕ CrclLimitSaveRequest.java (8.8KB)
│   │               │       │   ├── ☕ CrclLimitSharehisReq.java (10.0KB)
│   │               │       │   ├── ☕ CrclLimitTotalAndDetailPageReq.java (2.2KB)
│   │               │       │   ├── ☕ CrclLimitTotalAndDetailReq.java (2.8KB)
│   │               │       │   ├── ☕ CrclLimityCreditExpireReq.java (2.7KB)
│   │               │       │   ├── ☕ CrclPerformanceCommonReq.java (2.4KB)
│   │               │       │   ├── ☕ CrclReceivehisAdustSaveRequest.java (6.8KB)
│   │               │       │   ├── ☕ CrclSreachReq.java (858B)
│   │               │       │   ├── ☕ CreateInvestorAuthPdfReq.java (1.4KB)
│   │               │       │   ├── ☕ FrontAdjustAuditReq.java (1.2KB)
│   │               │       │   ├── ☕ FrontCrclInfoReq.java (6.7KB)
│   │               │       │   ├── ☕ FrontCrclLimitSaveReq.java (2.1KB)
│   │               │       │   ├── ☕ FrontReceivehisReq.java (2.7KB)
│   │               │       │   ├── ☕ FrontUnitLimitAdjustReq.java (1.6KB)
│   │               │       │   ├── ☕ GetConstituteAllotReq.java (3.3KB)
│   │               │       │   ├── ☕ GetLimitAllotLoadDetailContituteReq.java (924B)
│   │               │       │   ├── ☕ GetLimitAllotLoadDetailReq.java (1.8KB)
│   │               │       │   ├── ☕ GetLimitUseDetailReq.java (1.4KB)
│   │               │       │   ├── ☕ HoldCompanyReq.java (595B)
│   │               │       │   ├── ☕ InvestorAuthPdfSignReq.java (808B)
│   │               │       │   ├── ☕ LimitInfoReq.java (1.3KB)
│   │               │       │   ├── ☕ LimitsDeductionReq.java (1.1KB)
│   │               │       │   ├── ☕ LimitSourceAndShareNameReq.java (1.5KB)
│   │               │       │   ├── ☕ ListBcpLimitSynReq.java (1.7KB)
│   │               │       │   ├── ☕ ListCollectLsLimitByCompanyIdReq.java (1.1KB)
│   │               │       │   ├── ☕ ListLsLimitByCompanyIdReq.java (2.0KB)
│   │               │       │   ├── ☕ LsCheckUnitListReq.java (1.7KB)
│   │               │       │   ├── ☕ LsLimitMainInfoReq.java (3.3KB)
│   │               │       │   ├── ☕ LsLimitSaveAndAuditReq.java (2.0KB)
│   │               │       │   ├── ☕ LsLimitSaveAndAuditV2Req.java (1.7KB)
│   │               │       │   ├── ☕ MarketingLimitReq.java (2.6KB)
│   │               │       │   ├── ☕ MarktLimitNameListReq.java (615B)
│   │               │       │   ├── ☕ MarktPerformanceUserReq.java (1.4KB)
│   │               │       │   ├── ☕ MyConsumerReq.java (725B)
│   │               │       │   ├── ☕ MySupplierReq.java (849B)
│   │               │       │   ├── ☕ OpenLimitBillDetailReq.java (2.8KB)
│   │               │       │   ├── ☕ OpenLimitRelCommonReq.java (5.1KB)
│   │               │       │   ├── ☕ OpenUnitLimitCommonReq.java (3.2KB)
│   │               │       │   ├── ☕ ParamCrclLimitCommonReq.java (2.1KB)
│   │               │       │   ├── ☕ PerformanceUserIdReq.java (718B)
│   │               │       │   ├── ☕ PerFormLimitReq.java (551B)
│   │               │       │   ├── ☕ PersonalTemplateReq.java (727B)
│   │               │       │   ├── ☕ SaveAlreadyArchiveRecordReq.java (2.3KB)
│   │               │       │   ├── ☕ SaveArchiveByRecordIdReq.java (1.2KB)
│   │               │       │   ├── ☕ SaveCompanyArchiveReq.java (664B)
│   │               │       │   ├── ☕ SaveConstituteAllotReq.java (2.3KB)
│   │               │       │   ├── ☕ SaveStayArchiveRecordReq.java (3.1KB)
│   │               │       │   ├── ☕ UsableLimitListReq.java (1.5KB)
│   │               │       │   └── ☕ ZyApprovalQueryURLlReq.java (696B)
│   │               │       ├── 📁 resp/ (77 files)
│   │               │       │   ├── ☕ AllocatedLimitResp.java (1.3KB)
│   │               │       │   ├── ☕ AppLimitInfoDto.java (6.7KB)
│   │               │       │   ├── ☕ BatchImportLimitShareAmtDTO.java (3.7KB)
│   │               │       │   ├── ☕ CompanyIdsFromLimitMainResp.java (549B)
│   │               │       │   ├── ☕ CompanyMarketingResp.java (2.0KB)
│   │               │       │   ├── ☕ CrclAndLsCrclLimitInfoDto.java (2.4KB)
│   │               │       │   ├── ☕ CrclCompanyListResp.java (2.2KB)
│   │               │       │   ├── ☕ CrclConstituteListResp.java (6.1KB)
│   │               │       │   ├── ☕ CrclConstituteMainListResp.java (5.6KB)
│   │               │       │   ├── ☕ CrclLimitAchievePlanListResp.java (2.7KB)
│   │               │       │   ├── ☕ CrclLimitAchievePlanUserListResp.java (3.5KB)
│   │               │       │   ├── ☕ CrclLimitAchieveUserSearchListResp.java (2.7KB)
│   │               │       │   ├── ☕ CrclLimitCheckListResp.java (6.0KB)
│   │               │       │   ├── ☕ CrclLimitDetailListResp.java (10.3KB)
│   │               │       │   ├── ☕ CrclLimitDetailResp.java (1.9KB)
│   │               │       │   ├── ☕ CrclLimitListByPageResp.java (9.0KB)
│   │               │       │   ├── ☕ CrclLimitListResp.java (8.1KB)
│   │               │       │   ├── ☕ CrclLimitMainByIdResp.java (2.5KB)
│   │               │       │   ├── ☕ CrclLimitMainDetailResp.java (10.8KB)
│   │               │       │   ├── ☕ CrclLimitMainFinanceResp.java (3.7KB)
│   │               │       │   ├── ☕ CrclLimitMainInfoByShareIdResp.java (4.3KB)
│   │               │       │   ├── ☕ CrclLimitMainListResp.java (4.9KB)
│   │               │       │   ├── ☕ CrclLimitMainResp.java (6.2KB)
│   │               │       │   ├── ☕ CrclLimitParamConfigResponse.java (2.0KB)
│   │               │       │   ├── ☕ CrclLimitReceivehisListResp.java (8.6KB)
│   │               │       │   ├── ☕ CrclLimitSharehisDetailResp.java (12.1KB)
│   │               │       │   ├── ☕ CrclLimitSharehisListResp.java (4.0KB)
│   │               │       │   ├── ☕ CrclLimitTotalAndDetailResp.java (2.2KB)
│   │               │       │   ├── ☕ CrclSharehisConstitutehisDetailResp.java (1.4KB)
│   │               │       │   ├── ☕ CreditInfoDto.java (2.5KB)
│   │               │       │   ├── ☕ CustCompanyListResp.java (2.7KB)
│   │               │       │   ├── ☕ FrontCheckInvestorAuthlResp.java (2.4KB)
│   │               │       │   ├── ☕ FrontCrclInfoResp.java (6.0KB)
│   │               │       │   ├── ☕ FrontCrclLimitListResp.java (5.4KB)
│   │               │       │   ├── ☕ FrontCrclMainInfoResp.java (1.3KB)
│   │               │       │   ├── ☕ FrontCreditStatisticsInfo.java (1.7KB)
│   │               │       │   ├── ☕ FrontLimitAdjustViewResp.java (3.2KB)
│   │               │       │   ├── ☕ GetInitChangeLimitResp.java (13.1KB)
│   │               │       │   ├── ☕ GetInitLimitResp.java (11.7KB)
│   │               │       │   ├── ☕ ImportLimitShareAmtRecordResp.java (4.2KB)
│   │               │       │   ├── ☕ ImportLimitShareAmtResp.java (2.0KB)
│   │               │       │   ├── ☕ ImportShareAmtValidatDTO.java (4.3KB)
│   │               │       │   ├── ☕ LimitAdjustReviewInfo.java (2.1KB)
│   │               │       │   ├── ☕ LimitAndFreezeDetailResponse.java (2.3KB)
│   │               │       │   ├── ☕ LimitCreditSourceInfoResp.java (1.0KB)
│   │               │       │   ├── ☕ LimitDetailOfCompanyResp.java (6.4KB)
│   │               │       │   ├── ☕ LimitDetailOfShareIdResp.java (1.4KB)
│   │               │       │   ├── ☕ LimitInfoDto.java (5.2KB)
│   │               │       │   ├── ☕ ListLsLimitMainResp.java (1.1KB)
│   │               │       │   ├── ☕ LsAccounthis.java (3.4KB)
│   │               │       │   ├── ☕ LsAllSharehis.java (1.7KB)
│   │               │       │   ├── ☕ LsLimitInfoByCrclIdResp.java (1.4KB)
│   │               │       │   ├── ☕ LsLimitMainDetailResp.java (1.2KB)
│   │               │       │   ├── ☕ LsLimitMainInfoResp.java (2.5KB)
│   │               │       │   ├── ☕ LsReceivehis.java (3.7KB)
│   │               │       │   ├── ☕ LsReceivehisAndAccounthis.java (7.0KB)
│   │               │       │   ├── ☕ LsReceivehisPo.java (2.0KB)
│   │               │       │   ├── ☕ LsShareHisInfo.java (4.4KB)
│   │               │       │   ├── ☕ MarketingLimitResq.java (2.0KB)
│   │               │       │   ├── ☕ MarktLimitNameListResp.java (1.2KB)
│   │               │       │   ├── ☕ MarktPerformanceUserResp.java (647B)
│   │               │       │   ├── ☕ MarktUserCompanyCountResp.java (610B)
│   │               │       │   ├── ☕ MarktUserCrclCountResp.java (822B)
│   │               │       │   ├── ☕ MyConsumerCrclCountResp.java (1011B)
│   │               │       │   ├── ☕ MyConsumerLimitCountResp.java (1.0KB)
│   │               │       │   ├── ☕ MySupplierResp.java (1.0KB)
│   │               │       │   ├── ☕ OpenLimitInfoOfCompanyResp.java (1.3KB)
│   │               │       │   ├── ☕ OpenUnitLimitResp.java (1.8KB)
│   │               │       │   ├── ☕ PerformInfoByCrclLimitIdResp.java (1.1KB)
│   │               │       │   ├── ☕ PerFormLimitResq.java (1.4KB)
│   │               │       │   ├── ☕ ReceiveAndSponsorIdsOfLimitResp.java (896B)
│   │               │       │   ├── ☕ SumAmtsGroupByShareIdResp.java (1.3KB)
│   │               │       │   ├── ☕ TeamCountResp.java (2.0KB)
│   │               │       │   ├── ☕ TotalLimitAndDetailAndUnitResp.java (1.4KB)
│   │               │       │   ├── ☕ TradeBgPlanOptionResp.java (1.3KB)
│   │               │       │   ├── ☕ UkeyInfoResp.java (1.1KB)
│   │               │       │   └── ☕ UnitAndUnitLimitAmtsResp.java (1.9KB)
│   │               │       ├── 📁 tradebgplan/ (5 files)
│   │               │       │   ├── 📁 req/ (3 files)
│   │               │       │   │   ├── ☕ TradeBgFieldSaveReq.java (763B)
│   │               │       │   │   ├── ☕ TradeBgPlanListReq.java (1.6KB)
│   │               │       │   │   └── ☕ TradeBgPlanSaveReq.java (4.3KB)
│   │               │       │   ├── 📁 resp/ (1 files)
│   │               │       │   │   └── ☕ TradeBgFieldResp.java (1.0KB)
│   │               │       │   └── ☕ TradeBgPlanController.java (7.5KB)
│   │               │       ├── ☕ BcpLimitController.java (2.5KB)
│   │               │       ├── ☕ CrclCompanyController.java (2.2KB)
│   │               │       ├── ☕ CrclLimitByChangeController.java (5.8KB)
│   │               │       ├── ☕ CrclLimitByExtranaltController.java (4.3KB)
│   │               │       ├── ☕ CrclLimitBySelectController.java (18.0KB)
│   │               │       ├── ☕ CrclLimitCheckController.java (2.3KB)
│   │               │       ├── ☕ CrclLimitMainByChangeController.java (5.2KB)
│   │               │       ├── ☕ CrclLimitMainBySelectController.java (22.0KB)
│   │               │       ├── ☕ CrclLimitMainController.java (21.9KB)
│   │               │       ├── ☕ CrclLimitStatisticsController.java (11.4KB)
│   │               │       ├── ☕ CrclPerformanceController.java (19.4KB)
│   │               │       ├── ☕ CreaditArchiveController.java (13.6KB)
│   │               │       ├── ☕ FrontCrclLimitMainByChangeController.java (2.8KB)
│   │               │       ├── ☕ FrontCrclLimitMainBySelectController.java (20.4KB)
│   │               │       ├── ☕ LsLimitController.java (14.9KB)
│   │               │       ├── ☕ OpenLimitRelController.java (5.1KB)
│   │               │       ├── ☕ OpenLimitWarningController.java (4.5KB)
│   │               │       └── ☕ ParamCrclLimitController.java (5.2KB)
│   │               ├── 📁 open/ (1612 files)
│   │               │   ├── 📁 application/ (669 files)
│   │               │   │   ├── 📁 batchsend/ (1 files)
│   │               │   │   │   └── ☕ BatchMsgOpenAutoSendSmsImpl.java (1.4KB)
│   │               │   │   ├── 📁 config/ (2 files)
│   │               │   │   │   ├── ☕ MongodbConfig.java (1.1KB)
│   │               │   │   │   └── ☕ OpenConfigApplication.java (18.0KB)
│   │               │   │   ├── 📁 crcl/ (175 files)
│   │               │   │   │   ├── 📁 dto/ (110 files)
│   │               │   │   │   │   ├── 📁 baseopen/ (1 files)
│   │               │   │   │   │   ├── 📁 crcldlagship/ (3 files)
│   │               │   │   │   │   ├── 📁 handleverify/ (2 files)
│   │               │   │   │   │   ├── 📁 liabilitypool/ (2 files)
│   │               │   │   │   │   ├── 📁 validate/ (1 files)
│   │               │   │   │   │   ├── ☕ AppAuditCompanyDto.java (1.2KB)
│   │               │   │   │   │   ├── ☕ AppAuditOpenInfoDto.java (3.3KB)
│   │               │   │   │   │   ├── ☕ AppAuditSubmitDto.java (2.5KB)
│   │               │   │   │   │   ├── ☕ AppCompanyDto.java (1.2KB)
│   │               │   │   │   │   ├── ☕ AppHandleOpenApplyDto.java (2.2KB)
│   │               │   │   │   │   ├── ☕ ApplyCrclMainDto.java (1.0KB)
│   │               │   │   │   │   ├── ☕ ApplyMainLimitDto.java (10.7KB)
│   │               │   │   │   │   ├── ☕ AppOpenMainDto.java (4.8KB)
│   │               │   │   │   │   ├── ☕ AppOpenOperationDto.java (3.1KB)
│   │               │   │   │   │   ├── ☕ AppPreAuditDto.java (1.5KB)
│   │               │   │   │   │   ├── ☕ AppSignAgreementDto.java (1.3KB)
│   │               │   │   │   │   ├── ☕ AppSignFileListDto.java (1.1KB)
│   │               │   │   │   │   ├── ☕ AtLastRepayDto.java (2.5KB)
│   │               │   │   │   │   ├── ☕ AuditConfirmDto.java (3.4KB)
│   │               │   │   │   │   ├── ☕ AuditExportDto.java (3.2KB)
│   │               │   │   │   │   ├── ☕ AuditInfoDto.java (2.0KB)
│   │               │   │   │   │   ├── ☕ AuditNodeResult.java (1003B)
│   │               │   │   │   │   ├── ☕ BatchAuditDto.java (5.7KB)
│   │               │   │   │   │   ├── ☕ BatchDownloadSearchDto.java (1.7KB)
│   │               │   │   │   │   ├── ☕ BatchHandleDto.java (3.4KB)
│   │               │   │   │   │   ├── ☕ BatchHandleMultiLimitApplyDto.java (1.4KB)
│   │               │   │   │   │   ├── ☕ BatchHandleMultiLimitDto.java (2.7KB)
│   │               │   │   │   │   ├── ☕ BatchImportCrclDto.java (4.4KB)
│   │               │   │   │   │   ├── ☕ BatchImportDto.java (2.0KB)
│   │               │   │   │   │   ├── ☕ BatchInfoDto.java (1.6KB)
│   │               │   │   │   │   ├── ☕ BatchOpenCrclDto.java (1.5KB)
│   │               │   │   │   │   ├── ☕ BatchOperatorAuditorDto.java (1.6KB)
│   │               │   │   │   │   ├── ☕ BatchServerOpenDto.java (6.9KB)
│   │               │   │   │   │   ├── ☕ BatchServerOpenListDataDto.java (1.5KB)
│   │               │   │   │   │   ├── ☕ BcpAccountDto.java (1.8KB)
│   │               │   │   │   │   ├── ☕ CertInfoDto.java (1.0KB)
│   │               │   │   │   │   ├── ☕ CertServerSceneDetailDto.java (5.1KB)
│   │               │   │   │   │   ├── ☕ CfcaManageCertDto.java (2.4KB)
│   │               │   │   │   │   ├── ☕ CheckHoldAccountDto.java (705B)
│   │               │   │   │   │   ├── ☕ CheckrRpetitionBatchCrclDto.java (1.5KB)
│   │               │   │   │   │   ├── ☕ ClearingAccRequestDto.java (1.8KB)
│   │               │   │   │   │   ├── ☕ ClearingAccResponseDto.java (2.9KB)
│   │               │   │   │   │   ├── ☕ ClearingMarkDto.java (1.3KB)
│   │               │   │   │   │   ├── ☕ CompanyAndUserDto.java (3.6KB)
│   │               │   │   │   │   ├── ☕ CompanyDataDto.java (2.3KB)
│   │               │   │   │   │   ├── ☕ CompanyDto.java (731B)
│   │               │   │   │   │   ├── ☕ CompanyOpenCrclParamDto.java (7.0KB)
│   │               │   │   │   │   ├── ☕ CoreTallyMqDto.java (8.4KB)
│   │               │   │   │   │   ├── ☕ CrclLimitDto.java (2.5KB)
│   │               │   │   │   │   ├── ☕ CrclOpenApplyRquestBodyDto.java (6.5KB)
│   │               │   │   │   │   ├── ☕ CustCompanyUkeyConfigureDto.java (1.5KB)
│   │               │   │   │   │   ├── ☕ DetailsList.java (3.5KB)
│   │               │   │   │   │   ├── ☕ FileNoEncodeDto.java (994B)
│   │               │   │   │   │   ├── ☕ FreezeStatusDistribDto.java (3.0KB)
│   │               │   │   │   │   ├── ☕ HandleCrclApplyDto.java (4.7KB)
│   │               │   │   │   │   ├── ☕ HeadDataDto.java (4.7KB)
│   │               │   │   │   │   ├── ☕ OpenAccountInfoDto.java (1.8KB)
│   │               │   │   │   │   ├── ☕ OpenApplyNoDto.java (647B)
│   │               │   │   │   │   ├── ☕ OpenCompanyDto.java (1.1KB)
│   │               │   │   │   │   ├── ☕ OpenConfineConfigDto.java (3.6KB)
│   │               │   │   │   │   ├── ☕ OpenCrclListDetailDto.java (3.6KB)
│   │               │   │   │   │   ├── ☕ OpenCrclParamDto.java (6.2KB)
│   │               │   │   │   │   ├── ☕ OpenCrclUserDto.java (1.1KB)
│   │               │   │   │   │   ├── ☕ OpenFileDto.java (2.0KB)
│   │               │   │   │   │   ├── ☕ OpenInfoDto.java (1.9KB)
│   │               │   │   │   │   ├── ☕ OpenMainDto.java (2.3KB)
│   │               │   │   │   │   ├── ☕ OpenSendDetailDto.java (1.3KB)
│   │               │   │   │   │   ├── ☕ OpenSendDto.java (3.2KB)
│   │               │   │   │   │   ├── ☕ PayNoticeDto.java (4.0KB)
│   │               │   │   │   │   ├── ☕ ReceiveConfChangeDto.java (1.2KB)
│   │               │   │   │   │   ├── ☕ ReceiveConfOpenDto.java (1.2KB)
│   │               │   │   │   │   ├── ☕ ReceiveConfRecordDto.java (1.0KB)
│   │               │   │   │   │   ├── ☕ RepaycallBackDto.java (875B)
│   │               │   │   │   │   ├── ☕ RepayDetailDto.java (2.2KB)
│   │               │   │   │   │   ├── ☕ RepayDetailsExportDto.java (875B)
│   │               │   │   │   │   ├── ☕ RepeatInfoDto.java (862B)
│   │               │   │   │   │   ├── ☕ RespApplicantInfoDto.java (3.8KB)
│   │               │   │   │   │   ├── ☕ RespAttachContractDto.java (4.5KB)
│   │               │   │   │   │   ├── ☕ RespAuditLogDto.java (1.9KB)
│   │               │   │   │   │   ├── ☕ RespFileDto.java (2.7KB)
│   │               │   │   │   │   ├── ☕ RespInvoiceInfoDto.java (6.2KB)
│   │               │   │   │   │   ├── ☕ ResponseDto.java (1.3KB)
│   │               │   │   │   │   ├── ☕ RespProjectDto.java (3.2KB)
│   │               │   │   │   │   ├── ☕ RespTradeDocDetailDto.java (2.0KB)
│   │               │   │   │   │   ├── ☕ RespTradeDocInfoDto.java (3.2KB)
│   │               │   │   │   │   ├── ☕ SaveCreatePdfDto.java (1.5KB)
│   │               │   │   │   │   ├── ☕ ServerOpenDto.java (8.1KB)
│   │               │   │   │   │   ├── ☕ SingleList.java (2.8KB)
│   │               │   │   │   │   ├── ☕ TemplateDto.java (3.0KB)
│   │               │   │   │   │   ├── ☕ TradeBgCoChainContractDto.java (3.6KB)
│   │               │   │   │   │   ├── ☕ TradeBgCoChainFileDto.java (2.2KB)
│   │               │   │   │   │   ├── ☕ TradeBgCoChainInvoiceDto.java (3.2KB)
│   │               │   │   │   │   ├── ☕ TradeBgDataMqContractRelation.java (1.3KB)
│   │               │   │   │   │   ├── ☕ TradeBgDataMqSyncDto.java (2.4KB)
│   │               │   │   │   │   ├── ☕ TradeBgDataMqSyncListDto.java (3.1KB)
│   │               │   │   │   │   ├── ☕ TradeBgDataSyncDto.java (2.1KB)
│   │               │   │   │   │   ├── ☕ TradeBgDataSyncListDto.java (4.5KB)
│   │               │   │   │   │   ├── ☕ TransferDetailsDto.java (2.4KB)
│   │               │   │   │   │   ├── ☕ WorkFlowBusinessDataDto.java (3.6KB)
│   │               │   │   │   │   ├── ☕ WorkFlowProcessResultDataDto.java (2.4KB)
│   │               │   │   │   │   ├── ☕ WorkFlowProcessResultDto.java (1.3KB)
│   │               │   │   │   │   ├── ☕ WorkFlowProcessStartMsg.java (3.8KB)
│   │               │   │   │   │   ├── ☕ WorkFlowStatusUpdateDataMsg.java (1.5KB)
│   │               │   │   │   │   ├── ☕ WorkFlowStatusUpdateMsg.java (1.5KB)
│   │               │   │   │   │   ├── ☕ WorkFlowVariablesDto.java (3.7KB)
│   │               │   │   │   │   └── ☕ WorkTicketCrclLimitDto.java (1.6KB)
│   │               │   │   │   ├── 📁 event/ (1 files)
│   │               │   │   │   │   └── ☕ package-info.java (50B)
│   │               │   │   │   ├── 📁 mqconsumer/ (6 files)
│   │               │   │   │   │   ├── ☕ BatchServerOpenCrclMqConsumer.java (7.6KB)
│   │               │   │   │   │   ├── ☕ CompanyOpenCrclMqConsumer.java (3.2KB)
│   │               │   │   │   │   ├── ☕ LiabilityPoolConsumer.java (8.0KB)
│   │               │   │   │   │   ├── ☕ NofundClearingNoticeMqConsumer.java (3.8KB)
│   │               │   │   │   │   ├── ☕ ServerOpenCrclMqConsumer.java (4.1KB)
│   │               │   │   │   │   └── ☕ WorkFlowProcessResultMqConsumer.java (5.8KB)
│   │               │   │   │   └── 📁 service/ (58 files)
│   │               │   │   │       ├── 📁 liabilitypool/ (13 files)
│   │               │   │   │       ├── 📁 validate/ (7 files)
│   │               │   │   │       ├── ☕ AppApplication.java (11.2KB)
│   │               │   │   │       ├── ☕ AppHandleApplication.java (36.8KB)
│   │               │   │   │       ├── ☕ AppHandleTransactionApplication.java (14.2KB)
│   │               │   │   │       ├── ☕ AppSearchApplication.java (56.8KB)
│   │               │   │   │       ├── ☕ AppValidationApplication.java (22.7KB)
│   │               │   │   │       ├── ☕ AuditCrclApplication.java (99.0KB)
│   │               │   │   │       ├── ☕ AuditTransactionApplication.java (28.3KB)
│   │               │   │   │       ├── ☕ AuditVerifyApplication.java (66.0KB)
│   │               │   │   │       ├── ☕ BaseOpenApplication.java (31.0KB)
│   │               │   │   │       ├── ☕ BcpApplication.java (4.9KB)
│   │               │   │   │       ├── ☕ BlockApplication.java (6.3KB)
│   │               │   │   │       ├── ☕ BuildApplication.java (59.4KB)
│   │               │   │   │       ├── ☕ CompanyDataApplication.java (2.0KB)
│   │               │   │   │       ├── ☕ CompanyOpenCrclApplication.java (46.2KB)
│   │               │   │   │       ├── ☕ CrclApplication.java (103.9KB)
│   │               │   │   │       ├── ☕ CrclFlagShipApplication.java (10.9KB)
│   │               │   │   │       ├── ☕ CrclFreezeApplication.java (9.4KB)
│   │               │   │   │       ├── ☕ CrclJobApplication.java (6.5KB)
│   │               │   │   │       ├── ☕ CrclManagerApplication.java (17.3KB)
│   │               │   │   │       ├── ☕ CrclReceiveNoticeApplication.java (11.1KB)
│   │               │   │   │       ├── ☕ CsCrclApplication.java (12.6KB)
│   │               │   │   │       ├── ☕ HandleCheckExecutor.java (1.9KB)
│   │               │   │   │       ├── ☕ HandleCrclApplication.java (72.1KB)
│   │               │   │   │       ├── ☕ HandleCrclServiceApplication.java (104.4KB)
│   │               │   │   │       ├── ☕ HandleTransactionApplication.java (39.6KB)
│   │               │   │   │       ├── ☕ HandleVerifyApplication.java (120.4KB)
│   │               │   │   │       ├── ☕ JobHandleApplication.java (22.8KB)
│   │               │   │   │       ├── ☕ LsBlockApplication.java (5.6KB)
│   │               │   │   │       ├── ☕ OpenHoldCompanyLogApplication.java (7.1KB)
│   │               │   │   │       ├── ☕ OpenPdfApplication.java (52.4KB)
│   │               │   │   │       ├── ☕ OpenSearchApplication.java (92.0KB)
│   │               │   │   │       ├── ☕ OpenSendApplication.java (40.9KB)
│   │               │   │   │       ├── ☕ ReceiveConfigApplication.java (30.4KB)
│   │               │   │   │       ├── ☕ SmsApplicaiton.java (3.9KB)
│   │               │   │   │       ├── ☕ VerifyApplication.java (41.9KB)
│   │               │   │   │       ├── ☕ WorkFlowApplication.java (26.4KB)
│   │               │   │   │       ├── ☕ WorkFlowReconciliationApplication.java (26.8KB)
│   │               │   │   │       └── ☕ WorkTicketMsgLogApplication.java (4.7KB)
│   │               │   │   ├── 📁 feign/ (407 files)
│   │               │   │   │   ├── 📁 abs/ (2 files)
│   │               │   │   │   │   ├── ☕ AbsFeign.java (649B)
│   │               │   │   │   │   └── ☕ AbsFeignApi.java (1.3KB)
│   │               │   │   │   ├── 📁 account/ (12 files)
│   │               │   │   │   │   ├── 📁 dto/ (8 files)
│   │               │   │   │   │   ├── ☕ CompanyAccountFeign.java (10.6KB)
│   │               │   │   │   │   ├── ☕ CompanyAccountFeignApi.java (5.2KB)
│   │               │   │   │   │   ├── ☕ IntegralIncomeFeign.java (2.7KB)
│   │               │   │   │   │   └── ☕ IntegralIncomeFeignApi.java (2.5KB)
│   │               │   │   │   ├── 📁 assemble/ (11 files)
│   │               │   │   │   │   ├── 📁 dto/ (7 files)
│   │               │   │   │   │   ├── ☕ AssembleFeign.java (2.1KB)
│   │               │   │   │   │   ├── ☕ AssembleFeignApi.java (1.7KB)
│   │               │   │   │   │   ├── ☕ OpenCompanyFeign.java (2.1KB)
│   │               │   │   │   │   └── ☕ OpenCompanyFeignApi.java (1.9KB)
│   │               │   │   │   ├── 📁 bcp/ (5 files)
│   │               │   │   │   │   ├── 📁 dto/ (3 files)
│   │               │   │   │   │   ├── ☕ CrclOpenBcpFeign.java (1.7KB)
│   │               │   │   │   │   └── ☕ CrclOpenBcpFeignApi.java (1.8KB)
│   │               │   │   │   ├── 📁 bkb/ (5 files)
│   │               │   │   │   │   ├── 📁 dto/ (3 files)
│   │               │   │   │   │   ├── ☕ BkbDateCnapsFeign.java (942B)
│   │               │   │   │   │   └── ☕ BkbDateCnapsFeignApi.java (1.2KB)
│   │               │   │   │   ├── 📁 block/ (5 files)
│   │               │   │   │   │   ├── 📁 dto/ (4 files)
│   │               │   │   │   │   └── ☕ BankBlockFeign.java (1010B)
│   │               │   │   │   ├── 📁 charge/ (9 files)
│   │               │   │   │   │   ├── 📁 dto/ (6 files)
│   │               │   │   │   │   ├── ☕ ChargeFeign.java (1.2KB)
│   │               │   │   │   │   ├── ☕ ChargeFeignApi.java (7.9KB)
│   │               │   │   │   │   └── ☕ ChargeRelationBySouOpenCompReqDto.java (1.2KB)
│   │               │   │   │   ├── 📁 checking/ (3 files)
│   │               │   │   │   │   ├── 📁 dto/ (1 files)
│   │               │   │   │   │   ├── ☕ ZqylCheckingFeign.java (1.0KB)
│   │               │   │   │   │   └── ☕ ZqylCheckingFeignApi.java (1.4KB)
│   │               │   │   │   ├── 📁 companyroute/ (3 files)
│   │               │   │   │   │   ├── 📁 dto/ (1 files)
│   │               │   │   │   │   ├── ☕ CompanyRouteFegin.java (1.1KB)
│   │               │   │   │   │   └── ☕ CompanyRouteFeginApi.java (966B)
│   │               │   │   │   ├── 📁 crclcore/ (38 files)
│   │               │   │   │   │   ├── 📁 dto/ (25 files)
│   │               │   │   │   │   ├── ☕ CrclCorePondApi.java (501B)
│   │               │   │   │   │   ├── ☕ CrclCorePondApiImpl.java (810B)
│   │               │   │   │   │   ├── ☕ CrclCorePondFeign.java (1.2KB)
│   │               │   │   │   │   ├── ☕ CrclCoreStatisticsFeign.java (1.6KB)
│   │               │   │   │   │   ├── ☕ CrclCoreTallyApi.java (5.2KB)
│   │               │   │   │   │   ├── ☕ CrclCoreTallyApiImpl.java (8.9KB)
│   │               │   │   │   │   ├── ☕ CrclCoreTallyFeign.java (9.8KB)
│   │               │   │   │   │   ├── ☕ CrclFreezeApi.java (3.2KB)
│   │               │   │   │   │   ├── ☕ CrclFreezeApiImpl.java (4.0KB)
│   │               │   │   │   │   ├── ☕ CrclFreezeFeign.java (5.9KB)
│   │               │   │   │   │   ├── ☕ LiabilityPoolApi.java (2.1KB)
│   │               │   │   │   │   ├── ☕ LiabilityPoolApiImpl.java (3.6KB)
│   │               │   │   │   │   └── ☕ LiabilityPoolFeign.java (5.1KB)
│   │               │   │   │   ├── 📁 crclpay/ (3 files)
│   │               │   │   │   │   ├── 📁 dto/ (1 files)
│   │               │   │   │   │   ├── ☕ CrclPayFeign.java (1.1KB)
│   │               │   │   │   │   └── ☕ CrclPayFeignApi.java (1.8KB)
│   │               │   │   │   ├── 📁 data/ (37 files)
│   │               │   │   │   │   ├── 📁 dto/ (29 files)
│   │               │   │   │   │   ├── ☕ DataBaseFeign.java (5.9KB)
│   │               │   │   │   │   ├── ☕ DataBaseFeignApi.java (7.2KB)
│   │               │   │   │   │   ├── ☕ DataGrantFeign.java (2.1KB)
│   │               │   │   │   │   ├── ☕ DataGrantFeignApi.java (4.3KB)
│   │               │   │   │   │   ├── ☕ DataHolidayFeign.java (3.7KB)
│   │               │   │   │   │   ├── ☕ DataHolidayFeignApi.java (8.6KB)
│   │               │   │   │   │   ├── ☕ DataUserFeign.java (1.6KB)
│   │               │   │   │   │   └── ☕ DataUserFeignApi.java (2.5KB)
│   │               │   │   │   ├── 📁 datasearch/ (14 files)
│   │               │   │   │   │   ├── 📁 dto/ (12 files)
│   │               │   │   │   │   ├── ☕ DataSearchFeign.java (3.9KB)
│   │               │   │   │   │   └── ☕ DataSearchFeignApi.java (11.8KB)
│   │               │   │   │   ├── 📁 ebank/ (2 files)
│   │               │   │   │   │   ├── ☕ EBankFeign.java (1.8KB)
│   │               │   │   │   │   └── ☕ EBankFeignApi.java (925B)
│   │               │   │   │   ├── 📁 file/ (11 files)
│   │               │   │   │   │   ├── 📁 dto/ (9 files)
│   │               │   │   │   │   ├── ☕ FileDownLoadFeign.java (4.0KB)
│   │               │   │   │   │   └── ☕ FileDownloadFeignApi.java (4.3KB)
│   │               │   │   │   ├── 📁 finance/ (5 files)
│   │               │   │   │   │   ├── 📁 dto/ (3 files)
│   │               │   │   │   │   ├── ☕ ZqylFinanceFeign.java (1.4KB)
│   │               │   │   │   │   └── ☕ ZqylFinanceFeignApi.java (2.3KB)
│   │               │   │   │   ├── 📁 investment/ (6 files)
│   │               │   │   │   │   ├── 📁 dto/ (4 files)
│   │               │   │   │   │   ├── ☕ InvestmentPlanFeign.java (3.0KB)
│   │               │   │   │   │   └── ☕ InvestmentPlanFeignApi.java (2.9KB)
│   │               │   │   │   ├── 📁 invoice/ (11 files)
│   │               │   │   │   │   ├── 📁 dto/ (9 files)
│   │               │   │   │   │   ├── ☕ ZqylInvoiceFeign.java (2.0KB)
│   │               │   │   │   │   └── ☕ ZqylInvoiceFeignApi.java (2.7KB)
│   │               │   │   │   ├── 📁 messagecenter/ (25 files)
│   │               │   │   │   │   ├── 📁 dto/ (18 files)
│   │               │   │   │   │   ├── ☕ EmailFegin.java (853B)
│   │               │   │   │   │   ├── ☕ EmailFeginApi.java (392B)
│   │               │   │   │   │   ├── ☕ EmailFeginApiImpl.java (736B)
│   │               │   │   │   │   ├── ☕ MessageFeignApi.java (13.6KB)
│   │               │   │   │   │   ├── ☕ SmsFeign.java (2.4KB)
│   │               │   │   │   │   ├── ☕ WebMsgFeign.java (1.3KB)
│   │               │   │   │   │   └── ☕ WechatFeign.java (1.2KB)
│   │               │   │   │   ├── 📁 messageim/ (3 files)
│   │               │   │   │   │   ├── 📁 dto/ (1 files)
│   │               │   │   │   │   ├── ☕ MessageImFeign.java (944B)
│   │               │   │   │   │   └── ☕ MessageImFeignApi.java (1.1KB)
│   │               │   │   │   ├── 📁 repay/ (30 files)
│   │               │   │   │   │   ├── 📁 dto/ (26 files)
│   │               │   │   │   │   ├── ☕ ClearingFeign.java (1.5KB)
│   │               │   │   │   │   ├── ☕ ClearingFeignApi.java (2.1KB)
│   │               │   │   │   │   ├── ☕ RepayFeign.java (6.1KB)
│   │               │   │   │   │   └── ☕ RepayFeignApi.java (8.7KB)
│   │               │   │   │   ├── 📁 report/ (4 files)
│   │               │   │   │   │   ├── 📁 dto/ (2 files)
│   │               │   │   │   │   ├── ☕ ZqylReportFeign.java (851B)
│   │               │   │   │   │   └── ☕ ZqylReportFeignApi.java (1.4KB)
│   │               │   │   │   ├── 📁 templates/ (5 files)
│   │               │   │   │   │   ├── 📁 dto/ (3 files)
│   │               │   │   │   │   ├── ☕ AgreementFeign.java (1.3KB)
│   │               │   │   │   │   └── ☕ AgreementFeignApi.java (4.6KB)
│   │               │   │   │   ├── 📁 user/ (91 files)
│   │               │   │   │   │   ├── 📁 dto/ (68 files)
│   │               │   │   │   │   ├── 📁 userauth/ (16 files)
│   │               │   │   │   │   ├── 📁 usercas/ (1 files)
│   │               │   │   │   │   ├── 📁 usercert/ (2 files)
│   │               │   │   │   │   ├── 📁 usercfca/ (2 files)
│   │               │   │   │   │   └── 📁 usergeneral/ (2 files)
│   │               │   │   │   ├── 📁 workflow/ (24 files)
│   │               │   │   │   │   ├── 📁 dto/ (19 files)
│   │               │   │   │   │   ├── ☕ ActFeign.java (2.8KB)
│   │               │   │   │   │   ├── ☕ ActFeignApi.java (4.2KB)
│   │               │   │   │   │   ├── ☕ WorkFlowApi.java (2.1KB)
│   │               │   │   │   │   ├── ☕ WorkFlowApiImpl.java (8.9KB)
│   │               │   │   │   │   └── ☕ WorkFlowFeign.java (4.2KB)
│   │               │   │   │   ├── 📁 ysfd/ (8 files)
│   │               │   │   │   │   ├── 📁 dto/ (6 files)
│   │               │   │   │   │   ├── ☕ YsfdFeign.java (2.6KB)
│   │               │   │   │   │   └── ☕ YsfdFeignApi.java (2.0KB)
│   │               │   │   │   ├── 📁 zqylcms/ (10 files)
│   │               │   │   │   │   ├── 📁 dto/ (8 files)
│   │               │   │   │   │   ├── ☕ ZqylCmsFeign.java (3.0KB)
│   │               │   │   │   │   └── ☕ ZqylCmsFeignApi.java (14.5KB)
│   │               │   │   │   ├── 📁 zqylinvoice/ (20 files)
│   │               │   │   │   │   ├── 📁 dto/ (6 files)
│   │               │   │   │   │   ├── 📁 req/ (7 files)
│   │               │   │   │   │   ├── 📁 resp/ (5 files)
│   │               │   │   │   │   ├── ☕ InvoicePlatFormFeign.java (4.3KB)
│   │               │   │   │   │   └── ☕ InvoicePlatFormFeignApi.java (6.6KB)
│   │               │   │   │   ├── 📁 zqylloan/ (3 files)
│   │               │   │   │   │   ├── 📁 dto/ (1 files)
│   │               │   │   │   │   ├── ☕ ZqylLoanFeign.java (996B)
│   │               │   │   │   │   └── ☕ ZqylLoanFeignApi.java (1.0KB)
│   │               │   │   │   └── 📁 zqylweb/ (2 files)
│   │               │   │   │       └── 📁 dto/ (2 files)
│   │               │   │   ├── 📁 jobhandler/ (19 files)
│   │               │   │   │   ├── ☕ CheckCompanyDataHandler.java (841B)
│   │               │   │   │   ├── ☕ CheckOpenWarningHandle.java (1.6KB)
│   │               │   │   │   ├── ☕ CheckOpenWarningStatusHandle.java (824B)
│   │               │   │   │   ├── ☕ CheckWorkTicketMsgHandler.java (1.1KB)
│   │               │   │   │   ├── ☕ CoreValidOpenWarningHandle.java (3.0KB)
│   │               │   │   │   ├── ☕ CrclOpenBCPHandle.java (5.3KB)
│   │               │   │   │   ├── ☕ CrclPondWarnHandler.java (3.0KB)
│   │               │   │   │   ├── ☕ DoBatchOpenAuditTaskHandler.java (1.4KB)
│   │               │   │   │   ├── ☕ LimitWarningHandler.java (3.9KB)
│   │               │   │   │   ├── ☕ OpenNoticeBusinessResultRetryHandler.java (1.5KB)
│   │               │   │   │   ├── ☕ RestApplySeqHandler.java (700B)
│   │               │   │   │   ├── ☕ RetryInvoiceUnFreezeForSingleFail.java (1.1KB)
│   │               │   │   │   ├── ☕ SaveOpenAccountApplyHandle.java (851B)
│   │               │   │   │   ├── ☕ TimingGetTallyDisposeStatusHandler.java (793B)
│   │               │   │   │   ├── ☕ UnFreezeNonidenticalInvoiceHandler.java (1.1KB)
│   │               │   │   │   ├── ☕ UpdateWorkFlowProcessConfigHandle.java (1.3KB)
│   │               │   │   │   ├── ☕ WorkFlowPreAuditStatusResultHandler.java (1.6KB)
│   │               │   │   │   ├── ☕ WorkFlowProcessStartResultHandler.java (1.5KB)
│   │               │   │   │   └── ☕ WorkFlowReconciliationHandler.java (814B)
│   │               │   │   ├── 📁 ls/ (5 files)
│   │               │   │   │   ├── 📁 dto/ (4 files)
│   │               │   │   │   │   ├── ☕ LsCheckingDto.java (1.4KB)
│   │               │   │   │   │   ├── ☕ LsLimitCheckDto.java (1.2KB)
│   │               │   │   │   │   ├── ☕ LsOpenMainDto.java (2.8KB)
│   │               │   │   │   │   └── ☕ package-info.java (46B)
│   │               │   │   │   └── 📁 service/ (1 files)
│   │               │   │   │       └── ☕ LsOpenApplication.java (24.2KB)
│   │               │   │   ├── 📁 message/ (9 files)
│   │               │   │   │   ├── 📁 dto/ (8 files)
│   │               │   │   │   │   ├── ☕ CrclInterfaceDto.java (2.6KB)
│   │               │   │   │   │   ├── ☕ NoticeBody.java (1.3KB)
│   │               │   │   │   │   ├── ☕ OpenCrclInterfaceDto.java (198B)
│   │               │   │   │   │   ├── ☕ OpenNoticeBody.java (7.3KB)
│   │               │   │   │   │   ├── ☕ OpenNoticeMqDto.java (3.1KB)
│   │               │   │   │   │   ├── ☕ OpenOperAuditDto.java (1.1KB)
│   │               │   │   │   │   ├── ☕ QueryOpenResultBody.java (4.4KB)
│   │               │   │   │   │   └── ☕ ResponseBodyBean.java (52B)
│   │               │   │   │   └── 📁 service/ (1 files)
│   │               │   │   │       └── ☕ MessageApplication.java (87.7KB)
│   │               │   │   ├── 📁 send/ (35 files)
│   │               │   │   │   ├── 📁 dto/ (12 files)
│   │               │   │   │   │   ├── ☕ ConsLimitDto.java (5.6KB)
│   │               │   │   │   │   ├── ☕ CrclOpenBusinessResultNoticeMsg.java (5.0KB)
│   │               │   │   │   │   ├── ☕ CrclReceiveNoticeBody.java (5.7KB)
│   │               │   │   │   │   ├── ☕ JebRepayBody.java (5.5KB)
│   │               │   │   │   │   ├── ☕ JebRepayMqDto.java (738B)
│   │               │   │   │   │   ├── ☕ NoticeNakatengWorkerDto.java (3.7KB)
│   │               │   │   │   │   ├── ☕ RepayBody.java (7.1KB)
│   │               │   │   │   │   ├── ☕ RepayHead.java (1.5KB)
│   │               │   │   │   │   ├── ☕ RepayMqDto.java (724B)
│   │               │   │   │   │   ├── ☕ SendReslutDto.java (2.3KB)
│   │               │   │   │   │   ├── ☕ TradeBgCoChainBodyDto.java (1.7KB)
│   │               │   │   │   │   └── ☕ WorkTicketMqDto.java (1.5KB)
│   │               │   │   │   └── 📁 service/ (23 files)
│   │               │   │   │       ├── ☕ AssembleNoticeWorker.java (5.1KB)
│   │               │   │   │       ├── ☕ BcpWorker.java (2.4KB)
│   │               │   │   │       ├── ☕ BlockWorker.java (5.0KB)
│   │               │   │   │       ├── ☕ CompanyFriendWorker.java (3.3KB)
│   │               │   │   │       ├── ☕ CrclReceiveNoticeWorker.java (5.1KB)
│   │               │   │   │       ├── ☕ GeneralAccountWorker.java (4.2KB)
│   │               │   │   │       ├── ☕ IntegralWorker.java (1.6KB)
│   │               │   │   │       ├── ☕ JebOpenAuditRepayMqWorker.java (5.3KB)
│   │               │   │   │       ├── ☕ LsBlockWorker.java (4.5KB)
│   │               │   │   │       ├── ☕ LsRepayMqWorker.java (5.7KB)
│   │               │   │   │       ├── ☕ MqApplication.java (11.1KB)
│   │               │   │   │       ├── ☕ NoticeBusinessResultWorker.java (5.5KB)
│   │               │   │   │       ├── ☕ NoticeNakatengWorker.java (6.5KB)
│   │               │   │   │       ├── ☕ OpenLxMessageImWorker.java (2.2KB)
│   │               │   │   │       ├── ☕ OpenMessageWorker.java (3.2KB)
│   │               │   │   │       ├── ☕ RepayMqWorker.java (7.0KB)
│   │               │   │   │       ├── ☕ TallyWorker.java (6.4KB)
│   │               │   │   │       ├── ☕ TradeBgCoChainWorker.java (3.0KB)
│   │               │   │   │       ├── ☕ TradeBgDataSyncWorker.java (3.0KB)
│   │               │   │   │       ├── ☕ WorkFlowProcessStartWorker.java (7.2KB)
│   │               │   │   │       ├── ☕ WorkFlowUpdateStatusWorker.java (5.6KB)
│   │               │   │   │       ├── ☕ WorkTicketMqWorker.java (5.1KB)
│   │               │   │   │       └── ☕ YfdOpenCrclWorker.java (5.8KB)
│   │               │   │   ├── 📁 session/ (2 files)
│   │               │   │   │   ├── 📁 dto/ (1 files)
│   │               │   │   │   │   └── ☕ TradeCountDto.java (800B)
│   │               │   │   │   └── 📁 service/ (1 files)
│   │               │   │   │       └── ☕ SessionApplication.java (9.6KB)
│   │               │   │   ├── 📁 statistics/ (1 files)
│   │               │   │   │   └── ☕ StatisticsApplication.java (17.0KB)
│   │               │   │   └── 📁 trade/ (13 files)
│   │               │   │       ├── 📁 dto/ (6 files)
│   │               │   │       │   ├── ☕ CheckInvoiceCodeDto.java (1.4KB)
│   │               │   │       │   ├── ☕ ListTradeBgContractListDto.java (1007B)
│   │               │   │       │   ├── ☕ ListTradeBgInvoiceListDto.java (1006B)
│   │               │   │       │   ├── ☕ OpenCrclFailDto.java (732B)
│   │               │   │       │   ├── ☕ OpenMainInfoDto.java (6.8KB)
│   │               │   │       │   └── ☕ OperatorInfo.java (1.1KB)
│   │               │   │       └── 📁 service/ (7 files)
│   │               │   │           ├── ☕ TradeBgCoChainApplication.java (17.2KB)
│   │               │   │           ├── ☕ TradeBgContractApplication.java (27.0KB)
│   │               │   │           ├── ☕ TradeBgDataSyncApplication.java (12.9KB)
│   │               │   │           ├── ☕ TradeBgInvoiceApplication.java (55.6KB)
│   │               │   │           ├── ☕ TradeBgInvoiceTallyApplication.java (25.8KB)
│   │               │   │           ├── ☕ TradeBgManagerApplication.java (339.8KB)
│   │               │   │           └── ☕ TradeBgSwitchInfoApplication.java (35.2KB)
│   │               │   ├── 📁 base/ (358 files)
│   │               │   │   ├── 📁 advice/ (2 files)
│   │               │   │   │   ├── ☕ ExceptionHandlerAdvice.java (2.9KB)
│   │               │   │   │   └── ☕ MethodAnnotation.java (389B)
│   │               │   │   ├── 📁 annotation/ (10 files)
│   │               │   │   │   ├── ☕ ListNotEmpty.java (751B)
│   │               │   │   │   ├── ☕ ListNotEmptyValidator.java (570B)
│   │               │   │   │   ├── ☕ TokenValidate.java (588B)
│   │               │   │   │   ├── ☕ TokenValidateAspect.java (1.7KB)
│   │               │   │   │   ├── ☕ UserPosition.java (587B)
│   │               │   │   │   ├── ☕ UserPositionAspect.java (7.3KB)
│   │               │   │   │   ├── ☕ UserUKey.java (583B)
│   │               │   │   │   ├── ☕ UserUkeyAspect.java (5.0KB)
│   │               │   │   │   ├── ☕ UserValidate.java (587B)
│   │               │   │   │   └── ☕ UserValidateAspect.java (1.7KB)
│   │               │   │   ├── 📁 autosend/ (4 files)
│   │               │   │   │   ├── ☕ AbstractSendWorker.java (5.9KB)
│   │               │   │   │   ├── ☕ OpenSendParam.java (4.9KB)
│   │               │   │   │   ├── ☕ SendManager.java (16.2KB)
│   │               │   │   │   └── ☕ TaskTypeEnum.java (3.0KB)
│   │               │   │   ├── 📁 batchsend/ (3 files)
│   │               │   │   │   ├── ☕ AbstractBatchAutoSend.java (440B)
│   │               │   │   │   ├── ☕ BatchAutoSend.java (887B)
│   │               │   │   │   └── ☕ BatchSendManager.java (2.0KB)
│   │               │   │   ├── 📁 config/ (10 files)
│   │               │   │   │   ├── ☕ DistribTypeFactory.java (2.1KB)
│   │               │   │   │   ├── ☕ FeignSpringFormEncoder.java (2.4KB)
│   │               │   │   │   ├── ☕ FileDownViewConfig.java (3.2KB)
│   │               │   │   │   ├── ☕ MpsAuditBaseSelectProvider.java (11.8KB)
│   │               │   │   │   ├── ☕ MultipartSupportConfig.java (959B)
│   │               │   │   │   ├── ☕ RedissonConfig.java (1.4KB)
│   │               │   │   │   ├── ☕ TardeAuditListSearchStatusFactory.java (1.5KB)
│   │               │   │   │   ├── ☕ ThreadPoolConfig.java (7.0KB)
│   │               │   │   │   ├── ☕ VisiableThreadPoolTaskExecutor.java (2.1KB)
│   │               │   │   │   └── ☕ XxlJobConfig.java (1.4KB)
│   │               │   │   ├── 📁 constants/ (21 files)
│   │               │   │   │   ├── ☕ BankBlockConstants.java (1.3KB)
│   │               │   │   │   ├── ☕ BizTraceConstants.java (969B)
│   │               │   │   │   ├── ☕ ClearingConstants.java (223B)
│   │               │   │   │   ├── ☕ ComonConstant.java (2.2KB)
│   │               │   │   │   ├── ☕ CompanyAccountConstants.java (829B)
│   │               │   │   │   ├── ☕ Constants.java (5.3KB)
│   │               │   │   │   ├── ☕ CoreMainConstants.java (488B)
│   │               │   │   │   ├── ☕ CorePondConstants.java (379B)
│   │               │   │   │   ├── ☕ DynamicsSqlConstant.java (4.5KB)
│   │               │   │   │   ├── ☕ EBankConstants.java (2.4KB)
│   │               │   │   │   ├── ☕ ExportExcelConstants.java (668B)
│   │               │   │   │   ├── ☕ MsgTypeConstants.java (310B)
│   │               │   │   │   ├── ☕ NoticeConstant.java (1.3KB)
│   │               │   │   │   ├── ☕ NumberConstants.java (1.3KB)
│   │               │   │   │   ├── ☕ OpenUnitConstants.java (186B)
│   │               │   │   │   ├── ☕ PageConstants.java (248B)
│   │               │   │   │   ├── ☕ PdfCodeConstants.java (3.7KB)
│   │               │   │   │   ├── ☕ PdfDefaultAliasNameConstants.java (221B)
│   │               │   │   │   ├── ☕ RedisConstants.java (1.4KB)
│   │               │   │   │   ├── ☕ SceneCodeConstants.java (3.6KB)
│   │               │   │   │   └── ☕ ServerCodeConstants.java (1.5KB)
│   │               │   │   ├── 📁 dict/ (211 files)
│   │               │   │   │   ├── 📁 crclcore/ (1 files)
│   │               │   │   │   │   └── ☕ CoreMainBusinessTypeEnum.java (1.4KB)
│   │               │   │   │   ├── 📁 crclopen/ (1 files)
│   │               │   │   │   │   └── ☕ ModelTypeEnum.java (854B)
│   │               │   │   │   ├── 📁 liabilitypool/ (1 files)
│   │               │   │   │   │   └── ☕ LiabilityPoolCallTypeEnum.java (990B)
│   │               │   │   │   ├── 📁 middle/ (5 files)
│   │               │   │   │   │   ├── ☕ ConditionTypeEnum.java (522B)
│   │               │   │   │   │   ├── ☕ LableTypeEnum.java (620B)
│   │               │   │   │   │   ├── ☕ OperatorEnum.java (1.5KB)
│   │               │   │   │   │   ├── ☕ PropertyTypeEnum.java (686B)
│   │               │   │   │   │   └── ☕ TradeOrderPropertyEnum.java (2.0KB)
│   │               │   │   │   ├── 📁 tradeBg/ (12 files)
│   │               │   │   │   │   ├── ☕ BaseFieldTypeEnum.java (547B)
│   │               │   │   │   │   ├── ☕ BillComponentTypeEnum.java (548B)
│   │               │   │   │   │   ├── ☕ CheckButtonTypeEnum.java (652B)
│   │               │   │   │   │   ├── ☕ CheckResultStatusEnum.java (874B)
│   │               │   │   │   │   ├── ☕ InvoiceKindTypeEnum.java (1.1KB)
│   │               │   │   │   │   ├── ☕ InvoiceOcrTypeEnum.java (1.6KB)
│   │               │   │   │   │   ├── ☕ InvoiceQueryResultEnum.java (798B)
│   │               │   │   │   │   ├── ☕ InvoiceTypeEnum.java (3.6KB)
│   │               │   │   │   │   ├── ☕ IsFirstUploadEnum.java (589B)
│   │               │   │   │   │   ├── ☕ IsInvoiceRepeatEnum.java (631B)
│   │               │   │   │   │   ├── ☕ IsNeedInvoiceEnum.java (638B)
│   │               │   │   │   │   └── ☕ TradeBgFieldCodeEnum.java (1.6KB)
│   │               │   │   │   ├── 📁 workflow/ (8 files)
│   │               │   │   │   │   ├── ☕ AuditResultEnum.java (674B)
│   │               │   │   │   │   ├── ☕ NotifyOpportunityEnum.java (1.4KB)
│   │               │   │   │   │   ├── ☕ PreAuditResultEnum.java (689B)
│   │               │   │   │   │   ├── ☕ WorkFlowAllFlag.java (606B)
│   │               │   │   │   │   ├── ☕ WorkFlowCancelResultEnum.java (521B)
│   │               │   │   │   │   ├── ☕ WorkFlowPreResultEnum.java (417B)
│   │               │   │   │   │   ├── ☕ WorkFlowProcessConfigEnum.java (950B)
│   │               │   │   │   │   └── ☕ WorkFlowProcessStartStatusEnum.java (574B)
│   │               │   │   │   ├── ☕ AbsEnum.java (515B)
│   │               │   │   │   ├── ☕ AccountApplyFlagEnum.java (547B)
│   │               │   │   │   ├── ☕ AccountDealStatusEnum.java (486B)
│   │               │   │   │   ├── ☕ AppCrclListTagEnum.java (1.4KB)
│   │               │   │   │   ├── ☕ AppPushFlagEnum.java (1.7KB)
│   │               │   │   │   ├── ☕ AppQueryTypeEnum.java (626B)
│   │               │   │   │   ├── ☕ AppUserMenuTypeEnum.java (981B)
│   │               │   │   │   ├── ☕ AuditEnum.java (502B)
│   │               │   │   │   ├── ☕ AuditNodeEnum.java (536B)
│   │               │   │   │   ├── ☕ AuditStageEnum.java (506B)
│   │               │   │   │   ├── ☕ AuditStatusEnum.java (571B)
│   │               │   │   │   ├── ☕ AuthStatusEnum.java (524B)
│   │               │   │   │   ├── ☕ AuthTypeEnum.java (636B)
│   │               │   │   │   ├── ☕ BankSourceType.java (779B)
│   │               │   │   │   ├── ☕ BcpBizTypeEnum.java (562B)
│   │               │   │   │   ├── ☕ BcpBusiTypeEnum.java (697B)
│   │               │   │   │   ├── ☕ BcpNodeCodeEnum.java (786B)
│   │               │   │   │   ├── ☕ BcpSynFormulaEnum.java (554B)
│   │               │   │   │   ├── ☕ BcpSynResultEnum.java (662B)
│   │               │   │   │   ├── ☕ BeneficiaryEnum.java (714B)
│   │               │   │   │   ├── ☕ BillStatusEnum.java (1.4KB)
│   │               │   │   │   ├── ☕ BindRoleEnum.java (949B)
│   │               │   │   │   ├── ☕ BizTypeEnum.java (509B)
│   │               │   │   │   ├── ☕ BusinessStatusEnum.java (569B)
│   │               │   │   │   ├── ☕ BusinessTypeCodeEnumEnum.java (928B)
│   │               │   │   │   ├── ☕ BusinessTypeEnum.java (462B)
│   │               │   │   │   ├── ☕ BusiTypeBcpEnum.java (634B)
│   │               │   │   │   ├── ☕ CalTypeNewEnum.java (559B)
│   │               │   │   │   ├── ☕ CardStatusEnum.java (656B)
│   │               │   │   │   ├── ☕ CardTypeEnum.java (729B)
│   │               │   │   │   ├── ☕ CfcaSvsHisCertTypeEnum.java (586B)
│   │               │   │   │   ├── ☕ CfcaSvsHisSignOperTypeEnum.java (548B)
│   │               │   │   │   ├── ☕ ChargeExceptionEnum.java (720B)
│   │               │   │   │   ├── ☕ ChargeTypeEnum.java (880B)
│   │               │   │   │   ├── ☕ ClassifyEnum.java (881B)
│   │               │   │   │   ├── ☕ CodeRuleEnum.java (890B)
│   │               │   │   │   ├── ☕ CompanyAccountCardTypeEnum.java (5.8KB)
│   │               │   │   │   ├── ☕ CompanyBankStatusEnum.java (1.1KB)
│   │               │   │   │   ├── ☕ CompanyTypeEnum.java (725B)
│   │               │   │   │   ├── ☕ CoreSourceTypeEnum.java (1.1KB)
│   │               │   │   │   ├── ☕ CrclApplyStatusEnum.java (959B)
│   │               │   │   │   ├── ☕ CrclBatchCorrelationStatusEnum.java (753B)
│   │               │   │   │   ├── ☕ CrclCompanyTypeEnum.java (684B)
│   │               │   │   │   ├── ☕ CrclDistribFlagDistribTypeEnum.java (2.1KB)
│   │               │   │   │   ├── ☕ CrclDistribFlagSourceTableEnum.java (646B)
│   │               │   │   │   ├── ☕ CrclFixedFlowpathStatusEnum.java (602B)
│   │               │   │   │   ├── ☕ CrclLimitEffectStatusEnum.java (680B)
│   │               │   │   │   ├── ☕ CrclLimitFileTypeEnum.java (459B)
│   │               │   │   │   ├── ☕ CrclNoFlagEnum.java (541B)
│   │               │   │   │   ├── ☕ CrclNoSourceTypeEnum.java (667B)
│   │               │   │   │   ├── ☕ CrclOpenbatchStatusEnum.java (589B)
│   │               │   │   │   ├── ☕ CrclOpenbatchTimerStatusEnum.java (630B)
│   │               │   │   │   ├── ☕ CrclOpenBcpEnum.java (613B)
│   │               │   │   │   ├── ☕ CrclReserveTaskStatusEnum.java (615B)
│   │               │   │   │   ├── ☕ CrclStatusDataEnum.java (797B)
│   │               │   │   │   ├── ☕ CrclTallyIdempotentStatusEnum.java (1.2KB)
│   │               │   │   │   ├── ☕ CrclTypeEnum.java (454B)
│   │               │   │   │   ├── ☕ CurrencyTypeEnum.java (495B)
│   │               │   │   │   ├── ☕ CustCompanyEnum.java (640B)
│   │               │   │   │   ├── ☕ CustStatusEnum.java (895B)
│   │               │   │   │   ├── ☕ DataAccessConditionEnum.java (1.3KB)
│   │               │   │   │   ├── ☕ DataAccessParamNameEnum.java (1.4KB)
│   │               │   │   │   ├── ☕ DataAccessTableNameEnum.java (911B)
│   │               │   │   │   ├── ☕ DesireModeCodeEnum.java (752B)
│   │               │   │   │   ├── ☕ DistribTypeEnum.java (1.5KB)
│   │               │   │   │   ├── ☕ DockingTypeEnum.java (540B)
│   │               │   │   │   ├── ☕ ErrorCodeEnum.java (6.3KB)
│   │               │   │   │   ├── ☕ ErrorTypeEnum.java (16.5KB)
│   │               │   │   │   ├── ☕ FailStatusEnum.java (524B)
│   │               │   │   │   ├── ☕ FailTypeEnum.java (839B)
│   │               │   │   │   ├── ☕ FileDownloadSourceTypeEnum.java (596B)
│   │               │   │   │   ├── ☕ FileManagerBizTypeEnum.java (1.7KB)
│   │               │   │   │   ├── ☕ FinancePaymentPatternEnum.java (949B)
│   │               │   │   │   ├── ☕ FlagEnum.java (546B)
│   │               │   │   │   ├── ☕ FlowPathEnum.java (569B)
│   │               │   │   │   ├── ☕ FrontBackBizEnum.java (794B)
│   │               │   │   │   ├── ☕ GroupEnum.java (587B)
│   │               │   │   │   ├── ☕ GroupUserAuthTypeEnum.java (540B)
│   │               │   │   │   ├── ☕ IdempotentStatusEnum.java (1.3KB)
│   │               │   │   │   ├── ☕ IncentiveSalesTypeEnum.java (531B)
│   │               │   │   │   ├── ☕ IntegralTypeEnum.java (1.3KB)
│   │               │   │   │   ├── ☕ InterfaceStatusEnum.java (1.1KB)
│   │               │   │   │   ├── ☕ InvestmentPlanEffectStatusEnum.java (903B)
│   │               │   │   │   ├── ☕ IsfitEnum.java (586B)
│   │               │   │   │   ├── ☕ IsFlowPathEnum.java (576B)
│   │               │   │   │   ├── ☕ IsFreezeStatusEnum.java (587B)
│   │               │   │   │   ├── ☕ IsNeedTradeBgEnum.java (619B)
│   │               │   │   │   ├── ☕ JoinTypeEnum.java (568B)
│   │               │   │   │   ├── ☕ LimitChangeSourceTypeEnum.java (569B)
│   │               │   │   │   ├── ☕ LimitdStatusEnum.java (575B)
│   │               │   │   │   ├── ☕ LimitFreezeEnum.java (2.3KB)
│   │               │   │   │   ├── ☕ LimitStatusEnum.java (508B)
│   │               │   │   │   ├── ☕ ManagerShowEnum.java (519B)
│   │               │   │   │   ├── ☕ MenuTypeEnum.java (1.2KB)
│   │               │   │   │   ├── ☕ MessageTemplateEnum.java (4.9KB)
│   │               │   │   │   ├── ☕ MessageType.java (377B)
│   │               │   │   │   ├── ☕ MutipleUkeyProcessNodeEnum.java (2.0KB)
│   │               │   │   │   ├── ☕ NewOpenGroupEnum.java (610B)
│   │               │   │   │   ├── ☕ OpenAccountApplyStatusEnum.java (685B)
│   │               │   │   │   ├── ☕ OpenApplyHoldTypeEnum.java (643B)
│   │               │   │   │   ├── ☕ OpenApplySourceTypeEnum.java (1.3KB)
│   │               │   │   │   ├── ☕ OpenApplyStatusEnum.java (1.5KB)
│   │               │   │   │   ├── ☕ OpenAuditTypeEnum.java (624B)
│   │               │   │   │   ├── ☕ OpenCrclRelStatusEnum.java (571B)
│   │               │   │   │   ├── ☕ OpenErrorNodeEnum.java (1.0KB)
│   │               │   │   │   ├── ☕ OpenFileTypeEnum.java (1.5KB)
│   │               │   │   │   ├── ☕ OpeningTagEnum.java (995B)
│   │               │   │   │   ├── ☕ OpenMainCrclValidEnum.java (977B)
│   │               │   │   │   ├── ☕ OpenMainSourceTypeEnum.java (1.2KB)
│   │               │   │   │   ├── ☕ OpenMsgDisplayTypeEnum.java (608B)
│   │               │   │   │   ├── ☕ OpenOperateSourceTypeNum.java (875B)
│   │               │   │   │   ├── ☕ OpenOperateTypeEnum.java (1.3KB)
│   │               │   │   │   ├── ☕ OpenPathEnum.java (993B)
│   │               │   │   │   ├── ☕ OpenPlatformTypeEnum.java (533B)
│   │               │   │   │   ├── ☕ OpenSendLogStatusEnum.java (1016B)
│   │               │   │   │   ├── ☕ OpenSendManagerStatusEnum.java (1.7KB)
│   │               │   │   │   ├── ☕ OpenSendNodeEnum.java (1.4KB)
│   │               │   │   │   ├── ☕ OpenSendRequestTypeEnum.java (941B)
│   │               │   │   │   ├── ☕ OpenSendSendStatusEnum.java (1.2KB)
│   │               │   │   │   ├── ☕ OpenSendTaskTypeEnum.java (4.2KB)
│   │               │   │   │   ├── ☕ OpenSeqenceEnum.java (531B)
│   │               │   │   │   ├── ☕ OpenTypeEnum.java (570B)
│   │               │   │   │   ├── ☕ OpenUnitAuthTypeEnum.java (542B)
│   │               │   │   │   ├── ☕ OpenWayEnum.java (551B)
│   │               │   │   │   ├── ☕ OperationTypeEnum.java (694B)
│   │               │   │   │   ├── ☕ OperTypeEnum.java (451B)
│   │               │   │   │   ├── ☕ PageStatusEnum.java (1.2KB)
│   │               │   │   │   ├── ☕ ParamCrclLimitStatusEnum.java (652B)
│   │               │   │   │   ├── ☕ ParamFlagEnum.java (458B)
│   │               │   │   │   ├── ☕ PlatformTypeEnum.java (578B)
│   │               │   │   │   ├── ☕ PolicyOrderEnum.java (960B)
│   │               │   │   │   ├── ☕ PositionCodeEnum.java (972B)
│   │               │   │   │   ├── ☕ PositionEnum.java (981B)
│   │               │   │   │   ├── ☕ PriceLevelEnum.java (409B)
│   │               │   │   │   ├── ☕ ProcessIsBlockedEnum.java (611B)
│   │               │   │   │   ├── ☕ ProcessStatusEnum.java (835B)
│   │               │   │   │   ├── ☕ PromptTypeEnum.java (501B)
│   │               │   │   │   ├── ☕ ReceiveConfBusinessTypeEnum.java (1.1KB)
│   │               │   │   │   ├── ☕ ReceiveConfConfigTypeEnum.java (1.5KB)
│   │               │   │   │   ├── ☕ ReceiveConfLogOperateEnum.java (2.2KB)
│   │               │   │   │   ├── ☕ RecoverStatusEnum.java (545B)
│   │               │   │   │   ├── ☕ RepayCompanyConfigStatusEnum.java (680B)
│   │               │   │   │   ├── ☕ RepayIsPayEnum.java (767B)
│   │               │   │   │   ├── ☕ ReserveStatusEnum.java (603B)
│   │               │   │   │   ├── ☕ ReserveTaskModulEnum.java (980B)
│   │               │   │   │   ├── ☕ ReserveTaskTypeEnum.java (596B)
│   │               │   │   │   ├── ☕ ReslutStatusEnum.java (635B)
│   │               │   │   │   ├── ☕ ResultEnum.java (528B)
│   │               │   │   │   ├── ☕ ResultStatusEnum.java (2.6KB)
│   │               │   │   │   ├── ☕ RetCodeEnum.java (496B)
│   │               │   │   │   ├── ☕ ScheduleRecoverStatusEnum.java (554B)
│   │               │   │   │   ├── ☕ SealtTypeEnum.java (558B)
│   │               │   │   │   ├── ☕ SendMsgStatusEnum.java (544B)
│   │               │   │   │   ├── ☕ SendOpenExceptionEnum.java (772B)
│   │               │   │   │   ├── ☕ SharehisShareTypeEnum.java (852B)
│   │               │   │   │   ├── ☕ ShowEnum.java (497B)
│   │               │   │   │   ├── ☕ SourceTypeCompanyNameEnum.java (1.5KB)
│   │               │   │   │   ├── ☕ StateEnum.java (574B)
│   │               │   │   │   ├── ☕ StatusEnum.java (576B)
│   │               │   │   │   ├── ☕ StepEnum.java (500B)
│   │               │   │   │   ├── ☕ SynStatusEnum.java (1.1KB)
│   │               │   │   │   ├── ☕ SysCfcaServiceEnum.java (1.7KB)
│   │               │   │   │   ├── ☕ SysLogEnum.java (3.6KB)
│   │               │   │   │   ├── ☕ TemplateAliasTypeEnum.java (825B)
│   │               │   │   │   ├── ☕ TradeBgCoChainFileTypeEnum.java (603B)
│   │               │   │   │   ├── ☕ TradeBgInvoiceStatusEnum.java (495B)
│   │               │   │   │   ├── ☕ TradeBgIsNeedEnum.java (507B)
│   │               │   │   │   ├── ☕ TradeBgSaveTypeEnum.java (644B)
│   │               │   │   │   ├── ☕ TradeBgStatusEnum.java (1.4KB)
│   │               │   │   │   ├── ☕ TradeBgSyncDataTypeEnum.java (527B)
│   │               │   │   │   ├── ☕ TradeListEnum.java (591B)
│   │               │   │   │   ├── ☕ TradeSwitchStatusEnum.java (597B)
│   │               │   │   │   ├── ☕ TradeTypeEnum.java (529B)
│   │               │   │   │   ├── ☕ UkeyLevelEnum.java (1.2KB)
│   │               │   │   │   ├── ☕ UnitAuthTypeEnum.java (582B)
│   │               │   │   │   ├── ☕ UnitDitTypeEnum.java (634B)
│   │               │   │   │   ├── ☕ UseTypeEnum.java (839B)
│   │               │   │   │   ├── ☕ WarningAlertTypeEnum.java (854B)
│   │               │   │   │   ├── ☕ WarningGradeEnum.java (464B)
│   │               │   │   │   ├── ☕ WarningStatusEnum.java (868B)
│   │               │   │   │   ├── ☕ WorkFlowEnum.java (541B)
│   │               │   │   │   ├── ☕ WorkTicketMsgStatusEnum.java (581B)
│   │               │   │   │   └── ☕ WorkTimeEnum.java (527B)
│   │               │   │   ├── 📁 excel/ (11 files)
│   │               │   │   │   ├── 📁 format/ (4 files)
│   │               │   │   │   │   ├── ☕ ExcelFormat.java (566B)
│   │               │   │   │   │   ├── ☕ ExcelFormatExport.java (22.5KB)
│   │               │   │   │   │   ├── ☕ ExcelFormatParam.java (2.1KB)
│   │               │   │   │   │   └── ☕ ExcelHeaderInfo.java (1.4KB)
│   │               │   │   │   ├── ☕ ExcelOutput.java (926B)
│   │               │   │   │   ├── ☕ ExcelParam.java (2.7KB)
│   │               │   │   │   ├── ☕ ExcelSheetParam.java (860B)
│   │               │   │   │   ├── ☕ ExcelUtils.java (868B)
│   │               │   │   │   ├── ☕ Font.java (3.5KB)
│   │               │   │   │   ├── ☕ OpenCrclExcelUtil.java (4.6KB)
│   │               │   │   │   └── ☕ Title.java (531B)
│   │               │   │   ├── 📁 exception/ (6 files)
│   │               │   │   │   ├── ☕ ChargeException.java (973B)
│   │               │   │   │   ├── ☕ CommonException.java (798B)
│   │               │   │   │   ├── ☕ MqConsumerException.java (930B)
│   │               │   │   │   ├── ☕ ParamException.java (736B)
│   │               │   │   │   ├── ☕ ResultException.java (2.2KB)
│   │               │   │   │   └── ☕ SendException.java (810B)
│   │               │   │   ├── 📁 fastjson/ (6 files)
│   │               │   │   │   ├── ☕ FastJsonConfigure.java (3.3KB)
│   │               │   │   │   ├── ☕ FeignDateForGet.java (1.1KB)
│   │               │   │   │   ├── ☕ LocalDateTimeCodec.java (9.6KB)
│   │               │   │   │   ├── ☕ LocalDateTimeFastJsonDeserializer.java (2.3KB)
│   │               │   │   │   ├── ☕ LocalDateTimeFastJsonSerializer.java (1.2KB)
│   │               │   │   │   └── ☕ LocalDateTimeGetConverter.java (969B)
│   │               │   │   ├── 📁 log/ (7 files)
│   │               │   │   │   ├── ☕ AccessLogAspect.java (37B)
│   │               │   │   │   ├── ☕ ControllerAspect.java (37B)
│   │               │   │   │   ├── ☕ FeignAspect.java (37B)
│   │               │   │   │   ├── ☕ FeignsInterceptor.java (1.9KB)
│   │               │   │   │   ├── ☕ MvcLogFilter.java (2.0KB)
│   │               │   │   │   ├── ☕ ServiceAspect.java (37B)
│   │               │   │   │   └── ☕ WebLogFilterConfig.java (36B)
│   │               │   │   ├── 📁 model/ (1 files)
│   │               │   │   │   └── ☕ BaseModel.java (1.7KB)
│   │               │   │   ├── 📁 mqprovide/ (9 files)
│   │               │   │   │   ├── ☕ NoticeNakatengWorkMqFactory.java (2.1KB)
│   │               │   │   │   ├── ☕ TransactionBcpMqFactory.java (2.3KB)
│   │               │   │   │   ├── ☕ TransactionConsLimitMqFactory.java (2.1KB)
│   │               │   │   │   ├── ☕ TransactionCoreMqFactory.java (1.9KB)
│   │               │   │   │   ├── ☕ TransactionITPlatFormFactory.java (1.9KB)
│   │               │   │   │   ├── ☕ TransactionListenerImpl.java (4.4KB)
│   │               │   │   │   ├── ☕ TransactionMqFactory.java (2.0KB)
│   │               │   │   │   ├── ☕ TransactionWorkFlowMqFactory.java (2.1KB)
│   │               │   │   │   └── ☕ TransactionWorkTicketMqFactory.java (2.1KB)
│   │               │   │   ├── 📁 support/ (15 files)
│   │               │   │   │   ├── 📁 choose/ (2 files)
│   │               │   │   │   │   ├── ☕ ContentChooseFactor.java (1.2KB)
│   │               │   │   │   │   └── ☕ TurnChooseFactor.java (1.5KB)
│   │               │   │   │   ├── 📁 config/ (1 files)
│   │               │   │   │   │   └── ☕ InitRunner.java (955B)
│   │               │   │   │   ├── 📁 enums/ (3 files)
│   │               │   │   │   │   ├── ☕ EnableStatusEnum.java (481B)
│   │               │   │   │   │   ├── ☕ ErrorCodeEnum.java (15.8KB)
│   │               │   │   │   │   └── ☕ SeparateStatusEnum.java (497B)
│   │               │   │   │   ├── 📁 feign/ (1 files)
│   │               │   │   │   │   └── ☕ ErrorCenterFeign.java (2.5KB)
│   │               │   │   │   ├── 📁 req/ (1 files)
│   │               │   │   │   │   └── ☕ BindReq.java (544B)
│   │               │   │   │   ├── 📁 resp/ (2 files)
│   │               │   │   │   │   ├── ☕ CodeContentResp.java (3.7KB)
│   │               │   │   │   │   └── ☕ CodeTurnResp.java (2.2KB)
│   │               │   │   │   └── 📁 tool/ (5 files)
│   │               │   │   │       ├── ☕ ErrorTool.java (2.9KB)
│   │               │   │   │       ├── ☕ FeignTool.java (12.4KB)
│   │               │   │   │       ├── ☕ ResponseInfoErrorCodeUtil.java (1.7KB)
│   │               │   │   │       ├── ☕ ResultData.java (1.8KB)
│   │               │   │   │       └── ☕ SpringTool.java (2.4KB)
│   │               │   │   └── 📁 util/ (42 files)
│   │               │   │       ├── ☕ AppPushUtil.java (858B)
│   │               │   │       ├── ☕ DateUtil.java (14.4KB)
│   │               │   │       ├── ☕ DistributedLocker.java (1.0KB)
│   │               │   │       ├── ☕ DownLoadExcelUtil.java (6.0KB)
│   │               │   │       ├── ☕ DynamicsSqlUtils.java (19.2KB)
│   │               │   │       ├── ☕ EnumMark.java (434B)
│   │               │   │       ├── ☕ ExcelReaderWriterUtil.java (5.9KB)
│   │               │   │       ├── ☕ ExeclUtil.java (1.3KB)
│   │               │   │       ├── ☕ FastJsonUtils.java (3.4KB)
│   │               │   │       ├── ☕ FeignRpcResult.java (956B)
│   │               │   │       ├── ☕ FeignRpcResultCheckUtil.java (1.4KB)
│   │               │   │       ├── ☕ FeignRpcResultUtil.java (1.7KB)
│   │               │   │       ├── ☕ FileManagerUtil.java (10.1KB)
│   │               │   │       ├── ☕ GetFileRule.java (38B)
│   │               │   │       ├── ☕ HttpOpenfire.java (1.2KB)
│   │               │   │       ├── ☕ HttpPostUtil.java (3.8KB)
│   │               │   │       ├── ☕ HttpPushUtil.java (3.0KB)
│   │               │   │       ├── ☕ IdWorker.java (7.1KB)
│   │               │   │       ├── ☕ JdbcSqlUtil.java (1.6KB)
│   │               │   │       ├── ☕ LocalDateTimeUtil.java (3.6KB)
│   │               │   │       ├── ☕ MapUtil.java (1.6KB)
│   │               │   │       ├── ☕ MonitorUtil.java (2.2KB)
│   │               │   │       ├── ☕ MultipartFileUtils.java (3.7KB)
│   │               │   │       ├── ☕ MyListUtils.java (1.0KB)
│   │               │   │       ├── ☕ NumberToCn.java (2.7KB)
│   │               │   │       ├── ☕ NumberUppercaseUtil.java (3.2KB)
│   │               │   │       ├── ☕ RedissonDistributedLocker.java (2.6KB)
│   │               │   │       ├── ☕ RedisTemplateUtil.java (5.2KB)
│   │               │   │       ├── ☕ ResponseInfoUtil.java (1.2KB)
│   │               │   │       ├── ☕ ResultData.java (2.4KB)
│   │               │   │       ├── ☕ ResultResponseUtil.java (1.5KB)
│   │               │   │       ├── ☕ ResultUtils.java (624B)
│   │               │   │       ├── ☕ RootUtil.java (516B)
│   │               │   │       ├── ☕ RuleExeUtil.java (2.6KB)
│   │               │   │       ├── ☕ SerialNoGeneraterUtils.java (1.8KB)
│   │               │   │       ├── ☕ SerialNoUtil.java (6.1KB)
│   │               │   │       ├── ☕ SpringBeanUtil.java (461B)
│   │               │   │       ├── ☕ SpringContextUtil.java (934B)
│   │               │   │       ├── ☕ SpringUtil.java (1.2KB)
│   │               │   │       ├── ☕ TraceIdUtil.java (1.7KB)
│   │               │   │       ├── ☕ UpdateUtil.java (2.9KB)
│   │               │   │       └── ☕ ValidatorUtils.java (3.5KB)
│   │               │   ├── 📁 domain/ (303 files)
│   │               │   │   ├── 📁 crcl/ (295 files)
│   │               │   │   │   ├── 📁 entity/ (42 files)
│   │               │   │   │   │   ├── ☕ CfcaSvsHis.java (2.6KB)
│   │               │   │   │   │   ├── ☕ CompanyData.java (2.6KB)
│   │               │   │   │   │   ├── ☕ CrclBatchCorrelation.java (2.4KB)
│   │               │   │   │   │   ├── ☕ CrclDistribFlag.java (2.5KB)
│   │               │   │   │   │   ├── ☕ CrclFixedFlowpath.java (2.9KB)
│   │               │   │   │   │   ├── ☕ CrclOpenbatch.java (5.1KB)
│   │               │   │   │   │   ├── ☕ CrclReserveTask.java (1.8KB)
│   │               │   │   │   │   ├── ☕ OpenAccountApply.java (2.7KB)
│   │               │   │   │   │   ├── ☕ OpenApply.java (13.5KB)
│   │               │   │   │   │   ├── ☕ OpenApplyStatus.java (4.2KB)
│   │               │   │   │   │   ├── ☕ OpenBatchSend.java (3.2KB)
│   │               │   │   │   │   ├── ☕ OpenChildNo.java (1.7KB)
│   │               │   │   │   │   ├── ☕ OpenCompanyLog.java (1.5KB)
│   │               │   │   │   │   ├── ☕ OpenConfig.java (4.0KB)
│   │               │   │   │   │   ├── ☕ OpenCrclCheck.java (2.7KB)
│   │               │   │   │   │   ├── ☕ OpenCrclRel.java (3.6KB)
│   │               │   │   │   │   ├── ☕ OpenError.java (3.3KB)
│   │               │   │   │   │   ├── ☕ OpenErrorLog.java (4.8KB)
│   │               │   │   │   │   ├── ☕ OpenFail.java (2.7KB)
│   │               │   │   │   │   ├── ☕ OpenFile.java (4.0KB)
│   │               │   │   │   │   ├── ☕ OpenIdempotent.java (3.6KB)
│   │               │   │   │   │   ├── ☕ OpenMain.java (10.5KB)
│   │               │   │   │   │   ├── ☕ OpenMainNo.java (2.0KB)
│   │               │   │   │   │   ├── ☕ OpenMqTransaction.java (1.1KB)
│   │               │   │   │   │   ├── ☕ OpenNo.java (1.6KB)
│   │               │   │   │   │   ├── ☕ OpenNoRecord.java (1.9KB)
│   │               │   │   │   │   ├── ☕ OpenOperateLog.java (3.3KB)
│   │               │   │   │   │   ├── ☕ OpenOperatePoint.java (2.0KB)
│   │               │   │   │   │   ├── ☕ OpenOperbatch.java (1.7KB)
│   │               │   │   │   │   ├── ☕ OpenSend.java (5.2KB)
│   │               │   │   │   │   ├── ☕ OpenSendHistory.java (4.6KB)
│   │               │   │   │   │   ├── ☕ OpenSendLog.java (3.8KB)
│   │               │   │   │   │   ├── ☕ OpenSeqence.java (999B)
│   │               │   │   │   │   ├── ☕ OpenWarning.java (3.6KB)
│   │               │   │   │   │   ├── ☕ OpenWarningLog.java (3.0KB)
│   │               │   │   │   │   ├── ☕ OpenWorkFlowNotice.java (2.8KB)
│   │               │   │   │   │   ├── ☕ ReceiveConf.java (3.2KB)
│   │               │   │   │   │   ├── ☕ ReceiveConfLog.java (2.9KB)
│   │               │   │   │   │   ├── ☕ ReceiveConfRecord.java (4.0KB)
│   │               │   │   │   │   ├── ☕ SysLog.java (2.5KB)
│   │               │   │   │   │   ├── ☕ UkeyRodePolicy.java (2.2KB)
│   │               │   │   │   │   └── ☕ WorkTicketMsgLog.java (3.2KB)
│   │               │   │   │   ├── 📁 liabilitypool/ (4 files)
│   │               │   │   │   │   ├── 📁 entity/ (1 files)
│   │               │   │   │   │   ├── 📁 mapper/ (1 files)
│   │               │   │   │   │   └── 📁 service/ (2 files)
│   │               │   │   │   ├── 📁 mapper/ (47 files)
│   │               │   │   │   │   ├── 📁 dataup/ (2 files)
│   │               │   │   │   │   ├── ☕ CfcaSvsHisMapper.java (1.6KB)
│   │               │   │   │   │   ├── ☕ CompanyDataMapper.java (1.1KB)
│   │               │   │   │   │   ├── ☕ CrclBatchCorrelationMapper.java (2.1KB)
│   │               │   │   │   │   ├── ☕ CrclDistribFlagMapper.java (2.0KB)
│   │               │   │   │   │   ├── ☕ CrclFixedFlowpathMapper.java (1.7KB)
│   │               │   │   │   │   ├── ☕ CrclFlagShipMapper.java (1.2KB)
│   │               │   │   │   │   ├── ☕ CrclManagerMapper.java (309B)
│   │               │   │   │   │   ├── ☕ CrclOpenbatchMapper.java (3.6KB)
│   │               │   │   │   │   ├── ☕ CrclReserveTaskMapper.java (818B)
│   │               │   │   │   │   ├── ☕ CrclSearchMapper.java (506B)
│   │               │   │   │   │   ├── ☕ CrclSessionMapper.java (1.1KB)
│   │               │   │   │   │   ├── ☕ OpenAccountApplyMapper.java (2.2KB)
│   │               │   │   │   │   ├── ☕ OpenApplyMapper.java (15.0KB)
│   │               │   │   │   │   ├── ☕ OpenApplyStatusMapper.java (1.0KB)
│   │               │   │   │   │   ├── ☕ OpenBatchSendMapper.java (771B)
│   │               │   │   │   │   ├── ☕ OpenChildNoMapper.java (1.1KB)
│   │               │   │   │   │   ├── ☕ OpenCompanyLogMapper.java (791B)
│   │               │   │   │   │   ├── ☕ OpenConfigMapper.java (876B)
│   │               │   │   │   │   ├── ☕ OpenCrclCheckMapper.java (951B)
│   │               │   │   │   │   ├── ☕ OpenCrclRelMapper.java (2.8KB)
│   │               │   │   │   │   ├── ☕ OpenErrorLogMapper.java (1.7KB)
│   │               │   │   │   │   ├── ☕ OpenErrorMapper.java (2.7KB)
│   │               │   │   │   │   ├── ☕ OpenFailMapper.java (1.0KB)
│   │               │   │   │   │   ├── ☕ OpenFileMapper.java (4.9KB)
│   │               │   │   │   │   ├── ☕ OpenIdempotentMapper.java (2.1KB)
│   │               │   │   │   │   ├── ☕ OpenMainMapper.java (21.5KB)
│   │               │   │   │   │   ├── ☕ OpenMainNoMapper.java (1.7KB)
│   │               │   │   │   │   ├── ☕ OpenMqTransactionMapper.java (874B)
│   │               │   │   │   │   ├── ☕ OpenNoRecordMapper.java (862B)
│   │               │   │   │   │   ├── ☕ OpenOperateLogMapper.java (725B)
│   │               │   │   │   │   ├── ☕ OpenOperatePointMapper.java (1.3KB)
│   │               │   │   │   │   ├── ☕ OpenOperbatchMapper.java (1.6KB)
│   │               │   │   │   │   ├── ☕ OpenSendHistoryMapper.java (905B)
│   │               │   │   │   │   ├── ☕ OpenSendLogMapper.java (1.6KB)
│   │               │   │   │   │   ├── ☕ OpenSendMapper.java (4.5KB)
│   │               │   │   │   │   ├── ☕ OpenSeqenceMapper.java (1.1KB)
│   │               │   │   │   │   ├── ☕ OpenWarningLogMapper.java (1.1KB)
│   │               │   │   │   │   ├── ☕ OpenWarningMapper.java (1.9KB)
│   │               │   │   │   │   ├── ☕ OpenWorkFlowNoticeMapper.java (1.1KB)
│   │               │   │   │   │   ├── ☕ ReceiveConfLogMapper.java (1.5KB)
│   │               │   │   │   │   ├── ☕ ReceiveConfMapper.java (1.7KB)
│   │               │   │   │   │   ├── ☕ ReceiveConfRecordMapper.java (2.3KB)
│   │               │   │   │   │   ├── ☕ SysLogMapper.java (1.1KB)
│   │               │   │   │   │   ├── ☕ UkeyRodePolicyMapper.java (1.1KB)
│   │               │   │   │   │   └── ☕ WorkTicketMsgLogMapper.java (981B)
│   │               │   │   │   ├── 📁 mongodb/ (4 files)
│   │               │   │   │   │   ├── 📁 mapper/ (2 files)
│   │               │   │   │   │   ├── ☕ OpenSendErrorLogDomain.java (1.4KB)
│   │               │   │   │   │   └── ☕ OpenSendLogDomain.java (819B)
│   │               │   │   │   ├── 📁 po/ (56 files)
│   │               │   │   │   │   ├── ☕ AliasNameByCoreIdPo.java (933B)
│   │               │   │   │   │   ├── ☕ AlreadyCrclNoUnitCheckNamePo.java (42B)
│   │               │   │   │   │   ├── ☕ AlreadyCrclNoUnitPo.java (4.0KB)
│   │               │   │   │   │   ├── ☕ AlreadyCrclUnitCheckNamePo.java (42B)
│   │               │   │   │   │   ├── ☕ AlreadyCrclUnitPo.java (42B)
│   │               │   │   │   │   ├── ☕ AlreadyOpenCrclPo.java (7.4KB)
│   │               │   │   │   │   ├── ☕ AppApplyMainPo.java (8.9KB)
│   │               │   │   │   │   ├── ☕ ApplyAndOpenMainPo.java (1.2KB)
│   │               │   │   │   │   ├── ☕ ApplyMainLimitPo.java (10.9KB)
│   │               │   │   │   │   ├── ☕ ApplyMainLimitSimplePo.java (729B)
│   │               │   │   │   │   ├── ☕ AvgDeadlineByHoldIdPo.java (730B)
│   │               │   │   │   │   ├── ☕ BatchAuditDetailPo.java (2.5KB)
│   │               │   │   │   │   ├── ☕ BatchAuditPo.java (3.9KB)
│   │               │   │   │   │   ├── ☕ CrclListPo.java (8.5KB)
│   │               │   │   │   │   ├── ☕ FileDetailPo.java (189B)
│   │               │   │   │   │   ├── ☕ HoldsByAbsLimitSoucePo.java (993B)
│   │               │   │   │   │   ├── ☕ LastEditDetailPo.java (890B)
│   │               │   │   │   │   ├── ☕ LimitIncentivePo.java (770B)
│   │               │   │   │   │   ├── ☕ MainFlowCompanyPo.java (4.4KB)
│   │               │   │   │   │   ├── ☕ MainLimitPo.java (3.1KB)
│   │               │   │   │   │   ├── ☕ ManagerGetReceOperListPo.java (2.4KB)
│   │               │   │   │   │   ├── ☕ MonthsOpenCrclPo.java (1.0KB)
│   │               │   │   │   │   ├── ☕ OpenAccountApplyPo.java (1.6KB)
│   │               │   │   │   │   ├── ☕ OpenApplyNoPo.java (1.1KB)
│   │               │   │   │   │   ├── ☕ OpenBatchCrclApplyPo.java (2.8KB)
│   │               │   │   │   │   ├── ☕ OpenBatchPo.java (4.2KB)
│   │               │   │   │   │   ├── ☕ OpenCrclAndLimitInfoPo.java (3.5KB)
│   │               │   │   │   │   ├── ☕ OpenCrclBusinessPo.java (3.9KB)
│   │               │   │   │   │   ├── ☕ OpenCrclRelByCrclNoPo.java (887B)
│   │               │   │   │   │   ├── ☕ OpenErrorLogPo.java (3.7KB)
│   │               │   │   │   │   ├── ☕ OpenFileNoPo.java (976B)
│   │               │   │   │   │   ├── ☕ OpenInfoPo.java (8.7KB)
│   │               │   │   │   │   ├── ☕ OpeningCrclPo.java (4.4KB)
│   │               │   │   │   │   ├── ☕ OpenLimitPo.java (4.3KB)
│   │               │   │   │   │   ├── ☕ OpenMainCrclLimitPo.java (1.6KB)
│   │               │   │   │   │   ├── ☕ OpenMainDistribTypePo.java (858B)
│   │               │   │   │   │   ├── ☕ OpenMainLimitPo.java (9.5KB)
│   │               │   │   │   │   ├── ☕ OpenMainPo.java (2.8KB)
│   │               │   │   │   │   ├── ☕ OpenMainSourceIdPo.java (897B)
│   │               │   │   │   │   ├── ☕ OpenNumLimitIdPo.java (820B)
│   │               │   │   │   │   ├── ☕ OpenSendErrorExportPo.java (3.2KB)
│   │               │   │   │   │   ├── ☕ OpenSendErrorPo.java (3.9KB)
│   │               │   │   │   │   ├── ☕ OpenSendInfoPo.java (548B)
│   │               │   │   │   │   ├── ☕ OpenSendPo.java (5.0KB)
│   │               │   │   │   │   ├── ☕ OpenSendWarningExportPo.java (2.9KB)
│   │               │   │   │   │   ├── ☕ OpenTradeBgPo.java (2.2KB)
│   │               │   │   │   │   ├── ☕ OpenWarningPo.java (4.0KB)
│   │               │   │   │   │   ├── ☕ PerformanceStatisticsTotalPo.java (1.4KB)
│   │               │   │   │   │   ├── ☕ QueryOpenedCrclPrefromancePo.java (1.2KB)
│   │               │   │   │   │   ├── ☕ QueryOpenedCrclTotalAmtPo.java (918B)
│   │               │   │   │   │   ├── ☕ ReceiveConfRecordPo.java (942B)
│   │               │   │   │   │   ├── ☕ RepaymentCheckingPo.java (767B)
│   │               │   │   │   │   ├── ☕ TradeBgAuditManagerPo.java (6.0KB)
│   │               │   │   │   │   ├── ☕ TradeBgManagerPo.java (7.2KB)
│   │               │   │   │   │   ├── ☕ UnitPositionPo.java (1.1KB)
│   │               │   │   │   │   └── ☕ WorkTicketMsgLogPo.java (1.5KB)
│   │               │   │   │   ├── 📁 service/ (90 files)
│   │               │   │   │   │   ├── 📁 impl/ (45 files)
│   │               │   │   │   │   ├── ☕ AppOpenCrclService.java (2.1KB)
│   │               │   │   │   │   ├── ☕ BatchSendService.java (213B)
│   │               │   │   │   │   ├── ☕ CfcaSvsHisService.java (1.1KB)
│   │               │   │   │   │   ├── ☕ CompanyDataService.java (749B)
│   │               │   │   │   │   ├── ☕ CrclBatchCorrelationService.java (1006B)
│   │               │   │   │   │   ├── ☕ CrclDistribFlagService.java (1009B)
│   │               │   │   │   │   ├── ☕ CrclFixedFlowpathService.java (1.3KB)
│   │               │   │   │   │   ├── ☕ CrclManagerService.java (195B)
│   │               │   │   │   │   ├── ☕ CrclOpenbatchService.java (2.7KB)
│   │               │   │   │   │   ├── ☕ CrclOpenBcpService.java (490B)
│   │               │   │   │   │   ├── ☕ CrclReserveTaskService.java (724B)
│   │               │   │   │   │   ├── ☕ CrclSearchService.java (1.2KB)
│   │               │   │   │   │   ├── ☕ CrclSessionService.java (993B)
│   │               │   │   │   │   ├── ☕ OpenAccountApplyService.java (1.0KB)
│   │               │   │   │   │   ├── ☕ OpenApplyService.java (11.1KB)
│   │               │   │   │   │   ├── ☕ OpenApplyStatusService.java (894B)
│   │               │   │   │   │   ├── ☕ OpenChildNoService.java (555B)
│   │               │   │   │   │   ├── ☕ OpenConfigService.java (2.0KB)
│   │               │   │   │   │   ├── ☕ OpenCrclCheckService.java (845B)
│   │               │   │   │   │   ├── ☕ OpenCrclRelService.java (2.7KB)
│   │               │   │   │   │   ├── ☕ OpenCrclService.java (8.4KB)
│   │               │   │   │   │   ├── ☕ OpenErrorLogService.java (1.7KB)
│   │               │   │   │   │   ├── ☕ OpenErrorService.java (2.0KB)
│   │               │   │   │   │   ├── ☕ OpenFailService.java (932B)
│   │               │   │   │   │   ├── ☕ OpenFileService.java (4.7KB)
│   │               │   │   │   │   ├── ☕ OpenIdempotentService.java (1.9KB)
│   │               │   │   │   │   ├── ☕ OpenJobService.java (552B)
│   │               │   │   │   │   ├── ☕ OpenMainNoService.java (743B)
│   │               │   │   │   │   ├── ☕ OpenMainService.java (15.3KB)
│   │               │   │   │   │   ├── ☕ OpenNoRecordService.java (289B)
│   │               │   │   │   │   ├── ☕ OpenOperateLogService.java (506B)
│   │               │   │   │   │   ├── ☕ OpenOperatePointService.java (1.2KB)
│   │               │   │   │   │   ├── ☕ OpenSendHistoryService.java (158B)
│   │               │   │   │   │   ├── ☕ OpenSendLogService.java (651B)
│   │               │   │   │   │   ├── ☕ OpenSendService.java (6.4KB)
│   │               │   │   │   │   ├── ☕ OpenSeqenceService.java (638B)
│   │               │   │   │   │   ├── ☕ OpenWarningLogService.java (685B)
│   │               │   │   │   │   ├── ☕ OpenWarningService.java (2.6KB)
│   │               │   │   │   │   ├── ☕ OpenWorkFlowNoticeService.java (658B)
│   │               │   │   │   │   ├── ☕ ReceiveConfLogService.java (1.4KB)
│   │               │   │   │   │   ├── ☕ ReceiveConfRecordService.java (2.1KB)
│   │               │   │   │   │   ├── ☕ ReceiveConfService.java (1.6KB)
│   │               │   │   │   │   ├── ☕ SysLogService.java (673B)
│   │               │   │   │   │   ├── ☕ UkeyRodePolicyService.java (620B)
│   │               │   │   │   │   └── ☕ WorkTicketMsgLogService.java (499B)
│   │               │   │   │   └── 📁 tradebg/ (52 files)
│   │               │   │   │       ├── 📁 dto/ (5 files)
│   │               │   │   │       ├── 📁 entity/ (13 files)
│   │               │   │   │       ├── 📁 mapper/ (9 files)
│   │               │   │   │       ├── 📁 po/ (13 files)
│   │               │   │   │       └── 📁 service/ (12 files)
│   │               │   │   └── 📁 ls/ (8 files)
│   │               │   │       ├── 📁 entity/ (1 files)
│   │               │   │       │   └── ☕ package-info.java (44B)
│   │               │   │       ├── 📁 mapper/ (1 files)
│   │               │   │       │   └── ☕ LsOpenMapper.java (2.6KB)
│   │               │   │       ├── 📁 po/ (4 files)
│   │               │   │       │   ├── ☕ GetLsOpenListByCustIdAndAcctIdPo.java (3.9KB)
│   │               │   │       │   ├── ☕ GetLsOpenMainByLsIdPo.java (6.0KB)
│   │               │   │       │   ├── ☕ LsLimitDistribTypePo.java (1.1KB)
│   │               │   │       │   └── ☕ package-info.java (40B)
│   │               │   │       └── 📁 service/ (2 files)
│   │               │   │           ├── 📁 impl/ (1 files)
│   │               │   │           └── ☕ LsOpenService.java (3.2KB)
│   │               │   └── 📁 interfaces/ (282 files)
│   │               │       └── 📁 facade/ (282 files)
│   │               │           ├── 📁 config/ (5 files)
│   │               │           │   ├── 📁 req/ (2 files)
│   │               │           │   ├── 📁 resp/ (1 files)
│   │               │           │   ├── ☕ OpenConfigController.java (2.7KB)
│   │               │           │   └── ☕ OpenConfigManagerController.java (3.9KB)
│   │               │           ├── 📁 crcl/ (266 files)
│   │               │           │   ├── 📁 freeze/ (18 files)
│   │               │           │   ├── 📁 liabilitypool/ (8 files)
│   │               │           │   ├── 📁 req/ (115 files)
│   │               │           │   ├── 📁 resp/ (61 files)
│   │               │           │   ├── 📁 statistics/ (1 files)
│   │               │           │   ├── 📁 tradebg/ (44 files)
│   │               │           │   ├── ☕ AppController.java (22.5KB)
│   │               │           │   ├── ☕ AuditCrclController.java (31.8KB)
│   │               │           │   ├── ☕ BaseOpenController.java (21.5KB)
│   │               │           │   ├── ☕ BatchTempDataController.java (2.2KB)
│   │               │           │   ├── ☕ CompanyDataController.java (1.3KB)
│   │               │           │   ├── ☕ CompanyOpenCrclController.java (4.0KB)
│   │               │           │   ├── ☕ CrclController.java (73.4KB)
│   │               │           │   ├── ☕ CrclFlagShipController.java (3.8KB)
│   │               │           │   ├── ☕ CrclManagerController.java (7.2KB)
│   │               │           │   ├── ☕ CrclSessionController.java (3.4KB)
│   │               │           │   ├── ☕ CreatePdfController.java (1.7KB)
│   │               │           │   ├── ☕ CsCrclController.java (2.4KB)
│   │               │           │   ├── ☕ HandleCrclController.java (55.6KB)
│   │               │           │   ├── ☕ OpenMainController.java (8.7KB)
│   │               │           │   ├── ☕ OpenSendController.java (9.2KB)
│   │               │           │   ├── ☕ ReceiveConfigController.java (12.3KB)
│   │               │           │   ├── ☕ TestContorller.java (4.5KB)
│   │               │           │   ├── ☕ ValidateController.java (9.4KB)
│   │               │           │   └── ☕ WorkTicketController.java (1.7KB)
│   │               │           ├── 📁 gateway/ (4 files)
│   │               │           │   └── 📁 vo/ (4 files)
│   │               │           ├── 📁 ls/ (6 files)
│   │               │           │   ├── 📁 req/ (4 files)
│   │               │           │   ├── 📁 resp/ (1 files)
│   │               │           │   └── ☕ LsOpenController.java (13.1KB)
│   │               │           └── ☕ PrometheusController.java (45B)
│   │               └── ☕ StartApplication.java (754B)
│   └── 📁 resources/ (110 files)
│       ├── 📁 mapper/ (108 files)
│       │   ├── 📁 crcl/ (53 files)
│       │   │   ├── 📁 liabilitypool/ (1 files)
│       │   │   │   └── 📋 LiabilityPoolIdempotentMapper.xml (5.0KB)
│       │   │   ├── 📁 trade/ (9 files)
│       │   │   │   ├── 📋 BillTallySendLogMapper.xml (7.5KB)
│       │   │   │   ├── 📋 OpenTradeBgMapper.xml (7.8KB)
│       │   │   │   ├── 📋 TradeBgAuditMapper.xml (6.8KB)
│       │   │   │   ├── 📋 TradeBgCheckResultMapper.xml (5.5KB)
│       │   │   │   ├── 📋 TradeBgContractLogMapper.xml (8.4KB)
│       │   │   │   ├── 📋 TradeBgContractMapper.xml (21.5KB)
│       │   │   │   ├── 📋 TradeBgInvoiceLogMapper.xml (8.6KB)
│       │   │   │   ├── 📋 TradeBgInvoiceMapper.xml (23.4KB)
│       │   │   │   └── 📋 TradeBgSwitchInfoMapper.xml (19.9KB)
│       │   │   ├── 📋 CfcaSvsHisMapper.xml (7.7KB)
│       │   │   ├── 📋 CompanyDataMapper.xml (4.4KB)
│       │   │   ├── 📋 CrclBatchCorrelationMapper.xml (6.7KB)
│       │   │   ├── 📋 CrclDistribFlagMapper.xml (6.3KB)
│       │   │   ├── 📋 CrclFixedFlowpathMapper.xml (8.1KB)
│       │   │   ├── 📋 CrclFlagShipMapper.xml (3.3KB)
│       │   │   ├── 📋 CrclManagerMapper.xml (716B)
│       │   │   ├── 📋 CrclOpenbatchMapper.xml (17.1KB)
│       │   │   ├── 📋 CrclReserveTaskMapper.xml (2.0KB)
│       │   │   ├── 📋 CrclSearchMapper.xml (1.1KB)
│       │   │   ├── 📋 OpenAccountApplyMapper.xml (8.2KB)
│       │   │   ├── 📋 OpenApplyMapper.xml (204.9KB)
│       │   │   ├── 📋 OpenApplyStatusMapper.xml (8.5KB)
│       │   │   ├── 📋 OpenBatchSendMapper.xml (9.1KB)
│       │   │   ├── 📋 OpenChildNoMapper.xml (2.4KB)
│       │   │   ├── 📋 OpenConfigMapper.xml (8.1KB)
│       │   │   ├── 📋 OpenCrclCheckMapper.xml (2.8KB)
│       │   │   ├── 📋 OpenCrclRelMapper.xml (10.3KB)
│       │   │   ├── 📋 OpenErrorLogMapper.xml (11.5KB)
│       │   │   ├── 📋 OpenErrorMapper.xml (16.5KB)
│       │   │   ├── 📋 OpenFailMapper.xml (6.2KB)
│       │   │   ├── 📋 OpenFileMapper.xml (16.2KB)
│       │   │   ├── 📋 OpenIdempotentMapper.xml (8.7KB)
│       │   │   ├── 📋 OpenMainMapper.xml (133.3KB)
│       │   │   ├── 📋 OpenMainNoMapper.xml (3.0KB)
│       │   │   ├── 📋 OpenMqTransactionMapper.xml (2.8KB)
│       │   │   ├── 📋 OpenNoRecordMapper.xml (3.1KB)
│       │   │   ├── 📋 OpenOperateLogMapper.xml (4.8KB)
│       │   │   ├── 📋 OpenOperatePointMapper.xml (4.7KB)
│       │   │   ├── 📋 OpenOperbatchMapper.xml (4.4KB)
│       │   │   ├── 📋 OpenSendHistoryMapper.xml (10.1KB)
│       │   │   ├── 📋 OpenSendLogMapper.xml (7.2KB)
│       │   │   ├── 📋 OpenSendMapper.xml (20.5KB)
│       │   │   ├── 📋 OpenSeqenceMapper.xml (2.9KB)
│       │   │   ├── 📋 OpenWarningLogMapper.xml (6.2KB)
│       │   │   ├── 📋 OpenWarningMapper.xml (10.3KB)
│       │   │   ├── 📋 OpenWorkFlowNoticeMapper.xml (8.2KB)
│       │   │   ├── 📋 ReceiveConfLogMapper.xml (8.3KB)
│       │   │   ├── 📋 ReceiveConfMapper.xml (7.0KB)
│       │   │   ├── 📋 ReceiveConfRecordMapper.xml (11.1KB)
│       │   │   ├── 📋 SysLogMapper.xml (4.8KB)
│       │   │   ├── 📋 UkeyRodePolicyMapper.xml (5.2KB)
│       │   │   └── 📋 WorkTicketMsgLogMapper.xml (3.6KB)
│       │   ├── 📁 credit/ (10 files)
│       │   │   ├── 📋 CreditBillDetailsMapper.xml (6.9KB)
│       │   │   ├── 📋 CreditBillMainMapper.xml (8.2KB)
│       │   │   ├── 📋 CreditFileMapper.xml (7.2KB)
│       │   │   ├── 📋 CreditIdempotentMapper.xml (4.2KB)
│       │   │   ├── 📋 CreditInfoHistoryMapper.xml (19.5KB)
│       │   │   ├── 📋 CreditInfoMapper.xml (11.2KB)
│       │   │   ├── 📋 CreditMainHistoryMapper.xml (29.6KB)
│       │   │   ├── 📋 CreditMainMapper.xml (26.1KB)
│       │   │   ├── 📋 CreditSourceHistoryMapper.xml (13.2KB)
│       │   │   └── 📋 CreditSourceMapper.xml (9.2KB)
│       │   ├── 📁 dataup/ (1 files)
│       │   │   └── 📋 DataUpWorkFlowMapper.xml (597B)
│       │   ├── 📁 limit/ (42 files)
│       │   │   ├── 📁 tradebgplan/ (5 files)
│       │   │   │   ├── 📋 TradeBgBaseFieldDetailMapper.xml (5.2KB)
│       │   │   │   ├── 📋 TradeBgBaseFieldMapper.xml (11.2KB)
│       │   │   │   ├── 📋 TradeBgBaseListMapper.xml (5.2KB)
│       │   │   │   ├── 📋 TradeBgPlanConfigMapper.xml (5.5KB)
│       │   │   │   └── 📋 TradeBgPlanMapper.xml (13.3KB)
│       │   │   ├── 📋 BcpLimitSynMapper.xml (9.2KB)
│       │   │   ├── 📋 CodeRuleMapper.xml (1.8KB)
│       │   │   ├── 📋 CrclCompanyMapper.xml (6.6KB)
│       │   │   ├── 📋 CrclConstituteMainMapper.xml (17.9KB)
│       │   │   ├── 📋 CrclConstituteMapper.xml (12.6KB)
│       │   │   ├── 📋 crclCredisExpireMapper.xml (10.2KB)
│       │   │   ├── 📋 CrclLimitCheckMapper.xml (2.6KB)
│       │   │   ├── 📋 CrclLimitFileMapper.xml (9.6KB)
│       │   │   ├── 📋 crclLimitInfoMapper.xml (11.5KB)
│       │   │   ├── 📋 CrclLimitInvestorAuthMapper.xml (9.4KB)
│       │   │   ├── 📋 crclLimitMainInfoMapper.xml (11.3KB)
│       │   │   ├── 📋 CrclLimitMainMapper.xml (58.3KB)
│       │   │   ├── 📋 CrclLimitMapper.xml (88.4KB)
│       │   │   ├── 📋 crclLimitReceivehisInfoMapper.xml (11.6KB)
│       │   │   ├── 📋 CrclLimitReceivehisMapper.xml (18.3KB)
│       │   │   ├── 📋 CrclLimitRecoverMapper.xml (6.4KB)
│       │   │   ├── 📋 CrclLimitScheduleMapper.xml (8.7KB)
│       │   │   ├── 📋 crclLimitSharehisInfoMapper.xml (17.9KB)
│       │   │   ├── 📋 CrclLimitSharehisMapper.xml (35.2KB)
│       │   │   ├── 📋 CrclPerformancePlanInfoMapper.xml (23.0KB)
│       │   │   ├── 📋 CrclPerformancePlanMapper.xml (6.8KB)
│       │   │   ├── 📋 CrclZyApprovalOrderMapper.xml (8.4KB)
│       │   │   ├── 📋 CreaditArchiveAllotDetailMapper.xml (8.1KB)
│       │   │   ├── 📋 CreaditArchiveMainMapper.xml (10.1KB)
│       │   │   ├── 📋 CreaditArchiveRecordMapper.xml (9.0KB)
│       │   │   ├── 📋 LimitChangeLogMapper.xml (16.2KB)
│       │   │   ├── 📋 LimitConstituteAllotHisMapper.xml (15.9KB)
│       │   │   ├── 📋 LimitConstituteAllotMainMapper.xml (10.5KB)
│       │   │   ├── 📋 LsLimitCleaningAccountHisMapper.xml (6.2KB)
│       │   │   ├── 📋 LsLimitCleaningAccountMapper.xml (3.1KB)
│       │   │   ├── 📋 LsLimitMapper.xml (13.5KB)
│       │   │   ├── 📋 OpenCompanyLogMapper.xml (2.0KB)
│       │   │   ├── 📋 OpenLimitBillDetailMapper.xml (11.3KB)
│       │   │   ├── 📋 OpenLimitRelMapper.xml (27.4KB)
│       │   │   ├── 📋 OpenServiceWarningMapper.xml (3.5KB)
│       │   │   ├── 📋 OpenUnitLimitMapper.xml (12.0KB)
│       │   │   └── 📋 ParamCrclLimitMapper.xml (7.9KB)
│       │   ├── 📁 ls/ (1 files)
│       │   │   └── 📋 LsOpenMapper.xml (9.6KB)
│       │   └── 📁 session/ (1 files)
│       │       └── 📋 CrclSessionMapper.xml (7.2KB)
│       ├── 📁 req/ (1 files)
│       │   └── 📄 Batchreq.json (2.8KB)
│       └── 📁 template/ (1 files)
│           └── 📁 openCrclBatchMessage/ (1 files)
│               └── 📄 openCrclBatchMessage.xls (17.5KB)
└── 📁 test/ (22 files)
    └── 📁 java/ (22 files)
        └── 📁 com/ (22 files)
            └── 📁 yljr/ (22 files)
                ├── 📁 crcl/ (13 files)
                │   ├── 📁 crcl/ (4 files)
                │   │   ├── ☕ AuditCrclControllerTest.java (4.9KB)
                │   │   ├── ☕ CrclControllerTest.java (4.0KB)
                │   │   ├── ☕ crclTest.java (4.0KB)
                │   │   └── ☕ HandleCrclControllerTest.java (6.2KB)
                │   ├── 📁 cyz/ (1 files)
                │   │   └── ☕ BaseTest.java (19.2KB)
                │   ├── 📁 del/ (2 files)
                │   │   └── 📁 service/ (2 files)
                │   │       ├── 📁 apply/ (1 files)
                │   │       │   └── 📁 impl/ (1 files)
                │   │       │       └── ☕ CrclPayApplyFeignServiceImplTest.java (1.9KB)
                │   │       └── 📁 crcl/ (1 files)
                │   │           └── ☕ CrclQueryServiceTest.java (2.4KB)
                │   └── 📁 open/ (6 files)
                │       ├── 📁 application/ (3 files)
                │       │   └── 📁 crcl/ (3 files)
                │       │       └── 📁 service/ (3 files)
                │       │           ├── ☕ CrclApplicationTest.java (687B)
                │       │           ├── ☕ HandleCrclApplicationTest.java (2.3KB)
                │       │           └── ☕ OpenSearchApplicationTest.java (1.0KB)
                │       ├── ☕ BaseTest.java (6.9KB)
                │       ├── ☕ OpenTest.java (12.4KB)
                │       └── ☕ ReceiveConfigTest.java (8.0KB)
                └── 📁 limit/ (9 files)
                    ├── ☕ BatchTest.java (6.2KB)
                    ├── ☕ ChargeFeignApiTest.java (680B)
                    ├── ☕ CrclLimitInterfaceTest.java (14.0KB)
                    ├── ☕ CrclLimitMainInterfaceTest.java (13.0KB)
                    ├── ☕ CrclLimitPerformanceInterfaceTest.java (6.7KB)
                    ├── ☕ HandlerTest.java (4.1KB)
                    ├── ☕ OpenLimitModifyTest.java (2.9KB)
                    ├── ☕ OpenLimitRelInterfaceTest.java (2.8KB)
                    └── ☕ ParamCrclLimitInterfaceTest.java (4.7KB)
📋 pom.xml (8.3KB)
📜 shutdown.sh (44B)
📜 startup.sh (379B)

## DDD架构分层要求
当前后端采用DDD（领域驱动设计）架构，请严格遵循以下分层结构：

1. **Controller层** (interfaces/): 对外REST接口，负责接收HTTP请求和参数校验
2. **Application Service层** (application/service): 应用服务，协调业务流程，不包含业务逻辑
3. **Domain Service层** (domain/service): 领域服务，核心业务逻辑的实现
4. **Domain Mapper层** (domain/mapper): 数据访问层接口，定义数据库操作方法
5. **Feign Client层** (application/feign): 外部服务调用接口，处理微服务间通信
6. **DTO层** (interfaces/dto): 数据传输对象，用于接口入参和出参
7. **Entity层** (domain/entity): 领域实体，表示业务核心概念
8. **XML映射** (resources/mapper): MyBatis SQL映射，具体的SQL实现



## 决策原则
请根据DDD架构原则和业务需求，决定如何实现新的API接口功能：

### Controller层决策原则
1. 如果存在功能相关的Controller且职责单一，优先选择 `enhance_existing`
2. 如果现有Controller职责过重或业务领域不同，选择 `create_new`
3. 考虑REST API的资源分组和版本管理
4. 如果Controller层不存在，则选择 `none`

### Application Service层决策原则
1. 如果存在相关的应用服务且流程相似，优先选择 `enhance_existing`
2. 如果业务流程复杂或涉及不同的业务上下文，选择 `create_new`
3. 应用服务应当薄薄一层，主要负责编排和协调
4. 如果应用服务层不存在，则选择 `none`

### Domain Service层决策原则
1. 如果存在相关的领域服务且业务逻辑相关，优先选择 `enhance_existing`
2. 如果涉及新的业务领域或核心逻辑差异很大，选择 `create_new`
3. 领域服务应当承载核心业务逻辑
4. 如果领域服务层不存在，则选择 `none`

### Domain Mapper层决策原则
1. 如果操作相同的数据表或实体，优先选择 `enhance_existing`
2. 如果涉及新的数据表或查询逻辑复杂，选择 `create_new`
3. 每个Mapper通常对应一个聚合根或核心实体
4. 如果Mapper层不存在，则选择 `none`

### Feign Client层决策原则
1. 如果调用相同的外部服务，优先选择 `enhance_existing`
2. 如果调用新的外部服务或不同的服务版本，选择 `create_new`
3. 按照外部服务进行分组
4. 如果Feign Client层不存在，则选择 `none`

## 输出格式
请严格按照以下JSON格式返回决策结果：

```json
{
  "controller": {
    "action": "enhance_existing 或 create_new",
    "target_class": "目标类名（如果是enhance_existing）",
    "package_path": "建议的包路径",
    "reason": "详细的决策原因，说明为什么选择这种方式"
  },
  "application_service": {
    "action": "enhance_existing 或 create_new",
    "target_class": "目标类名（如果是enhance_existing）",
    "package_path": "建议的包路径",
    "reason": "详细的决策原因，说明为什么选择这种方式"
  },
  "domain_service": {
    "action": "enhance_existing 或 create_new",
    "target_class": "目标类名（如果是enhance_existing）",
    "package_path": "建议的包路径",
    "reason": "详细的决策原因，说明为什么选择这种方式"
  },
  "mapper": {
    "action": "enhance_existing 或 create_new",
    "target_class": "目标类名（如果是enhance_existing）",
    "package_path": "建议的包路径",
    "reason": "详细的决策原因，说明为什么选择这种方式"
  },
  "feign_client": {
    "action": "enhance_existing 或 create_new",
    "target_class": "目标类名（如果是enhance_existing）",
    "package_path": "建议的包路径",
    "reason": "详细的决策原因，说明为什么选择这种方式"
  },
  "dto": {
    "action": "create_new",
    "request_dto": "请求DTO类名",
    "response_dto": "响应DTO类名",
    "package_path": "建议的包路径",
    "reason": "DTO通常需要为每个接口单独创建"
  },
  "entity": {
    "action": "enhance_existing 或 create_new",
    "target_class": "目标类名（如果是enhance_existing）",
    "package_path": "建议的包路径",
    "reason": "详细的决策原因，说明为什么选择这种方式"
  }
}
```

请仔细分析项目结构，遵循DDD架构原则，给出合理的决策建议。
2025-07-24 10:51:46 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 10:51:46 - src.corder_integration.code_generator.llm_decision_maker - INFO - 🤖 LLM响应: 根据项目结构和业务需求分析，我将为新的API接口`lsLimit/listUnitLimitByCompanyId`提供DDD架构决策建议。

## 架构决策分析

### 1. 业务领域分析
- 该接口属于"额度管理"领域，具体是"链数额度(lsLimit)"子域
- 需要查询组织单元额度信息，涉及本地额度表和用户服务
- 需要分页查询和聚合计算

### 2. 现有代码分析
- 在`com.yljr.crcl.limit`包下已有完整的额度管理模块
- 存在`LsLimitController`和相关的应用服务、领域服务
- 已有用户服务调用的Feign客户端模式

## DDD架构决策

```json
{
  "controller": {
    "action": "enhance_existing",
    "target_class": "LsLimitController",
    "package_path": "com.yljr.crcl.limit.interfaces",
    "reason": "项目已存在LsLimitController类，位于limit模块的interfaces层，专门处理链数额度相关的REST接口。该接口路径/crcl-open-api/lsLimit/listUnitLimitByCompanyId明确属于lsLimit领域，增强现有Controller符合单一职责原则和开闭原则，避免创建过多细粒度Controller。"
  },
  "application_service": {
    "action": "enhance_existing",
    "target_class": "LsLimitApplication",
    "package_path": "com.yljr.crcl.limit.application.service",
    "reason": "项目已存在LsLimitApplication应用服务类，负责链数额度的业务编排。该接口需要查询额度信息并调用用户服务获取组织单元详情，属于典型的应用层协调职责，增强现有服务可避免重复代码并保持业务一致性。"
  },
  "domain_service": {
    "action": "enhance_existing",
    "target_class": "LsLimitService",
    "package_path": "com.yljr.crcl.limit.domain.service",
    "reason": "项目已存在LsLimitService领域服务，负责链数额度的核心业务逻辑。该接口需要计算总额度、已用额度、可用额度等聚合数据，这些属于领域层的计算逻辑，应由领域服务承担。增强现有服务可保持领域模型的完整性。"
  },
  "mapper": {
    "action": "enhance_existing",
    "target_class": "LsLimitMapper",
    "package_path": "com.yljr.crcl.limit.domain.mapper",
    "reason": "项目已存在LsLimitMapper接口，专门处理链数额度的数据访问。该接口需要查询额度表数据，增强现有Mapper可避免重复定义数据访问接口，保持数据访问层的一致性。"
  },
  "feign_client": {
    "action": "create_new",
    "target_class": "UserCenterFeignClient",
    "package_path": "com.yljr.crcl.limit.application.feign.user",
    "reason": "虽然项目中有多个Feign客户端，但调用zqyl-user-center-service服务的/queryCompanyUnitList接口是新的外部服务调用。按照DDD的防腐层原则，应为新的外部服务创建专门的Feign客户端，避免与现有客户端耦合，同时便于维护和测试。"
  },
  "dto": {
    "action": "create_new",
    "request_dto": "ListUnitLimitByCompanyIdReq",
    "response_dto": "ListUnitLimitByCompanyIdResp",
    "package_path": "com.yljr.crcl.limit.interfaces.req/resp",
    "reason": "根据接口规范，需要创建专门的请求和响应DTO。请求DTO包含分页参数和查询条件，响应DTO包含额度汇总信息和详情列表。这些DTO应放在interfaces层的req/resp包中，符合DDD的边界清晰原则。"
  },
  "entity": {
    "action": "enhance_existing",
    "target_class": "LsLimit",
    "package_path": "com.yljr.crcl.limit.domain.entity",
    "reason": "链数额度相关的实体类已存在，该接口主要查询现有实体数据，无需创建新实体。增强现有实体类可保持领域模型的完整性，避免实体碎片化。"
  }
}
```

## 实施建议

1. **Feign客户端创建**：在`com.yljr.crcl.limit.application.feign.user`包下创建`UserCenterFeignClient`，专门处理用户中心服务调用。

2. **DTO设计**：
   - 请求DTO：`ListUnitLimitByCompanyIdReq` 包含分页参数和查询条件
   - 响应DTO：`ListUnitLimitByCompanyIdResp` 包含总额度、已用额度、可用额度和详情列表

3. **代码组织**：保持现有包结构，将新功能集成到现有类中，避免破坏现有架构。

4. **分页实现**：使用MyBatis的PageHelper插件，在Mapper层实现分页查询。

5. **聚合计算**：在领域服务层实现总额度的聚合计算逻辑。
2025-07-24 10:51:46 - src.corder_integration.code_generator.llm_decision_maker - INFO - 🔍 提取到JSON: {
  "controller": {
    "action": "enhance_existing",
    "target_class": "LsLimitController",
    "package_path": "com.yljr.crcl.limit.interfaces",
    "reason": "项目已存在LsLimitController类，位于limit模块的in...
2025-07-24 10:51:46 - src.corder_integration.code_generator.llm_decision_maker - INFO - ✅ LLM决策结果验证通过，包含字段: ['controller', 'application_service', 'domain_service', 'mapper', 'feign_client', 'dto', 'entity']
2025-07-24 10:51:46 - src.corder_integration.code_generator.llm_decision_maker - INFO - 🔧 添加service字段以保持向后兼容
2025-07-24 10:51:46 - src.corder_integration.code_generator.llm_decision_maker - INFO - ✅ LLM决策完成
2025-07-24 10:51:46 - src.corder_integration.code_generator.strategy1_manager - INFO - 📋 决策结果:
2025-07-24 10:51:46 - src.corder_integration.code_generator.strategy1_manager - INFO -   controller:
2025-07-24 10:51:46 - src.corder_integration.code_generator.strategy1_manager - INFO -     - 操作: enhance_existing
2025-07-24 10:51:46 - src.corder_integration.code_generator.strategy1_manager - INFO -     - 目标类: LsLimitController
2025-07-24 10:51:46 - src.corder_integration.code_generator.strategy1_manager - INFO -     - 包路径: com.yljr.crcl.limit.interfaces
2025-07-24 10:51:46 - src.corder_integration.code_generator.strategy1_manager - INFO -     - 原因: 项目已存在LsLimitController类，位于limit模块的interfaces层，专门处理链数额度相关的REST接口。该接口路径/crcl-open-api/lsLimit/listUnitLimitByCompanyId明确属于lsLimit领域，增强现有Controller符合单一职责原则和开闭原则，避免创建过多细粒度Controller。
2025-07-24 10:51:46 - src.corder_integration.code_generator.strategy1_manager - INFO -   application_service:
2025-07-24 10:51:46 - src.corder_integration.code_generator.strategy1_manager - INFO -     - 操作: enhance_existing
2025-07-24 10:51:46 - src.corder_integration.code_generator.strategy1_manager - INFO -     - 目标类: LsLimitApplication
2025-07-24 10:51:46 - src.corder_integration.code_generator.strategy1_manager - INFO -     - 包路径: com.yljr.crcl.limit.application.service
2025-07-24 10:51:46 - src.corder_integration.code_generator.strategy1_manager - INFO -     - 原因: 项目已存在LsLimitApplication应用服务类，负责链数额度的业务编排。该接口需要查询额度信息并调用用户服务获取组织单元详情，属于典型的应用层协调职责，增强现有服务可避免重复代码并保持业务一致性。
2025-07-24 10:51:46 - src.corder_integration.code_generator.strategy1_manager - INFO -   domain_service:
2025-07-24 10:51:46 - src.corder_integration.code_generator.strategy1_manager - INFO -     - 操作: enhance_existing
2025-07-24 10:51:46 - src.corder_integration.code_generator.strategy1_manager - INFO -     - 目标类: LsLimitService
2025-07-24 10:51:46 - src.corder_integration.code_generator.strategy1_manager - INFO -     - 包路径: com.yljr.crcl.limit.domain.service
2025-07-24 10:51:46 - src.corder_integration.code_generator.strategy1_manager - INFO -     - 原因: 项目已存在LsLimitService领域服务，负责链数额度的核心业务逻辑。该接口需要计算总额度、已用额度、可用额度等聚合数据，这些属于领域层的计算逻辑，应由领域服务承担。增强现有服务可保持领域模型的完整性。
2025-07-24 10:51:46 - src.corder_integration.code_generator.strategy1_manager - INFO -   mapper:
2025-07-24 10:51:46 - src.corder_integration.code_generator.strategy1_manager - INFO -     - 操作: enhance_existing
2025-07-24 10:51:46 - src.corder_integration.code_generator.strategy1_manager - INFO -     - 目标类: LsLimitMapper
2025-07-24 10:51:46 - src.corder_integration.code_generator.strategy1_manager - INFO -     - 包路径: com.yljr.crcl.limit.domain.mapper
2025-07-24 10:51:46 - src.corder_integration.code_generator.strategy1_manager - INFO -     - 原因: 项目已存在LsLimitMapper接口，专门处理链数额度的数据访问。该接口需要查询额度表数据，增强现有Mapper可避免重复定义数据访问接口，保持数据访问层的一致性。
2025-07-24 10:51:46 - src.corder_integration.code_generator.strategy1_manager - INFO -   feign_client:
2025-07-24 10:51:46 - src.corder_integration.code_generator.strategy1_manager - INFO -     - 操作: create_new
2025-07-24 10:51:46 - src.corder_integration.code_generator.strategy1_manager - INFO -     - 目标类: UserCenterFeignClient
2025-07-24 10:51:46 - src.corder_integration.code_generator.strategy1_manager - INFO -     - 包路径: com.yljr.crcl.limit.application.feign.user
2025-07-24 10:51:46 - src.corder_integration.code_generator.strategy1_manager - INFO -     - 原因: 虽然项目中有多个Feign客户端，但调用zqyl-user-center-service服务的/queryCompanyUnitList接口是新的外部服务调用。按照DDD的防腐层原则，应为新的外部服务创建专门的Feign客户端，避免与现有客户端耦合，同时便于维护和测试。
2025-07-24 10:51:46 - src.corder_integration.code_generator.strategy1_manager - INFO -   dto:
2025-07-24 10:51:46 - src.corder_integration.code_generator.strategy1_manager - INFO -     - 操作: create_new
2025-07-24 10:51:46 - src.corder_integration.code_generator.strategy1_manager - INFO -     - 目标类: unknown
2025-07-24 10:51:46 - src.corder_integration.code_generator.strategy1_manager - INFO -     - 包路径: com.yljr.crcl.limit.interfaces.req/resp
2025-07-24 10:51:46 - src.corder_integration.code_generator.strategy1_manager - INFO -     - 原因: 根据接口规范，需要创建专门的请求和响应DTO。请求DTO包含分页参数和查询条件，响应DTO包含额度汇总信息和详情列表。这些DTO应放在interfaces层的req/resp包中，符合DDD的边界清晰原则。
2025-07-24 10:51:46 - src.corder_integration.code_generator.strategy1_manager - INFO -   entity:
2025-07-24 10:51:46 - src.corder_integration.code_generator.strategy1_manager - INFO -     - 操作: enhance_existing
2025-07-24 10:51:46 - src.corder_integration.code_generator.strategy1_manager - INFO -     - 目标类: LsLimit
2025-07-24 10:51:46 - src.corder_integration.code_generator.strategy1_manager - INFO -     - 包路径: com.yljr.crcl.limit.domain.entity
2025-07-24 10:51:46 - src.corder_integration.code_generator.strategy1_manager - INFO -     - 原因: 链数额度相关的实体类已存在，该接口主要查询现有实体数据，无需创建新实体。增强现有实体类可保持领域模型的完整性，避免实体碎片化。
2025-07-24 10:51:46 - src.corder_integration.code_generator.strategy1_manager - INFO -   service:
2025-07-24 10:51:46 - src.corder_integration.code_generator.strategy1_manager - INFO -     - 操作: enhance_existing
2025-07-24 10:51:46 - src.corder_integration.code_generator.strategy1_manager - INFO -     - 目标类: LsLimitApplication
2025-07-24 10:51:46 - src.corder_integration.code_generator.strategy1_manager - INFO -     - 包路径: com.yljr.crcl.limit.application.service
2025-07-24 10:51:46 - src.corder_integration.code_generator.strategy1_manager - INFO -     - 原因: 项目已存在LsLimitApplication应用服务类，负责链数额度的业务编排。该接口需要查询额度信息并调用用户服务获取组织单元详情，属于典型的应用层协调职责，增强现有服务可避免重复代码并保持业务一致性。
2025-07-24 10:51:46 - src.corder_integration.code_generator.strategy1_manager - INFO - 🔧 第3步：初始化代码生成器
2025-07-24 10:51:46 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 📁 初始化备份目录: /Users/renyu/Documents/create_project/链数中建一局_1753324841/crcl-open/crcl-open/backup/strategy1_backup_20250724_105146
2025-07-24 10:51:46 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 LLM客户端支持chat方法: True
2025-07-24 10:51:46 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 检测到火山引擎客户端: True
2025-07-24 10:51:46 - src.corder_integration.code_generator.strategy1_manager - INFO - 💻 第4步：大模型自主生成代码并写入文件
2025-07-24 10:51:46 - src.corder_integration.code_generator.strategy1_manager - INFO - 🔨 生成dto层代码
2025-07-24 10:51:46 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🤖 开始生成dto代码（支持文件操作）
2025-07-24 10:51:46 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 使用_generate_with_function_calling生成dto层代码
2025-07-24 10:51:46 - src.corder_integration.code_generator.function_calling_code_generator - INFO -   - 操作: create_new
2025-07-24 10:51:46 - src.corder_integration.code_generator.function_calling_code_generator - INFO -   - 目标类: None
2025-07-24 10:51:46 - src.corder_integration.code_generator.function_calling_code_generator - INFO -   - 包路径: com.yljr.crcl.limit.interfaces.req/resp
2025-07-24 10:51:46 - src.corder_integration.code_generator.function_calling_code_generator - INFO - ✅ 成功使用简单模板渲染function_calling_prompt
2025-07-24 10:51:46 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第1轮开始
2025-07-24 10:51:46 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 10:52:03 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 10:52:03 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 10:52:03 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: file_exists
2025-07-24 10:52:03 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 🔍 检查文件存在: src/main/java/com/yljr/crcl/limit/interfaces/dto/ListUnitLimitByCompanyIdReq.java = False
2025-07-24 10:52:03 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: file_exists
2025-07-24 10:52:03 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第2轮开始
2025-07-24 10:52:03 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 10:52:05 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 10:52:05 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 10:52:05 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: file_exists
2025-07-24 10:52:05 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 🔍 检查文件存在: src/main/java/com/yljr/crcl/limit/interfaces/dto/ListUnitLimitByCompanyIdResp.java = False
2025-07-24 10:52:05 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: file_exists
2025-07-24 10:52:05 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第3轮开始
2025-07-24 10:52:05 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 10:52:20 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 10:52:20 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 10:52:20 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: write_file
2025-07-24 10:52:20 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 📝 覆盖写入文件: src/main/java/com/yljr/crcl/limit/interfaces/dto/ListUnitLimitByCompanyIdReq.java (1343 字符)
2025-07-24 10:52:20 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: write_file
2025-07-24 10:52:20 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第4轮开始
2025-07-24 10:52:20 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 10:52:43 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 10:52:43 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 10:52:43 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: write_file
2025-07-24 10:52:43 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 📝 覆盖写入文件: src/main/java/com/yljr/crcl/limit/interfaces/dto/ListUnitLimitByCompanyIdResp.java (2452 字符)
2025-07-24 10:52:43 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: write_file
2025-07-24 10:52:43 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第5轮开始
2025-07-24 10:52:43 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 10:52:47 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 10:52:47 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 10:52:47 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: read_file
2025-07-24 10:52:47 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 📖 读取文件: src/main/java/com/yljr/crcl/limit/interfaces/dto/ListUnitLimitByCompanyIdReq.java (1343 字符)
2025-07-24 10:52:47 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: read_file
2025-07-24 10:52:47 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第6轮开始
2025-07-24 10:52:47 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 10:52:52 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 10:52:52 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 10:52:52 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: read_file
2025-07-24 10:52:52 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 📖 读取文件: src/main/java/com/yljr/crcl/limit/interfaces/dto/ListUnitLimitByCompanyIdResp.java (2452 字符)
2025-07-24 10:52:52 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: read_file
2025-07-24 10:52:52 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第7轮开始
2025-07-24 10:52:52 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 10:53:02 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 10:53:02 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'str'>
2025-07-24 10:53:02 - src.corder_integration.code_generator.function_calling_code_generator - WARNING - ⚠️ 收到意外的响应格式: <class 'str'>
2025-07-24 10:53:02 - src.corder_integration.code_generator.function_calling_code_generator - INFO - ✅ Function calling对话完成，共7轮
2025-07-24 10:53:02 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🗑️ Function Calling清理备份目录: /Users/renyu/Documents/create_project/链数中建一局_1753324841/crcl-open/crcl-open/backup/strategy1_backup_20250724_105146
2025-07-24 10:53:02 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🗑️ 删除空的备份根目录: /Users/renyu/Documents/create_project/链数中建一局_1753324841/crcl-open/crcl-open/backup
2025-07-24 10:53:02 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🧹 Function Calling备份清理完成，删除了 1 个目录
2025-07-24 10:53:02 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🧹 Function Calling完成后清理了 1 个备份文件
2025-07-24 10:53:02 - src.corder_integration.code_generator.strategy1_manager - INFO - 🔨 生成entity层代码
2025-07-24 10:53:02 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🤖 开始生成entity代码（支持文件操作）
2025-07-24 10:53:02 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 使用_generate_with_function_calling生成entity层代码
2025-07-24 10:53:02 - src.corder_integration.code_generator.function_calling_code_generator - INFO -   - 操作: enhance_existing
2025-07-24 10:53:02 - src.corder_integration.code_generator.function_calling_code_generator - INFO -   - 目标类: LsLimit
2025-07-24 10:53:02 - src.corder_integration.code_generator.function_calling_code_generator - INFO -   - 包路径: com.yljr.crcl.limit.domain.entity
2025-07-24 10:53:02 - src.corder_integration.code_generator.function_calling_code_generator - INFO - ✅ 成功使用简单模板渲染function_calling_prompt
2025-07-24 10:53:02 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第1轮开始
2025-07-24 10:53:02 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 10:53:16 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 10:53:16 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 10:53:16 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: file_exists
2025-07-24 10:53:16 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 🔍 检查文件存在: src/main/java/com/yljr/crcl/limit/domain/entity/LsLimit.java = False
2025-07-24 10:53:16 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: file_exists
2025-07-24 10:53:16 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第2轮开始
2025-07-24 10:53:16 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 10:53:19 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 10:53:19 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 10:53:19 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: create_directory
2025-07-24 10:53:19 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 📁 创建目录: src/main/java/com/yljr/crcl/limit/domain/entity
2025-07-24 10:53:19 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: create_directory
2025-07-24 10:53:19 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第3轮开始
2025-07-24 10:53:19 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 10:53:39 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 10:53:39 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 10:53:39 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: write_file
2025-07-24 10:53:39 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 📝 覆盖写入文件: src/main/java/com/yljr/crcl/limit/domain/entity/LsLimit.java (1671 字符)
2025-07-24 10:53:39 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: write_file
2025-07-24 10:53:39 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第4轮开始
2025-07-24 10:53:39 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 10:53:42 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 10:53:42 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 10:53:42 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: read_file
2025-07-24 10:53:42 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 📖 读取文件: src/main/java/com/yljr/crcl/limit/domain/entity/LsLimit.java (1671 字符)
2025-07-24 10:53:42 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: read_file
2025-07-24 10:53:42 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第5轮开始
2025-07-24 10:53:42 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 10:54:00 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 10:54:00 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'str'>
2025-07-24 10:54:00 - src.corder_integration.code_generator.function_calling_code_generator - WARNING - ⚠️ 收到意外的响应格式: <class 'str'>
2025-07-24 10:54:00 - src.corder_integration.code_generator.function_calling_code_generator - INFO - ✅ Function calling对话完成，共5轮
2025-07-24 10:54:00 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🧹 Function Calling备份清理完成，删除了 0 个目录
2025-07-24 10:54:00 - src.corder_integration.code_generator.strategy1_manager - INFO - 🔨 生成mapper层代码
2025-07-24 10:54:00 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🤖 开始生成mapper代码（支持文件操作）
2025-07-24 10:54:00 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 使用_generate_with_function_calling生成mapper层代码
2025-07-24 10:54:00 - src.corder_integration.code_generator.function_calling_code_generator - INFO -   - 操作: enhance_existing
2025-07-24 10:54:00 - src.corder_integration.code_generator.function_calling_code_generator - INFO -   - 目标类: LsLimitMapper
2025-07-24 10:54:00 - src.corder_integration.code_generator.function_calling_code_generator - INFO -   - 包路径: com.yljr.crcl.limit.domain.mapper
2025-07-24 10:54:00 - src.corder_integration.code_generator.function_calling_code_generator - INFO - ✅ 成功使用简单模板渲染function_calling_prompt
2025-07-24 10:54:00 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第1轮开始
2025-07-24 10:54:00 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 10:54:15 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 10:54:15 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 10:54:15 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: file_exists
2025-07-24 10:54:15 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 🔍 检查文件存在: src/main/java/com/yljr/crcl/limit/domain/mapper/LsLimitMapper.java = True
2025-07-24 10:54:15 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: file_exists
2025-07-24 10:54:15 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第2轮开始
2025-07-24 10:54:15 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 10:54:19 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 10:54:19 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 10:54:19 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: read_file
2025-07-24 10:54:19 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 📖 读取文件: src/main/java/com/yljr/crcl/limit/domain/mapper/LsLimitMapper.java (4219 字符)
2025-07-24 10:54:19 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: read_file
2025-07-24 10:54:19 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第3轮开始
2025-07-24 10:54:19 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 10:54:25 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 10:54:25 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 10:54:25 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: file_exists
2025-07-24 10:54:25 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 🔍 检查文件存在: src/main/resources/mapper/LsLimitMapper.xml = False
2025-07-24 10:54:25 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: file_exists
2025-07-24 10:54:25 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第4轮开始
2025-07-24 10:54:25 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 10:54:31 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 10:54:31 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 10:54:31 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: file_exists
2025-07-24 10:54:31 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 🔍 检查文件存在: src/main/resources/mapper/limit/LsLimitMapper.xml = True
2025-07-24 10:54:31 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: file_exists
2025-07-24 10:54:31 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第5轮开始
2025-07-24 10:54:31 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 10:54:37 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 10:54:37 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 10:54:37 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: read_file
2025-07-24 10:54:37 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 📖 读取文件: src/main/resources/mapper/limit/LsLimitMapper.xml (13844 字符)
2025-07-24 10:54:37 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: read_file
2025-07-24 10:54:37 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第6轮开始
2025-07-24 10:54:37 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 10:55:04 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 10:55:04 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 10:55:04 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: replace_text
2025-07-24 10:55:04 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 📋 备份文件: src/main/java/com/yljr/crcl/limit/domain/mapper/LsLimitMapper.java -> /Users/renyu/Documents/create_project/链数中建一局_1753324841/crcl-open/crcl-open/backup/strategy1_backup_20250724_105146/src/main/java/com/yljr/crcl/limit/domain/mapper/LsLimitMapper.java
2025-07-24 10:55:04 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 🔄 文本替换成功: src/main/java/com/yljr/crcl/limit/domain/mapper/LsLimitMapper.java (替换了 1 处匹配)
2025-07-24 10:55:04 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO -    原文本长度: 162 字符
2025-07-24 10:55:04 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO -    新文本长度: 1556 字符
2025-07-24 10:55:04 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: replace_text
2025-07-24 10:55:04 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第7轮开始
2025-07-24 10:55:04 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 10:55:57 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 10:55:57 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 10:55:57 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: replace_text
2025-07-24 10:55:57 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 📋 备份文件: src/main/resources/mapper/limit/LsLimitMapper.xml -> /Users/renyu/Documents/create_project/链数中建一局_1753324841/crcl-open/crcl-open/backup/strategy1_backup_20250724_105146/src/main/resources/mapper/limit/LsLimitMapper.xml
2025-07-24 10:55:57 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 🔄 文本替换成功: src/main/resources/mapper/limit/LsLimitMapper.xml (替换了 1 处匹配)
2025-07-24 10:55:57 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO -    原文本长度: 630 字符
2025-07-24 10:55:57 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO -    新文本长度: 4524 字符
2025-07-24 10:55:57 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: replace_text
2025-07-24 10:55:57 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第8轮开始
2025-07-24 10:55:57 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 10:56:03 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 10:56:03 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 10:56:03 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: read_file
2025-07-24 10:56:03 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 📖 读取文件: src/main/java/com/yljr/crcl/limit/domain/mapper/LsLimitMapper.java (5613 字符)
2025-07-24 10:56:03 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: read_file
2025-07-24 10:56:03 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第9轮开始
2025-07-24 10:56:03 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 10:56:06 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 10:56:06 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 10:56:06 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: read_file
2025-07-24 10:56:06 - src.corder_integration.code_generator.file_operation_tool_invoker - ERROR - ❌ 函数调用失败: read_file, 错误: FileOperationToolInvoker._read_file() got an unexpected keyword argument 'limit'
2025-07-24 10:56:06 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第10轮开始
2025-07-24 10:56:06 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 10:56:10 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 10:56:10 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 10:56:10 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: read_file
2025-07-24 10:56:10 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 📖 读取文件: src/main/resources/mapper/limit/LsLimitMapper.xml (17738 字符)
2025-07-24 10:56:10 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: read_file
2025-07-24 10:56:10 - src.corder_integration.code_generator.function_calling_code_generator - WARNING - ⚠️ Function calling达到最大轮数10
2025-07-24 10:56:10 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🗑️ Function Calling清理备份目录: /Users/renyu/Documents/create_project/链数中建一局_1753324841/crcl-open/crcl-open/backup/strategy1_backup_20250724_105146
2025-07-24 10:56:10 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🗑️ 删除空的备份根目录: /Users/renyu/Documents/create_project/链数中建一局_1753324841/crcl-open/crcl-open/backup
2025-07-24 10:56:10 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🧹 Function Calling备份清理完成，删除了 1 个目录
2025-07-24 10:56:10 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🧹 Function Calling完成后清理了 1 个备份文件
2025-07-24 10:56:10 - src.corder_integration.code_generator.strategy1_manager - INFO - 🔨 生成domain_service层代码
2025-07-24 10:56:10 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🤖 开始生成domain_service代码（支持文件操作）
2025-07-24 10:56:10 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 使用_generate_with_function_calling生成domain_service层代码
2025-07-24 10:56:10 - src.corder_integration.code_generator.function_calling_code_generator - INFO -   - 操作: enhance_existing
2025-07-24 10:56:10 - src.corder_integration.code_generator.function_calling_code_generator - INFO -   - 目标类: LsLimitService
2025-07-24 10:56:10 - src.corder_integration.code_generator.function_calling_code_generator - INFO -   - 包路径: com.yljr.crcl.limit.domain.service
2025-07-24 10:56:10 - src.corder_integration.code_generator.function_calling_code_generator - INFO - ✅ 成功使用简单模板渲染function_calling_prompt
2025-07-24 10:56:10 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第1轮开始
2025-07-24 10:56:10 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 11:06:47 - openai._base_client - INFO - Retrying request to /chat/completions in 0.420789 seconds
2025-07-24 11:06:52 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 11:06:52 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 11:06:52 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: file_exists
2025-07-24 11:06:52 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 🔍 检查文件存在: src/main/java/com/yljr/crcl/limit/domain/service/LsLimitService.java = True
2025-07-24 11:06:52 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: file_exists
2025-07-24 11:06:52 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第2轮开始
2025-07-24 11:06:52 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 11:06:54 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 11:06:54 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 11:06:54 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: read_file
2025-07-24 11:06:54 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 📖 读取文件: src/main/java/com/yljr/crcl/limit/domain/service/LsLimitService.java (3337 字符)
2025-07-24 11:06:54 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: read_file
2025-07-24 11:06:54 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第3轮开始
2025-07-24 11:06:54 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 11:07:10 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 11:07:10 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 11:07:10 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: replace_text
2025-07-24 11:07:10 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 📋 备份文件: src/main/java/com/yljr/crcl/limit/domain/service/LsLimitService.java -> /Users/renyu/Documents/create_project/链数中建一局_1753324841/crcl-open/crcl-open/backup/strategy1_backup_20250724_105146/src/main/java/com/yljr/crcl/limit/domain/service/LsLimitService.java
2025-07-24 11:07:10 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 🔄 文本替换成功: src/main/java/com/yljr/crcl/limit/domain/service/LsLimitService.java (替换了 1 处匹配)
2025-07-24 11:07:10 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO -    原文本长度: 146 字符
2025-07-24 11:07:10 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO -    新文本长度: 589 字符
2025-07-24 11:07:10 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: replace_text
2025-07-24 11:07:10 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第4轮开始
2025-07-24 11:07:10 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 11:07:13 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 11:07:13 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 11:07:13 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: file_exists
2025-07-24 11:07:13 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 🔍 检查文件存在: src/main/java/com/yljr/crcl/limit/domain/service/impl/LsLimitServiceImpl.java = True
2025-07-24 11:07:13 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: file_exists
2025-07-24 11:07:13 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第5轮开始
2025-07-24 11:07:13 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 11:07:28 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 11:07:28 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 11:07:28 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: read_file
2025-07-24 11:07:28 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 📖 读取文件: src/main/java/com/yljr/crcl/limit/domain/service/impl/LsLimitServiceImpl.java (3913 字符)
2025-07-24 11:07:28 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: read_file
2025-07-24 11:07:28 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第6轮开始
2025-07-24 11:07:28 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 11:07:37 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 11:07:37 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 11:07:37 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: replace_text
2025-07-24 11:07:37 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 📋 备份文件: src/main/java/com/yljr/crcl/limit/domain/service/impl/LsLimitServiceImpl.java -> /Users/renyu/Documents/create_project/链数中建一局_1753324841/crcl-open/crcl-open/backup/strategy1_backup_20250724_105146/src/main/java/com/yljr/crcl/limit/domain/service/impl/LsLimitServiceImpl.java
2025-07-24 11:07:37 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 🔄 文本替换成功: src/main/java/com/yljr/crcl/limit/domain/service/impl/LsLimitServiceImpl.java (替换了 1 处匹配)
2025-07-24 11:07:37 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO -    原文本长度: 162 字符
2025-07-24 11:07:37 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO -    新文本长度: 758 字符
2025-07-24 11:07:37 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: replace_text
2025-07-24 11:07:37 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第7轮开始
2025-07-24 11:07:37 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 11:07:40 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 11:07:40 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 11:07:40 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: read_file
2025-07-24 11:07:40 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 📖 读取文件: src/main/java/com/yljr/crcl/limit/domain/service/LsLimitService.java (3780 字符)
2025-07-24 11:07:40 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: read_file
2025-07-24 11:07:40 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第8轮开始
2025-07-24 11:07:40 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 11:07:44 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 11:07:44 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 11:07:44 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: read_file
2025-07-24 11:07:44 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 📖 读取文件: src/main/java/com/yljr/crcl/limit/domain/service/impl/LsLimitServiceImpl.java (4509 字符)
2025-07-24 11:07:44 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: read_file
2025-07-24 11:07:44 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第9轮开始
2025-07-24 11:07:44 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 11:07:58 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 11:07:58 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'str'>
2025-07-24 11:07:58 - src.corder_integration.code_generator.function_calling_code_generator - WARNING - ⚠️ 收到意外的响应格式: <class 'str'>
2025-07-24 11:07:58 - src.corder_integration.code_generator.function_calling_code_generator - INFO - ✅ Function calling对话完成，共9轮
2025-07-24 11:07:58 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🗑️ Function Calling清理备份目录: /Users/renyu/Documents/create_project/链数中建一局_1753324841/crcl-open/crcl-open/backup/strategy1_backup_20250724_105146
2025-07-24 11:07:58 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🗑️ 删除空的备份根目录: /Users/renyu/Documents/create_project/链数中建一局_1753324841/crcl-open/crcl-open/backup
2025-07-24 11:07:58 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🧹 Function Calling备份清理完成，删除了 1 个目录
2025-07-24 11:07:58 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🧹 Function Calling完成后清理了 1 个备份文件
2025-07-24 11:07:58 - src.corder_integration.code_generator.strategy1_manager - INFO - 🔨 生成feign_client层代码
2025-07-24 11:07:58 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🤖 开始生成feign_client代码（支持文件操作）
2025-07-24 11:07:58 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 使用_generate_with_function_calling生成feign_client层代码
2025-07-24 11:07:58 - src.corder_integration.code_generator.function_calling_code_generator - INFO -   - 操作: create_new
2025-07-24 11:07:58 - src.corder_integration.code_generator.function_calling_code_generator - INFO -   - 目标类: UserCenterFeignClient
2025-07-24 11:07:58 - src.corder_integration.code_generator.function_calling_code_generator - INFO -   - 包路径: com.yljr.crcl.limit.application.feign.user
2025-07-24 11:07:58 - src.corder_integration.code_generator.function_calling_code_generator - INFO - ✅ 成功使用简单模板渲染function_calling_prompt
2025-07-24 11:07:58 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第1轮开始
2025-07-24 11:07:58 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 11:08:12 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 11:08:12 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 11:08:12 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: file_exists
2025-07-24 11:08:12 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 🔍 检查文件存在: src/main/java/com/yljr/crcl/limit/application/feign/user/UserCenterFeignClient.java = False
2025-07-24 11:08:12 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: file_exists
2025-07-24 11:08:12 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第2轮开始
2025-07-24 11:08:12 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 11:08:22 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 11:08:22 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 11:08:22 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: write_file
2025-07-24 11:08:22 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 📝 覆盖写入文件: src/main/java/com/yljr/crcl/limit/application/feign/user/UserCenterFeignClient.java (812 字符)
2025-07-24 11:08:22 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: write_file
2025-07-24 11:08:22 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第3轮开始
2025-07-24 11:08:22 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 11:08:31 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 11:08:31 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 11:08:31 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: write_file
2025-07-24 11:08:31 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 📝 覆盖写入文件: src/main/java/com/yljr/crcl/limit/application/feign/user/dto/CompanyUnitListReq.java (707 字符)
2025-07-24 11:08:31 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: write_file
2025-07-24 11:08:31 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第4轮开始
2025-07-24 11:08:31 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 11:08:42 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 11:08:42 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 11:08:42 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: write_file
2025-07-24 11:08:42 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 📝 覆盖写入文件: src/main/java/com/yljr/crcl/limit/application/feign/user/dto/CompanyUnitListResp.java (1091 字符)
2025-07-24 11:08:42 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: write_file
2025-07-24 11:08:42 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第5轮开始
2025-07-24 11:08:42 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 11:08:45 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 11:08:45 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 11:08:45 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: read_file
2025-07-24 11:08:45 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 📖 读取文件: src/main/java/com/yljr/crcl/limit/application/feign/user/UserCenterFeignClient.java (812 字符)
2025-07-24 11:08:45 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: read_file
2025-07-24 11:08:45 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第6轮开始
2025-07-24 11:08:45 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 11:08:49 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 11:08:49 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 11:08:49 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: read_file
2025-07-24 11:08:49 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 📖 读取文件: src/main/java/com/yljr/crcl/limit/application/feign/user/dto/CompanyUnitListReq.java (707 字符)
2025-07-24 11:08:49 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: read_file
2025-07-24 11:08:49 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第7轮开始
2025-07-24 11:08:49 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 11:08:53 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 11:08:53 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 11:08:53 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: read_file
2025-07-24 11:08:53 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 📖 读取文件: src/main/java/com/yljr/crcl/limit/application/feign/user/dto/CompanyUnitListResp.java (1091 字符)
2025-07-24 11:08:53 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: read_file
2025-07-24 11:08:53 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第8轮开始
2025-07-24 11:08:53 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 11:09:06 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 11:09:06 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'str'>
2025-07-24 11:09:06 - src.corder_integration.code_generator.function_calling_code_generator - WARNING - ⚠️ 收到意外的响应格式: <class 'str'>
2025-07-24 11:09:06 - src.corder_integration.code_generator.function_calling_code_generator - INFO - ✅ Function calling对话完成，共8轮
2025-07-24 11:09:06 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🧹 Function Calling备份清理完成，删除了 0 个目录
2025-07-24 11:09:06 - src.corder_integration.code_generator.strategy1_manager - INFO - 🔨 生成application_service层代码
2025-07-24 11:09:06 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🤖 开始生成application_service代码（支持文件操作）
2025-07-24 11:09:06 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 使用_generate_with_function_calling生成application_service层代码
2025-07-24 11:09:06 - src.corder_integration.code_generator.function_calling_code_generator - INFO -   - 操作: enhance_existing
2025-07-24 11:09:06 - src.corder_integration.code_generator.function_calling_code_generator - INFO -   - 目标类: LsLimitApplication
2025-07-24 11:09:06 - src.corder_integration.code_generator.function_calling_code_generator - INFO -   - 包路径: com.yljr.crcl.limit.application.service
2025-07-24 11:09:06 - src.corder_integration.code_generator.function_calling_code_generator - INFO - ✅ 成功使用简单模板渲染function_calling_prompt
2025-07-24 11:09:06 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第1轮开始
2025-07-24 11:09:06 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 11:09:19 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 11:09:19 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 11:09:19 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: file_exists
2025-07-24 11:09:19 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 🔍 检查文件存在: src/main/java/com/yljr/crcl/limit/application/service/LsLimitApplication.java = True
2025-07-24 11:09:19 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: file_exists
2025-07-24 11:09:19 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第2轮开始
2025-07-24 11:09:19 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 11:09:22 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 11:09:22 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 11:09:22 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: read_file
2025-07-24 11:09:22 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 📖 读取文件: src/main/java/com/yljr/crcl/limit/application/service/LsLimitApplication.java (54822 字符)
2025-07-24 11:09:22 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: read_file
2025-07-24 11:09:22 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第3轮开始
2025-07-24 11:09:22 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 11:09:43 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 11:09:43 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 11:09:43 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: write_file
2025-07-24 11:09:43 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 📋 备份文件: src/main/java/com/yljr/crcl/limit/interfaces/dto/ListUnitLimitByCompanyIdReq.java -> /Users/renyu/Documents/create_project/链数中建一局_1753324841/crcl-open/crcl-open/backup/strategy1_backup_20250724_105146/src/main/java/com/yljr/crcl/limit/interfaces/dto/ListUnitLimitByCompanyIdReq.java
2025-07-24 11:09:43 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 📝 覆盖写入文件: src/main/java/com/yljr/crcl/limit/interfaces/dto/ListUnitLimitByCompanyIdReq.java (1446 字符)
2025-07-24 11:09:43 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: write_file
2025-07-24 11:09:43 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第4轮开始
2025-07-24 11:09:43 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 11:10:07 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 11:10:07 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 11:10:07 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: write_file
2025-07-24 11:10:07 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 📋 备份文件: src/main/java/com/yljr/crcl/limit/interfaces/dto/ListUnitLimitByCompanyIdResp.java -> /Users/renyu/Documents/create_project/链数中建一局_1753324841/crcl-open/crcl-open/backup/strategy1_backup_20250724_105146/src/main/java/com/yljr/crcl/limit/interfaces/dto/ListUnitLimitByCompanyIdResp.java
2025-07-24 11:10:07 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 📝 覆盖写入文件: src/main/java/com/yljr/crcl/limit/interfaces/dto/ListUnitLimitByCompanyIdResp.java (2442 字符)
2025-07-24 11:10:07 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: write_file
2025-07-24 11:10:07 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第5轮开始
2025-07-24 11:10:07 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 11:10:26 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 11:10:26 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 11:10:26 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: write_file
2025-07-24 11:10:26 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 📋 备份文件: src/main/java/com/yljr/crcl/limit/application/feign/user/UserCenterFeignClient.java -> /Users/renyu/Documents/create_project/链数中建一局_1753324841/crcl-open/crcl-open/backup/strategy1_backup_20250724_105146/src/main/java/com/yljr/crcl/limit/application/feign/user/UserCenterFeignClient.java
2025-07-24 11:10:26 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 📝 覆盖写入文件: src/main/java/com/yljr/crcl/limit/application/feign/user/UserCenterFeignClient.java (1740 字符)
2025-07-24 11:10:26 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: write_file
2025-07-24 11:10:26 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第6轮开始
2025-07-24 11:10:26 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 11:11:07 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 11:11:07 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 11:11:07 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: replace_text
2025-07-24 11:11:07 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 📋 备份文件: src/main/java/com/yljr/crcl/limit/application/service/LsLimitApplication.java -> /Users/renyu/Documents/create_project/链数中建一局_1753324841/crcl-open/crcl-open/backup/strategy1_backup_20250724_105146/src/main/java/com/yljr/crcl/limit/application/service/LsLimitApplication.java
2025-07-24 11:11:07 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 🔄 文本替换成功: src/main/java/com/yljr/crcl/limit/application/service/LsLimitApplication.java (替换了 1 处匹配)
2025-07-24 11:11:07 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO -    原文本长度: 391 字符
2025-07-24 11:11:07 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO -    新文本长度: 6533 字符
2025-07-24 11:11:07 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: replace_text
2025-07-24 11:11:07 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第7轮开始
2025-07-24 11:11:07 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 11:11:11 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 11:11:11 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 11:11:11 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: read_file
2025-07-24 11:11:11 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 📖 读取文件: src/main/java/com/yljr/crcl/limit/interfaces/dto/ListUnitLimitByCompanyIdReq.java (1446 字符)
2025-07-24 11:11:11 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: read_file
2025-07-24 11:11:11 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第8轮开始
2025-07-24 11:11:11 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 11:11:15 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 11:11:15 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 11:11:15 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: read_file
2025-07-24 11:11:15 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 📖 读取文件: src/main/java/com/yljr/crcl/limit/interfaces/dto/ListUnitLimitByCompanyIdResp.java (2442 字符)
2025-07-24 11:11:15 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: read_file
2025-07-24 11:11:15 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第9轮开始
2025-07-24 11:11:15 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 11:11:17 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 11:11:17 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 11:11:17 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: read_file
2025-07-24 11:11:17 - src.corder_integration.code_generator.file_operation_tool_invoker - ERROR - ❌ 函数调用失败: read_file, 错误: FileOperationToolInvoker._read_file() got an unexpected keyword argument 'start_line'
2025-07-24 11:11:17 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第10轮开始
2025-07-24 11:11:17 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 11:11:21 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 11:11:21 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 11:11:21 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: read_file
2025-07-24 11:11:21 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 📖 读取文件: src/main/java/com/yljr/crcl/limit/application/service/LsLimitApplication.java (60964 字符)
2025-07-24 11:11:21 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: read_file
2025-07-24 11:11:21 - src.corder_integration.code_generator.function_calling_code_generator - WARNING - ⚠️ Function calling达到最大轮数10
2025-07-24 11:11:21 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🗑️ Function Calling清理备份目录: /Users/renyu/Documents/create_project/链数中建一局_1753324841/crcl-open/crcl-open/backup/strategy1_backup_20250724_105146
2025-07-24 11:11:21 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🗑️ 删除空的备份根目录: /Users/renyu/Documents/create_project/链数中建一局_1753324841/crcl-open/crcl-open/backup
2025-07-24 11:11:21 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🧹 Function Calling备份清理完成，删除了 1 个目录
2025-07-24 11:11:21 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🧹 Function Calling完成后清理了 1 个备份文件
2025-07-24 11:11:21 - src.corder_integration.code_generator.strategy1_manager - INFO - 🔨 生成controller层代码
2025-07-24 11:11:21 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🤖 开始生成controller代码（支持文件操作）
2025-07-24 11:11:21 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 使用_generate_with_function_calling生成controller层代码
2025-07-24 11:11:21 - src.corder_integration.code_generator.function_calling_code_generator - INFO -   - 操作: enhance_existing
2025-07-24 11:11:21 - src.corder_integration.code_generator.function_calling_code_generator - INFO -   - 目标类: LsLimitController
2025-07-24 11:11:21 - src.corder_integration.code_generator.function_calling_code_generator - INFO -   - 包路径: com.yljr.crcl.limit.interfaces
2025-07-24 11:11:21 - src.corder_integration.code_generator.function_calling_code_generator - INFO - ✅ 成功使用简单模板渲染function_calling_prompt
2025-07-24 11:11:21 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第1轮开始
2025-07-24 11:11:21 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 11:11:36 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 11:11:36 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 11:11:36 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: file_exists
2025-07-24 11:11:36 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 🔍 检查文件存在: src/main/java/com/yljr/crcl/limit/interfaces/LsLimitController.java = True
2025-07-24 11:11:36 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: file_exists
2025-07-24 11:11:36 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第2轮开始
2025-07-24 11:11:36 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 11:11:39 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 11:11:39 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 11:11:39 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: read_file
2025-07-24 11:11:39 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 📖 读取文件: src/main/java/com/yljr/crcl/limit/interfaces/LsLimitController.java (13412 字符)
2025-07-24 11:11:39 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: read_file
2025-07-24 11:11:39 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第3轮开始
2025-07-24 11:11:39 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 11:12:05 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 11:12:05 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 11:12:05 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: write_file
2025-07-24 11:12:05 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 📋 备份文件: src/main/java/com/yljr/crcl/limit/interfaces/dto/ListUnitLimitByCompanyIdReq.java -> /Users/renyu/Documents/create_project/链数中建一局_1753324841/crcl-open/crcl-open/backup/strategy1_backup_20250724_105146/src/main/java/com/yljr/crcl/limit/interfaces/dto/ListUnitLimitByCompanyIdReq.java
2025-07-24 11:12:05 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 📝 覆盖写入文件: src/main/java/com/yljr/crcl/limit/interfaces/dto/ListUnitLimitByCompanyIdReq.java (2241 字符)
2025-07-24 11:12:05 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: write_file
2025-07-24 11:12:05 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第4轮开始
2025-07-24 11:12:05 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 11:12:36 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 11:12:36 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 11:12:36 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: write_file
2025-07-24 11:12:36 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 📋 备份文件: src/main/java/com/yljr/crcl/limit/interfaces/dto/ListUnitLimitByCompanyIdResp.java -> /Users/renyu/Documents/create_project/链数中建一局_1753324841/crcl-open/crcl-open/backup/strategy1_backup_20250724_105146/src/main/java/com/yljr/crcl/limit/interfaces/dto/ListUnitLimitByCompanyIdResp.java
2025-07-24 11:12:36 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 📝 覆盖写入文件: src/main/java/com/yljr/crcl/limit/interfaces/dto/ListUnitLimitByCompanyIdResp.java (4241 字符)
2025-07-24 11:12:36 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: write_file
2025-07-24 11:12:36 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第5轮开始
2025-07-24 11:12:36 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 11:12:51 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 11:12:51 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 11:12:51 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: replace_text
2025-07-24 11:12:51 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 📋 备份文件: src/main/java/com/yljr/crcl/limit/interfaces/LsLimitController.java -> /Users/renyu/Documents/create_project/链数中建一局_1753324841/crcl-open/crcl-open/backup/strategy1_backup_20250724_105146/src/main/java/com/yljr/crcl/limit/interfaces/LsLimitController.java
2025-07-24 11:12:51 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 🔄 文本替换成功: src/main/java/com/yljr/crcl/limit/interfaces/LsLimitController.java (替换了 1 处匹配)
2025-07-24 11:12:51 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO -    原文本长度: 1 字符
2025-07-24 11:12:51 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO -    新文本长度: 1191 字符
2025-07-24 11:12:51 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: replace_text
2025-07-24 11:12:51 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第6轮开始
2025-07-24 11:12:51 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 11:13:02 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 11:13:02 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 11:13:02 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: write_file
2025-07-24 11:13:02 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 📝 覆盖写入文件: src/main/java/com/yljr/crcl/limit/application/feign/UserCenterFeignClient.java (824 字符)
2025-07-24 11:13:02 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: write_file
2025-07-24 11:13:02 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第7轮开始
2025-07-24 11:13:02 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 11:13:20 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 11:13:20 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 11:13:20 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: write_file
2025-07-24 11:13:20 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 📝 覆盖写入文件: src/main/java/com/yljr/crcl/limit/application/feign/dto/CompanyUnitListReq.java (1367 字符)
2025-07-24 11:13:20 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: write_file
2025-07-24 11:13:20 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第8轮开始
2025-07-24 11:13:20 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 11:13:41 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 11:13:41 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 11:13:41 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: write_file
2025-07-24 11:13:41 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 📝 覆盖写入文件: src/main/java/com/yljr/crcl/limit/application/feign/dto/CompanyUnitListResp.java (2210 字符)
2025-07-24 11:13:41 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: write_file
2025-07-24 11:13:41 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第9轮开始
2025-07-24 11:13:41 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 11:13:46 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 11:13:46 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 11:13:46 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: file_exists
2025-07-24 11:13:46 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 🔍 检查文件存在: src/main/java/com/yljr/crcl/limit/application/service/LsLimitApplication.java = True
2025-07-24 11:13:46 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: file_exists
2025-07-24 11:13:46 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第10轮开始
2025-07-24 11:13:46 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 11:13:49 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 11:13:49 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 11:13:49 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: read_file
2025-07-24 11:13:49 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 📖 读取文件: src/main/java/com/yljr/crcl/limit/application/service/LsLimitApplication.java (60964 字符)
2025-07-24 11:13:49 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: read_file
2025-07-24 11:13:49 - src.corder_integration.code_generator.function_calling_code_generator - WARNING - ⚠️ Function calling达到最大轮数10
2025-07-24 11:13:49 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🗑️ Function Calling清理备份目录: /Users/renyu/Documents/create_project/链数中建一局_1753324841/crcl-open/crcl-open/backup/strategy1_backup_20250724_105146
2025-07-24 11:13:49 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🗑️ 删除空的备份根目录: /Users/renyu/Documents/create_project/链数中建一局_1753324841/crcl-open/crcl-open/backup
2025-07-24 11:13:49 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🧹 Function Calling备份清理完成，删除了 1 个目录
2025-07-24 11:13:49 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🧹 Function Calling完成后清理了 1 个备份文件
2025-07-24 11:13:49 - src.corder_integration.code_generator.strategy1_manager - INFO - ✅ 策略1执行完成，成功生成7层代码
2025-07-24 11:13:49 - src.apis.project_analysis_api - INFO - 🗑️ 已清除缓存: /Users/renyu/Documents/create_project/链数中建一局_1753324841/crcl-open/crcl-open/src/main/java_确权开立服务
2025-07-24 11:13:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🗑️ 策略1完成后已清理项目分析缓存
2025-07-24 11:13:49 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_009 状态更新为 completed
2025-07-24 11:13:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 任务 task_009 执行成功
2025-07-24 11:13:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 开始执行任务: task_010 (api)
2025-07-24 11:13:49 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_010 已被 intelligent_coding_node 领取
2025-07-24 11:13:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🌐 执行API接口生成任务: task_010
2025-07-24 11:13:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 解析的接口信息:
2025-07-24 11:13:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 接口名称: UnitLimitByCompanyIdExport
2025-07-24 11:13:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - API路径: /crcl-open-api/lsLimit/listUnitLimitByCompanyIdExport
2025-07-24 11:13:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - HTTP方法: GET
2025-07-24 11:13:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 输入参数: 6个
2025-07-24 11:13:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 输出参数: 3个
2025-07-24 11:13:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 业务描述: 复用listUnitLimitByCompanyId接口的查询逻辑，将结果导出为Excel格式，文件生成在本地目录，采用本地链接形式返回路径，文件类型为Excel列表，文件类型：xlsx，列表头列内容：组织单元名称、额度名称、额度类型、已分配额度（元）、已用额度（元）、可用额度（元），需要调用zqyl-user-center-service服务的/queryCompanyUnitList接口获取组织单元详细信息
2025-07-24 11:13:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 在 /Users/renyu/Documents/create_project/链数中建一局_1753324841/crcl-open 中查找最佳Java项目路径...
2025-07-24 11:13:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 目标服务名: 确权开立服务
2025-07-24 11:13:49 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 11:13:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 发现Java项目: crcl-open
2025-07-24 11:13:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       🎯 相对路径: crcl-open
2025-07-24 11:13:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       📊 Java文件: 2260个
2025-07-24 11:13:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       📐 目录深度: 1
2025-07-24 11:13:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       🏆 优先级分数: 750
2025-07-24 11:13:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 排序后的候选路径（前3个）:
2025-07-24 11:13:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    1. crcl-open (优先级: 750)
2025-07-24 11:13:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 选择最佳Java项目路径:
2025-07-24 11:13:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 完整路径: /Users/renyu/Documents/create_project/链数中建一局_1753324841/crcl-open/crcl-open
2025-07-24 11:13:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📋 相对路径: crcl-open
2025-07-24 11:13:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    🏆 最终优先级: 750
2025-07-24 11:13:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📁 基础项目路径: /Users/renyu/Documents/create_project/链数中建一局_1753324841/crcl-open/crcl-open
2025-07-24 11:13:49 - src.corder_integration.config.domain_mapping_config - INFO - 🔍 映射API关键字到业务领域: lsLimit
2025-07-24 11:13:49 - src.corder_integration.config.domain_mapping_config - INFO - ✅ 精确匹配: lsLimit -> lsLimit
2025-07-24 11:13:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 API关键字映射: lsLimit -> lsLimit (API路径: /crcl-open-api/lsLimit/listUnitLimitByCompanyIdExport)
2025-07-24 11:13:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🤖 使用大模型智能匹配Controller: lsLimit (API: /crcl-open-api/lsLimit/listUnitLimitByCompanyIdExport)
2025-07-24 11:13:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功扫描到 53 个Controller文件
2025-07-24 11:13:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 找到 53 个Controller文件
2025-07-24 11:13:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🤖 调用volcengine分析Controller相似度...
2025-07-24 11:13:58 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 11:13:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - ERROR - ❌ LLM响应JSON解析失败: Expecting value: line 1 column 1 (char 0)
2025-07-24 11:13:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 使用规则匹配方式查找Controller: lsLimit
2025-07-24 11:13:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 智能匹配找到相似Controller: LsLimitController
2025-07-24 11:13:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 Controller路径: /Users/renyu/Documents/create_project/链数中建一局_1753324841/crcl-open/crcl-open/src/main/java/com/yljr/crcl/limit/interfaces/LsLimitController.java
2025-07-24 11:13:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    🔢 相似度分数: 0.80
2025-07-24 11:13:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    💡 匹配原因: 类名包含关键字: lsLimit, 路径包含关键字: lsLimit, 包名业务相关: limit
2025-07-24 11:13:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 分析目标项目: /Users/renyu/Documents/create_project/链数中建一局_1753324841/crcl-open/crcl-open/src/main/java
2025-07-24 11:13:58 - src.apis.project_analysis_api - INFO - 🔍 开始分析项目用于代码生成: /Users/renyu/Documents/create_project/链数中建一局_1753324841/crcl-open/crcl-open/src/main/java
2025-07-24 11:13:58 - src.apis.project_analysis_api - INFO - 🔍 在 /Users/renyu/Documents/create_project/链数中建一局_1753324841/crcl-open/crcl-open/src/main/java 中查找最佳Java项目路径...
2025-07-24 11:13:58 - src.apis.project_analysis_api - INFO - 🎯 目标服务名: 确权开立服务
2025-07-24 11:13:58 - src.apis.project_analysis_api - WARNING - ⚠️ 在 /Users/renyu/Documents/create_project/链数中建一局_1753324841/crcl-open/crcl-open/src/main/java 中未找到包含Java文件的src/main/java结构
2025-07-24 11:13:58 - src.apis.project_analysis_api - INFO - 📂 实际分析路径: /Users/renyu/Documents/create_project/链数中建一局_1753324841/crcl-open/crcl-open/src/main/java
2025-07-24 11:13:58 - src.utils.java_code_analyzer - INFO - 🔍 开始分析企业级Java项目: /Users/renyu/Documents/create_project/链数中建一局_1753324841/crcl-open/crcl-open/src/main/java
2025-07-24 11:14:02 - src.utils.java_code_analyzer - INFO - ✅ 企业级项目分析完成，共分析 2249 个Java文件
2025-07-24 11:14:02 - src.apis.project_analysis_api - INFO - 📦 动态检测到基础包: com.yljr.crcl (出现2249次)
2025-07-24 11:14:02 - src.apis.project_analysis_api - INFO - 📦 动态检测到基础包: com.yljr.crcl (出现2249次)
2025-07-24 11:14:02 - src.apis.project_analysis_api - INFO - 📋 提取到48个Controller的详细信息
2025-07-24 11:14:02 - src.apis.project_analysis_api - INFO - 📦 动态检测到基础包: com.yljr.crcl (出现2249次)
2025-07-24 11:14:02 - src.apis.project_analysis_api - INFO - ✅ 项目分析完成，已提取代码生成上下文
2025-07-24 11:14:02 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 从编码代理获取设计文档内容 (7416 字符)
2025-07-24 11:14:02 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 设计文档内容已添加到项目上下文 (7416 字符)
2025-07-24 11:14:02 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 使用详细Controller信息，共48个Controller
2025-07-24 11:14:02 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 Controller关联性分析完成:
2025-07-24 11:14:02 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 总Controller数: 48
2025-07-24 11:14:02 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 相关Controller数: 1
2025-07-24 11:14:02 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 最高关联度: 0.45
2025-07-24 11:14:02 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 Controller关联性分析:
2025-07-24 11:14:02 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 总Controller数: 48
2025-07-24 11:14:02 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 相关Controller数: 1
2025-07-24 11:14:02 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 关联度得分: 0.45
2025-07-24 11:14:02 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 相关Controllers: ['LsLimitController']
2025-07-24 11:14:02 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🤖 调用volcengine分析项目策略...发送的prompt信息: Java文件数=2249, Controller数=48
2025-07-24 11:14:08 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 11:14:08 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 项目策略判断: create_new - 当前仅发现1个相关Controller（LsLimitController），业务关联度为0.45，低于0.6的阈值；且API路径 '/crcl-open-api/lsLimit/listUnitLimitByCompanyIdExport' 与现有Controller的路径模式并不完全匹配，属于导出类接口，可能涉及新的查询参数、响应格式或权限控制逻辑，因此建议新建独立Controller以隔离导出逻辑与常规业务逻辑，保持代码清晰与可维护性。
2025-07-24 11:14:08 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📁 策略2：直接使用新文件生成策略，原因: 当前仅发现1个相关Controller（LsLimitController），业务关联度为0.45，低于0.6的阈值；且API路径 '/crcl-open-api/lsLimit/listUnitLimitByCompanyIdExport' 与现有Controller的路径模式并不完全匹配，属于导出类接口，可能涉及新的查询参数、响应格式或权限控制逻辑，因此建议新建独立Controller以隔离导出逻辑与常规业务逻辑，保持代码清晰与可维护性。
2025-07-24 11:14:08 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔧 规范化项目路径: /Users/renyu/Documents/create_project/链数中建一局_1753324841/crcl-open/crcl-open/src/main/java -> /Users/renyu/Documents/create_project/链数中建一局_1753324841/crcl-open/crcl-open
2025-07-24 11:14:08 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔧 策略2路径规范化:
2025-07-24 11:14:08 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    原始路径: /Users/renyu/Documents/create_project/链数中建一局_1753324841/crcl-open/crcl-open/src/main/java
2025-07-24 11:14:08 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    规范化后: /Users/renyu/Documents/create_project/链数中建一局_1753324841/crcl-open/crcl-open
2025-07-24 11:14:08 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -  调用volcengine大模型生成代码...
2025-07-24 11:14:08 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 开始代码生成...
2025-07-24 11:14:08 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎨 使用模板+AI混合模式生成代码
2025-07-24 11:14:08 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - 🎨 开始增强版代码生成: UnitLimitByCompanyIdExport
2025-07-24 11:14:08 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - 🔍 检测到服务调用: zqyl-user-center-service服务 -> /queryCompanyUnitList接口获取组织单元详细信息复用listUnitLimitByCompanyId
2025-07-24 11:14:08 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - 🔍 检测到服务调用: zqyl-user-center-service服务 -> /queryCompanyUnitList
2025-07-24 11:14:08 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - 🔍 检测到服务调用: zqyl-user-center-service服务 -> /queryCompanyUnitList接口获取组织单元详细信息复用listUnitLimitByCompanyId
2025-07-24 11:14:08 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - 🔍 检测到服务调用: zqyl-user-center-service服务 -> /queryCompanyUnitList
2025-07-24 11:14:08 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - 🔍 检测到服务调用: -service -> /queryCompanyUnitList接口获取组织单元详细信息复用listUnitLimitByCompanyId接口的查询逻辑
2025-07-24 11:14:08 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - 🔍 检测到服务调用: -service -> /queryCompanyUnitList接口获取组织单元详细信息
2025-07-24 11:14:08 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - 🔍 检测到Excel导出要求
2025-07-24 11:14:08 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - 🔍 解析到表结构: t_cust_multiorg_unit (14列)
2025-07-24 11:14:08 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - 🤖 使用智能文件复用和专门化提示词模板增强代码...
2025-07-24 11:14:08 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 设置设计文档内容，长度: 7416
2025-07-24 11:14:08 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO - 🔍 分析项目结构: /Users/renyu/Documents/create_project/链数中建一局_1753324841/crcl-open/crcl-open
2025-07-24 11:14:08 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO - ✅ 项目结构分析完成
2025-07-24 11:14:08 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO -    Controllers: 49
2025-07-24 11:14:08 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO -    Application Services: 36
2025-07-24 11:14:08 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO -    Domain Services: 37
2025-07-24 11:14:08 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO -    Mappers: 46
2025-07-24 11:14:08 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO -    Feign Clients: 1
2025-07-24 11:14:08 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO -    XML Files: 108
2025-07-24 11:14:08 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO - 🤔 决策文件复用策略: UnitLimitByCompanyIdExport
2025-07-24 11:14:08 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO - 📋 文件复用策略决策完成:
2025-07-24 11:14:08 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO -    controller: create_new - 未找到合适的Controller (最高分数: 0)
2025-07-24 11:14:08 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO -    application_service: create_new - 需要Feign调用，创建新的Application Service
2025-07-24 11:14:08 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO -    domain_service: create_new - 未找到合适的Domain Service，需要创建
2025-07-24 11:14:08 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO -    mapper: create_new - 未找到合适的Mapper，需要创建
2025-07-24 11:14:08 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO -    feign_client: create_new - 未找到合适的Feign Client，需要创建
2025-07-24 11:14:08 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO -    xml_file: create_new - 需要创建新的XML文件
2025-07-24 11:14:08 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - 📋 智能文件复用策略:
2025-07-24 11:14:08 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO -    controller: create_new - 未找到合适的Controller (最高分数: 0)
2025-07-24 11:14:08 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO -    application_service: create_new - 需要Feign调用，创建新的Application Service
2025-07-24 11:14:08 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO -    domain_service: create_new - 未找到合适的Domain Service，需要创建
2025-07-24 11:14:08 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO -    mapper: create_new - 未找到合适的Mapper，需要创建
2025-07-24 11:14:08 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO -    feign_client: create_new - 未找到合适的Feign Client，需要创建
2025-07-24 11:14:08 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO -    xml_file: create_new - 需要创建新的XML文件
2025-07-24 11:14:08 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO - 🔗 生成完整调用链: UnitLimitByCompanyIdExport
2025-07-24 11:14:08 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO - 🔍 找到表结构: T_CUST_MULTIORG_UNIT
2025-07-24 11:14:08 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO - ✅ 解析到 14 个字段
2025-07-24 11:14:08 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO - ✅ 调用链代码生成完成，包含 9 个组件
2025-07-24 11:14:08 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 智能文件复用生成了 9 个组件
2025-07-24 11:14:08 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - 📝 需要创建 9 个新文件
2025-07-24 11:14:08 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI生成成功，生成代码类型: ['controller_method', 'application_service', 'domain_service', 'domain_service_impl', 'request_dto', 'response_dto', 'mapper', 'feign_client', 'xml_mapping']
2025-07-24 11:14:08 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 开始写入生成的代码文件...
2025-07-24 11:14:08 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔧 统一类名基础: UnitLimitByCompanyIdExport
2025-07-24 11:14:08 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ controller_method 类名: UnitLimitByCompanyIdExportController
2025-07-24 11:14:08 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ application_service 类名: UnitLimitByCompanyIdExportApplication
2025-07-24 11:14:08 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ domain_service_impl 类名: UnitLimitByCompanyIdExportServiceImpl
2025-07-24 11:14:08 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ request_dto 类名: UnitLimitByCompanyIdExportReq
2025-07-24 11:14:08 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ response_dto 类名: UnitLimitByCompanyIdExportResp
2025-07-24 11:14:08 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 标准化后的代码类型: ['controller_method', 'application_service', 'domain_service', 'domain_service_impl', 'request_dto', 'response_dto', 'mapper', 'feign_client', 'xml_mapping']
2025-07-24 11:14:08 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🤖 调用volcengine判断Java文件输出路径...
2025-07-24 11:14:31 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM路径判断成功，配置了 9 个Java文件路径
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 controller_method: UnitLimitByCompanyIdExportController.java
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 application_service: UnitLimitByCompanyIdExportApplication.java
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 domain_service: UnitLimitByCompanyIdExportService.java
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 domain_service_impl: UnitLimitByCompanyIdExportServiceImpl.java
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 request_dto: UnitLimitByCompanyIdExportReq.java
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 response_dto: UnitLimitByCompanyIdExportResp.java
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 mapper: UnitLimitByCompanyIdExportMapper.java
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 feign_client: UnitLimitByCompanyIdExportFeignClient.java
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 xml_mapping: UnitLimitByCompanyIdExportMapper.xml
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 代码内容 (controller_method):

package com.yljr.crcl.interfaces;

import com.yljr.crcl.interfaces.dto.UnitLimitByCompanyIdExportReq;
import com.yljr.crcl.interfaces.dto.UnitLimitByCompanyIdExportResp;
import com.yljr.common.dto.Response;
import org.springframework.web.bind.annotation.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.validation.annotation.Validated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import io.swagger.annotations.ApiOperation;

import javax.validation.Valid;

/**
 * UnitLimitByCompanyIdExport Controller
 * 复用listUnitLimitByCompanyId接口的查询逻辑，将结果导出为Excel格式，文件生成在本地目录，采用本地链接形式返回路径，文件类型为Excel列表，文件类型：xlsx，列表头列内容：组织单元名称、额度名称、额度类型、已分配额度（元）、已用额度（元）、可用额度（元），需要调用zqyl-user-center-service服务的/queryCompanyUnitList接口获取组织单元详细信息
 */
@Validated
@RestController
@RequestMapping("/api/unitLimitByCompanyIdExport")
public class UnitLimitByCompanyIdExportController {

    private final Logger logger = LoggerFactory.getLogger(this.getClass());
    
    @Autowired
    private UnitLimitByCompanyIdExportApplication unitLimitByCompanyIdExportApplication;

    /**
     * 复用listUnitLimitByCompanyId接口的查询逻辑，将结果导出为Excel格式，文件生成在本地目录，采用本地链接形式返回路径，文件类型为Excel列表，文件类型：xlsx，列表头列内容：组织单元名称、额度名称、额度类型、已分配额度（元）、已用额度（元）、可用额度（元），需要调用zqyl-user-center-service服务的/queryCompanyUnitList接口获取组织单元详细信息
     */
    @PostMapping("/unitLimitByCompanyIdExport")
    @ApiOperation(value = "复用listUnitLimitByCompanyId接口的查询逻辑，将结果导出为Excel格式，文件生成在本地目录，采用本地链接形式返回路径，文件类型为Excel列表，文件类型：xlsx，列表头列内容：组织单元名称、额度名称、额度类型、已分配额度（元）、已用额度（元）、可用额度（元），需要调用zqyl-user-center-service服务的/queryCompanyUnitList接口获取组织单元详细信息")
    public Response<UnitLimitByCompanyIdExportResp> unitLimitByCompanyIdExport(@RequestBody @Valid UnitLimitByCompanyIdExportReq request) {
        try {
            logger.info("开始执行unitLimitByCompanyIdExport，请求参数: {}", request);
            
            return unitLimitByCompanyIdExportApplication.unitLimitByCompanyIdExport(request);
            
        } catch (Exception e) {
            logger.error("执行unitLimitByCompanyIdExport失败", e);
            return Response.error("执行失败: " + e.getMessage());
        }
    }
}
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: /Users/renyu/Documents/create_project/链数中建一局_1753324841/crcl-open/crcl-open/src/main/java/com/yljr/crcl/interfaces/UnitLimitByCompanyIdExportController.java
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: /Users/renyu/Documents/create_project/链数中建一局_1753324841/crcl-open/crcl-open/src/main/java/com/yljr/crcl/interfaces/UnitLimitByCompanyIdExportController.java
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 代码内容 (application_service):

package com.yljr.crcl.application.service;

import com.yljr.crcl.interfaces.dto.UnitLimitByCompanyIdExportReq;
import com.yljr.crcl.interfaces.dto.UnitLimitByCompanyIdExportResp;
import org.springframework.stereotype.Service;
import org.springframework.beans.factory.annotation.Autowired;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * UnitLimitByCompanyIdExport Application Service
 * 复用listUnitLimitByCompanyId接口的查询逻辑，将结果导出为Excel格式，文件生成在本地目录，采用本地链接形式返回路径，文件类型为Excel列表，文件类型：xlsx，列表头列内容：组织单元名称、额度名称、额度类型、已分配额度（元）、已用额度（元）、可用额度（元），需要调用zqyl-user-center-service服务的/queryCompanyUnitList接口获取组织单元详细信息
 */
@Service
public class UnitLimitByCompanyIdExportApplication {

    private static final Logger logger = LoggerFactory.getLogger(UnitLimitByCompanyIdExportApplication.class);
    
    @Autowired
    private UnitLimitByCompanyIdExportFeignClient unitlimitbycompanyidexportFeignClient;

    /**
     * 复用listUnitLimitByCompanyId接口的查询逻辑，将结果导出为Excel格式，文件生成在本地目录，采用本地链接形式返回路径，文件类型为Excel列表，文件类型：xlsx，列表头列内容：组织单元名称、额度名称、额度类型、已分配额度（元）、已用额度（元）、可用额度（元），需要调用zqyl-user-center-service服务的/queryCompanyUnitList接口获取组织单元详细信息
     */
    public UnitLimitByCompanyIdExportResp UnitLimitByCompanyIdExport(UnitLimitByCompanyIdExportReq request) {
        logger.info("Application Service执行UnitLimitByCompanyIdExport，参数: {}", request);
        
        try {
            return unitlimitbycompanyidexportFeignClient.UnitLimitByCompanyIdExport(request);
        } catch (Exception e) {
            logger.error("Application Service执行UnitLimitByCompanyIdExport失败", e);
            throw new RuntimeException("执行失败: " + e.getMessage(), e);
        }
    }
}
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: /Users/renyu/Documents/create_project/链数中建一局_1753324841/crcl-open/crcl-open/src/main/java/com/yljr/crcl/application/service/UnitLimitByCompanyIdExportApplication.java
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: /Users/renyu/Documents/create_project/链数中建一局_1753324841/crcl-open/crcl-open/src/main/java/com/yljr/crcl/application/service/UnitLimitByCompanyIdExportApplication.java
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 代码内容 (domain_service):
package com.yljr.crcl.domain.service;

import com.yljr.crcl.interfaces.dto.UnitLimitByCompanyIdExportReq;
import com.yljr.crcl.interfaces.dto.UnitLimitByCompanyIdExportResp;

/**
 * UnitLimitByCompanyIdExport Domain Service Interface
 * 复用listUnitLimitByCompanyId接口的查询逻辑，将结果导出为Excel格式，文件生成在本地目录，采用本地链接形式返回路径，文件类型为Excel列表，文件类型：xlsx，列表头列内容：组织单元名称、额度名称、额度类型、已分配额度（元）、已用额度（元）、可用额度（元），需要调用zqyl-user-center-service服务的/queryCompanyUnitList接口获取组织单元详细信息
 */
public interface UnitLimitByCompanyIdExportService {

    /**
     * 复用listUnitLimitByCompanyId接口的查询逻辑，将结果导出为Excel格式，文件生成在本地目录，采用本地链接形式返回路径，文件类型为Excel列表，文件类型：xlsx，列表头列内容：组织单元名称、额度名称、额度类型、已分配额度（元）、已用额度（元）、可用额度（元），需要调用zqyl-user-center-service服务的/queryCompanyUnitList接口获取组织单元详细信息
     */
    UnitLimitByCompanyIdExportResp unitLimitByCompanyIdExport(UnitLimitByCompanyIdExportReq request);
}
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: /Users/renyu/Documents/create_project/链数中建一局_1753324841/crcl-open/crcl-open/src/main/java/com/yljr/crcl/domain/service/UnitLimitByCompanyIdExportService.java
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: /Users/renyu/Documents/create_project/链数中建一局_1753324841/crcl-open/crcl-open/src/main/java/com/yljr/crcl/domain/service/UnitLimitByCompanyIdExportService.java
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 代码内容 (domain_service_impl):
package com.yljr.crcl.domain.service.impl;

import com.yljr.crcl.domain.service.UnitLimitByCompanyIdExportService;
import com.yljr.crcl.interfaces.dto.UnitLimitByCompanyIdExportReq;
import com.yljr.crcl.interfaces.dto.UnitLimitByCompanyIdExportResp;
import com.yljr.crcl.domain.entity.UnitLimitByCompanyIdExport;
import com.yljr.crcl.domain.mapper.UnitLimitByCompanyIdExportMapper;
import org.springframework.stereotype.Service;
import org.springframework.beans.factory.annotation.Autowired;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import java.util.List;

/**
 * UnitLimitByCompanyIdExport Domain Service Implementation
 * 复用listUnitLimitByCompanyId接口的查询逻辑，将结果导出为Excel格式，文件生成在本地目录，采用本地链接形式返回路径，文件类型为Excel列表，文件类型：xlsx，列表头列内容：组织单元名称、额度名称、额度类型、已分配额度（元）、已用额度（元）、可用额度（元），需要调用zqyl-user-center-service服务的/queryCompanyUnitList接口获取组织单元详细信息
 */
@Service
public class UnitLimitByCompanyIdExportServiceImpl implements UnitLimitByCompanyIdExportService {

    private static final Logger logger = LoggerFactory.getLogger(UnitLimitByCompanyIdExportServiceImpl.class);
    
    @Autowired
    private UnitLimitByCompanyIdExportMapper unitlimitbycompanyidexportMapper;

    /**
     * 复用listUnitLimitByCompanyId接口的查询逻辑，将结果导出为Excel格式，文件生成在本地目录，采用本地链接形式返回路径，文件类型为Excel列表，文件类型：xlsx，列表头列内容：组织单元名称、额度名称、额度类型、已分配额度（元）、已用额度（元）、可用额度（元），需要调用zqyl-user-center-service服务的/queryCompanyUnitList接口获取组织单元详细信息
     */
    @Override
    public UnitLimitByCompanyIdExportResp unitLimitByCompanyIdExport(UnitLimitByCompanyIdExportReq request) {
        logger.info("Domain Service执行UnitLimitByCompanyIdExport，参数: {}", request);
        
        try {
        // 调用Mapper查询数据
        List<UnitLimitByCompanyIdExport> dataList = unitlimitbycompanyidexportMapper.selectUnitLimitByCompanyIdExportList(request);
        
        // 构建响应
        UnitLimitByCompanyIdExportResp response = new UnitLimitByCompanyIdExportResp();
        response.setDataList(dataList);
        response.setTotalCount(dataList.size());
        
        return response;
        } catch (Exception e) {
            logger.error("Domain Service执行UnitLimitByCompanyIdExport失败", e);
            throw new RuntimeException("执行失败: " + e.getMessage(), e);
        }
    }
}
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: /Users/renyu/Documents/create_project/链数中建一局_1753324841/crcl-open/crcl-open/src/main/java/com/yljr/crcl/domain/service/impl/UnitLimitByCompanyIdExportServiceImpl.java
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: /Users/renyu/Documents/create_project/链数中建一局_1753324841/crcl-open/crcl-open/src/main/java/com/yljr/crcl/domain/service/impl/UnitLimitByCompanyIdExportServiceImpl.java
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 代码内容 (request_dto):

package com.yljr.crcl.interfaces.dto;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Date;
import java.math.BigDecimal;

/**
 * UnitLimitByCompanyIdExport 请求DTO
 * 复用listUnitLimitByCompanyId接口的查询逻辑，将结果导出为Excel格式，文件生成在本地目录，采用本地链接形式返回路径，文件类型为Excel列表，文件类型：xlsx，列表头列内容：组织单元名称、额度名称、额度类型、已分配额度（元）、已用额度（元）、可用额度（元），需要调用zqyl-user-center-service服务的/queryCompanyUnitList接口获取组织单元详细信息
 */
@ApiModel(value = "UnitLimitByCompanyIdExportReq", description = "复用listUnitLimitByCompanyId接口的查询逻辑，将结果导出为Excel格式，文件生成在本地目录，采用本地链接形式返回路径，文件类型为Excel列表，文件类型：xlsx，列表头列内容：组织单元名称、额度名称、额度类型、已分配额度（元）、已用额度（元）、可用额度（元），需要调用zqyl-user-center-service服务的/queryCompanyUnitList接口获取组织单元详细信息")
public class UnitLimitByCompanyIdExportReq {

    /**
     * 当前登录企业id(必填)
     */
    @ApiModelProperty(value = "当前登录企业id(必填)")
    private String gwCompanyId;
    /**
     * 组织单元名称(模糊搜索)(可选)
     */
    @ApiModelProperty(value = "组织单元名称(模糊搜索)(可选)")
    private String unitName;
    /**
     * 额度名称(模糊搜索)(可选)
     */
    @ApiModelProperty(value = "额度名称(模糊搜索)(可选)")
    private String limitSource;
    /**
     * 10：云信额度，80：链数额度(默认)(可选)
     */
    @ApiModelProperty(value = "10：云信额度，80：链数额度(默认)(可选)")
    private String bizType;
    /**
     * 页码(必填)
     */
    @ApiModelProperty(value = "页码(必填)")
    private String page;
    /**
     * 每页记录数(必填)
     */
    @ApiModelProperty(value = "每页记录数(必填)")
    private String pageRow;

    public String getGwCompanyId() {
        return gwCompanyId;
    }

    public void setGwCompanyId(String gwCompanyId) {
        this.gwCompanyId = gwCompanyId;
    }
    public String getUnitName() {
        return unitName;
    }

    public void setUnitName(String unitName) {
        this.unitName = unitName;
    }
    public String getLimitSource() {
        return limitSource;
    }

    public void setLimitSource(String limitSource) {
        this.limitSource = limitSource;
    }
    public String getBizType() {
        return bizType;
    }

    public void setBizType(String bizType) {
        this.bizType = bizType;
    }
    public String getPage() {
        return page;
    }

    public void setPage(String page) {
        this.page = page;
    }
    public String getPageRow() {
        return pageRow;
    }

    public void setPageRow(String pageRow) {
        this.pageRow = pageRow;
    }

    @Override
    public String toString() {
        return "UnitLimitByCompanyIdExportReq{" +
                "gwCompanyId=" + gwCompanyId + ", " +
                "unitName=" + unitName + ", " +
                "limitSource=" + limitSource + ", " +
                "bizType=" + bizType + ", " +
                "page=" + page + ", " +
                "pageRow=" + pageRow +
                "};";
    }
}
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: /Users/renyu/Documents/create_project/链数中建一局_1753324841/crcl-open/crcl-open/src/main/java/com/yljr/crcl/interfaces/dto/UnitLimitByCompanyIdExportReq.java
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: /Users/renyu/Documents/create_project/链数中建一局_1753324841/crcl-open/crcl-open/src/main/java/com/yljr/crcl/interfaces/dto/UnitLimitByCompanyIdExportReq.java
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 代码内容 (response_dto):

package com.yljr.crcl.interfaces.dto;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.List;
import java.util.Date;
import java.math.BigDecimal;

/**
 * UnitLimitByCompanyIdExport 响应DTO
 * 复用listUnitLimitByCompanyId接口的查询逻辑，将结果导出为Excel格式，文件生成在本地目录，采用本地链接形式返回路径，文件类型为Excel列表，文件类型：xlsx，列表头列内容：组织单元名称、额度名称、额度类型、已分配额度（元）、已用额度（元）、可用额度（元），需要调用zqyl-user-center-service服务的/queryCompanyUnitList接口获取组织单元详细信息
 */
@ApiModel(value = "UnitLimitByCompanyIdExportResp", description = "复用listUnitLimitByCompanyId接口的查询逻辑，将结果导出为Excel格式，文件生成在本地目录，采用本地链接形式返回路径，文件类型为Excel列表，文件类型：xlsx，列表头列内容：组织单元名称、额度名称、额度类型、已分配额度（元）、已用额度（元）、可用额度（元），需要调用zqyl-user-center-service服务的/queryCompanyUnitList接口获取组织单元详细信息")
public class UnitLimitByCompanyIdExportResp {

    /**
     * 0文件生成失败，1文件生成成功
     */
    @ApiModelProperty(value = "0文件生成失败，1文件生成成功")
    private String flag;
    /**
     * flag=0 提示内容
     */
    @ApiModelProperty(value = "flag=0 提示内容")
    private String msg;
    /**
     * flag=1 文件下载地址
     */
    @ApiModelProperty(value = "flag=1 文件下载地址")
    private String data;

    public String getFlag() {
        return flag;
    }

    public void setFlag(String flag) {
        this.flag = flag;
    }
    public String getMsg() {
        return msg;
    }

    public void setMsg(String msg) {
        this.msg = msg;
    }
    public String getData() {
        return data;
    }

    public void setData(String data) {
        this.data = data;
    }

    @Override
    public String toString() {
        return "UnitLimitByCompanyIdExportResp{" +
                "flag=" + flag + ", " +
                "msg=" + msg + ", " +
                "data=" + data +
                "};";
    }
}
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: /Users/renyu/Documents/create_project/链数中建一局_1753324841/crcl-open/crcl-open/src/main/java/com/yljr/crcl/interfaces/dto/UnitLimitByCompanyIdExportResp.java
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: /Users/renyu/Documents/create_project/链数中建一局_1753324841/crcl-open/crcl-open/src/main/java/com/yljr/crcl/interfaces/dto/UnitLimitByCompanyIdExportResp.java
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 代码内容 (mapper):

package com.yljr.crcl.domain.mapper;

import com.yljr.crcl.interfaces.dto.UnitLimitByCompanyIdExportReq;
import com.yljr.crcl.domain.entity.UnitLimitByCompanyIdExport;
import org.apache.ibatis.annotations.Mapper;
import org.apache.ibatis.annotations.Param;
import java.util.List;

/**
 * UnitLimitByCompanyIdExport Mapper接口
 * 复用listUnitLimitByCompanyId接口的查询逻辑，将结果导出为Excel格式，文件生成在本地目录，采用本地链接形式返回路径，文件类型为Excel列表，文件类型：xlsx，列表头列内容：组织单元名称、额度名称、额度类型、已分配额度（元）、已用额度（元）、可用额度（元），需要调用zqyl-user-center-service服务的/queryCompanyUnitList接口获取组织单元详细信息
 */
@Mapper
public interface UnitLimitByCompanyIdExportMapper {

    /**
     * 根据条件查询UnitLimitByCompanyIdExport列表
     */
    List<UnitLimitByCompanyIdExport> selectUnitLimitByCompanyIdExportList(@Param("condition") UnitLimitByCompanyIdExportReq condition);

    /**
     * 根据主键查询UnitLimitByCompanyIdExport
     */
    UnitLimitByCompanyIdExport selectByPrimaryKey(@Param("id") Long id);

    /**
     * 新增UnitLimitByCompanyIdExport记录
     */
    int insert(UnitLimitByCompanyIdExport record);

    /**
     * 更新UnitLimitByCompanyIdExport记录
     */
    int updateByPrimaryKey(UnitLimitByCompanyIdExport record);

    /**
     * 删除UnitLimitByCompanyIdExport记录
     */
    int deleteByPrimaryKey(@Param("id") Long id);
}
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: /Users/renyu/Documents/create_project/链数中建一局_1753324841/crcl-open/crcl-open/src/main/java/com/yljr/crcl/domain/mapper/UnitLimitByCompanyIdExportMapper.java
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: /Users/renyu/Documents/create_project/链数中建一局_1753324841/crcl-open/crcl-open/src/main/java/com/yljr/crcl/domain/mapper/UnitLimitByCompanyIdExportMapper.java
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 代码内容 (feign_client):

package com.yljr.crcl.application.feign;

import com.yljr.crcl.interfaces.dto.UnitLimitByCompanyIdExportReq;
import com.yljr.crcl.interfaces.dto.UnitLimitByCompanyIdExportResp;
import com.yljr.common.dto.ResponseInfo;
import org.springframework.cloud.openfeign.FeignClient;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.http.MediaType;

/**
 * UnitLimitByCompanyIdExport Feign接口
 * 复用listUnitLimitByCompanyId接口的查询逻辑，将结果导出为Excel格式，文件生成在本地目录，采用本地链接形式返回路径，文件类型为Excel列表，文件类型：xlsx，列表头列内容：组织单元名称、额度名称、额度类型、已分配额度（元）、已用额度（元）、可用额度（元），需要调用zqyl-user-center-service服务的/queryCompanyUnitList接口获取组织单元详细信息
 */
@FeignClient(name = "zqyl-user-auth", path = "/userCenter/server")
public interface UnitLimitByCompanyIdExportFeignClient {

    /**
     * 复用listUnitLimitByCompanyId接口的查询逻辑，将结果导出为Excel格式，文件生成在本地目录，采用本地链接形式返回路径，文件类型为Excel列表，文件类型：xlsx，列表头列内容：组织单元名称、额度名称、额度类型、已分配额度（元）、已用额度（元）、可用额度（元），需要调用zqyl-user-center-service服务的/queryCompanyUnitList接口获取组织单元详细信息
     */
    @PostMapping(value = "/queryCompanyInfo", consumes = MediaType.APPLICATION_JSON_UTF8_VALUE)
    ResponseInfo<UnitLimitByCompanyIdExportResp> UnitLimitByCompanyIdExport(@RequestBody UnitLimitByCompanyIdExportReq request);
}
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: /Users/renyu/Documents/create_project/链数中建一局_1753324841/crcl-open/crcl-open/src/main/java/com/yljr/crcl/application/feign/UnitLimitByCompanyIdExportFeignClient.java
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: /Users/renyu/Documents/create_project/链数中建一局_1753324841/crcl-open/crcl-open/src/main/java/com/yljr/crcl/application/feign/UnitLimitByCompanyIdExportFeignClient.java
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 代码内容 (xml_mapping):
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yljr.crcl.domain.mapper.UnitLimitByCompanyIdExportMapper">

    <resultMap id="BaseResultMap" type="com.yljr.crcl.domain.entity.UnitLimitByCompanyIdExport">
        <id column="id" jdbcType="BIGINT" property="id" />
        <result column="company_id" jdbcType="BIGINT" property="companyId" />
        <result column="mutilorg_id" jdbcType="BIGINT" property="mutilorgId" />
        <result column="unit_code" jdbcType="VARCHAR" property="unitCode" />
        <result column="unit_name" jdbcType="VARCHAR" property="unitName" />
        <result column="remark" jdbcType="VARCHAR" property="remark" />
        <result column="platform_type" jdbcType="INTEGER" property="platformType" />
        <result column="status" jdbcType="INTEGER" property="status" />
        <result column="create_id" jdbcType="BIGINT" property="createId" />
        <result column="oper_user_name" jdbcType="VARCHAR" property="operUserName" />
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
        <result column="modify_id" jdbcType="BIGINT" property="modifyId" />
        <result column="modify_user_name" jdbcType="VARCHAR" property="modifyUserName" />
        <result column="modify_time" jdbcType="TIMESTAMP" property="modifyTime" />
    </resultMap>

    <sql id="Base_Column_List">
        id, company_id, mutilorg_id, unit_code, unit_name, remark, platform_type, status, create_id, oper_user_name,
        create_time, modify_id, modify_user_name, modify_time
    </sql>

    <select id="selectUnitLimitByCompanyIdExportList" parameterType="com.yljr.crcl.interfaces.dto.UnitLimitByCompanyIdExportReq" 
            resultMap="BaseResultMap">
        SELECT 
        <include refid="Base_Column_List" />
        FROM T_CUST_MULTIORG_UNIT
        WHERE 1=1
        <if test="condition.unitName != null and condition.unitName != ''">
            AND unit_name LIKE CONCAT('%', #{condition.unitName}, '%')
        </if>
        <if test="condition.status != null">
            AND status = #{condition.status}
        </if>
        ORDER BY CREATE_TIME DESC
    </select>

    <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
        SELECT 
        <include refid="Base_Column_List" />
        FROM T_CUST_MULTIORG_UNIT
        WHERE ID = #{id,jdbcType=BIGINT}
    </select>

    <insert id="insert" parameterType="com.yljr.crcl.domain.entity.UnitLimitByCompanyIdExport">
        INSERT INTO T_CUST_MULTIORG_UNIT (company_id, mutilorg_id, unit_code, unit_name, remark, platform_type, status, create_id, oper_user_name, create_time, modify_id, modify_user_name, modify_time)
        VALUES (#{companyId}, #{mutilorgId}, #{unitCode}, #{unitName}, #{remark}, #{platformType}, #{status}, #{createId}, #{operUserName}, #{createTime}, #{modifyId}, #{modifyUserName}, #{modifyTime})
    </insert>

    <update id="updateByPrimaryKey" parameterType="com.yljr.crcl.domain.entity.UnitLimitByCompanyIdExport">
        UPDATE T_CUST_MULTIORG_UNIT
        SET company_id = #{companyId},
            mutilorg_id = #{mutilorgId},
            unit_code = #{unitCode},
            unit_name = #{unitName},
            remark = #{remark},
            platform_type = #{platformType},
            status = #{status},
            create_id = #{createId},
            oper_user_name = #{operUserName},
            modify_id = #{modifyId},
            modify_user_name = #{modifyUserName},
            modify_time = #{modifyTime}
        WHERE ID = #{id}
    </update>

    <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
        DELETE FROM T_CUST_MULTIORG_UNIT
        WHERE ID = #{id,jdbcType=BIGINT}
    </delete>

</mapper>
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: /Users/renyu/Documents/create_project/链数中建一局_1753324841/crcl-open/crcl-open/src/main/resources/mapper/UnitLimitByCompanyIdExportMapper.xml
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: /Users/renyu/Documents/create_project/链数中建一局_1753324841/crcl-open/crcl-open/src/main/resources/mapper/UnitLimitByCompanyIdExportMapper.xml
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📊 代码生成完成，共写入 9 个文件到项目中
2025-07-24 11:14:31 - src.corder_integration.utils.backup_cleaner - INFO - 🧹 开始清理项目备份: /Users/renyu/Documents/create_project/链数中建一局_1753324841/crcl-open/crcl-open
2025-07-24 11:14:31 - src.corder_integration.utils.backup_cleaner - INFO - 🎉 备份清理完成: 删除 0 目录, 0 文件
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🗑️ 已清理项目分析缓存，确保下次分析获取最新状态
2025-07-24 11:14:31 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_010 状态更新为 completed
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 任务 task_010 执行成功
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 第1轮执行完成，处理了 6 个任务
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第2轮任务检查...
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第2轮没有可执行的智能编码任务
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 6 个任务，共2轮
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 6 个任务
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-24 11:14:31 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: config.yaml
2025-07-24 11:14:31 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250724094351-pnjf4(编码智能体专用)
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-24 11:14:31 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-24 11:14:31 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-24 11:14:31 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 增强版模板+AI生成器初始化完成
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 增强版模板+AI代码生成器初始化完成
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 从工作流状态获取设计文档 (7416 字符)
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🏷️ 智能编码节点获取项目标识: 1231000003
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 智能编码节点重试，当前重试次数: 1
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🏷️ 过滤项目任务标识: 1231000003
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-24 11:14:31 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-24 11:14:31 - src.corder_integration.langgraph.workflow_orchestrator - INFO - ✅ 所有编码相关任务已完成，进入下一阶段
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.code_review_node - INFO - 🚀 代码审查节点开始执行...
2025-07-24 11:14:31 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.code_review_node - INFO - 🏷️ 代码审查节点获取项目标识: 1231000003
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.code_review_node - INFO - 🎯 code_review_node 开始执行任务...
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.code_review_node - INFO - 🏷️ 过滤项目任务标识: 1231000003
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.code_review_node - INFO - ℹ️ 没有可执行的代码审查任务
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.code_review_node - INFO - 🔍 执行传统代码审查（向后兼容）
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.code_review_node - INFO - ✅ 代码审查节点完成，处理了 0 个任务
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🚀 单元测试节点开始执行...
2025-07-24 11:14:31 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 单元测试节点获取项目标识: 1231000003
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🎯 unit_testing_node 开始执行任务...
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 过滤项目任务标识: 1231000003
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 📋 找到 1 个可执行任务
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🚀 开始执行任务: task_011 (integration_test)
2025-07-24 11:14:31 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_011 已被 unit_testing_node 领取
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🧪 执行集成测试任务: task_011
2025-07-24 11:14:31 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_011 状态更新为 completed
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ✅ 任务 task_011 执行成功
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ✅ 单元测试任务执行完成，共处理 1 个任务
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ✅ 单元测试节点完成，处理了 1 个任务
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🚀 单元测试节点开始执行...
2025-07-24 11:14:31 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 单元测试节点获取项目标识: 1231000003
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🎯 unit_testing_node 开始执行任务...
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 过滤项目任务标识: 1231000003
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ℹ️ 没有可执行的单元测试任务
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ✅ 单元测试节点完成，处理了 0 个任务
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🚀 单元测试节点开始执行...
2025-07-24 11:14:31 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 单元测试节点获取项目标识: 1231000003
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🎯 unit_testing_node 开始执行任务...
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 过滤项目任务标识: 1231000003
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ℹ️ 没有可执行的单元测试任务
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ✅ 单元测试节点完成，处理了 0 个任务
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🚀 单元测试节点开始执行...
2025-07-24 11:14:31 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 单元测试节点获取项目标识: 1231000003
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🎯 unit_testing_node 开始执行任务...
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 过滤项目任务标识: 1231000003
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ℹ️ 没有可执行的单元测试任务
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ✅ 单元测试节点完成，处理了 0 个任务
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🚀 单元测试节点开始执行...
2025-07-24 11:14:31 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 单元测试节点获取项目标识: 1231000003
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🎯 unit_testing_node 开始执行任务...
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 过滤项目任务标识: 1231000003
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ℹ️ 没有可执行的单元测试任务
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ✅ 单元测试节点完成，处理了 0 个任务
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🚀 单元测试节点开始执行...
2025-07-24 11:14:31 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 单元测试节点获取项目标识: 1231000003
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🎯 unit_testing_node 开始执行任务...
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 过滤项目任务标识: 1231000003
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ℹ️ 没有可执行的单元测试任务
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ✅ 单元测试节点完成，处理了 0 个任务
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🚀 单元测试节点开始执行...
2025-07-24 11:14:31 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 单元测试节点获取项目标识: 1231000003
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🎯 unit_testing_node 开始执行任务...
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 过滤项目任务标识: 1231000003
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ℹ️ 没有可执行的单元测试任务
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ✅ 单元测试节点完成，处理了 0 个任务
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🚀 单元测试节点开始执行...
2025-07-24 11:14:31 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 单元测试节点获取项目标识: 1231000003
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🎯 unit_testing_node 开始执行任务...
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 过滤项目任务标识: 1231000003
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ℹ️ 没有可执行的单元测试任务
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ✅ 单元测试节点完成，处理了 0 个任务
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🚀 单元测试节点开始执行...
2025-07-24 11:14:31 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 单元测试节点获取项目标识: 1231000003
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🎯 unit_testing_node 开始执行任务...
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 过滤项目任务标识: 1231000003
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ℹ️ 没有可执行的单元测试任务
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ✅ 单元测试节点完成，处理了 0 个任务
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🚀 单元测试节点开始执行...
2025-07-24 11:14:31 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 单元测试节点获取项目标识: 1231000003
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🎯 unit_testing_node 开始执行任务...
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 过滤项目任务标识: 1231000003
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ℹ️ 没有可执行的单元测试任务
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ✅ 单元测试节点完成，处理了 0 个任务
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🚀 单元测试节点开始执行...
2025-07-24 11:14:31 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 单元测试节点获取项目标识: 1231000003
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🎯 unit_testing_node 开始执行任务...
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 过滤项目任务标识: 1231000003
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ℹ️ 没有可执行的单元测试任务
2025-07-24 11:14:31 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ✅ 单元测试节点完成，处理了 0 个任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🚀 单元测试节点开始执行...
2025-07-24 11:14:32 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 单元测试节点获取项目标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🎯 unit_testing_node 开始执行任务...
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 过滤项目任务标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ℹ️ 没有可执行的单元测试任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ✅ 单元测试节点完成，处理了 0 个任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🚀 单元测试节点开始执行...
2025-07-24 11:14:32 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 单元测试节点获取项目标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🎯 unit_testing_node 开始执行任务...
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 过滤项目任务标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ℹ️ 没有可执行的单元测试任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ✅ 单元测试节点完成，处理了 0 个任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🚀 单元测试节点开始执行...
2025-07-24 11:14:32 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 单元测试节点获取项目标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🎯 unit_testing_node 开始执行任务...
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 过滤项目任务标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ℹ️ 没有可执行的单元测试任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ✅ 单元测试节点完成，处理了 0 个任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🚀 单元测试节点开始执行...
2025-07-24 11:14:32 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 单元测试节点获取项目标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🎯 unit_testing_node 开始执行任务...
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 过滤项目任务标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ℹ️ 没有可执行的单元测试任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ✅ 单元测试节点完成，处理了 0 个任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🚀 单元测试节点开始执行...
2025-07-24 11:14:32 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 单元测试节点获取项目标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🎯 unit_testing_node 开始执行任务...
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 过滤项目任务标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ℹ️ 没有可执行的单元测试任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ✅ 单元测试节点完成，处理了 0 个任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🚀 单元测试节点开始执行...
2025-07-24 11:14:32 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 单元测试节点获取项目标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🎯 unit_testing_node 开始执行任务...
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 过滤项目任务标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ℹ️ 没有可执行的单元测试任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ✅ 单元测试节点完成，处理了 0 个任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🚀 单元测试节点开始执行...
2025-07-24 11:14:32 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 单元测试节点获取项目标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🎯 unit_testing_node 开始执行任务...
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 过滤项目任务标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ℹ️ 没有可执行的单元测试任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ✅ 单元测试节点完成，处理了 0 个任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🚀 单元测试节点开始执行...
2025-07-24 11:14:32 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 单元测试节点获取项目标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🎯 unit_testing_node 开始执行任务...
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 过滤项目任务标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ℹ️ 没有可执行的单元测试任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ✅ 单元测试节点完成，处理了 0 个任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🚀 单元测试节点开始执行...
2025-07-24 11:14:32 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 单元测试节点获取项目标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🎯 unit_testing_node 开始执行任务...
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 过滤项目任务标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ℹ️ 没有可执行的单元测试任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ✅ 单元测试节点完成，处理了 0 个任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🚀 单元测试节点开始执行...
2025-07-24 11:14:32 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 单元测试节点获取项目标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🎯 unit_testing_node 开始执行任务...
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 过滤项目任务标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ℹ️ 没有可执行的单元测试任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ✅ 单元测试节点完成，处理了 0 个任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🚀 单元测试节点开始执行...
2025-07-24 11:14:32 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 单元测试节点获取项目标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🎯 unit_testing_node 开始执行任务...
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 过滤项目任务标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ℹ️ 没有可执行的单元测试任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ✅ 单元测试节点完成，处理了 0 个任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🚀 单元测试节点开始执行...
2025-07-24 11:14:32 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 单元测试节点获取项目标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🎯 unit_testing_node 开始执行任务...
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 过滤项目任务标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ℹ️ 没有可执行的单元测试任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ✅ 单元测试节点完成，处理了 0 个任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🚀 单元测试节点开始执行...
2025-07-24 11:14:32 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 单元测试节点获取项目标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🎯 unit_testing_node 开始执行任务...
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 过滤项目任务标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ℹ️ 没有可执行的单元测试任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ✅ 单元测试节点完成，处理了 0 个任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🚀 单元测试节点开始执行...
2025-07-24 11:14:32 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 单元测试节点获取项目标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🎯 unit_testing_node 开始执行任务...
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 过滤项目任务标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ℹ️ 没有可执行的单元测试任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ✅ 单元测试节点完成，处理了 0 个任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🚀 单元测试节点开始执行...
2025-07-24 11:14:32 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 单元测试节点获取项目标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🎯 unit_testing_node 开始执行任务...
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 过滤项目任务标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ℹ️ 没有可执行的单元测试任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ✅ 单元测试节点完成，处理了 0 个任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🚀 单元测试节点开始执行...
2025-07-24 11:14:32 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 单元测试节点获取项目标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🎯 unit_testing_node 开始执行任务...
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 过滤项目任务标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ℹ️ 没有可执行的单元测试任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ✅ 单元测试节点完成，处理了 0 个任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🚀 单元测试节点开始执行...
2025-07-24 11:14:32 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 单元测试节点获取项目标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🎯 unit_testing_node 开始执行任务...
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 过滤项目任务标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ℹ️ 没有可执行的单元测试任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ✅ 单元测试节点完成，处理了 0 个任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🚀 单元测试节点开始执行...
2025-07-24 11:14:32 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 单元测试节点获取项目标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🎯 unit_testing_node 开始执行任务...
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 过滤项目任务标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ℹ️ 没有可执行的单元测试任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ✅ 单元测试节点完成，处理了 0 个任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🚀 单元测试节点开始执行...
2025-07-24 11:14:32 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 单元测试节点获取项目标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🎯 unit_testing_node 开始执行任务...
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 过滤项目任务标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ℹ️ 没有可执行的单元测试任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ✅ 单元测试节点完成，处理了 0 个任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🚀 单元测试节点开始执行...
2025-07-24 11:14:32 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 单元测试节点获取项目标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🎯 unit_testing_node 开始执行任务...
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 过滤项目任务标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ℹ️ 没有可执行的单元测试任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ✅ 单元测试节点完成，处理了 0 个任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🚀 单元测试节点开始执行...
2025-07-24 11:14:32 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 单元测试节点获取项目标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🎯 unit_testing_node 开始执行任务...
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 过滤项目任务标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ℹ️ 没有可执行的单元测试任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ✅ 单元测试节点完成，处理了 0 个任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🚀 单元测试节点开始执行...
2025-07-24 11:14:32 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 单元测试节点获取项目标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🎯 unit_testing_node 开始执行任务...
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 过滤项目任务标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ℹ️ 没有可执行的单元测试任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ✅ 单元测试节点完成，处理了 0 个任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🚀 单元测试节点开始执行...
2025-07-24 11:14:32 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 单元测试节点获取项目标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🎯 unit_testing_node 开始执行任务...
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 过滤项目任务标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ℹ️ 没有可执行的单元测试任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ✅ 单元测试节点完成，处理了 0 个任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🚀 单元测试节点开始执行...
2025-07-24 11:14:32 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 单元测试节点获取项目标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🎯 unit_testing_node 开始执行任务...
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 过滤项目任务标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ℹ️ 没有可执行的单元测试任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ✅ 单元测试节点完成，处理了 0 个任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🚀 单元测试节点开始执行...
2025-07-24 11:14:32 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 单元测试节点获取项目标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🎯 unit_testing_node 开始执行任务...
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 过滤项目任务标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ℹ️ 没有可执行的单元测试任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ✅ 单元测试节点完成，处理了 0 个任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🚀 单元测试节点开始执行...
2025-07-24 11:14:32 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 单元测试节点获取项目标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🎯 unit_testing_node 开始执行任务...
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 过滤项目任务标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ℹ️ 没有可执行的单元测试任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ✅ 单元测试节点完成，处理了 0 个任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🚀 单元测试节点开始执行...
2025-07-24 11:14:32 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 单元测试节点获取项目标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🎯 unit_testing_node 开始执行任务...
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 过滤项目任务标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ℹ️ 没有可执行的单元测试任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ✅ 单元测试节点完成，处理了 0 个任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🚀 单元测试节点开始执行...
2025-07-24 11:14:32 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 单元测试节点获取项目标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🎯 unit_testing_node 开始执行任务...
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 过滤项目任务标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ℹ️ 没有可执行的单元测试任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ✅ 单元测试节点完成，处理了 0 个任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🚀 单元测试节点开始执行...
2025-07-24 11:14:32 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 单元测试节点获取项目标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🎯 unit_testing_node 开始执行任务...
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 过滤项目任务标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ℹ️ 没有可执行的单元测试任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ✅ 单元测试节点完成，处理了 0 个任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🚀 单元测试节点开始执行...
2025-07-24 11:14:32 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 单元测试节点获取项目标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🎯 unit_testing_node 开始执行任务...
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 过滤项目任务标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ℹ️ 没有可执行的单元测试任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ✅ 单元测试节点完成，处理了 0 个任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🚀 单元测试节点开始执行...
2025-07-24 11:14:32 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 单元测试节点获取项目标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🎯 unit_testing_node 开始执行任务...
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 过滤项目任务标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ℹ️ 没有可执行的单元测试任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ✅ 单元测试节点完成，处理了 0 个任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🚀 单元测试节点开始执行...
2025-07-24 11:14:32 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 单元测试节点获取项目标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🎯 unit_testing_node 开始执行任务...
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 过滤项目任务标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ℹ️ 没有可执行的单元测试任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ✅ 单元测试节点完成，处理了 0 个任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🚀 单元测试节点开始执行...
2025-07-24 11:14:32 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 单元测试节点获取项目标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🎯 unit_testing_node 开始执行任务...
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 过滤项目任务标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ℹ️ 没有可执行的单元测试任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ✅ 单元测试节点完成，处理了 0 个任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🚀 单元测试节点开始执行...
2025-07-24 11:14:32 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 单元测试节点获取项目标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🎯 unit_testing_node 开始执行任务...
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 过滤项目任务标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ℹ️ 没有可执行的单元测试任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ✅ 单元测试节点完成，处理了 0 个任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🚀 单元测试节点开始执行...
2025-07-24 11:14:32 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 单元测试节点获取项目标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🎯 unit_testing_node 开始执行任务...
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 过滤项目任务标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ℹ️ 没有可执行的单元测试任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ✅ 单元测试节点完成，处理了 0 个任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🚀 单元测试节点开始执行...
2025-07-24 11:14:32 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 单元测试节点获取项目标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🎯 unit_testing_node 开始执行任务...
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 过滤项目任务标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ℹ️ 没有可执行的单元测试任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ✅ 单元测试节点完成，处理了 0 个任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🚀 单元测试节点开始执行...
2025-07-24 11:14:32 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 单元测试节点获取项目标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🎯 unit_testing_node 开始执行任务...
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 过滤项目任务标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ℹ️ 没有可执行的单元测试任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ✅ 单元测试节点完成，处理了 0 个任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🚀 单元测试节点开始执行...
2025-07-24 11:14:32 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 单元测试节点获取项目标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🎯 unit_testing_node 开始执行任务...
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 过滤项目任务标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ℹ️ 没有可执行的单元测试任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ✅ 单元测试节点完成，处理了 0 个任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🚀 单元测试节点开始执行...
2025-07-24 11:14:32 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 单元测试节点获取项目标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🎯 unit_testing_node 开始执行任务...
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 过滤项目任务标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ℹ️ 没有可执行的单元测试任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ✅ 单元测试节点完成，处理了 0 个任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🚀 单元测试节点开始执行...
2025-07-24 11:14:32 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 单元测试节点获取项目标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🎯 unit_testing_node 开始执行任务...
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 过滤项目任务标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ℹ️ 没有可执行的单元测试任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ✅ 单元测试节点完成，处理了 0 个任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🚀 单元测试节点开始执行...
2025-07-24 11:14:32 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 单元测试节点获取项目标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🎯 unit_testing_node 开始执行任务...
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 过滤项目任务标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ℹ️ 没有可执行的单元测试任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ✅ 单元测试节点完成，处理了 0 个任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🚀 单元测试节点开始执行...
2025-07-24 11:14:32 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 单元测试节点获取项目标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🎯 unit_testing_node 开始执行任务...
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 过滤项目任务标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ℹ️ 没有可执行的单元测试任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ✅ 单元测试节点完成，处理了 0 个任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🚀 单元测试节点开始执行...
2025-07-24 11:14:32 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 单元测试节点获取项目标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🎯 unit_testing_node 开始执行任务...
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 过滤项目任务标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ℹ️ 没有可执行的单元测试任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ✅ 单元测试节点完成，处理了 0 个任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🚀 单元测试节点开始执行...
2025-07-24 11:14:32 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 单元测试节点获取项目标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🎯 unit_testing_node 开始执行任务...
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 过滤项目任务标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ℹ️ 没有可执行的单元测试任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ✅ 单元测试节点完成，处理了 0 个任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🚀 单元测试节点开始执行...
2025-07-24 11:14:32 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 单元测试节点获取项目标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🎯 unit_testing_node 开始执行任务...
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 过滤项目任务标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ℹ️ 没有可执行的单元测试任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ✅ 单元测试节点完成，处理了 0 个任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🚀 单元测试节点开始执行...
2025-07-24 11:14:32 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 单元测试节点获取项目标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🎯 unit_testing_node 开始执行任务...
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 过滤项目任务标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ℹ️ 没有可执行的单元测试任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ✅ 单元测试节点完成，处理了 0 个任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🚀 单元测试节点开始执行...
2025-07-24 11:14:32 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 单元测试节点获取项目标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🎯 unit_testing_node 开始执行任务...
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 过滤项目任务标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ℹ️ 没有可执行的单元测试任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ✅ 单元测试节点完成，处理了 0 个任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🚀 单元测试节点开始执行...
2025-07-24 11:14:32 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 单元测试节点获取项目标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🎯 unit_testing_node 开始执行任务...
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 过滤项目任务标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ℹ️ 没有可执行的单元测试任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ✅ 单元测试节点完成，处理了 0 个任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🚀 单元测试节点开始执行...
2025-07-24 11:14:32 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 单元测试节点获取项目标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🎯 unit_testing_node 开始执行任务...
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 过滤项目任务标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ℹ️ 没有可执行的单元测试任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ✅ 单元测试节点完成，处理了 0 个任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🚀 单元测试节点开始执行...
2025-07-24 11:14:32 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 单元测试节点获取项目标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🎯 unit_testing_node 开始执行任务...
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 过滤项目任务标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ℹ️ 没有可执行的单元测试任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ✅ 单元测试节点完成，处理了 0 个任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🚀 单元测试节点开始执行...
2025-07-24 11:14:32 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 单元测试节点获取项目标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🎯 unit_testing_node 开始执行任务...
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 过滤项目任务标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ℹ️ 没有可执行的单元测试任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ✅ 单元测试节点完成，处理了 0 个任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🚀 单元测试节点开始执行...
2025-07-24 11:14:32 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 单元测试节点获取项目标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🎯 unit_testing_node 开始执行任务...
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 过滤项目任务标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ℹ️ 没有可执行的单元测试任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ✅ 单元测试节点完成，处理了 0 个任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🚀 单元测试节点开始执行...
2025-07-24 11:14:32 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 单元测试节点获取项目标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🎯 unit_testing_node 开始执行任务...
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 过滤项目任务标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ℹ️ 没有可执行的单元测试任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ✅ 单元测试节点完成，处理了 0 个任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🚀 单元测试节点开始执行...
2025-07-24 11:14:32 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 单元测试节点获取项目标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🎯 unit_testing_node 开始执行任务...
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 过滤项目任务标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ℹ️ 没有可执行的单元测试任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ✅ 单元测试节点完成，处理了 0 个任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🚀 单元测试节点开始执行...
2025-07-24 11:14:32 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 单元测试节点获取项目标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🎯 unit_testing_node 开始执行任务...
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 过滤项目任务标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ℹ️ 没有可执行的单元测试任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ✅ 单元测试节点完成，处理了 0 个任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🚀 单元测试节点开始执行...
2025-07-24 11:14:32 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 单元测试节点获取项目标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🎯 unit_testing_node 开始执行任务...
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 过滤项目任务标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ℹ️ 没有可执行的单元测试任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ✅ 单元测试节点完成，处理了 0 个任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🚀 单元测试节点开始执行...
2025-07-24 11:14:32 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 单元测试节点获取项目标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🎯 unit_testing_node 开始执行任务...
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 过滤项目任务标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ℹ️ 没有可执行的单元测试任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ✅ 单元测试节点完成，处理了 0 个任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🚀 单元测试节点开始执行...
2025-07-24 11:14:32 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 单元测试节点获取项目标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🎯 unit_testing_node 开始执行任务...
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 过滤项目任务标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ℹ️ 没有可执行的单元测试任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ✅ 单元测试节点完成，处理了 0 个任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🚀 单元测试节点开始执行...
2025-07-24 11:14:32 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 单元测试节点获取项目标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🎯 unit_testing_node 开始执行任务...
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 过滤项目任务标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ℹ️ 没有可执行的单元测试任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ✅ 单元测试节点完成，处理了 0 个任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🚀 单元测试节点开始执行...
2025-07-24 11:14:32 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 单元测试节点获取项目标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🎯 unit_testing_node 开始执行任务...
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 过滤项目任务标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ℹ️ 没有可执行的单元测试任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ✅ 单元测试节点完成，处理了 0 个任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🚀 单元测试节点开始执行...
2025-07-24 11:14:32 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 单元测试节点获取项目标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🎯 unit_testing_node 开始执行任务...
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 过滤项目任务标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ℹ️ 没有可执行的单元测试任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ✅ 单元测试节点完成，处理了 0 个任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🚀 单元测试节点开始执行...
2025-07-24 11:14:32 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 单元测试节点获取项目标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🎯 unit_testing_node 开始执行任务...
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 过滤项目任务标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ℹ️ 没有可执行的单元测试任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ✅ 单元测试节点完成，处理了 0 个任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🚀 单元测试节点开始执行...
2025-07-24 11:14:32 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 单元测试节点获取项目标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🎯 unit_testing_node 开始执行任务...
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 过滤项目任务标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ℹ️ 没有可执行的单元测试任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ✅ 单元测试节点完成，处理了 0 个任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🚀 单元测试节点开始执行...
2025-07-24 11:14:32 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 单元测试节点获取项目标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🎯 unit_testing_node 开始执行任务...
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 过滤项目任务标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ℹ️ 没有可执行的单元测试任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ✅ 单元测试节点完成，处理了 0 个任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🚀 单元测试节点开始执行...
2025-07-24 11:14:32 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 单元测试节点获取项目标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🎯 unit_testing_node 开始执行任务...
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 过滤项目任务标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ℹ️ 没有可执行的单元测试任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ✅ 单元测试节点完成，处理了 0 个任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🚀 单元测试节点开始执行...
2025-07-24 11:14:32 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 单元测试节点获取项目标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🎯 unit_testing_node 开始执行任务...
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 过滤项目任务标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ℹ️ 没有可执行的单元测试任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ✅ 单元测试节点完成，处理了 0 个任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🚀 单元测试节点开始执行...
2025-07-24 11:14:32 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 单元测试节点获取项目标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🎯 unit_testing_node 开始执行任务...
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 过滤项目任务标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ℹ️ 没有可执行的单元测试任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ✅ 单元测试节点完成，处理了 0 个任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🚀 单元测试节点开始执行...
2025-07-24 11:14:32 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 单元测试节点获取项目标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🎯 unit_testing_node 开始执行任务...
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 过滤项目任务标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ℹ️ 没有可执行的单元测试任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ✅ 单元测试节点完成，处理了 0 个任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🚀 单元测试节点开始执行...
2025-07-24 11:14:32 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 单元测试节点获取项目标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🎯 unit_testing_node 开始执行任务...
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 过滤项目任务标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ℹ️ 没有可执行的单元测试任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ✅ 单元测试节点完成，处理了 0 个任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🚀 单元测试节点开始执行...
2025-07-24 11:14:32 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 单元测试节点获取项目标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🎯 unit_testing_node 开始执行任务...
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 过滤项目任务标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ℹ️ 没有可执行的单元测试任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ✅ 单元测试节点完成，处理了 0 个任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🚀 单元测试节点开始执行...
2025-07-24 11:14:32 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 单元测试节点获取项目标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🎯 unit_testing_node 开始执行任务...
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 过滤项目任务标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ℹ️ 没有可执行的单元测试任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ✅ 单元测试节点完成，处理了 0 个任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🚀 单元测试节点开始执行...
2025-07-24 11:14:32 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 单元测试节点获取项目标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🎯 unit_testing_node 开始执行任务...
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 过滤项目任务标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ℹ️ 没有可执行的单元测试任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ✅ 单元测试节点完成，处理了 0 个任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🚀 单元测试节点开始执行...
2025-07-24 11:14:32 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 单元测试节点获取项目标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🎯 unit_testing_node 开始执行任务...
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 过滤项目任务标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ℹ️ 没有可执行的单元测试任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ✅ 单元测试节点完成，处理了 0 个任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🚀 单元测试节点开始执行...
2025-07-24 11:14:32 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 单元测试节点获取项目标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🎯 unit_testing_node 开始执行任务...
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 过滤项目任务标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ℹ️ 没有可执行的单元测试任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ✅ 单元测试节点完成，处理了 0 个任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🚀 单元测试节点开始执行...
2025-07-24 11:14:32 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 单元测试节点获取项目标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🎯 unit_testing_node 开始执行任务...
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 过滤项目任务标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ℹ️ 没有可执行的单元测试任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ✅ 单元测试节点完成，处理了 0 个任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🚀 单元测试节点开始执行...
2025-07-24 11:14:32 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 单元测试节点获取项目标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🎯 unit_testing_node 开始执行任务...
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 过滤项目任务标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ℹ️ 没有可执行的单元测试任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ✅ 单元测试节点完成，处理了 0 个任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🚀 单元测试节点开始执行...
2025-07-24 11:14:32 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 单元测试节点获取项目标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🎯 unit_testing_node 开始执行任务...
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 过滤项目任务标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ℹ️ 没有可执行的单元测试任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ✅ 单元测试节点完成，处理了 0 个任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🚀 单元测试节点开始执行...
2025-07-24 11:14:32 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 单元测试节点获取项目标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🎯 unit_testing_node 开始执行任务...
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 过滤项目任务标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ℹ️ 没有可执行的单元测试任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ✅ 单元测试节点完成，处理了 0 个任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🚀 单元测试节点开始执行...
2025-07-24 11:14:32 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 单元测试节点获取项目标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🎯 unit_testing_node 开始执行任务...
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 过滤项目任务标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ℹ️ 没有可执行的单元测试任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ✅ 单元测试节点完成，处理了 0 个任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🚀 单元测试节点开始执行...
2025-07-24 11:14:32 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 单元测试节点获取项目标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🎯 unit_testing_node 开始执行任务...
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 过滤项目任务标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ℹ️ 没有可执行的单元测试任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ✅ 单元测试节点完成，处理了 0 个任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🚀 单元测试节点开始执行...
2025-07-24 11:14:32 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 单元测试节点获取项目标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🎯 unit_testing_node 开始执行任务...
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 过滤项目任务标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ℹ️ 没有可执行的单元测试任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ✅ 单元测试节点完成，处理了 0 个任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🚀 单元测试节点开始执行...
2025-07-24 11:14:32 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 单元测试节点获取项目标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🎯 unit_testing_node 开始执行任务...
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 过滤项目任务标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ℹ️ 没有可执行的单元测试任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ✅ 单元测试节点完成，处理了 0 个任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🚀 单元测试节点开始执行...
2025-07-24 11:14:32 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 单元测试节点获取项目标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🎯 unit_testing_node 开始执行任务...
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 过滤项目任务标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ℹ️ 没有可执行的单元测试任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ✅ 单元测试节点完成，处理了 0 个任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🚀 单元测试节点开始执行...
2025-07-24 11:14:32 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 单元测试节点获取项目标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🎯 unit_testing_node 开始执行任务...
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 过滤项目任务标识: 1231000003
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ℹ️ 没有可执行的单元测试任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ✅ 单元测试节点完成，处理了 0 个任务
2025-07-24 11:14:32 - src.corder_integration.langgraph.workflow_orchestrator - ERROR - 工作流执行失败: Recursion limit of 100 reached without hitting a stop condition. You can increase the limit by setting the `recursion_limit` config key.
For troubleshooting, visit: https://python.langchain.com/docs/troubleshooting/errors/GRAPH_RECURSION_LIMIT
2025-07-24 11:14:32 - werkzeug - INFO - 127.0.0.1 - - [24/Jul/2025 11:14:32] "POST /api/coder-agent/process-document HTTP/1.1" 200 -
2025-07-24 11:43:09 - system - INFO - ==================================================
2025-07-24 11:43:09 - system - INFO - 🚀 智能分析系统日志系统初始化完成
2025-07-24 11:43:09 - system - INFO - 📁 日志根目录: /Users/renyu/Documents/ai_project/document_analyzer/logs
2025-07-24 11:43:09 - system - INFO - 📊 日志级别: INFO
2025-07-24 11:43:09 - system - INFO - 📅 按日期轮转: 每天午夜自动轮转
2025-07-24 11:43:09 - system - INFO - 📂 按月分目录: logs/YYYY-MM/
2025-07-24 11:43:09 - system - INFO - 📝 主日志: logs/2025-07/app.log
2025-07-24 11:43:09 - system - INFO - 🔧 API日志: logs/2025-07/api_server.log
2025-07-24 11:43:09 - system - INFO - 🗂️ 保留天数: 7 天
2025-07-24 11:43:09 - system - INFO - ==================================================
2025-07-24 11:43:12 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-24 11:43:12 - src.corder_integration.langgraph.nodes.task_simple_splitting_node - INFO - ✅ 成功加载配置文件: config.yaml
2025-07-24 11:43:12 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-24 11:43:12 - src.corder_integration.langgraph.nodes.task_simple_splitting_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250724094351-pnjf4(编码智能体专用)
2025-07-24 11:43:12 - src.corder_integration.langgraph.nodes.task_simple_splitting_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-24 11:43:13 - src.utils.task_storage - INFO - 数据库初始化成功
2025-07-24 11:43:13 - markdown_storage - INFO - Markdown存储管理器初始化完成
2025-07-24 11:43:13 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-24 11:43:13 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-24 11:43:13 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-24 11:43:14 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-24 11:43:14 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-24 11:43:14 - WeaviateVectorDatabase - INFO - ✅ Weaviate连接成功: http://localhost:8080 (gRPC: 50051)
2025-07-24 11:43:14 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/schema/AnalyDesignDocuments "HTTP/1.1 200 OK"
2025-07-24 11:43:14 - WeaviateVectorDatabase - INFO - ✅ Weaviate集合已存在: AnalyDesignDocuments
2025-07-24 11:43:14 - AnalysisServiceManager - INFO - 初始化向量数据库: weaviate
2025-07-24 11:43:14 - sentence_transformers.SentenceTransformer - INFO - Use pytorch device_name: mps
2025-07-24 11:43:14 - sentence_transformers.SentenceTransformer - INFO - Load pretrained SentenceTransformer: BAAI/bge-large-zh
2025-07-24 11:43:23 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-24 11:43:24 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-24 11:43:24 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-24 11:43:24 - src.utils.weaviate_helper - INFO - 成功连接到 Weaviate: localhost:8080
2025-07-24 11:43:24 - AnalysisServiceManager - INFO - 分析服务管理器初始化完成
2025-07-24 11:43:24 - src.utils.enhanced_analyzer - INFO - 增强分析器初始化完成
2025-07-24 11:43:29 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:8082
 * Running on http://26.26.26.1:8082
2025-07-24 11:43:29 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-07-24 11:43:29 - werkzeug - INFO -  * Restarting with stat
2025-07-24 11:43:29 - system - INFO - ==================================================
2025-07-24 11:43:29 - system - INFO - 🚀 智能分析系统日志系统初始化完成
2025-07-24 11:43:29 - system - INFO - 📁 日志根目录: /Users/renyu/Documents/ai_project/document_analyzer/logs
2025-07-24 11:43:29 - system - INFO - 📊 日志级别: INFO
2025-07-24 11:43:29 - system - INFO - 📅 按日期轮转: 每天午夜自动轮转
2025-07-24 11:43:29 - system - INFO - 📂 按月分目录: logs/YYYY-MM/
2025-07-24 11:43:29 - system - INFO - 📝 主日志: logs/2025-07/app.log
2025-07-24 11:43:29 - system - INFO - 🔧 API日志: logs/2025-07/api_server.log
2025-07-24 11:43:29 - system - INFO - 🗂️ 保留天数: 7 天
2025-07-24 11:43:29 - system - INFO - ==================================================
2025-07-24 11:43:32 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-24 11:43:32 - src.corder_integration.langgraph.nodes.task_simple_splitting_node - INFO - ✅ 成功加载配置文件: config.yaml
2025-07-24 11:43:32 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-24 11:43:32 - src.corder_integration.langgraph.nodes.task_simple_splitting_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250724094351-pnjf4(编码智能体专用)
2025-07-24 11:43:32 - src.corder_integration.langgraph.nodes.task_simple_splitting_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-24 11:43:32 - src.utils.task_storage - INFO - 数据库初始化成功
2025-07-24 11:43:32 - markdown_storage - INFO - Markdown存储管理器初始化完成
2025-07-24 11:43:32 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-24 11:43:32 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-24 11:43:32 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-24 11:43:33 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-24 11:43:33 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-24 11:43:33 - WeaviateVectorDatabase - INFO - ✅ Weaviate连接成功: http://localhost:8080 (gRPC: 50051)
2025-07-24 11:43:33 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/schema/AnalyDesignDocuments "HTTP/1.1 200 OK"
2025-07-24 11:43:33 - WeaviateVectorDatabase - INFO - ✅ Weaviate集合已存在: AnalyDesignDocuments
2025-07-24 11:43:33 - AnalysisServiceManager - INFO - 初始化向量数据库: weaviate
2025-07-24 11:43:33 - sentence_transformers.SentenceTransformer - INFO - Use pytorch device_name: mps
2025-07-24 11:43:33 - sentence_transformers.SentenceTransformer - INFO - Load pretrained SentenceTransformer: BAAI/bge-large-zh
2025-07-24 11:43:42 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-24 11:43:43 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-24 11:43:43 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-24 11:43:43 - src.utils.weaviate_helper - INFO - 成功连接到 Weaviate: localhost:8080
2025-07-24 11:43:43 - AnalysisServiceManager - INFO - 分析服务管理器初始化完成
2025-07-24 11:43:43 - src.utils.enhanced_analyzer - INFO - 增强分析器初始化完成
2025-07-24 11:43:43 - werkzeug - WARNING -  * Debugger is active!
2025-07-24 11:43:43 - werkzeug - INFO -  * Debugger PIN: 587-510-452
2025-07-24 11:43:59 - src.apis.coder_agent_api - INFO - 开始处理文档: 链数中建一局_1753328639
2025-07-24 11:43:59 - src.apis.coder_agent_api - INFO - 项目唯一标识: 1231000004
2025-07-24 11:43:59 - src.apis.coder_agent_api - INFO - 文档长度: 7417 字符
2025-07-24 11:43:59 - src.apis.coder_agent_api - INFO - 使用LangGraph: True
2025-07-24 11:43:59 - src.apis.coder_agent_api - INFO - 代码输出路径: /Users/renyu/Documents/create_project
2025-07-24 11:43:59 - src.apis.coder_agent_api - INFO - 使用LangGraph工作流处理项目: 链数中建一局_1753328639
2025-07-24 11:43:59 - src.corder_integration.langgraph.workflow_orchestrator - INFO - 生成目标分支名称: 链数中建一局_1753328639 -> D_20250724_链数中建一局_1753328639
2025-07-24 11:43:59 - src.corder_integration.langgraph.workflow_orchestrator - INFO - 开始执行编码工作流: 链数中建一局_1753328639 -> /Users/renyu/Documents/create_project
2025-07-24 11:43:59 - src.corder_integration.langgraph.nodes.task_simple_splitting_node - INFO - 🚀 简化版任务拆分节点开始执行...
2025-07-24 11:43:59 - src.corder_integration.langgraph.nodes.task_simple_splitting_node - INFO - 🚀 开始简化版任务拆分
2025-07-24 11:43:59 - src.corder_integration.langgraph.nodes.task_simple_splitting_node - INFO - 📄 设计文档长度: 7416
2025-07-24 11:43:59 - src.corder_integration.langgraph.nodes.task_simple_splitting_node - INFO - 📋 项目名称: 链数中建一局_1753328639
2025-07-24 11:43:59 - src.corder_integration.langgraph.nodes.task_simple_splitting_node - INFO - 🏷️ 项目标识: 1231000004
2025-07-24 11:43:59 - src.corder_integration.langgraph.nodes.task_simple_splitting_node - INFO - 🎯 使用Jinja2模板生成任务...
2025-07-24 11:43:59 - src.corder_integration.langgraph.nodes.task_simple_splitting_node - INFO - 📝 渲染后的提示词长度: 22403
2025-07-24 11:43:59 - src.corder_integration.langgraph.nodes.task_simple_splitting_node - INFO - 📄 提示词内容:
你是资深任务管理专家，基于设计文档生成具体的开发任务。

详细设计文档：设计文档 - 一局对接链数优化V0.1
1. 系统架构设计
1.1 项目介绍
一局对接链数的项目上线后，核心企业反馈，希望就已推送至平台的数据，在核心企业内部系统内修改部分信息（如额度信息）后，使用原业务编号再次推送至平台。就目前的接口校验逻辑，相同业务编号的业务数据不可重复推送。因而，需要结合核心企业需求，对接口的校验逻辑进行调整。
建设目标及路线。调整接口校验逻辑，兼容核心企业重推数据的场景。
1.2 功能需求说明
1.2.1 链数额度功能调整
调整说明:本期，对原"链数额度"功能做如下调整：
- 功能名称由"链数额度"变更为"额度管理"；
- 页面右上方新增"组织单元额度"按钮，当且仅当当前登录企业为多组织企业时展示该按钮。用户点击"组织单元额度"按钮，则跳转至"组织单元额度"列表页。
- 列表新增字段"额度类型"，置于"额度名称"之后，若为链数额度则取值为"链数额度"。
1.2.2 新增组织单元额度功能
调整说明:本期在核心企业侧链数额度功能下，新增"组织单元额度"列表页。支持用户查询当前登录企业下的具体组织单元的链数额度、云信额度明细。
a.筛选字段：
序号	字段名	类型格式	长度	默认值	必填	规则
1	组织单元名称	文本输入框	-	-	-	模糊搜索
2	额度名称	文本输入框	-	-	-	模糊搜索
3	额度类型	下拉列表	-	链数额度	-	下拉选项：链数额度、云信额度、全部
b.汇总字段：
序号	字段名	类型格式	规则
1	总额度（元）	数值	满足筛选条件的列表数据的“已分配额度（元）”之和
2	已用额度（元）	数值	满足筛选条件的列表数据的“已用额度（元）”之和
3	可用额度（元）	数值	满足筛选条件的列表数据的“可用额度（元）”之和
备注：筛选条件更新后，汇总值需要同步更新计算。
c.列表字段：
序号	字段名	类型格式	规则
1	组织单元名称	字符串	无
2	额度名称	字符串	无
3	额度类型	字符串	无
4	已分配额度（元）	数值	无
5	已用额度（元）	数值	无
6	可用额度（元）	数值	无
备注：列表默认按照组织单元名称为主要关键字、额度类型为次要关键字降序排列。

1.3 总体架构
采用微服务架构模式，实现松耦合、高可扩展的系统设计：
- 涉及2个后端服务：
1. 用户服务：zqyl-user-center-service
2. 确权开立服务：crcl-open

- 涉及2个数据库：
1. 用户数据库：MySQL 
2. 缓存：Redis

1.4 技术栈选型
- 后端框架：Spring Boot 2.7.x + Spring Cloud 2021.x
- 数据访问：MyBatis Plus 3.5.x
- 数据库：MySQL 8.0
- 缓存：Redis 6.0
- 消息队列：RabbitMQ 3.8
- 服务发现：Nacos
- 配置中心：Nacos
- 后端分页：pageHelper
- 部署：将代码提交到git分支即可

2. 服务设计

2.1 用户服务 (zqyl-user-center-service)
职责：用户管理、权限控制、角色管理

2.1.1 核心模块：
- 组织单元管理

2.1.2 API设计：
2.1.2.1 新增接口：
uri : GET /general/multiorgManage/queryCompanyUnitList    
method: GET
description:查询企业组织单元列表
入参示例：
{
  "unitCode": "sdf1",  #组织单元编号
  "openStatus": 1 ,    #组织单元状态 1：正常；0：禁用 默认全部
  "unitList" :[1,2,234]  #组织单元id 必传 
}

返参示例：
{
  "data": [
    {
      "unitId" : 234234 ,     #组织单元id 必传 
      "unitTypeDicType" : 1 , #组织单元类型 1：开立，2：支付
      "unitTypeId" : 12   ,   #组织单元类型表id 
      "openStatus" : 1   ,    #组织单元状态  1：正常；0：禁用 默认全部
      "unitCode" : "sdfsdfsd",#组织编号
      "unitName" : "测试单元" #组织单元名称
    }
  ]
}

2.1.3 数据库表设计：
CREATE TABLE t_cust_multiorg_unit(
  id bigint(20) NOT NULL COMMENT '主键id...
2025-07-24 11:45:51 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 11:45:51 - src.corder_integration.langgraph.nodes.task_simple_splitting_node - INFO - ✅ LLM响应接收完成，长度: 12087
2025-07-24 11:45:51 - src.corder_integration.langgraph.nodes.task_simple_splitting_node - INFO - 📄 LLM完整响应内容:
```json
{
  "tasks": [
    {
      "task_id": "task_001",
      "project_task_id": "1231000004",
      "service_name": "系统",
      "task_type": "git_extraction",
      "priority": 1,
      "dependencies": [],
      "estimated_duration": "5分钟",
      "description": "从设计文档提取GitLab仓库地址",
      "implementation_details": "解析设计文档，提取用户服务 http://localhost:30000/ls/zqyl-user-center-service.git 和确权开立服务 http://localhost:30000/ls/crcl-open.git 仓库地址",
      "deliverables": ["GitLab仓库地址清单", "仓库访问验证报告"],
      "completion_criteria": "成功提取并验证两个GitLab仓库地址可访问性",
      "parameters": {
        "repositories": ["zqyl-user-center-service", "crcl-open"]
      }
    },
    {
      "task_id": "task_002",
      "project_task_id": "1231000004",
      "service_name": "用户服务",
      "task_type": "git_clone",
      "priority": 2,
      "dependencies": ["task_001"],
      "estimated_duration": "10分钟",
      "description": "下载用户服务代码到/Users/renyu/Documents/create_project/链数中建一局_1753328639/zqyl-user-center-service",
      "implementation_details": "使用git clone命令下载用户服务代码到指定目录，确保项目结构完整可编译",
      "deliverables": ["用户服务源码目录"],
      "completion_criteria": "代码下载完成，项目目录存在且包含pom.xml文件",
      "parameters": {
        "git_url": "http://localhost:30000/ls/zqyl-user-center-service.git",
        "local_path": "/Users/renyu/Documents/create_project/链数中建一局_1753328639/zqyl-user-center-service"
      }
    },
    {
      "task_id": "task_003",
      "project_task_id": "1231000004",
      "service_name": "确权开立服务",
      "task_type": "git_clone",
      "priority": 2,
      "dependencies": ["task_001"],
      "estimated_duration": "10分钟",
      "description": "下载确权开立服务代码到/Users/renyu/Documents/create_project/链数中建一局_1753328639/crcl-open",
      "implementation_details": "使用git clone命令下载确权开立服务代码到指定目录，确保项目结构完整可编译",
      "deliverables": ["确权开立服务源码目录"],
      "completion_criteria": "代码下载完成，项目目录存在且包含pom.xml文件",
      "parameters": {
        "git_url": "http://localhost:30000/ls/crcl-open.git",
        "local_path": "/Users/renyu/Documents/create_project/链数中建一局_1753328639/crcl-open"
      }
    },
    {
      "task_id": "task_004",
      "project_task_id": "1231000004",
      "service_name": "用户服务",
      "task_type": "code_analysis",
      "priority": 3,
      "dependencies": ["task_002"],
      "estimated_duration": "20分钟",
      "description": "分析用户服务代码结构，确定MultiorgManageController添加位置",
      "implementation_details": "分析项目package结构和controller层，找到或创建MultiorgManageController类的最佳位置",
      "deliverables": ["代码结构从Controller层开始到数据获取的完整路径"],
      "completion_criteria": "确定MultiorgManageController的包路径和文件位置，明确依赖的Service层结构",
      "parameters": {
        "project_path": "/Users/renyu/Documents/create_project/链数中建一局_1753328639/zqyl-user-center-service",
        "target_controller": "MultiorgManageController",
        "target_api": "/general/multiorgManage/queryCompanyUnitList"
      }
    },
    {
      "task_id": "task_005",
      "project_task_id": "1231000004",
      "service_name": "确权开立服务",
      "task_type": "code_analysis",
      "priority": 3,
      "dependencies": ["task_003"],
      "estimated_duration": "20分钟",
      "description": "分析确权开立服务代码结构，确定LsLimitController添加位置",
      "implementation_details": "分析项目package结构和controller层，找到或创建LsLimitController类的最佳位置，支持两个接口开发",
      "deliverables": ["代码结构从Controller层开始到数据获取的完整路径", "Feign客户端配置方案"],
      "completion_criteria": "确定LsLimitController的包路径和文件位置，明确服务间调用的Feign配置",
      "parameters": {
        "project_path": "/Users/renyu/Documents/create_project/链数中建一局_1753328639/crcl-open",
        "target_controller": "LsLimitController",
        "target_apis": ["/crcl-open-api/lsLimit/listUnitLimitByCompanyId", "/crcl-open-api/lsLimit/listUnitLimitByCompanyIdExport"]
      }
    },
    {
      "task_id": "task_006",
      "project_task_id": "1231000004",
      "service_name": "用户服务",
      "task_type": "config",
      "priority": 4,
      "dependencies": ["task_004"],
      "estimated_duration": "15分钟",
      "description": "配置用户服务数据库连接：jdbc:mysql://localhost:6446/dbwebappdb",
      "implementation_details": "修改application.yml文件，配置数据库连接信息包括URL、用户名密码和连接池设置",
      "deliverables": ["数据库配置文件", "连接测试报告"],
      "completion_criteria": "application.yml文件已更新，数据库连接配置正确且可连通",
      "parameters": {
        "config_file": "/Users/renyu/Documents/create_project/链数中建一局_1753328639/zqyl-user-center-service/src/main/resources/application.yml",
        "database_url": "jdbc:mysql://localhost:6446/dbwebappdb?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC&characterEncoding=utf8&useUnicode=true",
        "username": "dbwebapp",
        "password": "dbwebapp"
      }
    },
    {
      "task_id": "task_007",
      "project_task_id": "1231000004",
      "service_name": "用户服务",
      "task_type": "database",
      "priority": 5,
      "dependencies": ["task_006"],
      "estimated_duration": "15分钟",
      "description": "创建t_cust_multiorg_unit表，包含id,company_id,unit_code,unit_name等字段",
      "implementation_details": "编写建表SQL脚本，定义主键、索引和字段约束，创建对应的Entity和Mapper文件",
      "deliverables": ["建表SQL脚本", "Entity实体类", "Mapper接口文件"],
      "completion_criteria": "表结构创建成功，Entity和Mapper文件可正常编译，支持基本CRUD操作",
      "parameters": {
        "table_name": "t_cust_multiorg_unit",
        "sql_location": "src/main/resources/sql/t_cust_multiorg_unit.sql"
      }
    },
    {
      "task_id": "task_008",
      "project_task_id": "1231000004",
      "service_name": "用户服务",
      "task_type": "api",
      "priority": 6,
      "dependencies": ["task_007"],
      "estimated_duration": "60分钟",
      "description": "实现GET /general/multiorgManage/queryCompanyUnitList接口",
      "implementation_details": "在MultiorgManageController中实现查询接口，支持条件查询和分页，返回规定的字段格式",
      "deliverables": ["MultiorgManageController类", "Service业务逻辑层", "接口文档"],
      "completion_criteria": "接口可正常访问，返回数据格式符合规范，支持条件查询和分页功能",
      "parameters": {
        "project_path": "/Users/renyu/Documents/create_project/链数中建一局_1753328639/zqyl-user-center-service",
        "api_path": "/general/multiorgManage/queryCompanyUnitList",
        "http_method": "GET",
        "content_type": "application/json",
        "request_params": {
          "unitCode": "组织单元编号(可选)",
          "openStatus": "组织单元状态 1：正常；0：禁用(可选)",
          "unitList": "组织单元id列表(可选)"
        },
        "response_params": {
          "unitId": "组织单元id",
          "unitTypeDicType": "组织单元类型 1：开立，2：支付",
          "unitTypeId": "组织单元类型表id",
          "openStatus": "组织单元状态 1：正常；0：禁用",
          "unitCode": "组织编号",
          "unitName": "组织单元名称"
        },
        "business_logic": "根据查询条件查询组织单元信息，支持按编码、状态等条件筛选",
        "data_source": "t_cust_multiorg_unit表",
        "validation_rules": {
          "unitCode": "长度不超过50字符",
          "openStatus": "取值范围0-1"
        }
      }
    },
    {
      "task_id": "task_009",
      "project_task_id": "1231000004",
      "service_name": "确权开立服务",
      "task_type": "api",
      "priority": 7,
      "dependencies": ["task_008"],
      "estimated_duration": "90分钟",
      "description": "实现GET /crcl-open-api/lsLimit/listUnitLimitByCompanyId接口，调用用户服务",
      "implementation_details": "在LsLimitController中实现额度查询接口，配置Feign客户端调用用户服务接口获取组织单元信息",
      "deliverables": ["LsLimitController类", "Feign客户端配置", "业务逻辑层"],
      "completion_criteria": "接口可正常访问，能成功调用用户服务，返回额度数据格式正确",
      "parameters": {
        "project_path": "/Users/renyu/Documents/create_project/链数中建一局_1753328639/crcl-open",
        "api_path": "/crcl-open-api/lsLimit/listUnitLimitByCompanyId",
        "http_method": "GET",
        "content_type": "application/json",
        "request_params": {
          "gwCompanyId": "当前登录企业id(必填)",
          "unitName": "组织单元名称(模糊搜索)(可选)",
          "limitSource": "额度名称(模糊搜索)(可选)",
          "bizType": "10：云信额度，80：链数额度(默认)(可选)",
          "page": "页码(必填)",
          "pageRow": "每页记录数(必填)"
        },
        "response_params": {
          "totalLimitAmt": "总额度",
          "usedLimitAmt": "已用额度",
          "usableLimitAmt": "可用额度",
          "unitLimitListDetail": "额度信息列表"
        },
        "business_logic": "根据公司ID和筛选条件查询组织单元额度信息，调用用户服务获取组织单元详细信息。采用pagehelper进行分页，需要调用zqyl-user-center-service服务的/queryCompanyUnitList接口获取组织单元详细信息",
        "data_source": "本地额度表 + 用户服务接口",
        "validation_rules": {
          "gwCompanyId": "必填，数值类型",
          "bizType": "取值范围10或80",
          "page": "正整数，默认1",
          "pageRow": "正整数，范围1-100"
        }
      }
    },
    {
      "task_id": "task_010",
      "project_task_id": "1231000004",
      "service_name": "确权开立服务",
      "task_type": "api",
      "priority": 8,
      "dependencies": ["task_009"],
      "estimated_duration": "45分钟",
      "description": "实现GET /crcl-open-api/lsLimit/listUnitLimitByCompanyIdExport导出接口",
      "implementation_details": "在LsLimitController中实现Excel导出接口，复用listUnitLimitByCompanyId的数据逻辑",
      "deliverables": ["导出接口方法", "Excel工具类", "导出模板文件"],
      "completion_criteria": "接口可正常访问，能成功导出Excel文件，表头和数据格式正确",
      "parameters": {
        "project_path": "/Users/renyu/Documents/create_project/链数中建一局_1753328639/crcl-open",
        "api_path": "/crcl-open-api/lsLimit/listUnitLimitByCompanyIdExport",
        "http_method": "GET",
        "content_type": "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
        "request_params": {
          "gwCompanyId": "当前登录企业id(必填)",
          "unitName": "组织单元名称(模糊搜索)(可选)",
          "limitSource": "额度名称(模糊搜索)(可选)",
          "bizType": "10：云信额度，80：链数额度(默认)(可选)",
          "page": "页码(必填)",
          "pageRow": "每页记录数(必填)"
        },
        "response_params": {
          "flag": "0文件生成失败，1文件生成成功",
          "msg": "flag=0时的提示内容",
          "data": "flag=1时的文件下载地址"
        },
        "business_logic": "复用listUnitLimitByCompanyId接口的查询逻辑，将结果导出为Excel格式。文件生成在本地目录，采用本地链接形式返回路径。文件类型为Excel列表，文件类型：xlsx。列表头列内容：组织单元名称、额度名称、额度类型、已分配额度（元）、已用额度（元）、可用额度（元）。需要调用zqyl-user-center-service服务的/queryCompanyUnitList接口获取组织单元详细信息",
        "data_source": "调用listUnitLimitByCompanyId接口获取数据",
        "validation_rules": {
          "gwCompanyId": "必填，数值类型",
          "bizType": "取值范围10或80"
        }
      }
    },
    {
      "task_id": "task_011",
      "project_task_id": "1231000004",
      "service_name": "系统",
      "task_type": "integration_test",
      "priority": 9,
      "dependencies": ["task_008", "task_009", "task_010"],
      "estimated_duration": "30分钟",
      "description": "测试确权开立服务调用用户服务接口的完整流程",
      "implementation_details": "编写集成测试用例，验证服务间调用正确性和数据完整性",
      "deliverables": ["集成测试用例", "测试数据脚本", "测试报告"],
      "completion_criteria": "所有测试用例通过，接口调用链路正常，数据返回格式正确",
      "parameters": {
        "test_scenarios": ["组织单元额度查询测试", "Excel导出功能测试", "服务间调用测试"],
        "test_data": {"gwCompanyId": 1, "unitName": "测试单元", "bizType": 80}
      }
    },
    {
      "task_id": "task_012",
      "project_task_id": "1231000004",
      "service_name": "系统",
      "task_type": "deployment",
      "priority": 10,
      "dependencies": ["task_011"],
      "estimated_duration": "20分钟",
      "description": "提交代码到GitLab仓库，commit message: feat: 新增组织单元额度管理功能",
      "implementation_details": "执行git add、git commit和git push命令，提交所有新增和修改的代码文件",
      "deliverables": ["Git提交记录", "代码合并报告", "部署文档"],
      "completion_criteria": "代码成功提交到GitLab仓库，commit信息清晰，无冲突",
      "parameters": {
        "repositories": [
          {"path": "/Users/renyu/Documents/create_project/链数中建一局_1753328639/zqyl-user-center-service", "changes": "新增组织单元查询接口"},
          {"path": "/Users/renyu/Documents/create_project/链数中建一局_1753328639/crcl-open", "changes": "新增组织单元额度列表和导出接口"}
        ]
      }
    }
  ],
  "task_summary": {
    "total_tasks": 12,
    "execution_phases": [
      {"phase": "代码管理", "tasks": ["task_001", "task_002", "task_003"]},
      {"phase": "结构分析", "tasks": ["task_004", "task_005"]},
      {"phase": "环境配置", "tasks": ["task_006", "task_007"]},
      {"phase": "接口开发", "tasks": ["task_008", "task_009", "task_010"]},
      {"phase": "测试部署", "tasks": ["task_011", "task_012"]}
    ]
  },
  "summary": "生成任务：GitLab代码下载->结构分析->环境配置->接口开发->测试部署。严格使用设计文档中的真实接口路径和参数，确保先开发用户服务接口，再开发依赖它的确权开立服务接口。"
}
```
2025-07-24 11:45:51 - src.corder_integration.langgraph.nodes.task_simple_splitting_node - INFO - ✅ JSON解析成功，数据类型: <class 'dict'>
2025-07-24 11:45:51 - src.corder_integration.langgraph.nodes.task_simple_splitting_node - INFO - 📋 从JSON中提取的任务数量: 12
2025-07-24 11:45:51 - src.corder_integration.langgraph.nodes.task_simple_splitting_node - INFO - ✅ 已为 12 个任务添加项目标识: 1231000004
2025-07-24 11:45:51 - src.corder_integration.langgraph.nodes.task_simple_splitting_node - INFO - ✅ 任务拆分完成，生成 12 个任务
2025-07-24 11:45:51 - src.corder_integration.langgraph.nodes.task_simple_splitting_node - INFO - 📋 任务 1: git_extraction - 从设计文档提取GitLab仓库地址...
2025-07-24 11:45:51 - src.corder_integration.langgraph.nodes.task_simple_splitting_node - INFO - 📋 任务 2: git_clone - 下载用户服务代码到/Users/renyu/Documents/create_project/链数中...
2025-07-24 11:45:51 - src.corder_integration.langgraph.nodes.task_simple_splitting_node - INFO - 📋 任务 3: git_clone - 下载确权开立服务代码到/Users/renyu/Documents/create_project/链...
2025-07-24 11:45:51 - src.corder_integration.langgraph.nodes.task_simple_splitting_node - INFO - 📋 还有 9 个任务未显示
2025-07-24 11:45:51 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-24 11:45:51 - src.corder_integration.langgraph.nodes.task_simple_splitting_node - INFO - 🔄 将项目 1231000004 的旧任务设置为过期状态...
2025-07-24 11:45:51 - src.corder_integration.langgraph.nodes.task_simple_splitting_node - INFO - ✅ 成功将 0 个旧任务设置为过期状态
2025-07-24 11:45:51 - src.corder_integration.langgraph.nodes.task_simple_splitting_node - INFO - 💾 开始保存 12 个任务到数据库...
2025-07-24 11:45:51 - src.corder_integration.langgraph.nodes.task_simple_splitting_node - INFO - ✅ 任务已保存到数据库，共 12 个
2025-07-24 11:45:51 - src.corder_integration.langgraph.nodes.task_simple_splitting_node - INFO - ✅ 简化版任务拆分完成，识别 3 个服务
2025-07-24 11:45:51 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🚀 Git管理节点开始执行...
2025-07-24 11:45:51 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-24 11:45:51 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🎯 git_management_node 开始执行任务...
2025-07-24 11:45:51 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 📋 找到 3 个可执行任务
2025-07-24 11:45:51 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🚀 开始执行任务: task_001 (git_extraction)
2025-07-24 11:45:51 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_001 已被 git_management_node 领取
2025-07-24 11:45:51 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🔍 执行Git提取任务: task_001
2025-07-24 11:45:51 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 📄 提取源文本: 解析设计文档，提取用户服务 http://localhost:30000/ls/zqyl-user-center-service.git 和确权开立服务 http://localhost:30000/ls/crcl-open.git 仓库地址 从设计文档提取GitLab仓库地址...
2025-07-24 11:45:51 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🔍 开始从文本提取Git URL...
2025-07-24 11:45:51 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🔗 找到Git仓库: http://localhost:30000/ls/zqyl-user-center-service.git
2025-07-24 11:45:51 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🔗 找到Git仓库: http://localhost:30000/ls/crcl-open.git
2025-07-24 11:45:51 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 提取到 2 个Git仓库
2025-07-24 11:45:51 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_001 状态更新为 completed
2025-07-24 11:45:51 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 任务 task_001 执行成功
2025-07-24 11:45:51 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🚀 开始执行任务: task_002 (git_clone)
2025-07-24 11:45:51 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_002 已被 git_management_node 领取
2025-07-24 11:45:51 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 📥 执行Git克隆任务: task_002
2025-07-24 11:45:51 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🔍 任务参数中无repo_url，尝试从git_extraction任务结果获取...
2025-07-24 11:45:51 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 📋 从任务 task_001 的parameters中获取到 2 个仓库
2025-07-24 11:45:51 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 通过名称匹配找到仓库: zqyl-user-center-service
2025-07-24 11:45:51 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 从git_extraction结果获取到仓库地址: http://localhost:30000/ls/zqyl-user-center-service.git
2025-07-24 11:45:51 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🌿 生成新分支名称: D_202507241145_defaultproject
2025-07-24 11:45:51 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 📥 开始克隆仓库: http://localhost:30000/ls/zqyl-user-center-service.git -> /Users/renyu/Documents/create_project/default_project/zqyl-user-center-service
2025-07-24 11:45:51 - src.corder_integration.langgraph.nodes.git_management_node - WARNING - ⚠️ 目标目录已存在，将清理后重新克隆: /Users/renyu/Documents/create_project/default_project/zqyl-user-center-service
2025-07-24 11:45:51 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 已清理旧目录: /Users/renyu/Documents/create_project/default_project/zqyl-user-center-service
2025-07-24 11:45:51 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 已创建并切换到新分支: D_202507241145_defaultproject
2025-07-24 11:45:51 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 仓库克隆成功: /Users/renyu/Documents/create_project/default_project/zqyl-user-center-service
2025-07-24 11:45:51 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_002 状态更新为 completed
2025-07-24 11:45:51 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 任务 task_002 执行成功
2025-07-24 11:45:51 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🚀 开始执行任务: task_003 (git_clone)
2025-07-24 11:45:51 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_003 已被 git_management_node 领取
2025-07-24 11:45:51 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 📥 执行Git克隆任务: task_003
2025-07-24 11:45:51 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🔍 任务参数中无repo_url，尝试从git_extraction任务结果获取...
2025-07-24 11:45:51 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 📋 从任务 task_001 的parameters中获取到 2 个仓库
2025-07-24 11:45:51 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 通过名称匹配找到仓库: zqyl-user-center-service
2025-07-24 11:45:51 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 从git_extraction结果获取到仓库地址: http://localhost:30000/ls/zqyl-user-center-service.git
2025-07-24 11:45:51 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🌿 生成新分支名称: D_202507241145_defaultproject
2025-07-24 11:45:51 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 📥 开始克隆仓库: http://localhost:30000/ls/zqyl-user-center-service.git -> /Users/renyu/Documents/create_project/default_project/zqyl-user-center-service
2025-07-24 11:45:51 - src.corder_integration.langgraph.nodes.git_management_node - WARNING - ⚠️ 目标目录已存在，将清理后重新克隆: /Users/renyu/Documents/create_project/default_project/zqyl-user-center-service
2025-07-24 11:45:51 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 已清理旧目录: /Users/renyu/Documents/create_project/default_project/zqyl-user-center-service
2025-07-24 11:45:51 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 已创建并切换到新分支: D_202507241145_defaultproject
2025-07-24 11:45:51 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 仓库克隆成功: /Users/renyu/Documents/create_project/default_project/zqyl-user-center-service
2025-07-24 11:45:51 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_003 状态更新为 completed
2025-07-24 11:45:51 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 任务 task_003 执行成功
2025-07-24 11:45:51 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ Git管理任务执行完成，共处理 3 个任务
2025-07-24 11:45:51 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🚀 基于提取结果自动克隆 2 个仓库...
2025-07-24 11:45:51 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 📥 自动克隆仓库: http://localhost:30000/ls/zqyl-user-center-service.git -> /Users/renyu/Documents/create_project/链数中建一局_1753328639/zqyl-user-center-service
2025-07-24 11:45:51 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 📥 开始克隆仓库: http://localhost:30000/ls/zqyl-user-center-service.git -> /Users/renyu/Documents/create_project/链数中建一局_1753328639/zqyl-user-center-service
2025-07-24 11:45:51 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 已创建并切换到新分支: D_202507241145_链数中建一局
2025-07-24 11:45:51 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 仓库克隆成功: /Users/renyu/Documents/create_project/链数中建一局_1753328639/zqyl-user-center-service
2025-07-24 11:45:51 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 自动克隆成功: zqyl-user-center-service
2025-07-24 11:45:51 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 📥 自动克隆仓库: http://localhost:30000/ls/crcl-open.git -> /Users/renyu/Documents/create_project/链数中建一局_1753328639/crcl-open
2025-07-24 11:45:51 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 📥 开始克隆仓库: http://localhost:30000/ls/crcl-open.git -> /Users/renyu/Documents/create_project/链数中建一局_1753328639/crcl-open
2025-07-24 11:45:52 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 已创建并切换到新分支: D_202507241145_链数中建一局
2025-07-24 11:45:52 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 仓库克隆成功: /Users/renyu/Documents/create_project/链数中建一局_1753328639/crcl-open
2025-07-24 11:45:52 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 自动克隆成功: crcl-open
2025-07-24 11:45:52 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ Git管理节点完成 - 提取: 2 个仓库, 克隆: 4 个仓库, 仓库初始化状态: True
2025-07-24 11:45:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-24 11:45:52 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-24 11:45:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: config.yaml
2025-07-24 11:45:52 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-24 11:45:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250724094351-pnjf4(编码智能体专用)
2025-07-24 11:45:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-24 11:45:52 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-24 11:45:52 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-24 11:45:52 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 增强版模板+AI生成器初始化完成
2025-07-24 11:45:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 增强版模板+AI代码生成器初始化完成
2025-07-24 11:45:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 从工作流状态获取设计文档 (7416 字符)
2025-07-24 11:45:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🏷️ 智能编码节点获取项目标识: 1231000004
2025-07-24 11:45:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-24 11:45:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🏷️ 过滤项目任务标识: 1231000004
2025-07-24 11:45:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-24 11:45:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 第1轮找到 7 个可执行任务
2025-07-24 11:45:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 开始执行任务: task_004 (code_analysis)
2025-07-24 11:45:52 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_004 已被 intelligent_coding_node 领取
2025-07-24 11:45:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行代码分析任务: task_004
2025-07-24 11:45:52 - src.utils.java_code_analyzer - INFO - 🔍 开始分析企业级Java项目: /Users/renyu/Documents/create_project/链数中建一局_1753328639/zqyl-user-center-service
2025-07-24 11:45:53 - src.utils.java_code_analyzer - INFO - ✅ 企业级项目分析完成，共分析 408 个Java文件
2025-07-24 11:45:53 - src.utils.java_code_analyzer - INFO - 📄 企业级分析报告已导出: outputs/用户服务_java_analysis_20250724_114553.md
2025-07-24 11:45:53 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_004 状态更新为 completed
2025-07-24 11:45:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 任务 task_004 执行成功
2025-07-24 11:45:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 开始执行任务: task_005 (code_analysis)
2025-07-24 11:45:53 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_005 已被 intelligent_coding_node 领取
2025-07-24 11:45:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行代码分析任务: task_005
2025-07-24 11:45:53 - src.utils.java_code_analyzer - INFO - 🔍 开始分析企业级Java项目: /Users/renyu/Documents/create_project/链数中建一局_1753328639/crcl-open
2025-07-24 11:45:58 - src.utils.java_code_analyzer - INFO - ✅ 企业级项目分析完成，共分析 2262 个Java文件
2025-07-24 11:45:58 - src.utils.java_code_analyzer - INFO - 📄 企业级分析报告已导出: outputs/确权开立服务_java_analysis_20250724_114558.md
2025-07-24 11:45:58 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_005 状态更新为 completed
2025-07-24 11:45:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 任务 task_005 执行成功
2025-07-24 11:45:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 开始执行任务: task_006 (config)
2025-07-24 11:45:58 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_006 已被 intelligent_coding_node 领取
2025-07-24 11:45:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ⚙️ 执行配置生成任务: task_006
2025-07-24 11:45:58 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_006 状态更新为 completed
2025-07-24 11:45:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 任务 task_006 执行成功
2025-07-24 11:45:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 开始执行任务: task_007 (database)
2025-07-24 11:45:58 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_007 已被 intelligent_coding_node 领取
2025-07-24 11:45:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🗄️ 执行数据库设计任务: task_007
2025-07-24 11:45:58 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_007 状态更新为 completed
2025-07-24 11:45:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 任务 task_007 执行成功
2025-07-24 11:45:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 开始执行任务: task_008 (api)
2025-07-24 11:45:58 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_008 已被 intelligent_coding_node 领取
2025-07-24 11:45:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🌐 执行API接口生成任务: task_008
2025-07-24 11:45:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 解析的接口信息:
2025-07-24 11:45:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 接口名称: CompanyUnitList
2025-07-24 11:45:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - API路径: /general/multiorgManage/queryCompanyUnitList
2025-07-24 11:45:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - HTTP方法: GET
2025-07-24 11:45:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 输入参数: 3个
2025-07-24 11:45:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 输出参数: 6个
2025-07-24 11:45:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 业务描述: 根据查询条件查询组织单元信息，支持按编码、状态等条件筛选
2025-07-24 11:45:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 在 /Users/renyu/Documents/create_project/链数中建一局_1753328639/zqyl-user-center-service 中查找最佳Java项目路径...
2025-07-24 11:45:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 目标服务名: 用户服务
2025-07-24 13:37:48 - openai._base_client - INFO - Retrying request to /chat/completions in 0.420384 seconds
2025-07-24 13:37:51 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 13:37:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 发现Java项目: user-basic-general
2025-07-24 13:37:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       🎯 相对路径: zqyl-user-center-service/user-basic-service/user-basic-general
2025-07-24 13:37:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       📊 Java文件: 408个
2025-07-24 13:37:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       📐 目录深度: 3
2025-07-24 13:37:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       🏆 优先级分数: 650
2025-07-24 13:37:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 排序后的候选路径（前3个）:
2025-07-24 13:37:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    1. zqyl-user-center-service/user-basic-service/user-basic-general (优先级: 650)
2025-07-24 13:37:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 选择最佳Java项目路径:
2025-07-24 13:37:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 完整路径: /Users/renyu/Documents/create_project/链数中建一局_1753328639/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general
2025-07-24 13:37:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📋 相对路径: zqyl-user-center-service/user-basic-service/user-basic-general
2025-07-24 13:37:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    🏆 最终优先级: 650
2025-07-24 13:37:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📁 基础项目路径: /Users/renyu/Documents/create_project/链数中建一局_1753328639/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general
2025-07-24 13:37:51 - src.corder_integration.config.domain_mapping_config - INFO - ✅ 成功加载业务领域映射配置: /Users/renyu/Documents/ai_project/document_analyzer/src/corder_integration/config/domain_mapping.yaml
2025-07-24 13:37:51 - src.corder_integration.config.domain_mapping_config - INFO - 🔍 映射API关键字到业务领域: multiorgManage
2025-07-24 13:37:51 - src.corder_integration.config.domain_mapping_config - INFO - ✅ 精确匹配: multiorgManage -> multiorg
2025-07-24 13:37:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 API关键字映射: multiorgManage -> multiorg (API路径: /general/multiorgManage/queryCompanyUnitList)
2025-07-24 13:37:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🤖 使用大模型智能匹配Controller: multiorg (API: /general/multiorgManage/queryCompanyUnitList)
2025-07-24 13:37:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功扫描到 26 个Controller文件
2025-07-24 13:37:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 找到 26 个Controller文件
2025-07-24 13:37:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🤖 调用volcengine分析Controller相似度...
2025-07-24 13:37:56 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 13:37:56 - src.corder_integration.langgraph.nodes.intelligent_coding_node - ERROR - ❌ LLM响应JSON解析失败: Expecting value: line 1 column 1 (char 0)
2025-07-24 13:37:56 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 使用规则匹配方式查找Controller: multiorg
2025-07-24 13:37:56 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 智能匹配找到相似Controller: CompanyMultiorgManageController
2025-07-24 13:37:56 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 Controller路径: /Users/renyu/Documents/create_project/链数中建一局_1753328639/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general/src/main/java/com/yljr/user/basicgeneral/interfaces/controller/multiorg/CompanyMultiorgManageController.java
2025-07-24 13:37:56 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    🔢 相似度分数: 0.77
2025-07-24 13:37:56 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    💡 匹配原因: 类名包含关键字: multiorg, 路径包含关键字: multiorg, 路径片段匹配: ['general']
2025-07-24 13:37:56 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 分析目标项目: /Users/renyu/Documents/create_project/链数中建一局_1753328639/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general/src/main/java
2025-07-24 13:37:56 - src.apis.project_analysis_api - INFO - 🔍 开始分析项目用于代码生成: /Users/renyu/Documents/create_project/链数中建一局_1753328639/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general/src/main/java
2025-07-24 13:37:56 - src.apis.project_analysis_api - INFO - 🔍 在 /Users/renyu/Documents/create_project/链数中建一局_1753328639/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general/src/main/java 中查找最佳Java项目路径...
2025-07-24 13:37:56 - src.apis.project_analysis_api - INFO - 🎯 目标服务名: 用户服务
2025-07-24 13:37:56 - src.apis.project_analysis_api - WARNING - ⚠️ 在 /Users/renyu/Documents/create_project/链数中建一局_1753328639/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general/src/main/java 中未找到包含Java文件的src/main/java结构
2025-07-24 13:37:56 - src.apis.project_analysis_api - INFO - 📂 实际分析路径: /Users/renyu/Documents/create_project/链数中建一局_1753328639/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general/src/main/java
2025-07-24 13:37:56 - src.utils.java_code_analyzer - INFO - 🔍 开始分析企业级Java项目: /Users/renyu/Documents/create_project/链数中建一局_1753328639/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general/src/main/java
2025-07-24 13:37:57 - src.utils.java_code_analyzer - INFO - ✅ 企业级项目分析完成，共分析 408 个Java文件
2025-07-24 13:37:57 - src.apis.project_analysis_api - INFO - 📦 动态检测到基础包: com.yljr.user.basicgeneral (出现408次)
2025-07-24 13:37:57 - src.apis.project_analysis_api - INFO - 📦 动态检测到基础包: com.yljr.user.basicgeneral (出现408次)
2025-07-24 13:37:57 - src.apis.project_analysis_api - INFO - 📋 提取到26个Controller的详细信息
2025-07-24 13:37:57 - src.apis.project_analysis_api - INFO - 📦 动态检测到基础包: com.yljr.user.basicgeneral (出现408次)
2025-07-24 13:37:57 - src.apis.project_analysis_api - INFO - ✅ 项目分析完成，已提取代码生成上下文
2025-07-24 13:37:57 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 从编码代理获取设计文档内容 (7416 字符)
2025-07-24 13:37:57 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 设计文档内容已添加到项目上下文 (7416 字符)
2025-07-24 13:37:57 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 使用详细Controller信息，共26个Controller
2025-07-24 13:37:57 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 Controller关联性分析完成:
2025-07-24 13:37:57 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 总Controller数: 26
2025-07-24 13:37:57 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 相关Controller数: 1
2025-07-24 13:37:57 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 最高关联度: 0.45
2025-07-24 13:37:57 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 Controller关联性分析:
2025-07-24 13:37:57 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 总Controller数: 26
2025-07-24 13:37:57 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 相关Controller数: 1
2025-07-24 13:37:57 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 关联度得分: 0.45
2025-07-24 13:37:57 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 相关Controllers: ['CompanyMultiorgManageController']
2025-07-24 13:37:57 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🤖 调用volcengine分析项目策略...发送的prompt信息: Java文件数=408, Controller数=26
2025-07-24 13:38:00 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 13:38:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 项目策略判断: create_new - 虽然存在CompanyMultiorgManageController与multiorg关键字相关，但业务关联度仅0.45（<0.6），未达到enhance_existing阈值；且API路径/general/multiorgManage/queryCompanyUnitList与现有Controller路径模式不匹配，属于新的查询场景（queryCompanyUnitList），建议新建独立Controller以保持职责单一性
2025-07-24 13:38:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📁 策略2：直接使用新文件生成策略，原因: 虽然存在CompanyMultiorgManageController与multiorg关键字相关，但业务关联度仅0.45（<0.6），未达到enhance_existing阈值；且API路径/general/multiorgManage/queryCompanyUnitList与现有Controller路径模式不匹配，属于新的查询场景（queryCompanyUnitList），建议新建独立Controller以保持职责单一性
2025-07-24 13:38:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔧 规范化项目路径: /Users/renyu/Documents/create_project/链数中建一局_1753328639/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general/src/main/java -> /Users/renyu/Documents/create_project/链数中建一局_1753328639/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general
2025-07-24 13:38:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔧 策略2路径规范化:
2025-07-24 13:38:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    原始路径: /Users/renyu/Documents/create_project/链数中建一局_1753328639/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general/src/main/java
2025-07-24 13:38:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    规范化后: /Users/renyu/Documents/create_project/链数中建一局_1753328639/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general
2025-07-24 13:38:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -  调用volcengine大模型生成代码...
2025-07-24 13:38:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 开始代码生成...
2025-07-24 13:38:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎨 使用模板+AI混合模式生成代码
2025-07-24 13:38:00 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - 🎨 开始增强版代码生成: CompanyUnitList
2025-07-24 13:38:00 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - 🔍 解析到表结构: t_cust_multiorg_unit (14列)
2025-07-24 13:38:00 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - 🤖 使用智能文件复用和专门化提示词模板增强代码...
2025-07-24 13:38:00 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 设置设计文档内容，长度: 7416
2025-07-24 13:38:00 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO - 🔍 分析项目结构: /Users/renyu/Documents/create_project/链数中建一局_1753328639/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general
2025-07-24 13:38:00 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO - 🔍 从文件 GeneralApplication.java 推断基础包名: com.yljr.user.basicgeneral
2025-07-24 13:38:00 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO - ✅ 项目结构分析完成
2025-07-24 13:38:00 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO -    Controllers: 26
2025-07-24 13:38:00 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO -    Application Services: 0
2025-07-24 13:38:00 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO -    Domain Services: 0
2025-07-24 13:38:00 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO -    Mappers: 0
2025-07-24 13:38:00 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO -    Feign Clients: 0
2025-07-24 13:38:00 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO -    XML Files: 0
2025-07-24 13:38:00 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO - 🤔 决策文件复用策略: CompanyUnitList
2025-07-24 13:38:00 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO - 📋 文件复用策略决策完成:
2025-07-24 13:38:00 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO -    controller: create_new - 未找到合适的Controller (最高分数: 50)
2025-07-24 13:38:00 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO -    application_service: skip - 本地调用，可直接使用Domain Service
2025-07-24 13:38:00 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO -    domain_service: create_new - 未找到合适的Domain Service，需要创建
2025-07-24 13:38:00 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO -    mapper: create_new - 未找到合适的Mapper，需要创建
2025-07-24 13:38:00 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO -    feign_client: skip - 不需要外部服务调用
2025-07-24 13:38:00 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO -    xml_file: create_new - 需要创建新的XML文件
2025-07-24 13:38:00 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - 📋 智能文件复用策略:
2025-07-24 13:38:00 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO -    controller: create_new - 未找到合适的Controller (最高分数: 50)
2025-07-24 13:38:00 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO -    application_service: skip - 本地调用，可直接使用Domain Service
2025-07-24 13:38:00 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO -    domain_service: create_new - 未找到合适的Domain Service，需要创建
2025-07-24 13:38:00 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO -    mapper: create_new - 未找到合适的Mapper，需要创建
2025-07-24 13:38:00 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO -    feign_client: skip - 不需要外部服务调用
2025-07-24 13:38:00 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO -    xml_file: create_new - 需要创建新的XML文件
2025-07-24 13:38:00 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO - 🔗 生成完整调用链: CompanyUnitList
2025-07-24 13:38:00 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO - 🔍 找到表结构: T_CUST_MULTIORG_UNIT
2025-07-24 13:38:00 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO - ✅ 解析到 14 个字段
2025-07-24 13:38:00 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO - ✅ 调用链代码生成完成，包含 7 个组件
2025-07-24 13:38:00 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 智能文件复用生成了 7 个组件
2025-07-24 13:38:00 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - 📝 需要创建 7 个新文件
2025-07-24 13:38:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI生成成功，生成代码类型: ['controller_method', 'domain_service', 'domain_service_impl', 'request_dto', 'response_dto', 'mapper', 'xml_mapping']
2025-07-24 13:38:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 开始写入生成的代码文件...
2025-07-24 13:38:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔧 统一类名基础: CompanyUnitList
2025-07-24 13:38:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ controller_method 类名: CompanyUnitListController
2025-07-24 13:38:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ domain_service_impl 类名: CompanyUnitListServiceImpl
2025-07-24 13:38:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ request_dto 类名: CompanyUnitListReq
2025-07-24 13:38:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ response_dto 类名: CompanyUnitListResp
2025-07-24 13:38:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 标准化后的代码类型: ['controller_method', 'domain_service', 'domain_service_impl', 'request_dto', 'response_dto', 'mapper', 'xml_mapping']
2025-07-24 13:38:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🤖 调用volcengine判断Java文件输出路径...
2025-07-24 13:38:18 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 13:38:18 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM路径判断成功，配置了 7 个Java文件路径
2025-07-24 13:38:18 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 controller_method: CompanyUnitListController.java
2025-07-24 13:38:18 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 domain_service: CompanyUnitListService.java
2025-07-24 13:38:18 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 domain_service_impl: CompanyUnitListServiceImpl.java
2025-07-24 13:38:18 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 request_dto: CompanyUnitListReq.java
2025-07-24 13:38:18 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 response_dto: CompanyUnitListResp.java
2025-07-24 13:38:18 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 mapper: CompanyUnitListMapper.java
2025-07-24 13:38:18 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 xml_mapping: CompanyUnitListMapper.xml
2025-07-24 13:38:18 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 代码内容 (controller_method):

package com.yljr.user.basicgeneral.interfaces;

import com.yljr.user.basicgeneral.interfaces.dto.CompanyUnitListReq;
import com.yljr.user.basicgeneral.interfaces.dto.CompanyUnitListResp;
import com.yljr.common.dto.Response;
import org.springframework.web.bind.annotation.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.validation.annotation.Validated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import io.swagger.annotations.ApiOperation;

import javax.validation.Valid;

/**
 * CompanyUnitList Controller
 * 根据查询条件查询组织单元信息，支持按编码、状态等条件筛选
 */
@Validated
@RestController
@RequestMapping("/api/companyUnitList")
public class CompanyUnitListController {

    private final Logger logger = LoggerFactory.getLogger(this.getClass());
    
    @Autowired
    private CompanyUnitListService companyunitlistService;

    /**
     * 根据查询条件查询组织单元信息，支持按编码、状态等条件筛选
     */
    @PostMapping("/companyUnitList")
    @ApiOperation(value = "根据查询条件查询组织单元信息，支持按编码、状态等条件筛选")
    public Response<CompanyUnitListResp> companyUnitList(@RequestBody @Valid CompanyUnitListReq request) {
        try {
            logger.info("开始执行companyUnitList，请求参数: {}", request);
            
            return companyUnitListService.companyUnitList(request);
            
        } catch (Exception e) {
            logger.error("执行companyUnitList失败", e);
            return Response.error("执行失败: " + e.getMessage());
        }
    }
}
2025-07-24 13:38:18 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: /Users/renyu/Documents/create_project/链数中建一局_1753328639/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general/src/main/java/com/yljr/user/basicgeneral/interfaces/CompanyUnitListController.java
2025-07-24 13:38:18 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: /Users/renyu/Documents/create_project/链数中建一局_1753328639/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general/src/main/java/com/yljr/user/basicgeneral/interfaces/CompanyUnitListController.java
2025-07-24 13:38:18 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 代码内容 (domain_service):
package com.yljr.user.basicgeneral.domain.service;

import com.yljr.user.basicgeneral.interfaces.dto.CompanyUnitListReq;
import com.yljr.user.basicgeneral.interfaces.dto.CompanyUnitListResp;

/**
 * CompanyUnitList Domain Service Interface
 * 根据查询条件查询组织单元信息，支持按编码、状态等条件筛选
 */
public interface CompanyUnitListService {

    /**
     * 根据查询条件查询组织单元信息，支持按编码、状态等条件筛选
     */
    CompanyUnitListResp companyUnitList(CompanyUnitListReq request);
}
2025-07-24 13:38:18 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: /Users/renyu/Documents/create_project/链数中建一局_1753328639/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general/src/main/java/com/yljr/user/basicgeneral/domain/service/CompanyUnitListService.java
2025-07-24 13:38:18 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: /Users/renyu/Documents/create_project/链数中建一局_1753328639/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general/src/main/java/com/yljr/user/basicgeneral/domain/service/CompanyUnitListService.java
2025-07-24 13:38:18 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 代码内容 (domain_service_impl):
package com.yljr.user.basicgeneral.domain.service.impl;

import com.yljr.user.basicgeneral.domain.service.CompanyUnitListService;
import com.yljr.user.basicgeneral.interfaces.dto.CompanyUnitListReq;
import com.yljr.user.basicgeneral.interfaces.dto.CompanyUnitListResp;
import com.yljr.user.basicgeneral.domain.entity.CompanyUnitList;
import com.yljr.user.basicgeneral.domain.mapper.CompanyUnitListMapper;
import org.springframework.stereotype.Service;
import org.springframework.beans.factory.annotation.Autowired;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import java.util.List;

/**
 * CompanyUnitList Domain Service Implementation
 * 根据查询条件查询组织单元信息，支持按编码、状态等条件筛选
 */
@Service
public class CompanyUnitListServiceImpl implements CompanyUnitListService {

    private static final Logger logger = LoggerFactory.getLogger(CompanyUnitListServiceImpl.class);
    
    @Autowired
    private CompanyUnitListMapper companyunitlistMapper;

    /**
     * 根据查询条件查询组织单元信息，支持按编码、状态等条件筛选
     */
    @Override
    public CompanyUnitListResp companyUnitList(CompanyUnitListReq request) {
        logger.info("Domain Service执行CompanyUnitList，参数: {}", request);
        
        try {
        // 调用Mapper查询数据
        List<CompanyUnitList> dataList = companyunitlistMapper.selectCompanyUnitListList(request);
        
        // 构建响应
        CompanyUnitListResp response = new CompanyUnitListResp();
        response.setDataList(dataList);
        response.setTotalCount(dataList.size());
        
        return response;
        } catch (Exception e) {
            logger.error("Domain Service执行CompanyUnitList失败", e);
            throw new RuntimeException("执行失败: " + e.getMessage(), e);
        }
    }
}
2025-07-24 13:38:18 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: /Users/renyu/Documents/create_project/链数中建一局_1753328639/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general/src/main/java/com/yljr/user/basicgeneral/domain/service/impl/CompanyUnitListServiceImpl.java
2025-07-24 13:38:18 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: /Users/renyu/Documents/create_project/链数中建一局_1753328639/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general/src/main/java/com/yljr/user/basicgeneral/domain/service/impl/CompanyUnitListServiceImpl.java
2025-07-24 13:38:18 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 代码内容 (request_dto):

package com.yljr.user.basicgeneral.interfaces.dto;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Date;
import java.math.BigDecimal;

/**
 * CompanyUnitList 请求DTO
 * 根据查询条件查询组织单元信息，支持按编码、状态等条件筛选
 */
@ApiModel(value = "CompanyUnitListReq", description = "根据查询条件查询组织单元信息，支持按编码、状态等条件筛选")
public class CompanyUnitListReq {

    /**
     * 组织单元编号(可选)
     */
    @ApiModelProperty(value = "组织单元编号(可选)")
    private String unitCode;
    /**
     * 组织单元状态 1：正常；0：禁用(可选)
     */
    @ApiModelProperty(value = "组织单元状态 1：正常；0：禁用(可选)")
    private String openStatus;
    /**
     * 组织单元id列表(可选)
     */
    @ApiModelProperty(value = "组织单元id列表(可选)")
    private String unitList;

    public String getUnitCode() {
        return unitCode;
    }

    public void setUnitCode(String unitCode) {
        this.unitCode = unitCode;
    }
    public String getOpenStatus() {
        return openStatus;
    }

    public void setOpenStatus(String openStatus) {
        this.openStatus = openStatus;
    }
    public String getUnitList() {
        return unitList;
    }

    public void setUnitList(String unitList) {
        this.unitList = unitList;
    }

    @Override
    public String toString() {
        return "CompanyUnitListReq{" +
                "unitCode=" + unitCode + ", " +
                "openStatus=" + openStatus + ", " +
                "unitList=" + unitList +
                "};";
    }
}
2025-07-24 13:38:18 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: /Users/renyu/Documents/create_project/链数中建一局_1753328639/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general/src/main/java/com/yljr/user/basicgeneral/interfaces/dto/CompanyUnitListReq.java
2025-07-24 13:38:18 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: /Users/renyu/Documents/create_project/链数中建一局_1753328639/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general/src/main/java/com/yljr/user/basicgeneral/interfaces/dto/CompanyUnitListReq.java
2025-07-24 13:38:18 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 代码内容 (response_dto):

package com.yljr.user.basicgeneral.interfaces.dto;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.List;
import java.util.Date;
import java.math.BigDecimal;

/**
 * CompanyUnitList 响应DTO
 * 根据查询条件查询组织单元信息，支持按编码、状态等条件筛选
 */
@ApiModel(value = "CompanyUnitListResp", description = "根据查询条件查询组织单元信息，支持按编码、状态等条件筛选")
public class CompanyUnitListResp {

    /**
     * 组织单元id
     */
    @ApiModelProperty(value = "组织单元id")
    private String unitId;
    /**
     * 组织单元类型 1：开立，2：支付
     */
    @ApiModelProperty(value = "组织单元类型 1：开立，2：支付")
    private String unitTypeDicType;
    /**
     * 组织单元类型表id
     */
    @ApiModelProperty(value = "组织单元类型表id")
    private String unitTypeId;
    /**
     * 组织单元状态 1：正常；0：禁用
     */
    @ApiModelProperty(value = "组织单元状态 1：正常；0：禁用")
    private String openStatus;
    /**
     * 组织编号
     */
    @ApiModelProperty(value = "组织编号")
    private String unitCode;
    /**
     * 组织单元名称
     */
    @ApiModelProperty(value = "组织单元名称")
    private String unitName;

    public String getUnitId() {
        return unitId;
    }

    public void setUnitId(String unitId) {
        this.unitId = unitId;
    }
    public String getUnitTypeDicType() {
        return unitTypeDicType;
    }

    public void setUnitTypeDicType(String unitTypeDicType) {
        this.unitTypeDicType = unitTypeDicType;
    }
    public String getUnitTypeId() {
        return unitTypeId;
    }

    public void setUnitTypeId(String unitTypeId) {
        this.unitTypeId = unitTypeId;
    }
    public String getOpenStatus() {
        return openStatus;
    }

    public void setOpenStatus(String openStatus) {
        this.openStatus = openStatus;
    }
    public String getUnitCode() {
        return unitCode;
    }

    public void setUnitCode(String unitCode) {
        this.unitCode = unitCode;
    }
    public String getUnitName() {
        return unitName;
    }

    public void setUnitName(String unitName) {
        this.unitName = unitName;
    }

    @Override
    public String toString() {
        return "CompanyUnitListResp{" +
                "unitId=" + unitId + ", " +
                "unitTypeDicType=" + unitTypeDicType + ", " +
                "unitTypeId=" + unitTypeId + ", " +
                "openStatus=" + openStatus + ", " +
                "unitCode=" + unitCode + ", " +
                "unitName=" + unitName +
                "};";
    }
}
2025-07-24 13:38:18 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: /Users/renyu/Documents/create_project/链数中建一局_1753328639/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general/src/main/java/com/yljr/user/basicgeneral/interfaces/dto/CompanyUnitListResp.java
2025-07-24 13:38:18 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: /Users/renyu/Documents/create_project/链数中建一局_1753328639/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general/src/main/java/com/yljr/user/basicgeneral/interfaces/dto/CompanyUnitListResp.java
2025-07-24 13:38:18 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 代码内容 (mapper):

package com.yljr.user.basicgeneral.domain.mapper;

import com.yljr.user.basicgeneral.interfaces.dto.CompanyUnitListReq;
import com.yljr.user.basicgeneral.domain.entity.CompanyUnitList;
import org.apache.ibatis.annotations.Mapper;
import org.apache.ibatis.annotations.Param;
import java.util.List;

/**
 * CompanyUnitList Mapper接口
 * 根据查询条件查询组织单元信息，支持按编码、状态等条件筛选
 */
@Mapper
public interface CompanyUnitListMapper {

    /**
     * 根据条件查询CompanyUnitList列表
     */
    List<CompanyUnitList> selectCompanyUnitListList(@Param("condition") CompanyUnitListReq condition);

    /**
     * 根据主键查询CompanyUnitList
     */
    CompanyUnitList selectByPrimaryKey(@Param("id") Long id);

    /**
     * 新增CompanyUnitList记录
     */
    int insert(CompanyUnitList record);

    /**
     * 更新CompanyUnitList记录
     */
    int updateByPrimaryKey(CompanyUnitList record);

    /**
     * 删除CompanyUnitList记录
     */
    int deleteByPrimaryKey(@Param("id") Long id);
}
2025-07-24 13:38:18 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: /Users/renyu/Documents/create_project/链数中建一局_1753328639/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general/src/main/java/com/yljr/user/basicgeneral/domain/mapper/CompanyUnitListMapper.java
2025-07-24 13:38:18 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: /Users/renyu/Documents/create_project/链数中建一局_1753328639/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general/src/main/java/com/yljr/user/basicgeneral/domain/mapper/CompanyUnitListMapper.java
2025-07-24 13:38:18 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 代码内容 (xml_mapping):
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yljr.user.basicgeneral.domain.mapper.CompanyUnitListMapper">

    <resultMap id="BaseResultMap" type="com.yljr.user.basicgeneral.domain.entity.CompanyUnitList">
        <id column="id" jdbcType="BIGINT" property="id" />
        <result column="company_id" jdbcType="BIGINT" property="companyId" />
        <result column="mutilorg_id" jdbcType="BIGINT" property="mutilorgId" />
        <result column="unit_code" jdbcType="VARCHAR" property="unitCode" />
        <result column="unit_name" jdbcType="VARCHAR" property="unitName" />
        <result column="remark" jdbcType="VARCHAR" property="remark" />
        <result column="platform_type" jdbcType="INTEGER" property="platformType" />
        <result column="status" jdbcType="INTEGER" property="status" />
        <result column="create_id" jdbcType="BIGINT" property="createId" />
        <result column="oper_user_name" jdbcType="VARCHAR" property="operUserName" />
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
        <result column="modify_id" jdbcType="BIGINT" property="modifyId" />
        <result column="modify_user_name" jdbcType="VARCHAR" property="modifyUserName" />
        <result column="modify_time" jdbcType="TIMESTAMP" property="modifyTime" />
    </resultMap>

    <sql id="Base_Column_List">
        id, company_id, mutilorg_id, unit_code, unit_name, remark, platform_type, status, create_id, oper_user_name,
        create_time, modify_id, modify_user_name, modify_time
    </sql>

    <select id="selectCompanyUnitListList" parameterType="com.yljr.user.basicgeneral.interfaces.dto.CompanyUnitListReq" 
            resultMap="BaseResultMap">
        SELECT 
        <include refid="Base_Column_List" />
        FROM T_CUST_MULTIORG_UNIT
        WHERE 1=1
        <if test="condition.unitCode != null and condition.unitCode != ''">
            AND unit_code = #{condition.unitCode}
        </if>
        <if test="condition.status != null">
            AND status = #{condition.status}
        </if>
        ORDER BY CREATE_TIME DESC
    </select>

    <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
        SELECT 
        <include refid="Base_Column_List" />
        FROM T_CUST_MULTIORG_UNIT
        WHERE ID = #{id,jdbcType=BIGINT}
    </select>

    <insert id="insert" parameterType="com.yljr.user.basicgeneral.domain.entity.CompanyUnitList">
        INSERT INTO T_CUST_MULTIORG_UNIT (company_id, mutilorg_id, unit_code, unit_name, remark, platform_type, status, create_id, oper_user_name, create_time, modify_id, modify_user_name, modify_time)
        VALUES (#{companyId}, #{mutilorgId}, #{unitCode}, #{unitName}, #{remark}, #{platformType}, #{status}, #{createId}, #{operUserName}, #{createTime}, #{modifyId}, #{modifyUserName}, #{modifyTime})
    </insert>

    <update id="updateByPrimaryKey" parameterType="com.yljr.user.basicgeneral.domain.entity.CompanyUnitList">
        UPDATE T_CUST_MULTIORG_UNIT
        SET company_id = #{companyId},
            mutilorg_id = #{mutilorgId},
            unit_code = #{unitCode},
            unit_name = #{unitName},
            remark = #{remark},
            platform_type = #{platformType},
            status = #{status},
            create_id = #{createId},
            oper_user_name = #{operUserName},
            modify_id = #{modifyId},
            modify_user_name = #{modifyUserName},
            modify_time = #{modifyTime}
        WHERE ID = #{id}
    </update>

    <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
        DELETE FROM T_CUST_MULTIORG_UNIT
        WHERE ID = #{id,jdbcType=BIGINT}
    </delete>

</mapper>
2025-07-24 13:38:18 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: /Users/renyu/Documents/create_project/链数中建一局_1753328639/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general/src/main/resources/mapper/CompanyUnitListMapper.xml
2025-07-24 13:38:18 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: /Users/renyu/Documents/create_project/链数中建一局_1753328639/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general/src/main/resources/mapper/CompanyUnitListMapper.xml
2025-07-24 13:38:18 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📊 代码生成完成，共写入 7 个文件到项目中
2025-07-24 13:38:18 - src.corder_integration.utils.backup_cleaner - INFO - 🧹 开始清理项目备份: /Users/renyu/Documents/create_project/链数中建一局_1753328639/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general
2025-07-24 13:38:18 - src.corder_integration.utils.backup_cleaner - INFO - 🎉 备份清理完成: 删除 0 目录, 0 文件
2025-07-24 13:38:18 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🗑️ 已清理项目分析缓存，确保下次分析获取最新状态
2025-07-24 13:38:18 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_008 状态更新为 completed
2025-07-24 13:38:18 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 任务 task_008 执行成功
2025-07-24 13:38:18 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 开始执行任务: task_009 (api)
2025-07-24 13:38:18 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_009 已被 intelligent_coding_node 领取
2025-07-24 13:38:18 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🌐 执行API接口生成任务: task_009
2025-07-24 13:38:18 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 解析的接口信息:
2025-07-24 13:38:18 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 接口名称: UnitLimitByCompanyId
2025-07-24 13:38:18 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - API路径: /crcl-open-api/lsLimit/listUnitLimitByCompanyId
2025-07-24 13:38:18 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - HTTP方法: GET
2025-07-24 13:38:18 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 输入参数: 6个
2025-07-24 13:38:18 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 输出参数: 4个
2025-07-24 13:38:18 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 业务描述: 根据公司ID和筛选条件查询组织单元额度信息，调用用户服务获取组织单元详细信息。采用pagehelper进行分页，需要调用zqyl-user-center-service服务的/queryCompanyUnitList接口获取组织单元详细信息
2025-07-24 13:38:18 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 在 /Users/renyu/Documents/create_project/链数中建一局_1753328639/crcl-open 中查找最佳Java项目路径...
2025-07-24 13:38:18 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 目标服务名: 确权开立服务
2025-07-24 13:38:18 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 13:38:18 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 发现Java项目: crcl-open
2025-07-24 13:38:18 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       🎯 相对路径: crcl-open
2025-07-24 13:38:18 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       📊 Java文件: 2251个
2025-07-24 13:38:18 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       📐 目录深度: 1
2025-07-24 13:38:18 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       🏆 优先级分数: 750
2025-07-24 13:38:18 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 排序后的候选路径（前3个）:
2025-07-24 13:38:18 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    1. crcl-open (优先级: 750)
2025-07-24 13:38:18 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 选择最佳Java项目路径:
2025-07-24 13:38:18 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 完整路径: /Users/renyu/Documents/create_project/链数中建一局_1753328639/crcl-open/crcl-open
2025-07-24 13:38:18 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📋 相对路径: crcl-open
2025-07-24 13:38:18 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    🏆 最终优先级: 750
2025-07-24 13:38:18 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📁 基础项目路径: /Users/renyu/Documents/create_project/链数中建一局_1753328639/crcl-open/crcl-open
2025-07-24 13:38:18 - src.corder_integration.config.domain_mapping_config - INFO - 🔍 映射API关键字到业务领域: lsLimit
2025-07-24 13:38:18 - src.corder_integration.config.domain_mapping_config - INFO - ✅ 精确匹配: lsLimit -> lsLimit
2025-07-24 13:38:18 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 API关键字映射: lsLimit -> lsLimit (API路径: /crcl-open-api/lsLimit/listUnitLimitByCompanyId)
2025-07-24 13:38:18 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🤖 使用大模型智能匹配Controller: lsLimit (API: /crcl-open-api/lsLimit/listUnitLimitByCompanyId)
2025-07-24 13:38:18 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功扫描到 53 个Controller文件
2025-07-24 13:38:18 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 找到 53 个Controller文件
2025-07-24 13:38:18 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🤖 调用volcengine分析Controller相似度...
2025-07-24 13:38:26 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 13:38:26 - src.corder_integration.langgraph.nodes.intelligent_coding_node - ERROR - ❌ LLM响应JSON解析失败: Expecting value: line 1 column 1 (char 0)
2025-07-24 13:38:26 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 使用规则匹配方式查找Controller: lsLimit
2025-07-24 13:38:26 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 智能匹配找到相似Controller: LsLimitController
2025-07-24 13:38:26 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 Controller路径: /Users/renyu/Documents/create_project/链数中建一局_1753328639/crcl-open/crcl-open/src/main/java/com/yljr/crcl/limit/interfaces/LsLimitController.java
2025-07-24 13:38:26 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    🔢 相似度分数: 0.80
2025-07-24 13:38:26 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    💡 匹配原因: 类名包含关键字: lsLimit, 路径包含关键字: lsLimit, 包名业务相关: limit
2025-07-24 13:38:26 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 分析目标项目: /Users/renyu/Documents/create_project/链数中建一局_1753328639/crcl-open/crcl-open/src/main/java
2025-07-24 13:38:26 - src.apis.project_analysis_api - INFO - 🔍 开始分析项目用于代码生成: /Users/renyu/Documents/create_project/链数中建一局_1753328639/crcl-open/crcl-open/src/main/java
2025-07-24 13:38:26 - src.apis.project_analysis_api - INFO - 🔍 在 /Users/renyu/Documents/create_project/链数中建一局_1753328639/crcl-open/crcl-open/src/main/java 中查找最佳Java项目路径...
2025-07-24 13:38:26 - src.apis.project_analysis_api - INFO - 🎯 目标服务名: 确权开立服务
2025-07-24 13:38:26 - src.apis.project_analysis_api - WARNING - ⚠️ 在 /Users/renyu/Documents/create_project/链数中建一局_1753328639/crcl-open/crcl-open/src/main/java 中未找到包含Java文件的src/main/java结构
2025-07-24 13:38:26 - src.apis.project_analysis_api - INFO - 📂 实际分析路径: /Users/renyu/Documents/create_project/链数中建一局_1753328639/crcl-open/crcl-open/src/main/java
2025-07-24 13:38:26 - src.utils.java_code_analyzer - INFO - 🔍 开始分析企业级Java项目: /Users/renyu/Documents/create_project/链数中建一局_1753328639/crcl-open/crcl-open/src/main/java
2025-07-24 13:38:31 - src.utils.java_code_analyzer - INFO - ✅ 企业级项目分析完成，共分析 2240 个Java文件
2025-07-24 13:38:31 - src.apis.project_analysis_api - INFO - 📦 动态检测到基础包: com.yljr.crcl (出现2240次)
2025-07-24 13:38:31 - src.apis.project_analysis_api - INFO - 📦 动态检测到基础包: com.yljr.crcl (出现2240次)
2025-07-24 13:38:31 - src.apis.project_analysis_api - INFO - 📋 提取到48个Controller的详细信息
2025-07-24 13:38:31 - src.apis.project_analysis_api - INFO - 📦 动态检测到基础包: com.yljr.crcl (出现2240次)
2025-07-24 13:38:31 - src.apis.project_analysis_api - INFO - ✅ 项目分析完成，已提取代码生成上下文
2025-07-24 13:38:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 从编码代理获取设计文档内容 (7416 字符)
2025-07-24 13:38:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 设计文档内容已添加到项目上下文 (7416 字符)
2025-07-24 13:38:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 使用详细Controller信息，共48个Controller
2025-07-24 13:38:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 Controller关联性分析完成:
2025-07-24 13:38:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 总Controller数: 48
2025-07-24 13:38:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 相关Controller数: 1
2025-07-24 13:38:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 最高关联度: 0.45
2025-07-24 13:38:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 Controller关联性分析:
2025-07-24 13:38:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 总Controller数: 48
2025-07-24 13:38:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 相关Controller数: 1
2025-07-24 13:38:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 关联度得分: 0.45
2025-07-24 13:38:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 相关Controllers: ['LsLimitController']
2025-07-24 13:38:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🤖 调用volcengine分析项目策略...发送的prompt信息: Java文件数=2240, Controller数=48
2025-07-24 13:38:39 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 13:38:39 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 项目策略判断: create_new - 虽然项目已存在LsLimitController，但其业务关联度仅为0.45（<0.6），未达到“enhance_existing”的阈值；且当前API路径 /crcl-open-api/lsLimit/listUnitLimitByCompanyId 与现有Controller的路径模式（/lsLimit）虽前缀一致，但功能粒度不同（listUnitLimitByCompanyId 明显是面向“单位额度”的独立查询场景）。此外，业务关联度偏低说明现有Controller可能聚焦在更宏观的额度管理，而本次需求属于更细分的单位维度，为避免既有接口职责膨胀及未来维护复杂度，建议新建独立Controller以清晰划分边界。
2025-07-24 13:38:39 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📁 策略2：直接使用新文件生成策略，原因: 虽然项目已存在LsLimitController，但其业务关联度仅为0.45（<0.6），未达到“enhance_existing”的阈值；且当前API路径 /crcl-open-api/lsLimit/listUnitLimitByCompanyId 与现有Controller的路径模式（/lsLimit）虽前缀一致，但功能粒度不同（listUnitLimitByCompanyId 明显是面向“单位额度”的独立查询场景）。此外，业务关联度偏低说明现有Controller可能聚焦在更宏观的额度管理，而本次需求属于更细分的单位维度，为避免既有接口职责膨胀及未来维护复杂度，建议新建独立Controller以清晰划分边界。
2025-07-24 13:38:39 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔧 规范化项目路径: /Users/renyu/Documents/create_project/链数中建一局_1753328639/crcl-open/crcl-open/src/main/java -> /Users/renyu/Documents/create_project/链数中建一局_1753328639/crcl-open/crcl-open
2025-07-24 13:38:39 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔧 策略2路径规范化:
2025-07-24 13:38:39 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    原始路径: /Users/renyu/Documents/create_project/链数中建一局_1753328639/crcl-open/crcl-open/src/main/java
2025-07-24 13:38:39 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    规范化后: /Users/renyu/Documents/create_project/链数中建一局_1753328639/crcl-open/crcl-open
2025-07-24 13:38:39 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -  调用volcengine大模型生成代码...
2025-07-24 13:38:39 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 开始代码生成...
2025-07-24 13:38:39 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎨 使用模板+AI混合模式生成代码
2025-07-24 13:38:39 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - 🎨 开始增强版代码生成: UnitLimitByCompanyId
2025-07-24 13:38:39 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - 🔍 检测到PageHelper分页要求
2025-07-24 13:38:39 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - 🔍 检测到服务调用: 用户服务 -> /queryCompanyUnitList
2025-07-24 13:38:39 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - 🔍 检测到服务调用: 用户服务 -> /queryCompanyUnitList
2025-07-24 13:38:39 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - 🔍 检测到服务调用: zqyl-user-center-service服务 -> /queryCompanyUnitList
2025-07-24 13:38:39 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - 🔍 检测到服务调用: zqyl-user-center-service服务 -> /queryCompanyUnitList
2025-07-24 13:38:39 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - 🔍 检测到服务调用: -service -> /queryCompanyUnitList接口获取组织单元详细信息根据公司ID和筛选条件查询组织单元额度信息
2025-07-24 13:38:39 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - 🔍 检测到服务调用: -service -> /queryCompanyUnitList接口获取组织单元详细信息
2025-07-24 13:38:39 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - 🔍 解析到表结构: t_cust_multiorg_unit (14列)
2025-07-24 13:38:39 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - 🤖 使用智能文件复用和专门化提示词模板增强代码...
2025-07-24 13:38:39 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 设置设计文档内容，长度: 7416
2025-07-24 13:38:39 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO - 🔍 分析项目结构: /Users/renyu/Documents/create_project/链数中建一局_1753328639/crcl-open/crcl-open
2025-07-24 13:38:39 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO - ✅ 项目结构分析完成
2025-07-24 13:38:39 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO -    Controllers: 49
2025-07-24 13:38:39 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO -    Application Services: 36
2025-07-24 13:38:39 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO -    Domain Services: 37
2025-07-24 13:38:39 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO -    Mappers: 46
2025-07-24 13:38:39 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO -    Feign Clients: 0
2025-07-24 13:38:39 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO -    XML Files: 108
2025-07-24 13:38:39 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO - 🤔 决策文件复用策略: UnitLimitByCompanyId
2025-07-24 13:38:39 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO - 📋 文件复用策略决策完成:
2025-07-24 13:38:39 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO -    controller: create_new - 未找到合适的Controller (最高分数: 0)
2025-07-24 13:38:39 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO -    application_service: create_new - 需要Feign调用，创建新的Application Service
2025-07-24 13:38:39 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO -    domain_service: create_new - 未找到合适的Domain Service，需要创建
2025-07-24 13:38:39 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO -    mapper: create_new - 未找到合适的Mapper，需要创建
2025-07-24 13:38:39 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO -    feign_client: create_new - 未找到合适的Feign Client，需要创建
2025-07-24 13:38:39 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO -    xml_file: create_new - 需要创建新的XML文件
2025-07-24 13:38:39 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - 📋 智能文件复用策略:
2025-07-24 13:38:39 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO -    controller: create_new - 未找到合适的Controller (最高分数: 0)
2025-07-24 13:38:39 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO -    application_service: create_new - 需要Feign调用，创建新的Application Service
2025-07-24 13:38:39 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO -    domain_service: create_new - 未找到合适的Domain Service，需要创建
2025-07-24 13:38:39 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO -    mapper: create_new - 未找到合适的Mapper，需要创建
2025-07-24 13:38:39 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO -    feign_client: create_new - 未找到合适的Feign Client，需要创建
2025-07-24 13:38:39 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO -    xml_file: create_new - 需要创建新的XML文件
2025-07-24 13:38:39 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO - 🔗 生成完整调用链: UnitLimitByCompanyId
2025-07-24 13:38:39 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO - 🔍 找到表结构: T_CUST_MULTIORG_UNIT
2025-07-24 13:38:39 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO - ✅ 解析到 14 个字段
2025-07-24 13:38:39 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO - ✅ 调用链代码生成完成，包含 9 个组件
2025-07-24 13:38:39 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 智能文件复用生成了 9 个组件
2025-07-24 13:38:39 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - 📝 需要创建 9 个新文件
2025-07-24 13:38:39 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI生成成功，生成代码类型: ['controller_method', 'application_service', 'domain_service', 'domain_service_impl', 'request_dto', 'response_dto', 'mapper', 'feign_client', 'xml_mapping']
2025-07-24 13:38:39 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 开始写入生成的代码文件...
2025-07-24 13:38:39 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔧 统一类名基础: UnitLimitByCompanyId
2025-07-24 13:38:39 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ controller_method 类名: UnitLimitByCompanyIdController
2025-07-24 13:38:39 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ application_service 类名: UnitLimitByCompanyIdApplication
2025-07-24 13:38:39 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ domain_service_impl 类名: UnitLimitByCompanyIdServiceImpl
2025-07-24 13:38:39 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ request_dto 类名: UnitLimitByCompanyIdReq
2025-07-24 13:38:39 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ response_dto 类名: UnitLimitByCompanyIdResp
2025-07-24 13:38:39 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 标准化后的代码类型: ['controller_method', 'application_service', 'domain_service', 'domain_service_impl', 'request_dto', 'response_dto', 'mapper', 'feign_client', 'xml_mapping']
2025-07-24 13:38:39 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🤖 调用volcengine判断Java文件输出路径...
2025-07-24 13:38:49 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 13:38:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM路径判断成功，配置了 9 个Java文件路径
2025-07-24 13:38:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 controller_method: UnitLimitByCompanyIdController.java
2025-07-24 13:38:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 application_service: UnitLimitByCompanyIdApplication.java
2025-07-24 13:38:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 domain_service: UnitLimitByCompanyIdService.java
2025-07-24 13:38:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 domain_service_impl: UnitLimitByCompanyIdServiceImpl.java
2025-07-24 13:38:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 request_dto: UnitLimitByCompanyIdReq.java
2025-07-24 13:38:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 response_dto: UnitLimitByCompanyIdResp.java
2025-07-24 13:38:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 mapper: UnitLimitByCompanyIdMapper.java
2025-07-24 13:38:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 feign_client: UnitLimitByCompanyIdFeignClient.java
2025-07-24 13:38:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 xml_mapping: UnitLimitByCompanyIdMapper.xml
2025-07-24 13:38:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 代码内容 (controller_method):

package com.yljr.crcl.interfaces;

import com.yljr.crcl.interfaces.dto.UnitLimitByCompanyIdReq;
import com.yljr.crcl.interfaces.dto.UnitLimitByCompanyIdResp;
import com.yljr.common.dto.Response;
import org.springframework.web.bind.annotation.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.validation.annotation.Validated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import io.swagger.annotations.ApiOperation;

import javax.validation.Valid;

/**
 * UnitLimitByCompanyId Controller
 * 根据公司ID和筛选条件查询组织单元额度信息，调用用户服务获取组织单元详细信息。采用pagehelper进行分页，需要调用zqyl-user-center-service服务的/queryCompanyUnitList接口获取组织单元详细信息
 */
@Validated
@RestController
@RequestMapping("/api/unitLimitByCompanyId")
public class UnitLimitByCompanyIdController {

    private final Logger logger = LoggerFactory.getLogger(this.getClass());
    
    @Autowired
    private UnitLimitByCompanyIdApplication unitLimitByCompanyIdApplication;

    /**
     * 根据公司ID和筛选条件查询组织单元额度信息，调用用户服务获取组织单元详细信息。采用pagehelper进行分页，需要调用zqyl-user-center-service服务的/queryCompanyUnitList接口获取组织单元详细信息
     */
    @PostMapping("/unitLimitByCompanyId")
    @ApiOperation(value = "根据公司ID和筛选条件查询组织单元额度信息，调用用户服务获取组织单元详细信息。采用pagehelper进行分页，需要调用zqyl-user-center-service服务的/queryCompanyUnitList接口获取组织单元详细信息")
    public Response<UnitLimitByCompanyIdResp> unitLimitByCompanyId(@RequestBody @Valid UnitLimitByCompanyIdReq request) {
        try {
            logger.info("开始执行unitLimitByCompanyId，请求参数: {}", request);
            
            return unitLimitByCompanyIdApplication.unitLimitByCompanyId(request);
            
        } catch (Exception e) {
            logger.error("执行unitLimitByCompanyId失败", e);
            return Response.error("执行失败: " + e.getMessage());
        }
    }
}
2025-07-24 13:38:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: /Users/renyu/Documents/create_project/链数中建一局_1753328639/crcl-open/crcl-open/src/main/java/com/yljr/crcl/interfaces/UnitLimitByCompanyIdController.java
2025-07-24 13:38:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: /Users/renyu/Documents/create_project/链数中建一局_1753328639/crcl-open/crcl-open/src/main/java/com/yljr/crcl/interfaces/UnitLimitByCompanyIdController.java
2025-07-24 13:38:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 代码内容 (application_service):

package com.yljr.crcl.application.service;

import com.yljr.crcl.interfaces.dto.UnitLimitByCompanyIdReq;
import com.yljr.crcl.interfaces.dto.UnitLimitByCompanyIdResp;
import org.springframework.stereotype.Service;
import org.springframework.beans.factory.annotation.Autowired;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * UnitLimitByCompanyId Application Service
 * 根据公司ID和筛选条件查询组织单元额度信息，调用用户服务获取组织单元详细信息。采用pagehelper进行分页，需要调用zqyl-user-center-service服务的/queryCompanyUnitList接口获取组织单元详细信息
 */
@Service
public class UnitLimitByCompanyIdApplication {

    private static final Logger logger = LoggerFactory.getLogger(UnitLimitByCompanyIdApplication.class);
    
    @Autowired
    private UnitLimitByCompanyIdFeignClient unitlimitbycompanyidFeignClient;

    /**
     * 根据公司ID和筛选条件查询组织单元额度信息，调用用户服务获取组织单元详细信息。采用pagehelper进行分页，需要调用zqyl-user-center-service服务的/queryCompanyUnitList接口获取组织单元详细信息
     */
    public UnitLimitByCompanyIdResp UnitLimitByCompanyId(UnitLimitByCompanyIdReq request) {
        logger.info("Application Service执行UnitLimitByCompanyId，参数: {}", request);
        
        try {
            return unitlimitbycompanyidFeignClient.UnitLimitByCompanyId(request);
        } catch (Exception e) {
            logger.error("Application Service执行UnitLimitByCompanyId失败", e);
            throw new RuntimeException("执行失败: " + e.getMessage(), e);
        }
    }
}
2025-07-24 13:38:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: /Users/renyu/Documents/create_project/链数中建一局_1753328639/crcl-open/crcl-open/src/main/java/com/yljr/crcl/application/service/UnitLimitByCompanyIdApplication.java
2025-07-24 13:38:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: /Users/renyu/Documents/create_project/链数中建一局_1753328639/crcl-open/crcl-open/src/main/java/com/yljr/crcl/application/service/UnitLimitByCompanyIdApplication.java
2025-07-24 13:38:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 代码内容 (domain_service):
package com.yljr.crcl.domain.service;

import com.yljr.crcl.interfaces.dto.UnitLimitByCompanyIdReq;
import com.yljr.crcl.interfaces.dto.UnitLimitByCompanyIdResp;

/**
 * UnitLimitByCompanyId Domain Service Interface
 * 根据公司ID和筛选条件查询组织单元额度信息，调用用户服务获取组织单元详细信息。采用pagehelper进行分页，需要调用zqyl-user-center-service服务的/queryCompanyUnitList接口获取组织单元详细信息
 */
public interface UnitLimitByCompanyIdService {

    /**
     * 根据公司ID和筛选条件查询组织单元额度信息，调用用户服务获取组织单元详细信息。采用pagehelper进行分页，需要调用zqyl-user-center-service服务的/queryCompanyUnitList接口获取组织单元详细信息
     */
    UnitLimitByCompanyIdResp unitLimitByCompanyId(UnitLimitByCompanyIdReq request);
}
2025-07-24 13:38:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: /Users/renyu/Documents/create_project/链数中建一局_1753328639/crcl-open/crcl-open/src/main/java/com/yljr/crcl/domain/service/UnitLimitByCompanyIdService.java
2025-07-24 13:38:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: /Users/renyu/Documents/create_project/链数中建一局_1753328639/crcl-open/crcl-open/src/main/java/com/yljr/crcl/domain/service/UnitLimitByCompanyIdService.java
2025-07-24 13:38:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 代码内容 (domain_service_impl):
package com.yljr.crcl.domain.service.impl;

import com.yljr.crcl.domain.service.UnitLimitByCompanyIdService;
import com.yljr.crcl.interfaces.dto.UnitLimitByCompanyIdReq;
import com.yljr.crcl.interfaces.dto.UnitLimitByCompanyIdResp;
import com.yljr.crcl.domain.entity.UnitLimitByCompanyId;
import com.yljr.crcl.domain.mapper.UnitLimitByCompanyIdMapper;
import org.springframework.stereotype.Service;
import org.springframework.beans.factory.annotation.Autowired;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import java.util.List;

/**
 * UnitLimitByCompanyId Domain Service Implementation
 * 根据公司ID和筛选条件查询组织单元额度信息，调用用户服务获取组织单元详细信息。采用pagehelper进行分页，需要调用zqyl-user-center-service服务的/queryCompanyUnitList接口获取组织单元详细信息
 */
@Service
public class UnitLimitByCompanyIdServiceImpl implements UnitLimitByCompanyIdService {

    private static final Logger logger = LoggerFactory.getLogger(UnitLimitByCompanyIdServiceImpl.class);
    
    @Autowired
    private UnitLimitByCompanyIdMapper unitlimitbycompanyidMapper;

    /**
     * 根据公司ID和筛选条件查询组织单元额度信息，调用用户服务获取组织单元详细信息。采用pagehelper进行分页，需要调用zqyl-user-center-service服务的/queryCompanyUnitList接口获取组织单元详细信息
     */
    @Override
    public UnitLimitByCompanyIdResp unitLimitByCompanyId(UnitLimitByCompanyIdReq request) {
        logger.info("Domain Service执行UnitLimitByCompanyId，参数: {}", request);
        
        try {
        // 调用Mapper查询数据
        List<UnitLimitByCompanyId> dataList = unitlimitbycompanyidMapper.selectUnitLimitByCompanyIdList(request);
        
        // 构建响应
        UnitLimitByCompanyIdResp response = new UnitLimitByCompanyIdResp();
        response.setDataList(dataList);
        response.setTotalCount(dataList.size());
        
        return response;
        } catch (Exception e) {
            logger.error("Domain Service执行UnitLimitByCompanyId失败", e);
            throw new RuntimeException("执行失败: " + e.getMessage(), e);
        }
    }
}
2025-07-24 13:38:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: /Users/renyu/Documents/create_project/链数中建一局_1753328639/crcl-open/crcl-open/src/main/java/com/yljr/crcl/domain/service/impl/UnitLimitByCompanyIdServiceImpl.java
2025-07-24 13:38:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: /Users/renyu/Documents/create_project/链数中建一局_1753328639/crcl-open/crcl-open/src/main/java/com/yljr/crcl/domain/service/impl/UnitLimitByCompanyIdServiceImpl.java
2025-07-24 13:38:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 代码内容 (request_dto):

package com.yljr.crcl.interfaces.dto;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Date;
import java.math.BigDecimal;

/**
 * UnitLimitByCompanyId 请求DTO
 * 根据公司ID和筛选条件查询组织单元额度信息，调用用户服务获取组织单元详细信息。采用pagehelper进行分页，需要调用zqyl-user-center-service服务的/queryCompanyUnitList接口获取组织单元详细信息
 */
@ApiModel(value = "UnitLimitByCompanyIdReq", description = "根据公司ID和筛选条件查询组织单元额度信息，调用用户服务获取组织单元详细信息。采用pagehelper进行分页，需要调用zqyl-user-center-service服务的/queryCompanyUnitList接口获取组织单元详细信息")
public class UnitLimitByCompanyIdReq {

    /**
     * 当前登录企业id(必填)
     */
    @ApiModelProperty(value = "当前登录企业id(必填)")
    private String gwCompanyId;
    /**
     * 组织单元名称(模糊搜索)(可选)
     */
    @ApiModelProperty(value = "组织单元名称(模糊搜索)(可选)")
    private String unitName;
    /**
     * 额度名称(模糊搜索)(可选)
     */
    @ApiModelProperty(value = "额度名称(模糊搜索)(可选)")
    private String limitSource;
    /**
     * 10：云信额度，80：链数额度(默认)(可选)
     */
    @ApiModelProperty(value = "10：云信额度，80：链数额度(默认)(可选)")
    private String bizType;
    /**
     * 页码(必填)
     */
    @ApiModelProperty(value = "页码(必填)")
    private String page;
    /**
     * 每页记录数(必填)
     */
    @ApiModelProperty(value = "每页记录数(必填)")
    private String pageRow;

    public String getGwCompanyId() {
        return gwCompanyId;
    }

    public void setGwCompanyId(String gwCompanyId) {
        this.gwCompanyId = gwCompanyId;
    }
    public String getUnitName() {
        return unitName;
    }

    public void setUnitName(String unitName) {
        this.unitName = unitName;
    }
    public String getLimitSource() {
        return limitSource;
    }

    public void setLimitSource(String limitSource) {
        this.limitSource = limitSource;
    }
    public String getBizType() {
        return bizType;
    }

    public void setBizType(String bizType) {
        this.bizType = bizType;
    }
    public String getPage() {
        return page;
    }

    public void setPage(String page) {
        this.page = page;
    }
    public String getPageRow() {
        return pageRow;
    }

    public void setPageRow(String pageRow) {
        this.pageRow = pageRow;
    }

    @Override
    public String toString() {
        return "UnitLimitByCompanyIdReq{" +
                "gwCompanyId=" + gwCompanyId + ", " +
                "unitName=" + unitName + ", " +
                "limitSource=" + limitSource + ", " +
                "bizType=" + bizType + ", " +
                "page=" + page + ", " +
                "pageRow=" + pageRow +
                "};";
    }
}
2025-07-24 13:38:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: /Users/renyu/Documents/create_project/链数中建一局_1753328639/crcl-open/crcl-open/src/main/java/com/yljr/crcl/interfaces/dto/UnitLimitByCompanyIdReq.java
2025-07-24 13:38:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: /Users/renyu/Documents/create_project/链数中建一局_1753328639/crcl-open/crcl-open/src/main/java/com/yljr/crcl/interfaces/dto/UnitLimitByCompanyIdReq.java
2025-07-24 13:38:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 代码内容 (response_dto):

package com.yljr.crcl.interfaces.dto;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.List;
import java.util.Date;
import java.math.BigDecimal;

/**
 * UnitLimitByCompanyId 响应DTO
 * 根据公司ID和筛选条件查询组织单元额度信息，调用用户服务获取组织单元详细信息。采用pagehelper进行分页，需要调用zqyl-user-center-service服务的/queryCompanyUnitList接口获取组织单元详细信息
 */
@ApiModel(value = "UnitLimitByCompanyIdResp", description = "根据公司ID和筛选条件查询组织单元额度信息，调用用户服务获取组织单元详细信息。采用pagehelper进行分页，需要调用zqyl-user-center-service服务的/queryCompanyUnitList接口获取组织单元详细信息")
public class UnitLimitByCompanyIdResp {

    /**
     * 总额度
     */
    @ApiModelProperty(value = "总额度")
    private String totalLimitAmt;
    /**
     * 已用额度
     */
    @ApiModelProperty(value = "已用额度")
    private String usedLimitAmt;
    /**
     * 可用额度
     */
    @ApiModelProperty(value = "可用额度")
    private String usableLimitAmt;
    /**
     * 额度信息列表
     */
    @ApiModelProperty(value = "额度信息列表")
    private String unitLimitListDetail;

    public String getTotalLimitAmt() {
        return totalLimitAmt;
    }

    public void setTotalLimitAmt(String totalLimitAmt) {
        this.totalLimitAmt = totalLimitAmt;
    }
    public String getUsedLimitAmt() {
        return usedLimitAmt;
    }

    public void setUsedLimitAmt(String usedLimitAmt) {
        this.usedLimitAmt = usedLimitAmt;
    }
    public String getUsableLimitAmt() {
        return usableLimitAmt;
    }

    public void setUsableLimitAmt(String usableLimitAmt) {
        this.usableLimitAmt = usableLimitAmt;
    }
    public String getUnitLimitListDetail() {
        return unitLimitListDetail;
    }

    public void setUnitLimitListDetail(String unitLimitListDetail) {
        this.unitLimitListDetail = unitLimitListDetail;
    }

    @Override
    public String toString() {
        return "UnitLimitByCompanyIdResp{" +
                "totalLimitAmt=" + totalLimitAmt + ", " +
                "usedLimitAmt=" + usedLimitAmt + ", " +
                "usableLimitAmt=" + usableLimitAmt + ", " +
                "unitLimitListDetail=" + unitLimitListDetail +
                "};";
    }
}
2025-07-24 13:38:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: /Users/renyu/Documents/create_project/链数中建一局_1753328639/crcl-open/crcl-open/src/main/java/com/yljr/crcl/interfaces/dto/UnitLimitByCompanyIdResp.java
2025-07-24 13:38:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: /Users/renyu/Documents/create_project/链数中建一局_1753328639/crcl-open/crcl-open/src/main/java/com/yljr/crcl/interfaces/dto/UnitLimitByCompanyIdResp.java
2025-07-24 13:38:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 代码内容 (mapper):

package com.yljr.crcl.domain.mapper;

import com.yljr.crcl.interfaces.dto.UnitLimitByCompanyIdReq;
import com.yljr.crcl.domain.entity.UnitLimitByCompanyId;
import org.apache.ibatis.annotations.Mapper;
import org.apache.ibatis.annotations.Param;
import java.util.List;

/**
 * UnitLimitByCompanyId Mapper接口
 * 根据公司ID和筛选条件查询组织单元额度信息，调用用户服务获取组织单元详细信息。采用pagehelper进行分页，需要调用zqyl-user-center-service服务的/queryCompanyUnitList接口获取组织单元详细信息
 */
@Mapper
public interface UnitLimitByCompanyIdMapper {

    /**
     * 根据条件查询UnitLimitByCompanyId列表
     */
    List<UnitLimitByCompanyId> selectUnitLimitByCompanyIdList(@Param("condition") UnitLimitByCompanyIdReq condition);

    /**
     * 根据主键查询UnitLimitByCompanyId
     */
    UnitLimitByCompanyId selectByPrimaryKey(@Param("id") Long id);

    /**
     * 新增UnitLimitByCompanyId记录
     */
    int insert(UnitLimitByCompanyId record);

    /**
     * 更新UnitLimitByCompanyId记录
     */
    int updateByPrimaryKey(UnitLimitByCompanyId record);

    /**
     * 删除UnitLimitByCompanyId记录
     */
    int deleteByPrimaryKey(@Param("id") Long id);
}
2025-07-24 13:38:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: /Users/renyu/Documents/create_project/链数中建一局_1753328639/crcl-open/crcl-open/src/main/java/com/yljr/crcl/domain/mapper/UnitLimitByCompanyIdMapper.java
2025-07-24 13:38:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: /Users/renyu/Documents/create_project/链数中建一局_1753328639/crcl-open/crcl-open/src/main/java/com/yljr/crcl/domain/mapper/UnitLimitByCompanyIdMapper.java
2025-07-24 13:38:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 代码内容 (feign_client):

package com.yljr.crcl.application.feign;

import com.yljr.crcl.interfaces.dto.UnitLimitByCompanyIdReq;
import com.yljr.crcl.interfaces.dto.UnitLimitByCompanyIdResp;
import com.yljr.common.dto.ResponseInfo;
import org.springframework.cloud.openfeign.FeignClient;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.http.MediaType;

/**
 * UnitLimitByCompanyId Feign接口
 * 根据公司ID和筛选条件查询组织单元额度信息，调用用户服务获取组织单元详细信息。采用pagehelper进行分页，需要调用zqyl-user-center-service服务的/queryCompanyUnitList接口获取组织单元详细信息
 */
@FeignClient(name = "zqyl-user-auth", path = "/userCenter/server")
public interface UnitLimitByCompanyIdFeignClient {

    /**
     * 根据公司ID和筛选条件查询组织单元额度信息，调用用户服务获取组织单元详细信息。采用pagehelper进行分页，需要调用zqyl-user-center-service服务的/queryCompanyUnitList接口获取组织单元详细信息
     */
    @PostMapping(value = "/queryCompanyInfo", consumes = MediaType.APPLICATION_JSON_UTF8_VALUE)
    ResponseInfo<UnitLimitByCompanyIdResp> UnitLimitByCompanyId(@RequestBody UnitLimitByCompanyIdReq request);
}
2025-07-24 13:38:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: /Users/renyu/Documents/create_project/链数中建一局_1753328639/crcl-open/crcl-open/src/main/java/com/yljr/crcl/application/feign/UnitLimitByCompanyIdFeignClient.java
2025-07-24 13:38:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: /Users/renyu/Documents/create_project/链数中建一局_1753328639/crcl-open/crcl-open/src/main/java/com/yljr/crcl/application/feign/UnitLimitByCompanyIdFeignClient.java
2025-07-24 13:38:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 代码内容 (xml_mapping):
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yljr.crcl.domain.mapper.UnitLimitByCompanyIdMapper">

    <resultMap id="BaseResultMap" type="com.yljr.crcl.domain.entity.UnitLimitByCompanyId">
        <id column="id" jdbcType="BIGINT" property="id" />
        <result column="company_id" jdbcType="BIGINT" property="companyId" />
        <result column="mutilorg_id" jdbcType="BIGINT" property="mutilorgId" />
        <result column="unit_code" jdbcType="VARCHAR" property="unitCode" />
        <result column="unit_name" jdbcType="VARCHAR" property="unitName" />
        <result column="remark" jdbcType="VARCHAR" property="remark" />
        <result column="platform_type" jdbcType="INTEGER" property="platformType" />
        <result column="status" jdbcType="INTEGER" property="status" />
        <result column="create_id" jdbcType="BIGINT" property="createId" />
        <result column="oper_user_name" jdbcType="VARCHAR" property="operUserName" />
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
        <result column="modify_id" jdbcType="BIGINT" property="modifyId" />
        <result column="modify_user_name" jdbcType="VARCHAR" property="modifyUserName" />
        <result column="modify_time" jdbcType="TIMESTAMP" property="modifyTime" />
    </resultMap>

    <sql id="Base_Column_List">
        id, company_id, mutilorg_id, unit_code, unit_name, remark, platform_type, status, create_id, oper_user_name,
        create_time, modify_id, modify_user_name, modify_time
    </sql>

    <select id="selectUnitLimitByCompanyIdList" parameterType="com.yljr.crcl.interfaces.dto.UnitLimitByCompanyIdReq" 
            resultMap="BaseResultMap">
        SELECT 
        <include refid="Base_Column_List" />
        FROM T_CUST_MULTIORG_UNIT
        WHERE 1=1
        <if test="condition.unitName != null and condition.unitName != ''">
            AND unit_name LIKE CONCAT('%', #{condition.unitName}, '%')
        </if>
        <if test="condition.status != null">
            AND status = #{condition.status}
        </if>
        ORDER BY CREATE_TIME DESC
    </select>

    <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
        SELECT 
        <include refid="Base_Column_List" />
        FROM T_CUST_MULTIORG_UNIT
        WHERE ID = #{id,jdbcType=BIGINT}
    </select>

    <insert id="insert" parameterType="com.yljr.crcl.domain.entity.UnitLimitByCompanyId">
        INSERT INTO T_CUST_MULTIORG_UNIT (company_id, mutilorg_id, unit_code, unit_name, remark, platform_type, status, create_id, oper_user_name, create_time, modify_id, modify_user_name, modify_time)
        VALUES (#{companyId}, #{mutilorgId}, #{unitCode}, #{unitName}, #{remark}, #{platformType}, #{status}, #{createId}, #{operUserName}, #{createTime}, #{modifyId}, #{modifyUserName}, #{modifyTime})
    </insert>

    <update id="updateByPrimaryKey" parameterType="com.yljr.crcl.domain.entity.UnitLimitByCompanyId">
        UPDATE T_CUST_MULTIORG_UNIT
        SET company_id = #{companyId},
            mutilorg_id = #{mutilorgId},
            unit_code = #{unitCode},
            unit_name = #{unitName},
            remark = #{remark},
            platform_type = #{platformType},
            status = #{status},
            create_id = #{createId},
            oper_user_name = #{operUserName},
            modify_id = #{modifyId},
            modify_user_name = #{modifyUserName},
            modify_time = #{modifyTime}
        WHERE ID = #{id}
    </update>

    <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
        DELETE FROM T_CUST_MULTIORG_UNIT
        WHERE ID = #{id,jdbcType=BIGINT}
    </delete>

</mapper>
2025-07-24 13:38:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: /Users/renyu/Documents/create_project/链数中建一局_1753328639/crcl-open/crcl-open/src/main/resources/mapper/UnitLimitByCompanyIdMapper.xml
2025-07-24 13:38:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: /Users/renyu/Documents/create_project/链数中建一局_1753328639/crcl-open/crcl-open/src/main/resources/mapper/UnitLimitByCompanyIdMapper.xml
2025-07-24 13:38:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📊 代码生成完成，共写入 9 个文件到项目中
2025-07-24 13:38:49 - src.corder_integration.utils.backup_cleaner - INFO - 🧹 开始清理项目备份: /Users/renyu/Documents/create_project/链数中建一局_1753328639/crcl-open/crcl-open
2025-07-24 13:38:49 - src.corder_integration.utils.backup_cleaner - INFO - 🎉 备份清理完成: 删除 0 目录, 0 文件
2025-07-24 13:38:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🗑️ 已清理项目分析缓存，确保下次分析获取最新状态
2025-07-24 13:38:49 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_009 状态更新为 completed
2025-07-24 13:38:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 任务 task_009 执行成功
2025-07-24 13:38:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 开始执行任务: task_010 (api)
2025-07-24 13:38:49 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_010 已被 intelligent_coding_node 领取
2025-07-24 13:38:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🌐 执行API接口生成任务: task_010
2025-07-24 13:38:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 解析的接口信息:
2025-07-24 13:38:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 接口名称: UnitLimitByCompanyIdExport
2025-07-24 13:38:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - API路径: /crcl-open-api/lsLimit/listUnitLimitByCompanyIdExport
2025-07-24 13:38:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - HTTP方法: GET
2025-07-24 13:38:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 输入参数: 6个
2025-07-24 13:38:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 输出参数: 3个
2025-07-24 13:38:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 业务描述: 复用listUnitLimitByCompanyId接口的查询逻辑，将结果导出为Excel格式。文件生成在本地目录，采用本地链接形式返回路径。文件类型为Excel列表，文件类型：xlsx。列表头列内容：组织单元名称、额度名称、额度类型、已分配额度（元）、已用额度（元）、可用额度（元）。需要调用zqyl-user-center-service服务的/queryCompanyUnitList接口获取组织单元详细信息
2025-07-24 13:38:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 在 /Users/renyu/Documents/create_project/链数中建一局_1753328639/crcl-open 中查找最佳Java项目路径...
2025-07-24 13:38:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 目标服务名: 确权开立服务
2025-07-24 13:38:49 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 13:38:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 发现Java项目: crcl-open
2025-07-24 13:38:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       🎯 相对路径: crcl-open
2025-07-24 13:38:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       📊 Java文件: 2259个
2025-07-24 13:38:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       📐 目录深度: 1
2025-07-24 13:38:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       🏆 优先级分数: 720
2025-07-24 13:38:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 排序后的候选路径（前3个）:
2025-07-24 13:38:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    1. crcl-open (优先级: 720)
2025-07-24 13:38:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 选择最佳Java项目路径:
2025-07-24 13:38:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 完整路径: /Users/renyu/Documents/create_project/链数中建一局_1753328639/crcl-open/crcl-open
2025-07-24 13:38:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📋 相对路径: crcl-open
2025-07-24 13:38:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    🏆 最终优先级: 720
2025-07-24 13:38:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📁 基础项目路径: /Users/renyu/Documents/create_project/链数中建一局_1753328639/crcl-open/crcl-open
2025-07-24 13:38:49 - src.corder_integration.config.domain_mapping_config - INFO - 🔍 映射API关键字到业务领域: lsLimit
2025-07-24 13:38:49 - src.corder_integration.config.domain_mapping_config - INFO - ✅ 精确匹配: lsLimit -> lsLimit
2025-07-24 13:38:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 API关键字映射: lsLimit -> lsLimit (API路径: /crcl-open-api/lsLimit/listUnitLimitByCompanyIdExport)
2025-07-24 13:38:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🤖 使用大模型智能匹配Controller: lsLimit (API: /crcl-open-api/lsLimit/listUnitLimitByCompanyIdExport)
2025-07-24 13:38:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功扫描到 54 个Controller文件
2025-07-24 13:38:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 找到 54 个Controller文件
2025-07-24 13:38:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🤖 调用volcengine分析Controller相似度...
2025-07-24 13:38:55 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 13:38:55 - src.corder_integration.langgraph.nodes.intelligent_coding_node - ERROR - ❌ LLM响应JSON解析失败: Expecting value: line 1 column 1 (char 0)
2025-07-24 13:38:55 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 使用规则匹配方式查找Controller: lsLimit
2025-07-24 13:38:55 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 智能匹配找到相似Controller: LsLimitController
2025-07-24 13:38:55 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 Controller路径: /Users/renyu/Documents/create_project/链数中建一局_1753328639/crcl-open/crcl-open/src/main/java/com/yljr/crcl/limit/interfaces/LsLimitController.java
2025-07-24 13:38:55 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    🔢 相似度分数: 0.80
2025-07-24 13:38:55 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    💡 匹配原因: 类名包含关键字: lsLimit, 路径包含关键字: lsLimit, 包名业务相关: limit
2025-07-24 13:38:55 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 分析目标项目: /Users/renyu/Documents/create_project/链数中建一局_1753328639/crcl-open/crcl-open/src/main/java
2025-07-24 13:38:55 - src.apis.project_analysis_api - INFO - 🔍 开始分析项目用于代码生成: /Users/renyu/Documents/create_project/链数中建一局_1753328639/crcl-open/crcl-open/src/main/java
2025-07-24 13:38:55 - src.apis.project_analysis_api - INFO - 🔄 检测到Java文件数量变化 (2251 -> 2259)，清除缓存
2025-07-24 13:38:55 - src.apis.project_analysis_api - INFO - 🔍 在 /Users/renyu/Documents/create_project/链数中建一局_1753328639/crcl-open/crcl-open/src/main/java 中查找最佳Java项目路径...
2025-07-24 13:38:55 - src.apis.project_analysis_api - INFO - 🎯 目标服务名: 确权开立服务
2025-07-24 13:38:55 - src.apis.project_analysis_api - WARNING - ⚠️ 在 /Users/renyu/Documents/create_project/链数中建一局_1753328639/crcl-open/crcl-open/src/main/java 中未找到包含Java文件的src/main/java结构
2025-07-24 13:38:55 - src.apis.project_analysis_api - INFO - 📂 实际分析路径: /Users/renyu/Documents/create_project/链数中建一局_1753328639/crcl-open/crcl-open/src/main/java
2025-07-24 13:38:55 - src.utils.java_code_analyzer - INFO - 🔍 开始分析企业级Java项目: /Users/renyu/Documents/create_project/链数中建一局_1753328639/crcl-open/crcl-open/src/main/java
2025-07-24 13:39:00 - src.utils.java_code_analyzer - INFO - ✅ 企业级项目分析完成，共分析 2248 个Java文件
2025-07-24 13:39:00 - src.apis.project_analysis_api - INFO - 📦 动态检测到基础包: com.yljr.crcl (出现2248次)
2025-07-24 13:39:00 - src.apis.project_analysis_api - INFO - 📦 动态检测到基础包: com.yljr.crcl (出现2248次)
2025-07-24 13:39:00 - src.apis.project_analysis_api - INFO - 📋 提取到49个Controller的详细信息
2025-07-24 13:39:00 - src.apis.project_analysis_api - INFO - 📦 动态检测到基础包: com.yljr.crcl (出现2248次)
2025-07-24 13:39:00 - src.apis.project_analysis_api - INFO - ✅ 项目分析完成，已提取代码生成上下文
2025-07-24 13:39:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 从编码代理获取设计文档内容 (7416 字符)
2025-07-24 13:39:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 设计文档内容已添加到项目上下文 (7416 字符)
2025-07-24 13:39:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 使用详细Controller信息，共49个Controller
2025-07-24 13:39:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 Controller关联性分析完成:
2025-07-24 13:39:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 总Controller数: 49
2025-07-24 13:39:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 相关Controller数: 1
2025-07-24 13:39:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 最高关联度: 0.45
2025-07-24 13:39:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 Controller关联性分析:
2025-07-24 13:39:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 总Controller数: 49
2025-07-24 13:39:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 相关Controller数: 1
2025-07-24 13:39:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 关联度得分: 0.45
2025-07-24 13:39:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 相关Controllers: ['LsLimitController']
2025-07-24 13:39:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🤖 调用volcengine分析项目策略...发送的prompt信息: Java文件数=2248, Controller数=49
2025-07-24 13:39:03 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 13:39:03 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 项目策略判断: enhance_existing - 虽然业务关联度0.45略低于0.6的硬性阈值，但项目已存在名为LsLimitController的Controller，且其命名与API关键字lsLimit完全一致，表明该Controller已专门用于处理限额相关功能。API路径/crcl-open-api/lsLimit/...也与LsLimitController的@RequestMapping前缀匹配，属于同一业务领域。在已有明确对应Controller的情况下，新增功能应优先复用现有Controller以保持代码集中性和业务一致性，而非分散到新的Controller中。
2025-07-24 13:39:03 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 进入策略1管理器========================
2025-07-24 13:39:03 - src.corder_integration.code_generator.strategy1_manager - INFO - 🚀 开始执行策略1: lsLimit
2025-07-24 13:39:03 - src.corder_integration.code_generator.strategy1_manager - INFO - 🔧 从路径 /Users/renyu/Documents/create_project/链数中建一局_1753328639/crcl-open/crcl-open/src/main/java 提取项目根目录: /Users/renyu/Documents/create_project/链数中建一局_1753328639/crcl-open/crcl-open
2025-07-24 13:39:03 - src.corder_integration.code_generator.strategy1_manager - INFO - 📁 原始路径: /Users/renyu/Documents/create_project/链数中建一局_1753328639/crcl-open/crcl-open/src/main/java
2025-07-24 13:39:03 - src.corder_integration.code_generator.strategy1_manager - INFO - 📁 项目根路径: /Users/renyu/Documents/create_project/链数中建一局_1753328639/crcl-open/crcl-open
2025-07-24 13:39:03 - src.corder_integration.code_generator.strategy1_manager - INFO - 📊 第1步：分析项目结构
2025-07-24 13:39:03 - src.corder_integration.code_generator.project_structure_analyzer - INFO - 🔍 开始分析项目结构: /Users/renyu/Documents/create_project/链数中建一局_1753328639/crcl-open/crcl-open
2025-07-24 13:39:03 - src.corder_integration.code_generator.project_structure_analyzer - INFO - 📁 目录树结构生成完成
2025-07-24 13:39:03 - src.corder_integration.code_generator.project_structure_analyzer - INFO - 🔍 开始解析目录树结构...
2025-07-24 13:39:03 - src.corder_integration.code_generator.project_structure_analyzer - INFO - 📊 从目录树解析完成:
2025-07-24 13:39:03 - src.corder_integration.code_generator.project_structure_analyzer - INFO -    Controllers: 47
2025-07-24 13:39:03 - src.corder_integration.code_generator.project_structure_analyzer - INFO -    Services: 238
2025-07-24 13:39:03 - src.corder_integration.code_generator.project_structure_analyzer - INFO -    Mappers: 98
2025-07-24 13:39:03 - src.corder_integration.code_generator.project_structure_analyzer - INFO -    Entities: 240
2025-07-24 13:39:03 - src.corder_integration.code_generator.project_structure_analyzer - INFO -    DTOs: 354
2025-07-24 13:39:03 - src.corder_integration.code_generator.project_structure_analyzer - INFO -    总Java文件: 1527
2025-07-24 13:39:03 - src.corder_integration.code_generator.project_structure_analyzer - WARNING - ⚠️ 无法从目录树推断包名，使用默认值
2025-07-24 13:39:03 - src.corder_integration.code_generator.project_structure_analyzer - INFO - ✅ 项目结构分析完成
2025-07-24 13:39:03 - src.corder_integration.code_generator.project_structure_analyzer - INFO -    基础包名: com.yljr.crcl.limit
2025-07-24 13:39:03 - src.corder_integration.code_generator.project_structure_analyzer - INFO -    总Java文件: 1527
2025-07-24 13:39:03 - src.corder_integration.code_generator.project_structure_analyzer - INFO -    Controllers: 47
2025-07-24 13:39:03 - src.corder_integration.code_generator.project_structure_analyzer - INFO -    Services: 238
2025-07-24 13:39:03 - src.corder_integration.code_generator.project_structure_analyzer - INFO -    Mappers: 98
2025-07-24 13:39:03 - src.corder_integration.code_generator.project_structure_analyzer - INFO -    Entities: 240
2025-07-24 13:39:03 - src.corder_integration.code_generator.project_structure_analyzer - INFO -    DTOs: 354
2025-07-24 13:39:03 - src.corder_integration.code_generator.strategy1_manager - INFO - 🤖 第2步：LLM决策实现方案
2025-07-24 13:39:03 - src.corder_integration.code_generator.llm_decision_maker - INFO - 🤖 开始LLM决策：lsLimit
2025-07-24 13:39:03 - src.corder_integration.code_generator.llm_decision_maker - INFO - 🔧 生成的LLM决策提示词长度: 136468 字符
2025-07-24 13:39:03 - src.corder_integration.code_generator.llm_decision_maker - INFO - 🔍 LLM决策提示词:你是一个Java Spring Boot项目的DDD架构师，需要分析项目结构并决定如何实现新的API接口功能。

## 项目信息
- API关键字: lsLimit
- 业务逻辑: 复用listUnitLimitByCompanyId接口的查询逻辑，将结果导出为Excel格式。文件生成在本地目录，采用本地链接形式返回路径。文件类型为Excel列表，文件类型：xlsx。列表头列内容：组织单元名称、额度名称、额度类型、已分配额度（元）、已用额度（元）、可用额度（元）。需要调用zqyl-user-center-service服务的/queryCompanyUnitList接口获取组织单元详细信息
- 基础包名: com.yljr.crcl.limit
- 项目路径: /Users/renyu/Documents/create_project/链数中建一局_1753328639/crcl-open/crcl-open

### 📋 详细的API任务需求
**API路径**: /crcl-open-api/lsLimit/listUnitLimitByCompanyIdExport
**HTTP方法**: GET
**Content-Type**: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet
**接口名称**: UnitLimitByCompanyIdExport
**接口描述**: N/A
**业务逻辑**: 复用listUnitLimitByCompanyId接口的查询逻辑，将结果导出为Excel格式。文件生成在本地目录，采用本地链接形式返回路径。文件类型为Excel列表，文件类型：xlsx。列表头列内容：组织单元名称、额度名称、额度类型、已分配额度（元）、已用额度（元）、可用额度（元）。需要调用zqyl-user-center-service服务的/queryCompanyUnitList接口获取组织单元详细信息

**请求参数**:
  - gwCompanyId: 当前登录企业id(必填)
  - unitName: 组织单元名称(模糊搜索)(可选)
  - limitSource: 额度名称(模糊搜索)(可选)
  - bizType: 10：云信额度，80：链数额度(默认)(可选)
  - page: 页码(必填)
  - pageRow: 每页记录数(必填)

**响应参数**:
  - flag: 0文件生成失败，1文件生成成功
  - msg: flag=0时的提示内容
  - data: flag=1时的文件下载地址

**数据来源**: 调用listUnitLimitByCompanyId接口获取数据
**外部服务调用**: 
**验证规则**:
  - gwCompanyId: 必填，数值类型
  - bizType: 取值范围10或80

## 📁 完整项目结构
📁 crcl-open/
📁 src/ (2381 files)
├── 📁 main/ (2359 files)
│   ├── 📁 java/ (2248 files)
│   │   └── 📁 com/ (2248 files)
│   │       └── 📁 yljr/ (2248 files)
│   │           └── 📁 crcl/ (2248 files)
│   │               ├── 📁 application/ (2 files)
│   │               │   ├── 📁 feign/ (1 files)
│   │               │   │   └── ☕ UnitLimitByCompanyIdFeignClient.java (1.3KB)
│   │               │   └── 📁 service/ (1 files)
│   │               │       └── ☕ UnitLimitByCompanyIdApplication.java (1.6KB)
│   │               ├── 📁 credit/ (94 files)
│   │               │   ├── 📁 application/ (31 files)
│   │               │   │   ├── 📁 dto/ (11 files)
│   │               │   │   │   ├── ☕ CreditAddDetailDto.java (1.2KB)
│   │               │   │   │   ├── ☕ CreditBankCodeDto.java (785B)
│   │               │   │   │   ├── ☕ CreditByUnitIdDto.java (977B)
│   │               │   │   │   ├── ☕ CreditDetailDto.java (4.8KB)
│   │               │   │   │   ├── ☕ CreditDetailUnitDto.java (3.9KB)
│   │               │   │   │   ├── ☕ CreditListDto.java (7.1KB)
│   │               │   │   │   ├── ☕ CreditMqDto.java (3.1KB)
│   │               │   │   │   ├── ☕ CreditSaveUnitDto.java (2.8KB)
│   │               │   │   │   ├── ☕ CreditUnitDto.java (1.1KB)
│   │               │   │   │   ├── ☕ SelectCreditListDto.java (5.2KB)
│   │               │   │   │   └── ☕ SumCreditAmtDto.java (2.0KB)
│   │               │   │   ├── 📁 feign/ (14 files)
│   │               │   │   │   ├── 📁 company/ (11 files)
│   │               │   │   │   │   ├── 📁 dto/ (7 files)
│   │               │   │   │   │   ├── ☕ CustCompanyCreditFeignApi.java (1.5KB)
│   │               │   │   │   │   ├── ☕ CustCompanyFeign.java (1.5KB)
│   │               │   │   │   │   ├── ☕ CustUnitCreditFeignApi.java (4.0KB)
│   │               │   │   │   │   └── ☕ CustUnitFeign.java (2.0KB)
│   │               │   │   │   └── 📁 lettercredit/ (3 files)
│   │               │   │   │       ├── ☕ CheckModelHavedDto.java (647B)
│   │               │   │   │       ├── ☕ LetterCreditFeign.java (1.1KB)
│   │               │   │   │       └── ☕ LetterCreditFeignApi.java (1.6KB)
│   │               │   │   ├── 📁 mqconsumer/ (1 files)
│   │               │   │   │   └── ☕ CreditConsumer.java (16.3KB)
│   │               │   │   └── 📁 service/ (5 files)
│   │               │   │       ├── ☕ CreditBuilderApplication.java (27.9KB)
│   │               │   │       ├── ☕ CreditFeignApiApplication.java (6.6KB)
│   │               │   │       ├── ☕ CreditManagerApplication.java (2.0KB)
│   │               │   │       ├── ☕ CreditVerifyApplication.java (28.9KB)
│   │               │   │       └── ☕ CreditWebApiApplication.java (31.7KB)
│   │               │   ├── 📁 base/ (19 files)
│   │               │   │   ├── 📁 dict/ (18 files)
│   │               │   │   │   ├── ☕ CreditBillTypeEnum.java (1.1KB)
│   │               │   │   │   ├── ☕ CreditCreditClassifyEnum.java (1017B)
│   │               │   │   │   ├── ☕ CreditCreditStatusEnum.java (1.0KB)
│   │               │   │   │   ├── ☕ CreditCreditUsePatternEnum.java (1005B)
│   │               │   │   │   ├── ☕ CreditFlagEnum.java (654B)
│   │               │   │   │   ├── ☕ CreditIdempotentStatusEnum.java (730B)
│   │               │   │   │   ├── ☕ CreditIsGivingMsgEnum.java (962B)
│   │               │   │   │   ├── ☕ CreditIsNeedTradeEnum.java (992B)
│   │               │   │   │   ├── ☕ CreditPayInterestWayEnum.java (1019B)
│   │               │   │   │   ├── ☕ CreditPlatFormTagEnum.java (1.0KB)
│   │               │   │   │   ├── ☕ CreditProductTypeEnum.java (1.2KB)
│   │               │   │   │   ├── ☕ CreditReceiveCreditTypeEnum.java (1.1KB)
│   │               │   │   │   ├── ☕ CreditRecordlTypeEnum.java (1.0KB)
│   │               │   │   │   ├── ☕ CreditRestrictTypeEnum.java (1.1KB)
│   │               │   │   │   ├── ☕ CreditRestructStatusEnum.java (1009B)
│   │               │   │   │   ├── ☕ CreditStatusEnum.java (1022B)
│   │               │   │   │   ├── ☕ CreditTypeEnum.java (1.0KB)
│   │               │   │   │   └── ☕ CreditUsePatternEnum.java (1008B)
│   │               │   │   └── 📁 util/ (1 files)
│   │               │   │       └── ☕ ResultCreditUtils.java (647B)
│   │               │   ├── 📁 domain/ (33 files)
│   │               │   │   ├── 📁 entity/ (10 files)
│   │               │   │   │   ├── ☕ CreditBillDetails.java (4.2KB)
│   │               │   │   │   ├── ☕ CreditBillMain.java (3.9KB)
│   │               │   │   │   ├── ☕ CreditFile.java (4.5KB)
│   │               │   │   │   ├── ☕ CreditIdempotent.java (2.1KB)
│   │               │   │   │   ├── ☕ CreditInfo.java (7.4KB)
│   │               │   │   │   ├── ☕ CreditInfoHistory.java (13.1KB)
│   │               │   │   │   ├── ☕ CreditMain.java (8.3KB)
│   │               │   │   │   ├── ☕ CreditMainHistory.java (13.6KB)
│   │               │   │   │   ├── ☕ CreditSource.java (6.0KB)
│   │               │   │   │   └── ☕ CreditSourceHistory.java (8.6KB)
│   │               │   │   ├── 📁 mapper/ (10 files)
│   │               │   │   │   ├── ☕ CreditBillDetailsMapper.java (1.1KB)
│   │               │   │   │   ├── ☕ CreditBillMainMapper.java (1.9KB)
│   │               │   │   │   ├── ☕ CreditFileMapper.java (1.1KB)
│   │               │   │   │   ├── ☕ CreditIdempotentMapper.java (1.3KB)
│   │               │   │   │   ├── ☕ CreditInfoHistoryMapper.java (1.1KB)
│   │               │   │   │   ├── ☕ CreditInfoMapper.java (1.3KB)
│   │               │   │   │   ├── ☕ CreditMainHistoryMapper.java (1.8KB)
│   │               │   │   │   ├── ☕ CreditMainMapper.java (3.9KB)
│   │               │   │   │   ├── ☕ CreditSourceHistoryMapper.java (1.1KB)
│   │               │   │   │   └── ☕ CreditSourceMapper.java (1.2KB)
│   │               │   │   ├── 📁 po/ (5 files)
│   │               │   │   │   ├── ☕ BillByMainCreditIdPo.java (1.4KB)
│   │               │   │   │   ├── ☕ CreditHistoryDetailPo.java (7.5KB)
│   │               │   │   │   ├── ☕ CreditUnitHistoryDetailPo.java (4.2KB)
│   │               │   │   │   ├── ☕ ListCreditByBankCodesPo.java (3.4KB)
│   │               │   │   │   └── ☕ ListCreditHistoryPo.java (4.2KB)
│   │               │   │   └── 📁 service/ (8 files)
│   │               │   │       ├── 📁 impl/ (4 files)
│   │               │   │       │   ├── ☕ CreditBillMainServiceImpl.java (3.9KB)
│   │               │   │       │   ├── ☕ CreditIdempotentServiceImpl.java (1.1KB)
│   │               │   │       │   ├── ☕ CreditMainHistoryServiceImpl.java (1.1KB)
│   │               │   │       │   └── ☕ CreditMainServiceImpl.java (7.8KB)
│   │               │   │       ├── ☕ CreditBillMainService.java (1.5KB)
│   │               │   │       ├── ☕ CreditIdempotentService.java (739B)
│   │               │   │       ├── ☕ CreditMainHistoryService.java (732B)
│   │               │   │       └── ☕ CreditMainService.java (3.5KB)
│   │               │   └── 📁 interfaces/ (11 files)
│   │               │       ├── 📁 facade/ (3 files)
│   │               │       │   ├── ☕ CreditFeignApiController.java (5.3KB)
│   │               │       │   ├── ☕ CreditManagerApiController.java (2.4KB)
│   │               │       │   └── ☕ CreditWebApiController.java (13.0KB)
│   │               │       ├── 📁 req/ (6 files)
│   │               │       │   ├── ☕ AddSaveCreditReq.java (5.0KB)
│   │               │       │   ├── ☕ AdjustSaveCreditReq.java (4.1KB)
│   │               │       │   ├── ☕ CreditByUnitIdReq.java (1.1KB)
│   │               │       │   ├── ☕ CreditListReq.java (1.6KB)
│   │               │       │   ├── ☕ CreditOccupyAmtReq.java (3.0KB)
│   │               │       │   └── ☕ ListCreditByBankCodesReq.java (1.7KB)
│   │               │       └── 📁 resp/ (2 files)
│   │               │           ├── ☕ CreditDetailResp.java (5.8KB)
│   │               │           └── ☕ CreditHistoryDetailResp.java (919B)
│   │               ├── 📁 domain/ (3 files)
│   │               │   ├── 📁 mapper/ (1 files)
│   │               │   │   └── ☕ UnitLimitByCompanyIdMapper.java (1.2KB)
│   │               │   └── 📁 service/ (2 files)
│   │               │       ├── 📁 impl/ (1 files)
│   │               │       │   └── ☕ UnitLimitByCompanyIdServiceImpl.java (2.2KB)
│   │               │       └── ☕ UnitLimitByCompanyIdService.java (873B)
│   │               ├── 📁 interfaces/ (3 files)
│   │               │   ├── 📁 dto/ (2 files)
│   │               │   │   ├── ☕ UnitLimitByCompanyIdReq.java (3.0KB)
│   │               │   │   └── ☕ UnitLimitByCompanyIdResp.java (2.4KB)
│   │               │   └── ☕ UnitLimitByCompanyIdController.java (2.1KB)
│   │               ├── 📁 limit/ (533 files)
│   │               │   ├── 📁 application/ (123 files)
│   │               │   │   ├── 📁 dto/ (45 files)
│   │               │   │   │   ├── 📁 creaditarchive/ (11 files)
│   │               │   │   │   │   ├── ☕ AlreadyArchiveByMainIdDto.java (3.2KB)
│   │               │   │   │   │   ├── ☕ AlreadyArchiveExportDto.java (2.9KB)
│   │               │   │   │   │   ├── ☕ ArchiveFileDto.java (1.5KB)
│   │               │   │   │   │   ├── ☕ ArchiveMangerDto.java (1.1KB)
│   │               │   │   │   │   ├── ☕ ArchiveOpenUnitDetailDto.java (2.1KB)
│   │               │   │   │   │   ├── ☕ CreditOvervieweaderListDto.java (1.2KB)
│   │               │   │   │   │   ├── ☕ CreditOverviewListDto.java (2.1KB)
│   │               │   │   │   │   ├── ☕ CreditUnitOverviewListDto.java (1.2KB)
│   │               │   │   │   │   ├── ☕ DetailsDto.java (1.5KB)
│   │               │   │   │   │   ├── ☕ FileListByMainIdDto.java (2.5KB)
│   │               │   │   │   │   └── ☕ StayArchiveByMainIdDto.java (3.3KB)
│   │               │   │   │   ├── ☕ ApplyListDto.java (1.8KB)
│   │               │   │   │   ├── ☕ CheckLimitAdjustOrEnoughReq.java (1.5KB)
│   │               │   │   │   ├── ☕ CheckPlansDto.java (1.8KB)
│   │               │   │   │   ├── ☕ CrclCollectionNoticeDto.java (3.4KB)
│   │               │   │   │   ├── ☕ CreaditArchiveListDto.java (2.7KB)
│   │               │   │   │   ├── ☕ CreditRecordDto.java (4.7KB)
│   │               │   │   │   ├── ☕ GetConstituteAllotDto.java (1.3KB)
│   │               │   │   │   ├── ☕ GetLimitAllotLoadDetailDto.java (1002B)
│   │               │   │   │   ├── ☕ GetLimitByShareIdDto.java (1.7KB)
│   │               │   │   │   ├── ☕ GetLimitUseDetailByLimitIdxDto.java (2.4KB)
│   │               │   │   │   ├── ☕ GetShareIdByShareNameDto.java (946B)
│   │               │   │   │   ├── ☕ LimitChangeDetailDto.java (1.1KB)
│   │               │   │   │   ├── ☕ LimitConstituteAllotDto.java (3.5KB)
│   │               │   │   │   ├── ☕ ListLimitByReceiveIdDto.java (1.1KB)
│   │               │   │   │   ├── ☕ ListLimitMainByShareIdDto.java (2.9KB)
│   │               │   │   │   ├── ☕ ListLsLimitByCompanyIdDto.java (2.1KB)
│   │               │   │   │   ├── ☕ ListLsLimitMainAmtDto.java (997B)
│   │               │   │   │   ├── ☕ ListLsLimitMainDto.java (4.1KB)
│   │               │   │   │   ├── ☕ LsBankCodeByBatchCodeDto.java (942B)
│   │               │   │   │   ├── ☕ LsLimitByLimitSourceDto.java (790B)
│   │               │   │   │   ├── ☕ LsLimitDetailUnitDto.java (1.3KB)
│   │               │   │   │   ├── ☕ LsLimitMainInfoDto.java (3.7KB)
│   │               │   │   │   ├── ☕ LsShareCompanysDto.java (1.2KB)
│   │               │   │   │   ├── ☕ LsUnitListDto.java (2.5KB)
│   │               │   │   │   ├── ☕ NeedCreateOpenCrclRelDto.java (1.4KB)
│   │               │   │   │   ├── ☕ OpenLimitRelReqDto.java (277B)
│   │               │   │   │   ├── ☕ OpenLimitWarningDto.java (1.5KB)
│   │               │   │   │   ├── ☕ OpenUnitLimitReqDto.java (280B)
│   │               │   │   │   ├── ☕ OpenUnitLimitRespDto.java (619B)
│   │               │   │   │   ├── ☕ OpenUnitRepayDto.java (1021B)
│   │               │   │   │   ├── ☕ RepayNoticeDto.java (1.8KB)
│   │               │   │   │   ├── ☕ SaveConstituteAllotDto.java (648B)
│   │               │   │   │   ├── ☕ SynBcpLimitDto.java (1.3KB)
│   │               │   │   │   └── ☕ UsableLimitListDto.java (5.7KB)
│   │               │   │   ├── 📁 feign/ (29 files)
│   │               │   │   │   ├── 📁 incentive/ (8 files)
│   │               │   │   │   │   ├── 📁 dto/ (4 files)
│   │               │   │   │   │   ├── ☕ IncentiveChangeFeign.java (865B)
│   │               │   │   │   │   ├── ☕ IncentiveChangeFeignApi.java (621B)
│   │               │   │   │   │   ├── ☕ IncentiveFeign.java (1.9KB)
│   │               │   │   │   │   └── ☕ IncentiveFeignApi.java (952B)
│   │               │   │   │   ├── 📁 zqylls/ (4 files)
│   │               │   │   │   │   ├── 📁 dto/ (2 files)
│   │               │   │   │   │   ├── ☕ ZqylLsFeign.java (1.1KB)
│   │               │   │   │   │   └── ☕ ZqylLsFeignApi.java (1.0KB)
│   │               │   │   │   ├── 📁 zqylmanager/ (2 files)
│   │               │   │   │   │   ├── ☕ ZqylManagerFeign.java (1.0KB)
│   │               │   │   │   │   └── ☕ ZqylManagerFeignApi.java (903B)
│   │               │   │   │   ├── 📁 zqylplan/ (3 files)
│   │               │   │   │   │   ├── 📁 dto/ (1 files)
│   │               │   │   │   │   ├── ☕ ZqylPlanFeign.java (1.2KB)
│   │               │   │   │   │   └── ☕ ZqylPlanFeignApi.java (1.1KB)
│   │               │   │   │   ├── 📁 zqylweb/ (5 files)
│   │               │   │   │   │   ├── 📁 dto/ (3 files)
│   │               │   │   │   │   ├── ☕ LimitZqylWebApi.java (3.2KB)
│   │               │   │   │   │   └── ☕ ZqylWebFeign.java (1.3KB)
│   │               │   │   │   └── 📁 zyapproval/ (7 files)
│   │               │   │   │       ├── 📁 dto/ (6 files)
│   │               │   │   │       └── ☕ ZyApprovalFeignApi.java (8.4KB)
│   │               │   │   ├── 📁 jobhandler/ (14 files)
│   │               │   │   │   ├── ☕ BcpQueryResultHandler.java (782B)
│   │               │   │   │   ├── ☕ BcpSendBookingHandler.java (1.3KB)
│   │               │   │   │   ├── ☕ CancelInvestorAuthHandler.java (1.0KB)
│   │               │   │   │   ├── ☕ ClearOpenServiceWarningHandler.java (1.5KB)
│   │               │   │   │   ├── ☕ CompanyNoticeCollectionHandler.java (6.3KB)
│   │               │   │   │   ├── ☕ CompanyNoticeRepayHandler.java (4.2KB)
│   │               │   │   │   ├── ☕ CrclLimitCredisExpireHandler.java (876B)
│   │               │   │   │   ├── ☕ CrclLimitDatedHandler.java (1.1KB)
│   │               │   │   │   ├── ☕ CrclLimitRecoverHandler.java (831B)
│   │               │   │   │   ├── ☕ CrclLimitToEffectHandler.java (860B)
│   │               │   │   │   ├── ☕ LimitAvailableExceptionWarning.java (1.7KB)
│   │               │   │   │   ├── ☕ LimitCrclExceptionWarning.java (1.7KB)
│   │               │   │   │   ├── ☕ LimitThreeValueExceptionWarningHandler.java (1.7KB)
│   │               │   │   │   └── ☕ LimitUnitExceptionWarningHandler.java (1.5KB)
│   │               │   │   ├── 📁 mqconsumer/ (4 files)
│   │               │   │   │   ├── 📁 dto/ (2 files)
│   │               │   │   │   │   ├── ☕ LimitArchiveBody.java (2.1KB)
│   │               │   │   │   │   └── ☕ MultiOrgMqDto.java (600B)
│   │               │   │   │   ├── ☕ CreaditArchiveMqConsumer.java (5.3KB)
│   │               │   │   │   └── ☕ MultiOrgComapnyMqConsumer.java (13.2KB)
│   │               │   │   └── 📁 service/ (31 files)
│   │               │   │       ├── ☕ BcpAccountApplication.java (18.1KB)
│   │               │   │       ├── ☕ BcpLimitApplication.java (12.5KB)
│   │               │   │       ├── ☕ BcpLimitSynApplication.java (20.6KB)
│   │               │   │       ├── ☕ CheckParamApplication.java (63.7KB)
│   │               │   │       ├── ☕ CrclCompanyApplication.java (3.1KB)
│   │               │   │       ├── ☕ CrclConstituteApplication.java (18.6KB)
│   │               │   │       ├── ☕ CrclLimitAdjustAuditApplication.java (47.3KB)
│   │               │   │       ├── ☕ CrclLimitByChangeApplication.java (49.4KB)
│   │               │   │       ├── ☕ CrclLimitByExtranalApplication.java (13.4KB)
│   │               │   │       ├── ☕ CrclLimitBySelectApplication.java (76.5KB)
│   │               │   │       ├── ☕ CrclLimitCheckApplication.java (3.0KB)
│   │               │   │       ├── ☕ CrclLimitMainByChangeApplication.java (46.5KB)
│   │               │   │       ├── ☕ CrclLimitMainBySelectApplication.java (104.3KB)
│   │               │   │       ├── ☕ CrclLimitMainTransactionalApplication.java (12.2KB)
│   │               │   │       ├── ☕ CrclLimitReceiveHisApplication.java (18.3KB)
│   │               │   │       ├── ☕ CrclLimitRecoverApplication.java (13.3KB)
│   │               │   │       ├── ☕ CrclLimitSharehisApplication.java (6.8KB)
│   │               │   │       ├── ☕ CrclLimitStatisticsApplication.java (9.0KB)
│   │               │   │       ├── ☕ CrclPerformanceApplication.java (22.8KB)
│   │               │   │       ├── ☕ CreaditArchiveApplication.java (45.3KB)
│   │               │   │       ├── ☕ FrontCrclLimitMainByChangeApplication.java (30.3KB)
│   │               │   │       ├── ☕ FrontCrclLimitMainBySelectApplication.java (75.3KB)
│   │               │   │       ├── ☕ LimitExceptionWarningApplication.java (31.3KB)
│   │               │   │       ├── ☕ LimitTransactionalApplication.java (23.7KB)
│   │               │   │       ├── ☕ LsLimitApplication.java (55.1KB)
│   │               │   │       ├── ☕ LsLimitMainTransactionalApplication.java (4.0KB)
│   │               │   │       ├── ☕ LsLimitValidate.java (15.6KB)
│   │               │   │       ├── ☕ OpenLimitBillDetailApplication.java (20.4KB)
│   │               │   │       ├── ☕ OpenLimitRelApplication.java (33.1KB)
│   │               │   │       ├── ☕ ParamCrclLimitApplication.java (3.5KB)
│   │               │   │       └── ☕ TradeBgPlanApplication.java (50.4KB)
│   │               │   ├── 📁 base/ (28 files)
│   │               │   │   ├── 📁 constants/ (1 files)
│   │               │   │   │   └── ☕ SysLogConstant.java (327B)
│   │               │   │   ├── 📁 dict/ (23 files)
│   │               │   │   │   ├── ☕ CompanyChangeLimitAllowedTypeEnum.java (1.0KB)
│   │               │   │   │   ├── ☕ ConstituteCreditTypeEnum.java (1.0KB)
│   │               │   │   │   ├── ☕ ConstituteLimitTypeEnum.java (978B)
│   │               │   │   │   ├── ☕ ConstituteUsePatternEnum.java (999B)
│   │               │   │   │   ├── ☕ CoreEntPayFlagEnum.java (1.3KB)
│   │               │   │   │   ├── ☕ CreaditArchiveBusinessTypeEnum.java (1.1KB)
│   │               │   │   │   ├── ☕ ExpireDayEnum.java (555B)
│   │               │   │   │   ├── ☕ InvestorAuthEnum.java (991B)
│   │               │   │   │   ├── ☕ LimitAdjustStatusEnum.java (974B)
│   │               │   │   │   ├── ☕ LimitAdjustTypeEnum.java (956B)
│   │               │   │   │   ├── ☕ LimitChangeFormulaEnum.java (928B)
│   │               │   │   │   ├── ☕ LimitChangeTypeEnum.java (1.2KB)
│   │               │   │   │   ├── ☕ LimitConstituteAllotStatusEnum.java (791B)
│   │               │   │   │   ├── ☕ LimitConstituteOperateTypeEnum.java (1.7KB)
│   │               │   │   │   ├── ☕ LimitConstituteStatusEnum.java (956B)
│   │               │   │   │   ├── ☕ LimitCrclTypeEnum.java (1014B)
│   │               │   │   │   ├── ☕ LimitFreezeStatusEnum.java (4.0KB)
│   │               │   │   │   ├── ☕ LimitReceiveOperateTypeEnum.java (1.3KB)
│   │               │   │   │   ├── ☕ OpenLimitBillDetailBusinessTypeEnum.java (993B)
│   │               │   │   │   ├── ☕ OpenServiceWarningTypeEnum.java (2.1KB)
│   │               │   │   │   ├── ☕ ResultStatusEnum.java (1.6KB)
│   │               │   │   │   ├── ☕ ShareStatusEnum.java (1.7KB)
│   │               │   │   │   └── ☕ ZyApprovalOrderStatusEnum.java (1004B)
│   │               │   │   └── 📁 util/ (4 files)
│   │               │   │       ├── ☕ BCPGeneraterUtils.java (467B)
│   │               │   │       ├── ☕ MockMultipart.java (3.7KB)
│   │               │   │       ├── ☕ SqlValidateUtils.java (2.7KB)
│   │               │   │       └── ☕ StaticUtil.java (4.2KB)
│   │               │   ├── 📁 domain/ (216 files)
│   │               │   │   ├── 📁 entity/ (41 files)
│   │               │   │   │   ├── 📁 change/ (4 files)
│   │               │   │   │   │   ├── ☕ CrclLimitAuditDTO.java (9.7KB)
│   │               │   │   │   │   ├── ☕ CrclLimitChangeDto.java (7.0KB)
│   │               │   │   │   │   ├── ☕ CrclLimitMainChangeDto.java (3.6KB)
│   │               │   │   │   │   └── ☕ LimitChangeDto.java (4.6KB)
│   │               │   │   │   ├── ☕ BcpLimitSyn.java (4.3KB)
│   │               │   │   │   ├── ☕ CodeRule.java (2.0KB)
│   │               │   │   │   ├── ☕ CrclCompany.java (1.8KB)
│   │               │   │   │   ├── ☕ CrclConstitute.java (6.2KB)
│   │               │   │   │   ├── ☕ CrclConstituteMain.java (5.8KB)
│   │               │   │   │   ├── ☕ CrclCredisExpire.java (4.6KB)
│   │               │   │   │   ├── ☕ CrclLimit.java (5.2KB)
│   │               │   │   │   ├── ☕ CrclLimitCheck.java (3.5KB)
│   │               │   │   │   ├── ☕ CrclLimitFile.java (4.2KB)
│   │               │   │   │   ├── ☕ CrclLimitInfo.java (5.0KB)
│   │               │   │   │   ├── ☕ CrclLimitInvestorAuth.java (4.1KB)
│   │               │   │   │   ├── ☕ CrclLimitMain.java (4.7KB)
│   │               │   │   │   ├── ☕ CrclLimitMainInfo.java (5.1KB)
│   │               │   │   │   ├── ☕ CrclLimitReceivehis.java (5.8KB)
│   │               │   │   │   ├── ☕ CrclLimitReceivehisInfo.java (5.3KB)
│   │               │   │   │   ├── ☕ CrclLimitRecover.java (3.5KB)
│   │               │   │   │   ├── ☕ CrclLimitSchedule.java (3.0KB)
│   │               │   │   │   ├── ☕ CrclLimitSharehis.java (5.9KB)
│   │               │   │   │   ├── ☕ CrclLimitSharehisInfo.java (9.0KB)
│   │               │   │   │   ├── ☕ CrclPerformancePlan.java (2.7KB)
│   │               │   │   │   ├── ☕ CrclPerformancePlanInfo.java (4.2KB)
│   │               │   │   │   ├── ☕ CrclZyApprovalOrder.java (3.9KB)
│   │               │   │   │   ├── ☕ CreaditArchiveAllotDetail.java (3.8KB)
│   │               │   │   │   ├── ☕ CreaditArchiveMain.java (1.8KB)
│   │               │   │   │   ├── ☕ CreaditArchiveRecord.java (4.8KB)
│   │               │   │   │   ├── ☕ LimitChangeLog.java (8.2KB)
│   │               │   │   │   ├── ☕ LimitConstituteAllotHis.java (5.6KB)
│   │               │   │   │   ├── ☕ LimitConstituteAllotMain.java (4.3KB)
│   │               │   │   │   ├── ☕ LsLimitCleaningAccount.java (856B)
│   │               │   │   │   ├── ☕ LsLimitCleaningAccountHis.java (2.4KB)
│   │               │   │   │   ├── ☕ MyLimitInfo.java (1.6KB)
│   │               │   │   │   ├── ☕ OpenLimitBillDetail.java (7.5KB)
│   │               │   │   │   ├── ☕ OpenLimitBillDetailExport.java (5.6KB)
│   │               │   │   │   ├── ☕ OpenLimitRel.java (5.3KB)
│   │               │   │   │   ├── ☕ OpenServiceWarning.java (3.0KB)
│   │               │   │   │   ├── ☕ OpenUnitLimit.java (3.7KB)
│   │               │   │   │   └── ☕ ParamCrclLimit.java (2.1KB)
│   │               │   │   ├── 📁 mapper/ (36 files)
│   │               │   │   │   ├── ☕ BcpLimitSynMapper.java (1.5KB)
│   │               │   │   │   ├── ☕ CodeRuleMapper.java (623B)
│   │               │   │   │   ├── ☕ CrclCompanyMapper.java (1.5KB)
│   │               │   │   │   ├── ☕ CrclConstituteMainMapper.java (3.2KB)
│   │               │   │   │   ├── ☕ CrclConstituteMapper.java (1.9KB)
│   │               │   │   │   ├── ☕ CrclCredisExpireMapper.java (1.1KB)
│   │               │   │   │   ├── ☕ CrclLimitCheckMapper.java (796B)
│   │               │   │   │   ├── ☕ CrclLimitFileMapper.java (1.7KB)
│   │               │   │   │   ├── ☕ CrclLimitInfoMapper.java (1.2KB)
│   │               │   │   │   ├── ☕ CrclLimitInvestorAuthMapper.java (1.2KB)
│   │               │   │   │   ├── ☕ CrclLimitMainInfoMapper.java (1.3KB)
│   │               │   │   │   ├── ☕ CrclLimitMainMapper.java (11.7KB)
│   │               │   │   │   ├── ☕ CrclLimitMapper.java (22.6KB)
│   │               │   │   │   ├── ☕ CrclLimitReceivehisInfoMapper.java (1.3KB)
│   │               │   │   │   ├── ☕ CrclLimitReceivehisMapper.java (4.5KB)
│   │               │   │   │   ├── ☕ CrclLimitRecoverMapper.java (848B)
│   │               │   │   │   ├── ☕ CrclLimitScheduleMapper.java (1.8KB)
│   │               │   │   │   ├── ☕ CrclLimitSharehisInfoMapper.java (1.3KB)
│   │               │   │   │   ├── ☕ CrclLimitSharehisMapper.java (7.0KB)
│   │               │   │   │   ├── ☕ CrclPerformancePlanInfoMapper.java (5.7KB)
│   │               │   │   │   ├── ☕ CrclPerformancePlanMapper.java (1.4KB)
│   │               │   │   │   ├── ☕ CrclZyApprovalOrderMapper.java (951B)
│   │               │   │   │   ├── ☕ CreaditArchiveAllotDetailMapper.java (993B)
│   │               │   │   │   ├── ☕ CreaditArchiveMainMapper.java (2.7KB)
│   │               │   │   │   ├── ☕ CreaditArchiveRecordMapper.java (1.0KB)
│   │               │   │   │   ├── ☕ LimitChangeLogMapper.java (1.0KB)
│   │               │   │   │   ├── ☕ LimitConstituteAllotHisMapper.java (4.3KB)
│   │               │   │   │   ├── ☕ LimitConstituteAllotMainMapper.java (2.3KB)
│   │               │   │   │   ├── ☕ LsLimitCleaningAccountHisMapper.java (904B)
│   │               │   │   │   ├── ☕ LsLimitCleaningAccountMapper.java (700B)
│   │               │   │   │   ├── ☕ LsLimitMapper.java (4.6KB)
│   │               │   │   │   ├── ☕ OpenLimitBillDetailMapper.java (765B)
│   │               │   │   │   ├── ☕ OpenLimitRelMapper.java (6.4KB)
│   │               │   │   │   ├── ☕ OpenServiceWarningMapper.java (597B)
│   │               │   │   │   ├── ☕ OpenUnitLimitMapper.java (3.6KB)
│   │               │   │   │   └── ☕ ParamCrclLimitMapper.java (2.3KB)
│   │               │   │   ├── 📁 po/ (51 files)
│   │               │   │   │   ├── ☕ AppTotalLimitPo.java (843B)
│   │               │   │   │   ├── ☕ AutoSavePo.java (1.5KB)
│   │               │   │   │   ├── ☕ AvailableLimitPo.java (3.8KB)
│   │               │   │   │   ├── ☕ AvailableLimitSubPo.java (2.2KB)
│   │               │   │   │   ├── ☕ BatchCodePo.java (1.5KB)
│   │               │   │   │   ├── ☕ CodeRulePo.java (752B)
│   │               │   │   │   ├── ☕ CodeRuleRequest.java (1.2KB)
│   │               │   │   │   ├── ☕ CountLimitByShareIdPo.java (949B)
│   │               │   │   │   ├── ☕ CrclConstituteMainPo.java (1.7KB)
│   │               │   │   │   ├── ☕ CrclConstitutePo.java (648B)
│   │               │   │   │   ├── ☕ CrclCredisExpirePo.java (1.6KB)
│   │               │   │   │   ├── ☕ CrclLimitBasicInfoPo.java (1.8KB)
│   │               │   │   │   ├── ☕ CrclLimitCheckMqPo.java (1.7KB)
│   │               │   │   │   ├── ☕ CrclLimitCheckPo.java (1.9KB)
│   │               │   │   │   ├── ☕ CrclLimitCredisPo.java (3.6KB)
│   │               │   │   │   ├── ☕ CrclLimitDetailPo.java (10.6KB)
│   │               │   │   │   ├── ☕ CrclLimitMainInfoPo.java (5.4KB)
│   │               │   │   │   ├── ☕ CrclLimitMainPo.java (5.6KB)
│   │               │   │   │   ├── ☕ CrclLimitPo.java (9.8KB)
│   │               │   │   │   ├── ☕ CrclLimitReceivehisPo.java (4.5KB)
│   │               │   │   │   ├── ☕ CrclLimitSharehisPo.java (13.3KB)
│   │               │   │   │   ├── ☕ CrclPerformancePlanPo.java (1.3KB)
│   │               │   │   │   ├── ☕ FactorDetailByCrclNoPo.java (3.3KB)
│   │               │   │   │   ├── ☕ FreezeLevelsPo.java (618B)
│   │               │   │   │   ├── ☕ GetLimitListByCoreIdsPo.java (1.5KB)
│   │               │   │   │   ├── ☕ GetLimitSharehisByBatchCodePo.java (1.4KB)
│   │               │   │   │   ├── ☕ HolidayResponseResponse.java (2.6KB)
│   │               │   │   │   ├── ☕ InvestorListResponse.java (913B)
│   │               │   │   │   ├── ☕ LimitAdjustCoreBillPo.java (1.9KB)
│   │               │   │   │   ├── ☕ LimitAdjustUnitBillPo.java (2.5KB)
│   │               │   │   │   ├── ☕ LimitByCrclNoPo.java (2.5KB)
│   │               │   │   │   ├── ☕ LimitByMainCrclNoPo.java (2.5KB)
│   │               │   │   │   ├── ☕ LimitCoreExceptionWarningPo.java (4.3KB)
│   │               │   │   │   ├── ☕ LimitExpirePo.java (2.6KB)
│   │               │   │   │   ├── ☕ LimitImgPo.java (534B)
│   │               │   │   │   ├── ☕ LimitMainByLimitSourcePo.java (1.2KB)
│   │               │   │   │   ├── ☕ LimitReceivehisPo.java (8.1KB)
│   │               │   │   │   ├── ☕ LimitShareExceptionWarningPo.java (3.4KB)
│   │               │   │   │   ├── ☕ LimitSourceCrclIdPo.java (787B)
│   │               │   │   │   ├── ☕ LimitUnitExceptionWarningPo.java (3.8KB)
│   │               │   │   │   ├── ☕ ListLsLimitByCompanyIdPo.java (4.2KB)
│   │               │   │   │   ├── ☕ MultiLimitDetailPo.java (3.2KB)
│   │               │   │   │   ├── ☕ MyConsumerLimitPo.java (1.1KB)
│   │               │   │   │   ├── ☕ MyLimitPo.java (2.0KB)
│   │               │   │   │   ├── ☕ NoScheduleCrclNoPo.java (936B)
│   │               │   │   │   ├── ☕ OpenLimitMainPo.java (1.3KB)
│   │               │   │   │   ├── ☕ OpenLimitRelPo.java (3.0KB)
│   │               │   │   │   ├── ☕ OpenMainLimitPlanPo.java (2.7KB)
│   │               │   │   │   ├── ☕ OpenUnitLimitPo.java (2.8KB)
│   │               │   │   │   ├── ☕ PerformInfoByCrclLimitIdPo.java (978B)
│   │               │   │   │   └── ☕ PlanRate.java (12.6KB)
│   │               │   │   ├── 📁 service/ (67 files)
│   │               │   │   │   ├── 📁 impl/ (34 files)
│   │               │   │   │   │   ├── ☕ BcpAccountServiceImpl.java (5.4KB)
│   │               │   │   │   │   ├── ☕ BcpLimitSynServiceImpl.java (2.0KB)
│   │               │   │   │   │   ├── ☕ CrclCompanyServiceImpl.java (1.4KB)
│   │               │   │   │   │   ├── ☕ CrclConstituteMainServiceImpl.java (5.0KB)
│   │               │   │   │   │   ├── ☕ CrclConstituteServiceImpl.java (26.0KB)
│   │               │   │   │   │   ├── ☕ CrclCredisExpireServiceImpl.java (1.1KB)
│   │               │   │   │   │   ├── ☕ CrclLimitCheckServiceImpl.java (1.1KB)
│   │               │   │   │   │   ├── ☕ CrclLimitFileServiceImpl.java (2.0KB)
│   │               │   │   │   │   ├── ☕ CrclLimitInfoServiceImpl.java (2.9KB)
│   │               │   │   │   │   ├── ☕ CrclLimitInvestorAuthServiceImpl.java (17.0KB)
│   │               │   │   │   │   ├── ☕ CrclLimitMainInfoServiceImpl.java (3.9KB)
│   │               │   │   │   │   ├── ☕ CrclLimitMainServiceImpl.java (26.9KB)
│   │               │   │   │   │   ├── ☕ CrclLimitModifyImpl.java (29.4KB)
│   │               │   │   │   │   ├── ☕ CrclLimitReceivehisServiceImpl.java (47.5KB)
│   │               │   │   │   │   ├── ☕ CrclLimitRecoverServiceImpl.java (1.5KB)
│   │               │   │   │   │   ├── ☕ CrclLimitScheduleServiceImpl.java (2.8KB)
│   │               │   │   │   │   ├── ☕ CrclLimitServiceImpl.java (67.4KB)
│   │               │   │   │   │   ├── ☕ CrclLimitSharehisInfoServiceImpl.java (1.0KB)
│   │               │   │   │   │   ├── ☕ CrclLimitSharehisServiceImpl.java (11.2KB)
│   │               │   │   │   │   ├── ☕ CrclPerformancePlanInfoServiceImpl.java (13.5KB)
│   │               │   │   │   │   ├── ☕ CrclPerformancePlanServiceImpl.java (1.4KB)
│   │               │   │   │   │   ├── ☕ CrclZyApprovalOrderServiceImpl.java (5.3KB)
│   │               │   │   │   │   ├── ☕ CreaditArchiveMainServiceImpl.java (17.7KB)
│   │               │   │   │   │   ├── ☕ FinanceUtil.java (7.9KB)
│   │               │   │   │   │   ├── ☕ GenerateCodeServiceImpl.java (5.5KB)
│   │               │   │   │   │   ├── ☕ LimitConstituteAllotHisServiceImpl.java (15.4KB)
│   │               │   │   │   │   ├── ☕ LimitConstituteAllotMainServiceImpl.java (10.1KB)
│   │               │   │   │   │   ├── ☕ LsLimitCleaningAccountHisServiceImpl.java (971B)
│   │               │   │   │   │   ├── ☕ LsLimitServiceImpl.java (3.8KB)
│   │               │   │   │   │   ├── ☕ OpenLimitBillDetailServiceImpl.java (3.9KB)
│   │               │   │   │   │   ├── ☕ OpenLimitRelServiceImpl.java (16.1KB)
│   │               │   │   │   │   ├── ☕ OpenServiceWarningServiceImpl.java (1.4KB)
│   │               │   │   │   │   ├── ☕ OpenUnitLimitServiceImpl.java (1.5KB)
│   │               │   │   │   │   └── ☕ ParamCrclLimitServiceImpl.java (13.2KB)
│   │               │   │   │   ├── ☕ BcpAccountService.java (1.1KB)
│   │               │   │   │   ├── ☕ BcpLimitSynService.java (1.2KB)
│   │               │   │   │   ├── ☕ CrclCompanyService.java (765B)
│   │               │   │   │   ├── ☕ CrclConstituteMainService.java (2.6KB)
│   │               │   │   │   ├── ☕ CrclConstituteService.java (2.7KB)
│   │               │   │   │   ├── ☕ CrclCredisExpireService.java (559B)
│   │               │   │   │   ├── ☕ CrclLimitCheckService.java (521B)
│   │               │   │   │   ├── ☕ CrclLimitFileService.java (739B)
│   │               │   │   │   ├── ☕ CrclLimitInfoService.java (1.3KB)
│   │               │   │   │   ├── ☕ CrclLimitInvestorAuthService.java (2.0KB)
│   │               │   │   │   ├── ☕ CrclLimitMainInfoService.java (1.7KB)
│   │               │   │   │   ├── ☕ CrclLimitMainService.java (13.2KB)
│   │               │   │   │   ├── ☕ CrclLimitModify.java (432B)
│   │               │   │   │   ├── ☕ CrclLimitReceivehisService.java (6.2KB)
│   │               │   │   │   ├── ☕ CrclLimitRecoverService.java (938B)
│   │               │   │   │   ├── ☕ CrclLimitScheduleService.java (1.4KB)
│   │               │   │   │   ├── ☕ CrclLimitService.java (19.7KB)
│   │               │   │   │   ├── ☕ CrclLimitSharehisInfoService.java (868B)
│   │               │   │   │   ├── ☕ CrclLimitSharehisService.java (7.1KB)
│   │               │   │   │   ├── ☕ CrclPerformancePlanInfoService.java (4.9KB)
│   │               │   │   │   ├── ☕ CrclPerformancePlanService.java (977B)
│   │               │   │   │   ├── ☕ CrclZyApprovalOrderService.java (825B)
│   │               │   │   │   ├── ☕ CreaditArchiveMainService.java (3.5KB)
│   │               │   │   │   ├── ☕ GenerateCodeService.java (629B)
│   │               │   │   │   ├── ☕ LimitConstituteAllotHisService.java (1.9KB)
│   │               │   │   │   ├── ☕ LimitConstituteAllotMainService.java (1.4KB)
│   │               │   │   │   ├── ☕ LsLimitCleaningAccountHisService.java (574B)
│   │               │   │   │   ├── ☕ LsLimitService.java (3.7KB)
│   │               │   │   │   ├── ☕ OpenLimitBillDetailService.java (1.3KB)
│   │               │   │   │   ├── ☕ OpenLimitRelService.java (5.8KB)
│   │               │   │   │   ├── ☕ OpenServiceWarningService.java (508B)
│   │               │   │   │   ├── ☕ OpenUnitLimitService.java (1.1KB)
│   │               │   │   │   └── ☕ ParamCrclLimitService.java (2.2KB)
│   │               │   │   └── 📁 tradebgplan/ (21 files)
│   │               │   │       ├── 📁 entity/ (5 files)
│   │               │   │       │   ├── ☕ TradeBgBaseField.java (5.2KB)
│   │               │   │       │   ├── ☕ TradeBgBaseFieldDetail.java (2.2KB)
│   │               │   │       │   ├── ☕ TradeBgBaseList.java (2.1KB)
│   │               │   │       │   ├── ☕ TradeBgPlan.java (5.5KB)
│   │               │   │       │   └── ☕ TradeBgPlanConfig.java (1.2KB)
│   │               │   │       ├── 📁 mapper/ (5 files)
│   │               │   │       │   ├── ☕ TradeBgBaseFieldDetailMapper.java (788B)
│   │               │   │       │   ├── ☕ TradeBgBaseFieldMapper.java (1.3KB)
│   │               │   │       │   ├── ☕ TradeBgBaseListMapper.java (570B)
│   │               │   │       │   ├── ☕ TradeBgPlanConfigMapper.java (1.2KB)
│   │               │   │       │   └── ☕ TradeBgPlanMapper.java (1.9KB)
│   │               │   │       ├── 📁 po/ (7 files)
│   │               │   │       │   ├── ☕ TradeBgBaseFieldBasicsPo.java (3.6KB)
│   │               │   │       │   ├── ☕ TradeBgBaseFieldPo.java (3.6KB)
│   │               │   │       │   ├── ☕ TradeBgBaseListBasicsPo.java (1.0KB)
│   │               │   │       │   ├── ☕ TradeBgBaseListPo.java (809B)
│   │               │   │       │   ├── ☕ TradeBgFieldPo.java (2.5KB)
│   │               │   │       │   ├── ☕ TradeBgPlanPo.java (5.5KB)
│   │               │   │       │   └── ☕ TradeBgPlanVersionsPo.java (1.9KB)
│   │               │   │       └── 📁 service/ (4 files)
│   │               │   │           ├── 📁 impl/ (2 files)
│   │               │   │           ├── ☕ TradeBgBaseFieldDetailService.java (349B)
│   │               │   │           └── ☕ TradeBgPlanService.java (2.8KB)
│   │               │   └── 📁 interfaces/ (166 files)
│   │               │       ├── 📁 req/ (66 files)
│   │               │       │   ├── ☕ ArchiveFileListReq.java (1.2KB)
│   │               │       │   ├── ☕ ArchiveOpenUnitDetailReq.java (1.2KB)
│   │               │       │   ├── ☕ ArchiveSaveOpenUnitDetailReq.java (1.9KB)
│   │               │       │   ├── ☕ CompanyUnitListReq.java (1.3KB)
│   │               │       │   ├── ☕ CrclCompanyCommonReq.java (3.0KB)
│   │               │       │   ├── ☕ CrclConstituteAdjustSaveReq.java (4.5KB)
│   │               │       │   ├── ☕ CrclConstituteSaveReq.java (3.7KB)
│   │               │       │   ├── ☕ CrclLimitAchievePlanSaveReq.java (1.1KB)
│   │               │       │   ├── ☕ CrclLimitAchievePlanUserReq.java (1.5KB)
│   │               │       │   ├── ☕ CrclLimitAdjustSaveReq.java (8.9KB)
│   │               │       │   ├── ☕ CrclLimitApprovalOrderSaveRequest.java (2.0KB)
│   │               │       │   ├── ☕ CrclLimitCommonReq.java (13.0KB)
│   │               │       │   ├── ☕ CrclLimitDetailReq.java (1.8KB)
│   │               │       │   ├── ☕ CrclLimitMainCommonReq.java (8.2KB)
│   │               │       │   ├── ☕ CrclLimitMainSreachReq.java (1010B)
│   │               │       │   ├── ☕ CrclLimitRateReq.java (1.2KB)
│   │               │       │   ├── ☕ CrclLimitReceivehisSaveRequest.java (5.2KB)
│   │               │       │   ├── ☕ CrclLimitSaveRequest.java (8.8KB)
│   │               │       │   ├── ☕ CrclLimitSharehisReq.java (10.0KB)
│   │               │       │   ├── ☕ CrclLimitTotalAndDetailPageReq.java (2.2KB)
│   │               │       │   ├── ☕ CrclLimitTotalAndDetailReq.java (2.8KB)
│   │               │       │   ├── ☕ CrclLimityCreditExpireReq.java (2.7KB)
│   │               │       │   ├── ☕ CrclPerformanceCommonReq.java (2.4KB)
│   │               │       │   ├── ☕ CrclReceivehisAdustSaveRequest.java (6.8KB)
│   │               │       │   ├── ☕ CrclSreachReq.java (858B)
│   │               │       │   ├── ☕ CreateInvestorAuthPdfReq.java (1.4KB)
│   │               │       │   ├── ☕ FrontAdjustAuditReq.java (1.2KB)
│   │               │       │   ├── ☕ FrontCrclInfoReq.java (6.7KB)
│   │               │       │   ├── ☕ FrontCrclLimitSaveReq.java (2.1KB)
│   │               │       │   ├── ☕ FrontReceivehisReq.java (2.7KB)
│   │               │       │   ├── ☕ FrontUnitLimitAdjustReq.java (1.6KB)
│   │               │       │   ├── ☕ GetConstituteAllotReq.java (3.3KB)
│   │               │       │   ├── ☕ GetLimitAllotLoadDetailContituteReq.java (924B)
│   │               │       │   ├── ☕ GetLimitAllotLoadDetailReq.java (1.8KB)
│   │               │       │   ├── ☕ GetLimitUseDetailReq.java (1.4KB)
│   │               │       │   ├── ☕ HoldCompanyReq.java (595B)
│   │               │       │   ├── ☕ InvestorAuthPdfSignReq.java (808B)
│   │               │       │   ├── ☕ LimitInfoReq.java (1.3KB)
│   │               │       │   ├── ☕ LimitsDeductionReq.java (1.1KB)
│   │               │       │   ├── ☕ LimitSourceAndShareNameReq.java (1.5KB)
│   │               │       │   ├── ☕ ListBcpLimitSynReq.java (1.7KB)
│   │               │       │   ├── ☕ ListCollectLsLimitByCompanyIdReq.java (1.1KB)
│   │               │       │   ├── ☕ ListLsLimitByCompanyIdReq.java (2.0KB)
│   │               │       │   ├── ☕ LsCheckUnitListReq.java (1.7KB)
│   │               │       │   ├── ☕ LsLimitMainInfoReq.java (3.3KB)
│   │               │       │   ├── ☕ LsLimitSaveAndAuditReq.java (2.0KB)
│   │               │       │   ├── ☕ LsLimitSaveAndAuditV2Req.java (1.7KB)
│   │               │       │   ├── ☕ MarketingLimitReq.java (2.6KB)
│   │               │       │   ├── ☕ MarktLimitNameListReq.java (615B)
│   │               │       │   ├── ☕ MarktPerformanceUserReq.java (1.4KB)
│   │               │       │   ├── ☕ MyConsumerReq.java (725B)
│   │               │       │   ├── ☕ MySupplierReq.java (849B)
│   │               │       │   ├── ☕ OpenLimitBillDetailReq.java (2.8KB)
│   │               │       │   ├── ☕ OpenLimitRelCommonReq.java (5.1KB)
│   │               │       │   ├── ☕ OpenUnitLimitCommonReq.java (3.2KB)
│   │               │       │   ├── ☕ ParamCrclLimitCommonReq.java (2.1KB)
│   │               │       │   ├── ☕ PerformanceUserIdReq.java (718B)
│   │               │       │   ├── ☕ PerFormLimitReq.java (551B)
│   │               │       │   ├── ☕ PersonalTemplateReq.java (727B)
│   │               │       │   ├── ☕ SaveAlreadyArchiveRecordReq.java (2.3KB)
│   │               │       │   ├── ☕ SaveArchiveByRecordIdReq.java (1.2KB)
│   │               │       │   ├── ☕ SaveCompanyArchiveReq.java (664B)
│   │               │       │   ├── ☕ SaveConstituteAllotReq.java (2.3KB)
│   │               │       │   ├── ☕ SaveStayArchiveRecordReq.java (3.1KB)
│   │               │       │   ├── ☕ UsableLimitListReq.java (1.5KB)
│   │               │       │   └── ☕ ZyApprovalQueryURLlReq.java (696B)
│   │               │       ├── 📁 resp/ (77 files)
│   │               │       │   ├── ☕ AllocatedLimitResp.java (1.3KB)
│   │               │       │   ├── ☕ AppLimitInfoDto.java (6.7KB)
│   │               │       │   ├── ☕ BatchImportLimitShareAmtDTO.java (3.7KB)
│   │               │       │   ├── ☕ CompanyIdsFromLimitMainResp.java (549B)
│   │               │       │   ├── ☕ CompanyMarketingResp.java (2.0KB)
│   │               │       │   ├── ☕ CrclAndLsCrclLimitInfoDto.java (2.4KB)
│   │               │       │   ├── ☕ CrclCompanyListResp.java (2.2KB)
│   │               │       │   ├── ☕ CrclConstituteListResp.java (6.1KB)
│   │               │       │   ├── ☕ CrclConstituteMainListResp.java (5.6KB)
│   │               │       │   ├── ☕ CrclLimitAchievePlanListResp.java (2.7KB)
│   │               │       │   ├── ☕ CrclLimitAchievePlanUserListResp.java (3.5KB)
│   │               │       │   ├── ☕ CrclLimitAchieveUserSearchListResp.java (2.7KB)
│   │               │       │   ├── ☕ CrclLimitCheckListResp.java (6.0KB)
│   │               │       │   ├── ☕ CrclLimitDetailListResp.java (10.3KB)
│   │               │       │   ├── ☕ CrclLimitDetailResp.java (1.9KB)
│   │               │       │   ├── ☕ CrclLimitListByPageResp.java (9.0KB)
│   │               │       │   ├── ☕ CrclLimitListResp.java (8.1KB)
│   │               │       │   ├── ☕ CrclLimitMainByIdResp.java (2.5KB)
│   │               │       │   ├── ☕ CrclLimitMainDetailResp.java (10.8KB)
│   │               │       │   ├── ☕ CrclLimitMainFinanceResp.java (3.7KB)
│   │               │       │   ├── ☕ CrclLimitMainInfoByShareIdResp.java (4.3KB)
│   │               │       │   ├── ☕ CrclLimitMainListResp.java (4.9KB)
│   │               │       │   ├── ☕ CrclLimitMainResp.java (6.2KB)
│   │               │       │   ├── ☕ CrclLimitParamConfigResponse.java (2.0KB)
│   │               │       │   ├── ☕ CrclLimitReceivehisListResp.java (8.6KB)
│   │               │       │   ├── ☕ CrclLimitSharehisDetailResp.java (12.1KB)
│   │               │       │   ├── ☕ CrclLimitSharehisListResp.java (4.0KB)
│   │               │       │   ├── ☕ CrclLimitTotalAndDetailResp.java (2.2KB)
│   │               │       │   ├── ☕ CrclSharehisConstitutehisDetailResp.java (1.4KB)
│   │               │       │   ├── ☕ CreditInfoDto.java (2.5KB)
│   │               │       │   ├── ☕ CustCompanyListResp.java (2.7KB)
│   │               │       │   ├── ☕ FrontCheckInvestorAuthlResp.java (2.4KB)
│   │               │       │   ├── ☕ FrontCrclInfoResp.java (6.0KB)
│   │               │       │   ├── ☕ FrontCrclLimitListResp.java (5.4KB)
│   │               │       │   ├── ☕ FrontCrclMainInfoResp.java (1.3KB)
│   │               │       │   ├── ☕ FrontCreditStatisticsInfo.java (1.7KB)
│   │               │       │   ├── ☕ FrontLimitAdjustViewResp.java (3.2KB)
│   │               │       │   ├── ☕ GetInitChangeLimitResp.java (13.1KB)
│   │               │       │   ├── ☕ GetInitLimitResp.java (11.7KB)
│   │               │       │   ├── ☕ ImportLimitShareAmtRecordResp.java (4.2KB)
│   │               │       │   ├── ☕ ImportLimitShareAmtResp.java (2.0KB)
│   │               │       │   ├── ☕ ImportShareAmtValidatDTO.java (4.3KB)
│   │               │       │   ├── ☕ LimitAdjustReviewInfo.java (2.1KB)
│   │               │       │   ├── ☕ LimitAndFreezeDetailResponse.java (2.3KB)
│   │               │       │   ├── ☕ LimitCreditSourceInfoResp.java (1.0KB)
│   │               │       │   ├── ☕ LimitDetailOfCompanyResp.java (6.4KB)
│   │               │       │   ├── ☕ LimitDetailOfShareIdResp.java (1.4KB)
│   │               │       │   ├── ☕ LimitInfoDto.java (5.2KB)
│   │               │       │   ├── ☕ ListLsLimitMainResp.java (1.1KB)
│   │               │       │   ├── ☕ LsAccounthis.java (3.4KB)
│   │               │       │   ├── ☕ LsAllSharehis.java (1.7KB)
│   │               │       │   ├── ☕ LsLimitInfoByCrclIdResp.java (1.4KB)
│   │               │       │   ├── ☕ LsLimitMainDetailResp.java (1.2KB)
│   │               │       │   ├── ☕ LsLimitMainInfoResp.java (2.5KB)
│   │               │       │   ├── ☕ LsReceivehis.java (3.7KB)
│   │               │       │   ├── ☕ LsReceivehisAndAccounthis.java (7.0KB)
│   │               │       │   ├── ☕ LsReceivehisPo.java (2.0KB)
│   │               │       │   ├── ☕ LsShareHisInfo.java (4.4KB)
│   │               │       │   ├── ☕ MarketingLimitResq.java (2.0KB)
│   │               │       │   ├── ☕ MarktLimitNameListResp.java (1.2KB)
│   │               │       │   ├── ☕ MarktPerformanceUserResp.java (647B)
│   │               │       │   ├── ☕ MarktUserCompanyCountResp.java (610B)
│   │               │       │   ├── ☕ MarktUserCrclCountResp.java (822B)
│   │               │       │   ├── ☕ MyConsumerCrclCountResp.java (1011B)
│   │               │       │   ├── ☕ MyConsumerLimitCountResp.java (1.0KB)
│   │               │       │   ├── ☕ MySupplierResp.java (1.0KB)
│   │               │       │   ├── ☕ OpenLimitInfoOfCompanyResp.java (1.3KB)
│   │               │       │   ├── ☕ OpenUnitLimitResp.java (1.8KB)
│   │               │       │   ├── ☕ PerformInfoByCrclLimitIdResp.java (1.1KB)
│   │               │       │   ├── ☕ PerFormLimitResq.java (1.4KB)
│   │               │       │   ├── ☕ ReceiveAndSponsorIdsOfLimitResp.java (896B)
│   │               │       │   ├── ☕ SumAmtsGroupByShareIdResp.java (1.3KB)
│   │               │       │   ├── ☕ TeamCountResp.java (2.0KB)
│   │               │       │   ├── ☕ TotalLimitAndDetailAndUnitResp.java (1.4KB)
│   │               │       │   ├── ☕ TradeBgPlanOptionResp.java (1.3KB)
│   │               │       │   ├── ☕ UkeyInfoResp.java (1.1KB)
│   │               │       │   └── ☕ UnitAndUnitLimitAmtsResp.java (1.9KB)
│   │               │       ├── 📁 tradebgplan/ (5 files)
│   │               │       │   ├── 📁 req/ (3 files)
│   │               │       │   │   ├── ☕ TradeBgFieldSaveReq.java (763B)
│   │               │       │   │   ├── ☕ TradeBgPlanListReq.java (1.6KB)
│   │               │       │   │   └── ☕ TradeBgPlanSaveReq.java (4.3KB)
│   │               │       │   ├── 📁 resp/ (1 files)
│   │               │       │   │   └── ☕ TradeBgFieldResp.java (1.0KB)
│   │               │       │   └── ☕ TradeBgPlanController.java (7.5KB)
│   │               │       ├── ☕ BcpLimitController.java (2.5KB)
│   │               │       ├── ☕ CrclCompanyController.java (2.2KB)
│   │               │       ├── ☕ CrclLimitByChangeController.java (5.8KB)
│   │               │       ├── ☕ CrclLimitByExtranaltController.java (4.3KB)
│   │               │       ├── ☕ CrclLimitBySelectController.java (18.0KB)
│   │               │       ├── ☕ CrclLimitCheckController.java (2.3KB)
│   │               │       ├── ☕ CrclLimitMainByChangeController.java (5.2KB)
│   │               │       ├── ☕ CrclLimitMainBySelectController.java (22.0KB)
│   │               │       ├── ☕ CrclLimitMainController.java (21.9KB)
│   │               │       ├── ☕ CrclLimitStatisticsController.java (11.4KB)
│   │               │       ├── ☕ CrclPerformanceController.java (19.4KB)
│   │               │       ├── ☕ CreaditArchiveController.java (13.6KB)
│   │               │       ├── ☕ FrontCrclLimitMainByChangeController.java (2.8KB)
│   │               │       ├── ☕ FrontCrclLimitMainBySelectController.java (20.4KB)
│   │               │       ├── ☕ LsLimitController.java (14.9KB)
│   │               │       ├── ☕ OpenLimitRelController.java (5.1KB)
│   │               │       ├── ☕ OpenLimitWarningController.java (4.5KB)
│   │               │       └── ☕ ParamCrclLimitController.java (5.2KB)
│   │               ├── 📁 open/ (1612 files)
│   │               │   ├── 📁 application/ (669 files)
│   │               │   │   ├── 📁 batchsend/ (1 files)
│   │               │   │   │   └── ☕ BatchMsgOpenAutoSendSmsImpl.java (1.4KB)
│   │               │   │   ├── 📁 config/ (2 files)
│   │               │   │   │   ├── ☕ MongodbConfig.java (1.1KB)
│   │               │   │   │   └── ☕ OpenConfigApplication.java (18.0KB)
│   │               │   │   ├── 📁 crcl/ (175 files)
│   │               │   │   │   ├── 📁 dto/ (110 files)
│   │               │   │   │   │   ├── 📁 baseopen/ (1 files)
│   │               │   │   │   │   ├── 📁 crcldlagship/ (3 files)
│   │               │   │   │   │   ├── 📁 handleverify/ (2 files)
│   │               │   │   │   │   ├── 📁 liabilitypool/ (2 files)
│   │               │   │   │   │   ├── 📁 validate/ (1 files)
│   │               │   │   │   │   ├── ☕ AppAuditCompanyDto.java (1.2KB)
│   │               │   │   │   │   ├── ☕ AppAuditOpenInfoDto.java (3.3KB)
│   │               │   │   │   │   ├── ☕ AppAuditSubmitDto.java (2.5KB)
│   │               │   │   │   │   ├── ☕ AppCompanyDto.java (1.2KB)
│   │               │   │   │   │   ├── ☕ AppHandleOpenApplyDto.java (2.2KB)
│   │               │   │   │   │   ├── ☕ ApplyCrclMainDto.java (1.0KB)
│   │               │   │   │   │   ├── ☕ ApplyMainLimitDto.java (10.7KB)
│   │               │   │   │   │   ├── ☕ AppOpenMainDto.java (4.8KB)
│   │               │   │   │   │   ├── ☕ AppOpenOperationDto.java (3.1KB)
│   │               │   │   │   │   ├── ☕ AppPreAuditDto.java (1.5KB)
│   │               │   │   │   │   ├── ☕ AppSignAgreementDto.java (1.3KB)
│   │               │   │   │   │   ├── ☕ AppSignFileListDto.java (1.1KB)
│   │               │   │   │   │   ├── ☕ AtLastRepayDto.java (2.5KB)
│   │               │   │   │   │   ├── ☕ AuditConfirmDto.java (3.4KB)
│   │               │   │   │   │   ├── ☕ AuditExportDto.java (3.2KB)
│   │               │   │   │   │   ├── ☕ AuditInfoDto.java (2.0KB)
│   │               │   │   │   │   ├── ☕ AuditNodeResult.java (1003B)
│   │               │   │   │   │   ├── ☕ BatchAuditDto.java (5.7KB)
│   │               │   │   │   │   ├── ☕ BatchDownloadSearchDto.java (1.7KB)
│   │               │   │   │   │   ├── ☕ BatchHandleDto.java (3.4KB)
│   │               │   │   │   │   ├── ☕ BatchHandleMultiLimitApplyDto.java (1.4KB)
│   │               │   │   │   │   ├── ☕ BatchHandleMultiLimitDto.java (2.7KB)
│   │               │   │   │   │   ├── ☕ BatchImportCrclDto.java (4.4KB)
│   │               │   │   │   │   ├── ☕ BatchImportDto.java (2.0KB)
│   │               │   │   │   │   ├── ☕ BatchInfoDto.java (1.6KB)
│   │               │   │   │   │   ├── ☕ BatchOpenCrclDto.java (1.5KB)
│   │               │   │   │   │   ├── ☕ BatchOperatorAuditorDto.java (1.6KB)
│   │               │   │   │   │   ├── ☕ BatchServerOpenDto.java (6.9KB)
│   │               │   │   │   │   ├── ☕ BatchServerOpenListDataDto.java (1.5KB)
│   │               │   │   │   │   ├── ☕ BcpAccountDto.java (1.8KB)
│   │               │   │   │   │   ├── ☕ CertInfoDto.java (1.0KB)
│   │               │   │   │   │   ├── ☕ CertServerSceneDetailDto.java (5.1KB)
│   │               │   │   │   │   ├── ☕ CfcaManageCertDto.java (2.4KB)
│   │               │   │   │   │   ├── ☕ CheckHoldAccountDto.java (705B)
│   │               │   │   │   │   ├── ☕ CheckrRpetitionBatchCrclDto.java (1.5KB)
│   │               │   │   │   │   ├── ☕ ClearingAccRequestDto.java (1.8KB)
│   │               │   │   │   │   ├── ☕ ClearingAccResponseDto.java (2.9KB)
│   │               │   │   │   │   ├── ☕ ClearingMarkDto.java (1.3KB)
│   │               │   │   │   │   ├── ☕ CompanyAndUserDto.java (3.6KB)
│   │               │   │   │   │   ├── ☕ CompanyDataDto.java (2.3KB)
│   │               │   │   │   │   ├── ☕ CompanyDto.java (731B)
│   │               │   │   │   │   ├── ☕ CompanyOpenCrclParamDto.java (7.0KB)
│   │               │   │   │   │   ├── ☕ CoreTallyMqDto.java (8.4KB)
│   │               │   │   │   │   ├── ☕ CrclLimitDto.java (2.5KB)
│   │               │   │   │   │   ├── ☕ CrclOpenApplyRquestBodyDto.java (6.5KB)
│   │               │   │   │   │   ├── ☕ CustCompanyUkeyConfigureDto.java (1.5KB)
│   │               │   │   │   │   ├── ☕ DetailsList.java (3.5KB)
│   │               │   │   │   │   ├── ☕ FileNoEncodeDto.java (994B)
│   │               │   │   │   │   ├── ☕ FreezeStatusDistribDto.java (3.0KB)
│   │               │   │   │   │   ├── ☕ HandleCrclApplyDto.java (4.7KB)
│   │               │   │   │   │   ├── ☕ HeadDataDto.java (4.7KB)
│   │               │   │   │   │   ├── ☕ OpenAccountInfoDto.java (1.8KB)
│   │               │   │   │   │   ├── ☕ OpenApplyNoDto.java (647B)
│   │               │   │   │   │   ├── ☕ OpenCompanyDto.java (1.1KB)
│   │               │   │   │   │   ├── ☕ OpenConfineConfigDto.java (3.6KB)
│   │               │   │   │   │   ├── ☕ OpenCrclListDetailDto.java (3.6KB)
│   │               │   │   │   │   ├── ☕ OpenCrclParamDto.java (6.2KB)
│   │               │   │   │   │   ├── ☕ OpenCrclUserDto.java (1.1KB)
│   │               │   │   │   │   ├── ☕ OpenFileDto.java (2.0KB)
│   │               │   │   │   │   ├── ☕ OpenInfoDto.java (1.9KB)
│   │               │   │   │   │   ├── ☕ OpenMainDto.java (2.3KB)
│   │               │   │   │   │   ├── ☕ OpenSendDetailDto.java (1.3KB)
│   │               │   │   │   │   ├── ☕ OpenSendDto.java (3.2KB)
│   │               │   │   │   │   ├── ☕ PayNoticeDto.java (4.0KB)
│   │               │   │   │   │   ├── ☕ ReceiveConfChangeDto.java (1.2KB)
│   │               │   │   │   │   ├── ☕ ReceiveConfOpenDto.java (1.2KB)
│   │               │   │   │   │   ├── ☕ ReceiveConfRecordDto.java (1.0KB)
│   │               │   │   │   │   ├── ☕ RepaycallBackDto.java (875B)
│   │               │   │   │   │   ├── ☕ RepayDetailDto.java (2.2KB)
│   │               │   │   │   │   ├── ☕ RepayDetailsExportDto.java (875B)
│   │               │   │   │   │   ├── ☕ RepeatInfoDto.java (862B)
│   │               │   │   │   │   ├── ☕ RespApplicantInfoDto.java (3.8KB)
│   │               │   │   │   │   ├── ☕ RespAttachContractDto.java (4.5KB)
│   │               │   │   │   │   ├── ☕ RespAuditLogDto.java (1.9KB)
│   │               │   │   │   │   ├── ☕ RespFileDto.java (2.7KB)
│   │               │   │   │   │   ├── ☕ RespInvoiceInfoDto.java (6.2KB)
│   │               │   │   │   │   ├── ☕ ResponseDto.java (1.3KB)
│   │               │   │   │   │   ├── ☕ RespProjectDto.java (3.2KB)
│   │               │   │   │   │   ├── ☕ RespTradeDocDetailDto.java (2.0KB)
│   │               │   │   │   │   ├── ☕ RespTradeDocInfoDto.java (3.2KB)
│   │               │   │   │   │   ├── ☕ SaveCreatePdfDto.java (1.5KB)
│   │               │   │   │   │   ├── ☕ ServerOpenDto.java (8.1KB)
│   │               │   │   │   │   ├── ☕ SingleList.java (2.8KB)
│   │               │   │   │   │   ├── ☕ TemplateDto.java (3.0KB)
│   │               │   │   │   │   ├── ☕ TradeBgCoChainContractDto.java (3.6KB)
│   │               │   │   │   │   ├── ☕ TradeBgCoChainFileDto.java (2.2KB)
│   │               │   │   │   │   ├── ☕ TradeBgCoChainInvoiceDto.java (3.2KB)
│   │               │   │   │   │   ├── ☕ TradeBgDataMqContractRelation.java (1.3KB)
│   │               │   │   │   │   ├── ☕ TradeBgDataMqSyncDto.java (2.4KB)
│   │               │   │   │   │   ├── ☕ TradeBgDataMqSyncListDto.java (3.1KB)
│   │               │   │   │   │   ├── ☕ TradeBgDataSyncDto.java (2.1KB)
│   │               │   │   │   │   ├── ☕ TradeBgDataSyncListDto.java (4.5KB)
│   │               │   │   │   │   ├── ☕ TransferDetailsDto.java (2.4KB)
│   │               │   │   │   │   ├── ☕ WorkFlowBusinessDataDto.java (3.6KB)
│   │               │   │   │   │   ├── ☕ WorkFlowProcessResultDataDto.java (2.4KB)
│   │               │   │   │   │   ├── ☕ WorkFlowProcessResultDto.java (1.3KB)
│   │               │   │   │   │   ├── ☕ WorkFlowProcessStartMsg.java (3.8KB)
│   │               │   │   │   │   ├── ☕ WorkFlowStatusUpdateDataMsg.java (1.5KB)
│   │               │   │   │   │   ├── ☕ WorkFlowStatusUpdateMsg.java (1.5KB)
│   │               │   │   │   │   ├── ☕ WorkFlowVariablesDto.java (3.7KB)
│   │               │   │   │   │   └── ☕ WorkTicketCrclLimitDto.java (1.6KB)
│   │               │   │   │   ├── 📁 event/ (1 files)
│   │               │   │   │   │   └── ☕ package-info.java (50B)
│   │               │   │   │   ├── 📁 mqconsumer/ (6 files)
│   │               │   │   │   │   ├── ☕ BatchServerOpenCrclMqConsumer.java (7.6KB)
│   │               │   │   │   │   ├── ☕ CompanyOpenCrclMqConsumer.java (3.2KB)
│   │               │   │   │   │   ├── ☕ LiabilityPoolConsumer.java (8.0KB)
│   │               │   │   │   │   ├── ☕ NofundClearingNoticeMqConsumer.java (3.8KB)
│   │               │   │   │   │   ├── ☕ ServerOpenCrclMqConsumer.java (4.1KB)
│   │               │   │   │   │   └── ☕ WorkFlowProcessResultMqConsumer.java (5.8KB)
│   │               │   │   │   └── 📁 service/ (58 files)
│   │               │   │   │       ├── 📁 liabilitypool/ (13 files)
│   │               │   │   │       ├── 📁 validate/ (7 files)
│   │               │   │   │       ├── ☕ AppApplication.java (11.2KB)
│   │               │   │   │       ├── ☕ AppHandleApplication.java (36.8KB)
│   │               │   │   │       ├── ☕ AppHandleTransactionApplication.java (14.2KB)
│   │               │   │   │       ├── ☕ AppSearchApplication.java (56.8KB)
│   │               │   │   │       ├── ☕ AppValidationApplication.java (22.7KB)
│   │               │   │   │       ├── ☕ AuditCrclApplication.java (99.0KB)
│   │               │   │   │       ├── ☕ AuditTransactionApplication.java (28.3KB)
│   │               │   │   │       ├── ☕ AuditVerifyApplication.java (66.0KB)
│   │               │   │   │       ├── ☕ BaseOpenApplication.java (31.0KB)
│   │               │   │   │       ├── ☕ BcpApplication.java (4.9KB)
│   │               │   │   │       ├── ☕ BlockApplication.java (6.3KB)
│   │               │   │   │       ├── ☕ BuildApplication.java (59.4KB)
│   │               │   │   │       ├── ☕ CompanyDataApplication.java (2.0KB)
│   │               │   │   │       ├── ☕ CompanyOpenCrclApplication.java (46.2KB)
│   │               │   │   │       ├── ☕ CrclApplication.java (103.9KB)
│   │               │   │   │       ├── ☕ CrclFlagShipApplication.java (10.9KB)
│   │               │   │   │       ├── ☕ CrclFreezeApplication.java (9.4KB)
│   │               │   │   │       ├── ☕ CrclJobApplication.java (6.5KB)
│   │               │   │   │       ├── ☕ CrclManagerApplication.java (17.3KB)
│   │               │   │   │       ├── ☕ CrclReceiveNoticeApplication.java (11.1KB)
│   │               │   │   │       ├── ☕ CsCrclApplication.java (12.6KB)
│   │               │   │   │       ├── ☕ HandleCheckExecutor.java (1.9KB)
│   │               │   │   │       ├── ☕ HandleCrclApplication.java (72.1KB)
│   │               │   │   │       ├── ☕ HandleCrclServiceApplication.java (104.4KB)
│   │               │   │   │       ├── ☕ HandleTransactionApplication.java (39.6KB)
│   │               │   │   │       ├── ☕ HandleVerifyApplication.java (120.4KB)
│   │               │   │   │       ├── ☕ JobHandleApplication.java (22.8KB)
│   │               │   │   │       ├── ☕ LsBlockApplication.java (5.6KB)
│   │               │   │   │       ├── ☕ OpenHoldCompanyLogApplication.java (7.1KB)
│   │               │   │   │       ├── ☕ OpenPdfApplication.java (52.4KB)
│   │               │   │   │       ├── ☕ OpenSearchApplication.java (92.0KB)
│   │               │   │   │       ├── ☕ OpenSendApplication.java (40.9KB)
│   │               │   │   │       ├── ☕ ReceiveConfigApplication.java (30.4KB)
│   │               │   │   │       ├── ☕ SmsApplicaiton.java (3.9KB)
│   │               │   │   │       ├── ☕ VerifyApplication.java (41.9KB)
│   │               │   │   │       ├── ☕ WorkFlowApplication.java (26.4KB)
│   │               │   │   │       ├── ☕ WorkFlowReconciliationApplication.java (26.8KB)
│   │               │   │   │       └── ☕ WorkTicketMsgLogApplication.java (4.7KB)
│   │               │   │   ├── 📁 feign/ (407 files)
│   │               │   │   │   ├── 📁 abs/ (2 files)
│   │               │   │   │   │   ├── ☕ AbsFeign.java (649B)
│   │               │   │   │   │   └── ☕ AbsFeignApi.java (1.3KB)
│   │               │   │   │   ├── 📁 account/ (12 files)
│   │               │   │   │   │   ├── 📁 dto/ (8 files)
│   │               │   │   │   │   ├── ☕ CompanyAccountFeign.java (10.6KB)
│   │               │   │   │   │   ├── ☕ CompanyAccountFeignApi.java (5.2KB)
│   │               │   │   │   │   ├── ☕ IntegralIncomeFeign.java (2.7KB)
│   │               │   │   │   │   └── ☕ IntegralIncomeFeignApi.java (2.5KB)
│   │               │   │   │   ├── 📁 assemble/ (11 files)
│   │               │   │   │   │   ├── 📁 dto/ (7 files)
│   │               │   │   │   │   ├── ☕ AssembleFeign.java (2.1KB)
│   │               │   │   │   │   ├── ☕ AssembleFeignApi.java (1.7KB)
│   │               │   │   │   │   ├── ☕ OpenCompanyFeign.java (2.1KB)
│   │               │   │   │   │   └── ☕ OpenCompanyFeignApi.java (1.9KB)
│   │               │   │   │   ├── 📁 bcp/ (5 files)
│   │               │   │   │   │   ├── 📁 dto/ (3 files)
│   │               │   │   │   │   ├── ☕ CrclOpenBcpFeign.java (1.7KB)
│   │               │   │   │   │   └── ☕ CrclOpenBcpFeignApi.java (1.8KB)
│   │               │   │   │   ├── 📁 bkb/ (5 files)
│   │               │   │   │   │   ├── 📁 dto/ (3 files)
│   │               │   │   │   │   ├── ☕ BkbDateCnapsFeign.java (942B)
│   │               │   │   │   │   └── ☕ BkbDateCnapsFeignApi.java (1.2KB)
│   │               │   │   │   ├── 📁 block/ (5 files)
│   │               │   │   │   │   ├── 📁 dto/ (4 files)
│   │               │   │   │   │   └── ☕ BankBlockFeign.java (1010B)
│   │               │   │   │   ├── 📁 charge/ (9 files)
│   │               │   │   │   │   ├── 📁 dto/ (6 files)
│   │               │   │   │   │   ├── ☕ ChargeFeign.java (1.2KB)
│   │               │   │   │   │   ├── ☕ ChargeFeignApi.java (7.9KB)
│   │               │   │   │   │   └── ☕ ChargeRelationBySouOpenCompReqDto.java (1.2KB)
│   │               │   │   │   ├── 📁 checking/ (3 files)
│   │               │   │   │   │   ├── 📁 dto/ (1 files)
│   │               │   │   │   │   ├── ☕ ZqylCheckingFeign.java (1.0KB)
│   │               │   │   │   │   └── ☕ ZqylCheckingFeignApi.java (1.4KB)
│   │               │   │   │   ├── 📁 companyroute/ (3 files)
│   │               │   │   │   │   ├── 📁 dto/ (1 files)
│   │               │   │   │   │   ├── ☕ CompanyRouteFegin.java (1.1KB)
│   │               │   │   │   │   └── ☕ CompanyRouteFeginApi.java (966B)
│   │               │   │   │   ├── 📁 crclcore/ (38 files)
│   │               │   │   │   │   ├── 📁 dto/ (25 files)
│   │               │   │   │   │   ├── ☕ CrclCorePondApi.java (501B)
│   │               │   │   │   │   ├── ☕ CrclCorePondApiImpl.java (810B)
│   │               │   │   │   │   ├── ☕ CrclCorePondFeign.java (1.2KB)
│   │               │   │   │   │   ├── ☕ CrclCoreStatisticsFeign.java (1.6KB)
│   │               │   │   │   │   ├── ☕ CrclCoreTallyApi.java (5.2KB)
│   │               │   │   │   │   ├── ☕ CrclCoreTallyApiImpl.java (8.9KB)
│   │               │   │   │   │   ├── ☕ CrclCoreTallyFeign.java (9.8KB)
│   │               │   │   │   │   ├── ☕ CrclFreezeApi.java (3.2KB)
│   │               │   │   │   │   ├── ☕ CrclFreezeApiImpl.java (4.0KB)
│   │               │   │   │   │   ├── ☕ CrclFreezeFeign.java (5.9KB)
│   │               │   │   │   │   ├── ☕ LiabilityPoolApi.java (2.1KB)
│   │               │   │   │   │   ├── ☕ LiabilityPoolApiImpl.java (3.6KB)
│   │               │   │   │   │   └── ☕ LiabilityPoolFeign.java (5.1KB)
│   │               │   │   │   ├── 📁 crclpay/ (3 files)
│   │               │   │   │   │   ├── 📁 dto/ (1 files)
│   │               │   │   │   │   ├── ☕ CrclPayFeign.java (1.1KB)
│   │               │   │   │   │   └── ☕ CrclPayFeignApi.java (1.8KB)
│   │               │   │   │   ├── 📁 data/ (37 files)
│   │               │   │   │   │   ├── 📁 dto/ (29 files)
│   │               │   │   │   │   ├── ☕ DataBaseFeign.java (5.9KB)
│   │               │   │   │   │   ├── ☕ DataBaseFeignApi.java (7.2KB)
│   │               │   │   │   │   ├── ☕ DataGrantFeign.java (2.1KB)
│   │               │   │   │   │   ├── ☕ DataGrantFeignApi.java (4.3KB)
│   │               │   │   │   │   ├── ☕ DataHolidayFeign.java (3.7KB)
│   │               │   │   │   │   ├── ☕ DataHolidayFeignApi.java (8.6KB)
│   │               │   │   │   │   ├── ☕ DataUserFeign.java (1.6KB)
│   │               │   │   │   │   └── ☕ DataUserFeignApi.java (2.5KB)
│   │               │   │   │   ├── 📁 datasearch/ (14 files)
│   │               │   │   │   │   ├── 📁 dto/ (12 files)
│   │               │   │   │   │   ├── ☕ DataSearchFeign.java (3.9KB)
│   │               │   │   │   │   └── ☕ DataSearchFeignApi.java (11.8KB)
│   │               │   │   │   ├── 📁 ebank/ (2 files)
│   │               │   │   │   │   ├── ☕ EBankFeign.java (1.8KB)
│   │               │   │   │   │   └── ☕ EBankFeignApi.java (925B)
│   │               │   │   │   ├── 📁 file/ (11 files)
│   │               │   │   │   │   ├── 📁 dto/ (9 files)
│   │               │   │   │   │   ├── ☕ FileDownLoadFeign.java (4.0KB)
│   │               │   │   │   │   └── ☕ FileDownloadFeignApi.java (4.3KB)
│   │               │   │   │   ├── 📁 finance/ (5 files)
│   │               │   │   │   │   ├── 📁 dto/ (3 files)
│   │               │   │   │   │   ├── ☕ ZqylFinanceFeign.java (1.4KB)
│   │               │   │   │   │   └── ☕ ZqylFinanceFeignApi.java (2.3KB)
│   │               │   │   │   ├── 📁 investment/ (6 files)
│   │               │   │   │   │   ├── 📁 dto/ (4 files)
│   │               │   │   │   │   ├── ☕ InvestmentPlanFeign.java (3.0KB)
│   │               │   │   │   │   └── ☕ InvestmentPlanFeignApi.java (2.9KB)
│   │               │   │   │   ├── 📁 invoice/ (11 files)
│   │               │   │   │   │   ├── 📁 dto/ (9 files)
│   │               │   │   │   │   ├── ☕ ZqylInvoiceFeign.java (2.0KB)
│   │               │   │   │   │   └── ☕ ZqylInvoiceFeignApi.java (2.7KB)
│   │               │   │   │   ├── 📁 messagecenter/ (25 files)
│   │               │   │   │   │   ├── 📁 dto/ (18 files)
│   │               │   │   │   │   ├── ☕ EmailFegin.java (853B)
│   │               │   │   │   │   ├── ☕ EmailFeginApi.java (392B)
│   │               │   │   │   │   ├── ☕ EmailFeginApiImpl.java (736B)
│   │               │   │   │   │   ├── ☕ MessageFeignApi.java (13.6KB)
│   │               │   │   │   │   ├── ☕ SmsFeign.java (2.4KB)
│   │               │   │   │   │   ├── ☕ WebMsgFeign.java (1.3KB)
│   │               │   │   │   │   └── ☕ WechatFeign.java (1.2KB)
│   │               │   │   │   ├── 📁 messageim/ (3 files)
│   │               │   │   │   │   ├── 📁 dto/ (1 files)
│   │               │   │   │   │   ├── ☕ MessageImFeign.java (944B)
│   │               │   │   │   │   └── ☕ MessageImFeignApi.java (1.1KB)
│   │               │   │   │   ├── 📁 repay/ (30 files)
│   │               │   │   │   │   ├── 📁 dto/ (26 files)
│   │               │   │   │   │   ├── ☕ ClearingFeign.java (1.5KB)
│   │               │   │   │   │   ├── ☕ ClearingFeignApi.java (2.1KB)
│   │               │   │   │   │   ├── ☕ RepayFeign.java (6.1KB)
│   │               │   │   │   │   └── ☕ RepayFeignApi.java (8.7KB)
│   │               │   │   │   ├── 📁 report/ (4 files)
│   │               │   │   │   │   ├── 📁 dto/ (2 files)
│   │               │   │   │   │   ├── ☕ ZqylReportFeign.java (851B)
│   │               │   │   │   │   └── ☕ ZqylReportFeignApi.java (1.4KB)
│   │               │   │   │   ├── 📁 templates/ (5 files)
│   │               │   │   │   │   ├── 📁 dto/ (3 files)
│   │               │   │   │   │   ├── ☕ AgreementFeign.java (1.3KB)
│   │               │   │   │   │   └── ☕ AgreementFeignApi.java (4.6KB)
│   │               │   │   │   ├── 📁 user/ (91 files)
│   │               │   │   │   │   ├── 📁 dto/ (68 files)
│   │               │   │   │   │   ├── 📁 userauth/ (16 files)
│   │               │   │   │   │   ├── 📁 usercas/ (1 files)
│   │               │   │   │   │   ├── 📁 usercert/ (2 files)
│   │               │   │   │   │   ├── 📁 usercfca/ (2 files)
│   │               │   │   │   │   └── 📁 usergeneral/ (2 files)
│   │               │   │   │   ├── 📁 workflow/ (24 files)
│   │               │   │   │   │   ├── 📁 dto/ (19 files)
│   │               │   │   │   │   ├── ☕ ActFeign.java (2.8KB)
│   │               │   │   │   │   ├── ☕ ActFeignApi.java (4.2KB)
│   │               │   │   │   │   ├── ☕ WorkFlowApi.java (2.1KB)
│   │               │   │   │   │   ├── ☕ WorkFlowApiImpl.java (8.9KB)
│   │               │   │   │   │   └── ☕ WorkFlowFeign.java (4.2KB)
│   │               │   │   │   ├── 📁 ysfd/ (8 files)
│   │               │   │   │   │   ├── 📁 dto/ (6 files)
│   │               │   │   │   │   ├── ☕ YsfdFeign.java (2.6KB)
│   │               │   │   │   │   └── ☕ YsfdFeignApi.java (2.0KB)
│   │               │   │   │   ├── 📁 zqylcms/ (10 files)
│   │               │   │   │   │   ├── 📁 dto/ (8 files)
│   │               │   │   │   │   ├── ☕ ZqylCmsFeign.java (3.0KB)
│   │               │   │   │   │   └── ☕ ZqylCmsFeignApi.java (14.5KB)
│   │               │   │   │   ├── 📁 zqylinvoice/ (20 files)
│   │               │   │   │   │   ├── 📁 dto/ (6 files)
│   │               │   │   │   │   ├── 📁 req/ (7 files)
│   │               │   │   │   │   ├── 📁 resp/ (5 files)
│   │               │   │   │   │   ├── ☕ InvoicePlatFormFeign.java (4.3KB)
│   │               │   │   │   │   └── ☕ InvoicePlatFormFeignApi.java (6.6KB)
│   │               │   │   │   ├── 📁 zqylloan/ (3 files)
│   │               │   │   │   │   ├── 📁 dto/ (1 files)
│   │               │   │   │   │   ├── ☕ ZqylLoanFeign.java (996B)
│   │               │   │   │   │   └── ☕ ZqylLoanFeignApi.java (1.0KB)
│   │               │   │   │   └── 📁 zqylweb/ (2 files)
│   │               │   │   │       └── 📁 dto/ (2 files)
│   │               │   │   ├── 📁 jobhandler/ (19 files)
│   │               │   │   │   ├── ☕ CheckCompanyDataHandler.java (841B)
│   │               │   │   │   ├── ☕ CheckOpenWarningHandle.java (1.6KB)
│   │               │   │   │   ├── ☕ CheckOpenWarningStatusHandle.java (824B)
│   │               │   │   │   ├── ☕ CheckWorkTicketMsgHandler.java (1.1KB)
│   │               │   │   │   ├── ☕ CoreValidOpenWarningHandle.java (3.0KB)
│   │               │   │   │   ├── ☕ CrclOpenBCPHandle.java (5.3KB)
│   │               │   │   │   ├── ☕ CrclPondWarnHandler.java (3.0KB)
│   │               │   │   │   ├── ☕ DoBatchOpenAuditTaskHandler.java (1.4KB)
│   │               │   │   │   ├── ☕ LimitWarningHandler.java (3.9KB)
│   │               │   │   │   ├── ☕ OpenNoticeBusinessResultRetryHandler.java (1.5KB)
│   │               │   │   │   ├── ☕ RestApplySeqHandler.java (700B)
│   │               │   │   │   ├── ☕ RetryInvoiceUnFreezeForSingleFail.java (1.1KB)
│   │               │   │   │   ├── ☕ SaveOpenAccountApplyHandle.java (851B)
│   │               │   │   │   ├── ☕ TimingGetTallyDisposeStatusHandler.java (793B)
│   │               │   │   │   ├── ☕ UnFreezeNonidenticalInvoiceHandler.java (1.1KB)
│   │               │   │   │   ├── ☕ UpdateWorkFlowProcessConfigHandle.java (1.3KB)
│   │               │   │   │   ├── ☕ WorkFlowPreAuditStatusResultHandler.java (1.6KB)
│   │               │   │   │   ├── ☕ WorkFlowProcessStartResultHandler.java (1.5KB)
│   │               │   │   │   └── ☕ WorkFlowReconciliationHandler.java (814B)
│   │               │   │   ├── 📁 ls/ (5 files)
│   │               │   │   │   ├── 📁 dto/ (4 files)
│   │               │   │   │   │   ├── ☕ LsCheckingDto.java (1.4KB)
│   │               │   │   │   │   ├── ☕ LsLimitCheckDto.java (1.2KB)
│   │               │   │   │   │   ├── ☕ LsOpenMainDto.java (2.8KB)
│   │               │   │   │   │   └── ☕ package-info.java (46B)
│   │               │   │   │   └── 📁 service/ (1 files)
│   │               │   │   │       └── ☕ LsOpenApplication.java (24.2KB)
│   │               │   │   ├── 📁 message/ (9 files)
│   │               │   │   │   ├── 📁 dto/ (8 files)
│   │               │   │   │   │   ├── ☕ CrclInterfaceDto.java (2.6KB)
│   │               │   │   │   │   ├── ☕ NoticeBody.java (1.3KB)
│   │               │   │   │   │   ├── ☕ OpenCrclInterfaceDto.java (198B)
│   │               │   │   │   │   ├── ☕ OpenNoticeBody.java (7.3KB)
│   │               │   │   │   │   ├── ☕ OpenNoticeMqDto.java (3.1KB)
│   │               │   │   │   │   ├── ☕ OpenOperAuditDto.java (1.1KB)
│   │               │   │   │   │   ├── ☕ QueryOpenResultBody.java (4.4KB)
│   │               │   │   │   │   └── ☕ ResponseBodyBean.java (52B)
│   │               │   │   │   └── 📁 service/ (1 files)
│   │               │   │   │       └── ☕ MessageApplication.java (87.7KB)
│   │               │   │   ├── 📁 send/ (35 files)
│   │               │   │   │   ├── 📁 dto/ (12 files)
│   │               │   │   │   │   ├── ☕ ConsLimitDto.java (5.6KB)
│   │               │   │   │   │   ├── ☕ CrclOpenBusinessResultNoticeMsg.java (5.0KB)
│   │               │   │   │   │   ├── ☕ CrclReceiveNoticeBody.java (5.7KB)
│   │               │   │   │   │   ├── ☕ JebRepayBody.java (5.5KB)
│   │               │   │   │   │   ├── ☕ JebRepayMqDto.java (738B)
│   │               │   │   │   │   ├── ☕ NoticeNakatengWorkerDto.java (3.7KB)
│   │               │   │   │   │   ├── ☕ RepayBody.java (7.1KB)
│   │               │   │   │   │   ├── ☕ RepayHead.java (1.5KB)
│   │               │   │   │   │   ├── ☕ RepayMqDto.java (724B)
│   │               │   │   │   │   ├── ☕ SendReslutDto.java (2.3KB)
│   │               │   │   │   │   ├── ☕ TradeBgCoChainBodyDto.java (1.7KB)
│   │               │   │   │   │   └── ☕ WorkTicketMqDto.java (1.5KB)
│   │               │   │   │   └── 📁 service/ (23 files)
│   │               │   │   │       ├── ☕ AssembleNoticeWorker.java (5.1KB)
│   │               │   │   │       ├── ☕ BcpWorker.java (2.4KB)
│   │               │   │   │       ├── ☕ BlockWorker.java (5.0KB)
│   │               │   │   │       ├── ☕ CompanyFriendWorker.java (3.3KB)
│   │               │   │   │       ├── ☕ CrclReceiveNoticeWorker.java (5.1KB)
│   │               │   │   │       ├── ☕ GeneralAccountWorker.java (4.2KB)
│   │               │   │   │       ├── ☕ IntegralWorker.java (1.6KB)
│   │               │   │   │       ├── ☕ JebOpenAuditRepayMqWorker.java (5.3KB)
│   │               │   │   │       ├── ☕ LsBlockWorker.java (4.5KB)
│   │               │   │   │       ├── ☕ LsRepayMqWorker.java (5.7KB)
│   │               │   │   │       ├── ☕ MqApplication.java (11.1KB)
│   │               │   │   │       ├── ☕ NoticeBusinessResultWorker.java (5.5KB)
│   │               │   │   │       ├── ☕ NoticeNakatengWorker.java (6.5KB)
│   │               │   │   │       ├── ☕ OpenLxMessageImWorker.java (2.2KB)
│   │               │   │   │       ├── ☕ OpenMessageWorker.java (3.2KB)
│   │               │   │   │       ├── ☕ RepayMqWorker.java (7.0KB)
│   │               │   │   │       ├── ☕ TallyWorker.java (6.4KB)
│   │               │   │   │       ├── ☕ TradeBgCoChainWorker.java (3.0KB)
│   │               │   │   │       ├── ☕ TradeBgDataSyncWorker.java (3.0KB)
│   │               │   │   │       ├── ☕ WorkFlowProcessStartWorker.java (7.2KB)
│   │               │   │   │       ├── ☕ WorkFlowUpdateStatusWorker.java (5.6KB)
│   │               │   │   │       ├── ☕ WorkTicketMqWorker.java (5.1KB)
│   │               │   │   │       └── ☕ YfdOpenCrclWorker.java (5.8KB)
│   │               │   │   ├── 📁 session/ (2 files)
│   │               │   │   │   ├── 📁 dto/ (1 files)
│   │               │   │   │   │   └── ☕ TradeCountDto.java (800B)
│   │               │   │   │   └── 📁 service/ (1 files)
│   │               │   │   │       └── ☕ SessionApplication.java (9.6KB)
│   │               │   │   ├── 📁 statistics/ (1 files)
│   │               │   │   │   └── ☕ StatisticsApplication.java (17.0KB)
│   │               │   │   └── 📁 trade/ (13 files)
│   │               │   │       ├── 📁 dto/ (6 files)
│   │               │   │       │   ├── ☕ CheckInvoiceCodeDto.java (1.4KB)
│   │               │   │       │   ├── ☕ ListTradeBgContractListDto.java (1007B)
│   │               │   │       │   ├── ☕ ListTradeBgInvoiceListDto.java (1006B)
│   │               │   │       │   ├── ☕ OpenCrclFailDto.java (732B)
│   │               │   │       │   ├── ☕ OpenMainInfoDto.java (6.8KB)
│   │               │   │       │   └── ☕ OperatorInfo.java (1.1KB)
│   │               │   │       └── 📁 service/ (7 files)
│   │               │   │           ├── ☕ TradeBgCoChainApplication.java (17.2KB)
│   │               │   │           ├── ☕ TradeBgContractApplication.java (27.0KB)
│   │               │   │           ├── ☕ TradeBgDataSyncApplication.java (12.9KB)
│   │               │   │           ├── ☕ TradeBgInvoiceApplication.java (55.6KB)
│   │               │   │           ├── ☕ TradeBgInvoiceTallyApplication.java (25.8KB)
│   │               │   │           ├── ☕ TradeBgManagerApplication.java (339.8KB)
│   │               │   │           └── ☕ TradeBgSwitchInfoApplication.java (35.2KB)
│   │               │   ├── 📁 base/ (358 files)
│   │               │   │   ├── 📁 advice/ (2 files)
│   │               │   │   │   ├── ☕ ExceptionHandlerAdvice.java (2.9KB)
│   │               │   │   │   └── ☕ MethodAnnotation.java (389B)
│   │               │   │   ├── 📁 annotation/ (10 files)
│   │               │   │   │   ├── ☕ ListNotEmpty.java (751B)
│   │               │   │   │   ├── ☕ ListNotEmptyValidator.java (570B)
│   │               │   │   │   ├── ☕ TokenValidate.java (588B)
│   │               │   │   │   ├── ☕ TokenValidateAspect.java (1.7KB)
│   │               │   │   │   ├── ☕ UserPosition.java (587B)
│   │               │   │   │   ├── ☕ UserPositionAspect.java (7.3KB)
│   │               │   │   │   ├── ☕ UserUKey.java (583B)
│   │               │   │   │   ├── ☕ UserUkeyAspect.java (5.0KB)
│   │               │   │   │   ├── ☕ UserValidate.java (587B)
│   │               │   │   │   └── ☕ UserValidateAspect.java (1.7KB)
│   │               │   │   ├── 📁 autosend/ (4 files)
│   │               │   │   │   ├── ☕ AbstractSendWorker.java (5.9KB)
│   │               │   │   │   ├── ☕ OpenSendParam.java (4.9KB)
│   │               │   │   │   ├── ☕ SendManager.java (16.2KB)
│   │               │   │   │   └── ☕ TaskTypeEnum.java (3.0KB)
│   │               │   │   ├── 📁 batchsend/ (3 files)
│   │               │   │   │   ├── ☕ AbstractBatchAutoSend.java (440B)
│   │               │   │   │   ├── ☕ BatchAutoSend.java (887B)
│   │               │   │   │   └── ☕ BatchSendManager.java (2.0KB)
│   │               │   │   ├── 📁 config/ (10 files)
│   │               │   │   │   ├── ☕ DistribTypeFactory.java (2.1KB)
│   │               │   │   │   ├── ☕ FeignSpringFormEncoder.java (2.4KB)
│   │               │   │   │   ├── ☕ FileDownViewConfig.java (3.2KB)
│   │               │   │   │   ├── ☕ MpsAuditBaseSelectProvider.java (11.8KB)
│   │               │   │   │   ├── ☕ MultipartSupportConfig.java (959B)
│   │               │   │   │   ├── ☕ RedissonConfig.java (1.4KB)
│   │               │   │   │   ├── ☕ TardeAuditListSearchStatusFactory.java (1.5KB)
│   │               │   │   │   ├── ☕ ThreadPoolConfig.java (7.0KB)
│   │               │   │   │   ├── ☕ VisiableThreadPoolTaskExecutor.java (2.1KB)
│   │               │   │   │   └── ☕ XxlJobConfig.java (1.4KB)
│   │               │   │   ├── 📁 constants/ (21 files)
│   │               │   │   │   ├── ☕ BankBlockConstants.java (1.3KB)
│   │               │   │   │   ├── ☕ BizTraceConstants.java (969B)
│   │               │   │   │   ├── ☕ ClearingConstants.java (223B)
│   │               │   │   │   ├── ☕ ComonConstant.java (2.2KB)
│   │               │   │   │   ├── ☕ CompanyAccountConstants.java (829B)
│   │               │   │   │   ├── ☕ Constants.java (5.3KB)
│   │               │   │   │   ├── ☕ CoreMainConstants.java (488B)
│   │               │   │   │   ├── ☕ CorePondConstants.java (379B)
│   │               │   │   │   ├── ☕ DynamicsSqlConstant.java (4.5KB)
│   │               │   │   │   ├── ☕ EBankConstants.java (2.4KB)
│   │               │   │   │   ├── ☕ ExportExcelConstants.java (668B)
│   │               │   │   │   ├── ☕ MsgTypeConstants.java (310B)
│   │               │   │   │   ├── ☕ NoticeConstant.java (1.3KB)
│   │               │   │   │   ├── ☕ NumberConstants.java (1.3KB)
│   │               │   │   │   ├── ☕ OpenUnitConstants.java (186B)
│   │               │   │   │   ├── ☕ PageConstants.java (248B)
│   │               │   │   │   ├── ☕ PdfCodeConstants.java (3.7KB)
│   │               │   │   │   ├── ☕ PdfDefaultAliasNameConstants.java (221B)
│   │               │   │   │   ├── ☕ RedisConstants.java (1.4KB)
│   │               │   │   │   ├── ☕ SceneCodeConstants.java (3.6KB)
│   │               │   │   │   └── ☕ ServerCodeConstants.java (1.5KB)
│   │               │   │   ├── 📁 dict/ (211 files)
│   │               │   │   │   ├── 📁 crclcore/ (1 files)
│   │               │   │   │   │   └── ☕ CoreMainBusinessTypeEnum.java (1.4KB)
│   │               │   │   │   ├── 📁 crclopen/ (1 files)
│   │               │   │   │   │   └── ☕ ModelTypeEnum.java (854B)
│   │               │   │   │   ├── 📁 liabilitypool/ (1 files)
│   │               │   │   │   │   └── ☕ LiabilityPoolCallTypeEnum.java (990B)
│   │               │   │   │   ├── 📁 middle/ (5 files)
│   │               │   │   │   │   ├── ☕ ConditionTypeEnum.java (522B)
│   │               │   │   │   │   ├── ☕ LableTypeEnum.java (620B)
│   │               │   │   │   │   ├── ☕ OperatorEnum.java (1.5KB)
│   │               │   │   │   │   ├── ☕ PropertyTypeEnum.java (686B)
│   │               │   │   │   │   └── ☕ TradeOrderPropertyEnum.java (2.0KB)
│   │               │   │   │   ├── 📁 tradeBg/ (12 files)
│   │               │   │   │   │   ├── ☕ BaseFieldTypeEnum.java (547B)
│   │               │   │   │   │   ├── ☕ BillComponentTypeEnum.java (548B)
│   │               │   │   │   │   ├── ☕ CheckButtonTypeEnum.java (652B)
│   │               │   │   │   │   ├── ☕ CheckResultStatusEnum.java (874B)
│   │               │   │   │   │   ├── ☕ InvoiceKindTypeEnum.java (1.1KB)
│   │               │   │   │   │   ├── ☕ InvoiceOcrTypeEnum.java (1.6KB)
│   │               │   │   │   │   ├── ☕ InvoiceQueryResultEnum.java (798B)
│   │               │   │   │   │   ├── ☕ InvoiceTypeEnum.java (3.6KB)
│   │               │   │   │   │   ├── ☕ IsFirstUploadEnum.java (589B)
│   │               │   │   │   │   ├── ☕ IsInvoiceRepeatEnum.java (631B)
│   │               │   │   │   │   ├── ☕ IsNeedInvoiceEnum.java (638B)
│   │               │   │   │   │   └── ☕ TradeBgFieldCodeEnum.java (1.6KB)
│   │               │   │   │   ├── 📁 workflow/ (8 files)
│   │               │   │   │   │   ├── ☕ AuditResultEnum.java (674B)
│   │               │   │   │   │   ├── ☕ NotifyOpportunityEnum.java (1.4KB)
│   │               │   │   │   │   ├── ☕ PreAuditResultEnum.java (689B)
│   │               │   │   │   │   ├── ☕ WorkFlowAllFlag.java (606B)
│   │               │   │   │   │   ├── ☕ WorkFlowCancelResultEnum.java (521B)
│   │               │   │   │   │   ├── ☕ WorkFlowPreResultEnum.java (417B)
│   │               │   │   │   │   ├── ☕ WorkFlowProcessConfigEnum.java (950B)
│   │               │   │   │   │   └── ☕ WorkFlowProcessStartStatusEnum.java (574B)
│   │               │   │   │   ├── ☕ AbsEnum.java (515B)
│   │               │   │   │   ├── ☕ AccountApplyFlagEnum.java (547B)
│   │               │   │   │   ├── ☕ AccountDealStatusEnum.java (486B)
│   │               │   │   │   ├── ☕ AppCrclListTagEnum.java (1.4KB)
│   │               │   │   │   ├── ☕ AppPushFlagEnum.java (1.7KB)
│   │               │   │   │   ├── ☕ AppQueryTypeEnum.java (626B)
│   │               │   │   │   ├── ☕ AppUserMenuTypeEnum.java (981B)
│   │               │   │   │   ├── ☕ AuditEnum.java (502B)
│   │               │   │   │   ├── ☕ AuditNodeEnum.java (536B)
│   │               │   │   │   ├── ☕ AuditStageEnum.java (506B)
│   │               │   │   │   ├── ☕ AuditStatusEnum.java (571B)
│   │               │   │   │   ├── ☕ AuthStatusEnum.java (524B)
│   │               │   │   │   ├── ☕ AuthTypeEnum.java (636B)
│   │               │   │   │   ├── ☕ BankSourceType.java (779B)
│   │               │   │   │   ├── ☕ BcpBizTypeEnum.java (562B)
│   │               │   │   │   ├── ☕ BcpBusiTypeEnum.java (697B)
│   │               │   │   │   ├── ☕ BcpNodeCodeEnum.java (786B)
│   │               │   │   │   ├── ☕ BcpSynFormulaEnum.java (554B)
│   │               │   │   │   ├── ☕ BcpSynResultEnum.java (662B)
│   │               │   │   │   ├── ☕ BeneficiaryEnum.java (714B)
│   │               │   │   │   ├── ☕ BillStatusEnum.java (1.4KB)
│   │               │   │   │   ├── ☕ BindRoleEnum.java (949B)
│   │               │   │   │   ├── ☕ BizTypeEnum.java (509B)
│   │               │   │   │   ├── ☕ BusinessStatusEnum.java (569B)
│   │               │   │   │   ├── ☕ BusinessTypeCodeEnumEnum.java (928B)
│   │               │   │   │   ├── ☕ BusinessTypeEnum.java (462B)
│   │               │   │   │   ├── ☕ BusiTypeBcpEnum.java (634B)
│   │               │   │   │   ├── ☕ CalTypeNewEnum.java (559B)
│   │               │   │   │   ├── ☕ CardStatusEnum.java (656B)
│   │               │   │   │   ├── ☕ CardTypeEnum.java (729B)
│   │               │   │   │   ├── ☕ CfcaSvsHisCertTypeEnum.java (586B)
│   │               │   │   │   ├── ☕ CfcaSvsHisSignOperTypeEnum.java (548B)
│   │               │   │   │   ├── ☕ ChargeExceptionEnum.java (720B)
│   │               │   │   │   ├── ☕ ChargeTypeEnum.java (880B)
│   │               │   │   │   ├── ☕ ClassifyEnum.java (881B)
│   │               │   │   │   ├── ☕ CodeRuleEnum.java (890B)
│   │               │   │   │   ├── ☕ CompanyAccountCardTypeEnum.java (5.8KB)
│   │               │   │   │   ├── ☕ CompanyBankStatusEnum.java (1.1KB)
│   │               │   │   │   ├── ☕ CompanyTypeEnum.java (725B)
│   │               │   │   │   ├── ☕ CoreSourceTypeEnum.java (1.1KB)
│   │               │   │   │   ├── ☕ CrclApplyStatusEnum.java (959B)
│   │               │   │   │   ├── ☕ CrclBatchCorrelationStatusEnum.java (753B)
│   │               │   │   │   ├── ☕ CrclCompanyTypeEnum.java (684B)
│   │               │   │   │   ├── ☕ CrclDistribFlagDistribTypeEnum.java (2.1KB)
│   │               │   │   │   ├── ☕ CrclDistribFlagSourceTableEnum.java (646B)
│   │               │   │   │   ├── ☕ CrclFixedFlowpathStatusEnum.java (602B)
│   │               │   │   │   ├── ☕ CrclLimitEffectStatusEnum.java (680B)
│   │               │   │   │   ├── ☕ CrclLimitFileTypeEnum.java (459B)
│   │               │   │   │   ├── ☕ CrclNoFlagEnum.java (541B)
│   │               │   │   │   ├── ☕ CrclNoSourceTypeEnum.java (667B)
│   │               │   │   │   ├── ☕ CrclOpenbatchStatusEnum.java (589B)
│   │               │   │   │   ├── ☕ CrclOpenbatchTimerStatusEnum.java (630B)
│   │               │   │   │   ├── ☕ CrclOpenBcpEnum.java (613B)
│   │               │   │   │   ├── ☕ CrclReserveTaskStatusEnum.java (615B)
│   │               │   │   │   ├── ☕ CrclStatusDataEnum.java (797B)
│   │               │   │   │   ├── ☕ CrclTallyIdempotentStatusEnum.java (1.2KB)
│   │               │   │   │   ├── ☕ CrclTypeEnum.java (454B)
│   │               │   │   │   ├── ☕ CurrencyTypeEnum.java (495B)
│   │               │   │   │   ├── ☕ CustCompanyEnum.java (640B)
│   │               │   │   │   ├── ☕ CustStatusEnum.java (895B)
│   │               │   │   │   ├── ☕ DataAccessConditionEnum.java (1.3KB)
│   │               │   │   │   ├── ☕ DataAccessParamNameEnum.java (1.4KB)
│   │               │   │   │   ├── ☕ DataAccessTableNameEnum.java (911B)
│   │               │   │   │   ├── ☕ DesireModeCodeEnum.java (752B)
│   │               │   │   │   ├── ☕ DistribTypeEnum.java (1.5KB)
│   │               │   │   │   ├── ☕ DockingTypeEnum.java (540B)
│   │               │   │   │   ├── ☕ ErrorCodeEnum.java (6.3KB)
│   │               │   │   │   ├── ☕ ErrorTypeEnum.java (16.5KB)
│   │               │   │   │   ├── ☕ FailStatusEnum.java (524B)
│   │               │   │   │   ├── ☕ FailTypeEnum.java (839B)
│   │               │   │   │   ├── ☕ FileDownloadSourceTypeEnum.java (596B)
│   │               │   │   │   ├── ☕ FileManagerBizTypeEnum.java (1.7KB)
│   │               │   │   │   ├── ☕ FinancePaymentPatternEnum.java (949B)
│   │               │   │   │   ├── ☕ FlagEnum.java (546B)
│   │               │   │   │   ├── ☕ FlowPathEnum.java (569B)
│   │               │   │   │   ├── ☕ FrontBackBizEnum.java (794B)
│   │               │   │   │   ├── ☕ GroupEnum.java (587B)
│   │               │   │   │   ├── ☕ GroupUserAuthTypeEnum.java (540B)
│   │               │   │   │   ├── ☕ IdempotentStatusEnum.java (1.3KB)
│   │               │   │   │   ├── ☕ IncentiveSalesTypeEnum.java (531B)
│   │               │   │   │   ├── ☕ IntegralTypeEnum.java (1.3KB)
│   │               │   │   │   ├── ☕ InterfaceStatusEnum.java (1.1KB)
│   │               │   │   │   ├── ☕ InvestmentPlanEffectStatusEnum.java (903B)
│   │               │   │   │   ├── ☕ IsfitEnum.java (586B)
│   │               │   │   │   ├── ☕ IsFlowPathEnum.java (576B)
│   │               │   │   │   ├── ☕ IsFreezeStatusEnum.java (587B)
│   │               │   │   │   ├── ☕ IsNeedTradeBgEnum.java (619B)
│   │               │   │   │   ├── ☕ JoinTypeEnum.java (568B)
│   │               │   │   │   ├── ☕ LimitChangeSourceTypeEnum.java (569B)
│   │               │   │   │   ├── ☕ LimitdStatusEnum.java (575B)
│   │               │   │   │   ├── ☕ LimitFreezeEnum.java (2.3KB)
│   │               │   │   │   ├── ☕ LimitStatusEnum.java (508B)
│   │               │   │   │   ├── ☕ ManagerShowEnum.java (519B)
│   │               │   │   │   ├── ☕ MenuTypeEnum.java (1.2KB)
│   │               │   │   │   ├── ☕ MessageTemplateEnum.java (4.9KB)
│   │               │   │   │   ├── ☕ MessageType.java (377B)
│   │               │   │   │   ├── ☕ MutipleUkeyProcessNodeEnum.java (2.0KB)
│   │               │   │   │   ├── ☕ NewOpenGroupEnum.java (610B)
│   │               │   │   │   ├── ☕ OpenAccountApplyStatusEnum.java (685B)
│   │               │   │   │   ├── ☕ OpenApplyHoldTypeEnum.java (643B)
│   │               │   │   │   ├── ☕ OpenApplySourceTypeEnum.java (1.3KB)
│   │               │   │   │   ├── ☕ OpenApplyStatusEnum.java (1.5KB)
│   │               │   │   │   ├── ☕ OpenAuditTypeEnum.java (624B)
│   │               │   │   │   ├── ☕ OpenCrclRelStatusEnum.java (571B)
│   │               │   │   │   ├── ☕ OpenErrorNodeEnum.java (1.0KB)
│   │               │   │   │   ├── ☕ OpenFileTypeEnum.java (1.5KB)
│   │               │   │   │   ├── ☕ OpeningTagEnum.java (995B)
│   │               │   │   │   ├── ☕ OpenMainCrclValidEnum.java (977B)
│   │               │   │   │   ├── ☕ OpenMainSourceTypeEnum.java (1.2KB)
│   │               │   │   │   ├── ☕ OpenMsgDisplayTypeEnum.java (608B)
│   │               │   │   │   ├── ☕ OpenOperateSourceTypeNum.java (875B)
│   │               │   │   │   ├── ☕ OpenOperateTypeEnum.java (1.3KB)
│   │               │   │   │   ├── ☕ OpenPathEnum.java (993B)
│   │               │   │   │   ├── ☕ OpenPlatformTypeEnum.java (533B)
│   │               │   │   │   ├── ☕ OpenSendLogStatusEnum.java (1016B)
│   │               │   │   │   ├── ☕ OpenSendManagerStatusEnum.java (1.7KB)
│   │               │   │   │   ├── ☕ OpenSendNodeEnum.java (1.4KB)
│   │               │   │   │   ├── ☕ OpenSendRequestTypeEnum.java (941B)
│   │               │   │   │   ├── ☕ OpenSendSendStatusEnum.java (1.2KB)
│   │               │   │   │   ├── ☕ OpenSendTaskTypeEnum.java (4.2KB)
│   │               │   │   │   ├── ☕ OpenSeqenceEnum.java (531B)
│   │               │   │   │   ├── ☕ OpenTypeEnum.java (570B)
│   │               │   │   │   ├── ☕ OpenUnitAuthTypeEnum.java (542B)
│   │               │   │   │   ├── ☕ OpenWayEnum.java (551B)
│   │               │   │   │   ├── ☕ OperationTypeEnum.java (694B)
│   │               │   │   │   ├── ☕ OperTypeEnum.java (451B)
│   │               │   │   │   ├── ☕ PageStatusEnum.java (1.2KB)
│   │               │   │   │   ├── ☕ ParamCrclLimitStatusEnum.java (652B)
│   │               │   │   │   ├── ☕ ParamFlagEnum.java (458B)
│   │               │   │   │   ├── ☕ PlatformTypeEnum.java (578B)
│   │               │   │   │   ├── ☕ PolicyOrderEnum.java (960B)
│   │               │   │   │   ├── ☕ PositionCodeEnum.java (972B)
│   │               │   │   │   ├── ☕ PositionEnum.java (981B)
│   │               │   │   │   ├── ☕ PriceLevelEnum.java (409B)
│   │               │   │   │   ├── ☕ ProcessIsBlockedEnum.java (611B)
│   │               │   │   │   ├── ☕ ProcessStatusEnum.java (835B)
│   │               │   │   │   ├── ☕ PromptTypeEnum.java (501B)
│   │               │   │   │   ├── ☕ ReceiveConfBusinessTypeEnum.java (1.1KB)
│   │               │   │   │   ├── ☕ ReceiveConfConfigTypeEnum.java (1.5KB)
│   │               │   │   │   ├── ☕ ReceiveConfLogOperateEnum.java (2.2KB)
│   │               │   │   │   ├── ☕ RecoverStatusEnum.java (545B)
│   │               │   │   │   ├── ☕ RepayCompanyConfigStatusEnum.java (680B)
│   │               │   │   │   ├── ☕ RepayIsPayEnum.java (767B)
│   │               │   │   │   ├── ☕ ReserveStatusEnum.java (603B)
│   │               │   │   │   ├── ☕ ReserveTaskModulEnum.java (980B)
│   │               │   │   │   ├── ☕ ReserveTaskTypeEnum.java (596B)
│   │               │   │   │   ├── ☕ ReslutStatusEnum.java (635B)
│   │               │   │   │   ├── ☕ ResultEnum.java (528B)
│   │               │   │   │   ├── ☕ ResultStatusEnum.java (2.6KB)
│   │               │   │   │   ├── ☕ RetCodeEnum.java (496B)
│   │               │   │   │   ├── ☕ ScheduleRecoverStatusEnum.java (554B)
│   │               │   │   │   ├── ☕ SealtTypeEnum.java (558B)
│   │               │   │   │   ├── ☕ SendMsgStatusEnum.java (544B)
│   │               │   │   │   ├── ☕ SendOpenExceptionEnum.java (772B)
│   │               │   │   │   ├── ☕ SharehisShareTypeEnum.java (852B)
│   │               │   │   │   ├── ☕ ShowEnum.java (497B)
│   │               │   │   │   ├── ☕ SourceTypeCompanyNameEnum.java (1.5KB)
│   │               │   │   │   ├── ☕ StateEnum.java (574B)
│   │               │   │   │   ├── ☕ StatusEnum.java (576B)
│   │               │   │   │   ├── ☕ StepEnum.java (500B)
│   │               │   │   │   ├── ☕ SynStatusEnum.java (1.1KB)
│   │               │   │   │   ├── ☕ SysCfcaServiceEnum.java (1.7KB)
│   │               │   │   │   ├── ☕ SysLogEnum.java (3.6KB)
│   │               │   │   │   ├── ☕ TemplateAliasTypeEnum.java (825B)
│   │               │   │   │   ├── ☕ TradeBgCoChainFileTypeEnum.java (603B)
│   │               │   │   │   ├── ☕ TradeBgInvoiceStatusEnum.java (495B)
│   │               │   │   │   ├── ☕ TradeBgIsNeedEnum.java (507B)
│   │               │   │   │   ├── ☕ TradeBgSaveTypeEnum.java (644B)
│   │               │   │   │   ├── ☕ TradeBgStatusEnum.java (1.4KB)
│   │               │   │   │   ├── ☕ TradeBgSyncDataTypeEnum.java (527B)
│   │               │   │   │   ├── ☕ TradeListEnum.java (591B)
│   │               │   │   │   ├── ☕ TradeSwitchStatusEnum.java (597B)
│   │               │   │   │   ├── ☕ TradeTypeEnum.java (529B)
│   │               │   │   │   ├── ☕ UkeyLevelEnum.java (1.2KB)
│   │               │   │   │   ├── ☕ UnitAuthTypeEnum.java (582B)
│   │               │   │   │   ├── ☕ UnitDitTypeEnum.java (634B)
│   │               │   │   │   ├── ☕ UseTypeEnum.java (839B)
│   │               │   │   │   ├── ☕ WarningAlertTypeEnum.java (854B)
│   │               │   │   │   ├── ☕ WarningGradeEnum.java (464B)
│   │               │   │   │   ├── ☕ WarningStatusEnum.java (868B)
│   │               │   │   │   ├── ☕ WorkFlowEnum.java (541B)
│   │               │   │   │   ├── ☕ WorkTicketMsgStatusEnum.java (581B)
│   │               │   │   │   └── ☕ WorkTimeEnum.java (527B)
│   │               │   │   ├── 📁 excel/ (11 files)
│   │               │   │   │   ├── 📁 format/ (4 files)
│   │               │   │   │   │   ├── ☕ ExcelFormat.java (566B)
│   │               │   │   │   │   ├── ☕ ExcelFormatExport.java (22.5KB)
│   │               │   │   │   │   ├── ☕ ExcelFormatParam.java (2.1KB)
│   │               │   │   │   │   └── ☕ ExcelHeaderInfo.java (1.4KB)
│   │               │   │   │   ├── ☕ ExcelOutput.java (926B)
│   │               │   │   │   ├── ☕ ExcelParam.java (2.7KB)
│   │               │   │   │   ├── ☕ ExcelSheetParam.java (860B)
│   │               │   │   │   ├── ☕ ExcelUtils.java (868B)
│   │               │   │   │   ├── ☕ Font.java (3.5KB)
│   │               │   │   │   ├── ☕ OpenCrclExcelUtil.java (4.6KB)
│   │               │   │   │   └── ☕ Title.java (531B)
│   │               │   │   ├── 📁 exception/ (6 files)
│   │               │   │   │   ├── ☕ ChargeException.java (973B)
│   │               │   │   │   ├── ☕ CommonException.java (798B)
│   │               │   │   │   ├── ☕ MqConsumerException.java (930B)
│   │               │   │   │   ├── ☕ ParamException.java (736B)
│   │               │   │   │   ├── ☕ ResultException.java (2.2KB)
│   │               │   │   │   └── ☕ SendException.java (810B)
│   │               │   │   ├── 📁 fastjson/ (6 files)
│   │               │   │   │   ├── ☕ FastJsonConfigure.java (3.3KB)
│   │               │   │   │   ├── ☕ FeignDateForGet.java (1.1KB)
│   │               │   │   │   ├── ☕ LocalDateTimeCodec.java (9.6KB)
│   │               │   │   │   ├── ☕ LocalDateTimeFastJsonDeserializer.java (2.3KB)
│   │               │   │   │   ├── ☕ LocalDateTimeFastJsonSerializer.java (1.2KB)
│   │               │   │   │   └── ☕ LocalDateTimeGetConverter.java (969B)
│   │               │   │   ├── 📁 log/ (7 files)
│   │               │   │   │   ├── ☕ AccessLogAspect.java (37B)
│   │               │   │   │   ├── ☕ ControllerAspect.java (37B)
│   │               │   │   │   ├── ☕ FeignAspect.java (37B)
│   │               │   │   │   ├── ☕ FeignsInterceptor.java (1.9KB)
│   │               │   │   │   ├── ☕ MvcLogFilter.java (2.0KB)
│   │               │   │   │   ├── ☕ ServiceAspect.java (37B)
│   │               │   │   │   └── ☕ WebLogFilterConfig.java (36B)
│   │               │   │   ├── 📁 model/ (1 files)
│   │               │   │   │   └── ☕ BaseModel.java (1.7KB)
│   │               │   │   ├── 📁 mqprovide/ (9 files)
│   │               │   │   │   ├── ☕ NoticeNakatengWorkMqFactory.java (2.1KB)
│   │               │   │   │   ├── ☕ TransactionBcpMqFactory.java (2.3KB)
│   │               │   │   │   ├── ☕ TransactionConsLimitMqFactory.java (2.1KB)
│   │               │   │   │   ├── ☕ TransactionCoreMqFactory.java (1.9KB)
│   │               │   │   │   ├── ☕ TransactionITPlatFormFactory.java (1.9KB)
│   │               │   │   │   ├── ☕ TransactionListenerImpl.java (4.4KB)
│   │               │   │   │   ├── ☕ TransactionMqFactory.java (2.0KB)
│   │               │   │   │   ├── ☕ TransactionWorkFlowMqFactory.java (2.1KB)
│   │               │   │   │   └── ☕ TransactionWorkTicketMqFactory.java (2.1KB)
│   │               │   │   ├── 📁 support/ (15 files)
│   │               │   │   │   ├── 📁 choose/ (2 files)
│   │               │   │   │   │   ├── ☕ ContentChooseFactor.java (1.2KB)
│   │               │   │   │   │   └── ☕ TurnChooseFactor.java (1.5KB)
│   │               │   │   │   ├── 📁 config/ (1 files)
│   │               │   │   │   │   └── ☕ InitRunner.java (955B)
│   │               │   │   │   ├── 📁 enums/ (3 files)
│   │               │   │   │   │   ├── ☕ EnableStatusEnum.java (481B)
│   │               │   │   │   │   ├── ☕ ErrorCodeEnum.java (15.8KB)
│   │               │   │   │   │   └── ☕ SeparateStatusEnum.java (497B)
│   │               │   │   │   ├── 📁 feign/ (1 files)
│   │               │   │   │   │   └── ☕ ErrorCenterFeign.java (2.5KB)
│   │               │   │   │   ├── 📁 req/ (1 files)
│   │               │   │   │   │   └── ☕ BindReq.java (544B)
│   │               │   │   │   ├── 📁 resp/ (2 files)
│   │               │   │   │   │   ├── ☕ CodeContentResp.java (3.7KB)
│   │               │   │   │   │   └── ☕ CodeTurnResp.java (2.2KB)
│   │               │   │   │   └── 📁 tool/ (5 files)
│   │               │   │   │       ├── ☕ ErrorTool.java (2.9KB)
│   │               │   │   │       ├── ☕ FeignTool.java (12.4KB)
│   │               │   │   │       ├── ☕ ResponseInfoErrorCodeUtil.java (1.7KB)
│   │               │   │   │       ├── ☕ ResultData.java (1.8KB)
│   │               │   │   │       └── ☕ SpringTool.java (2.4KB)
│   │               │   │   └── 📁 util/ (42 files)
│   │               │   │       ├── ☕ AppPushUtil.java (858B)
│   │               │   │       ├── ☕ DateUtil.java (14.4KB)
│   │               │   │       ├── ☕ DistributedLocker.java (1.0KB)
│   │               │   │       ├── ☕ DownLoadExcelUtil.java (6.0KB)
│   │               │   │       ├── ☕ DynamicsSqlUtils.java (19.2KB)
│   │               │   │       ├── ☕ EnumMark.java (434B)
│   │               │   │       ├── ☕ ExcelReaderWriterUtil.java (5.9KB)
│   │               │   │       ├── ☕ ExeclUtil.java (1.3KB)
│   │               │   │       ├── ☕ FastJsonUtils.java (3.4KB)
│   │               │   │       ├── ☕ FeignRpcResult.java (956B)
│   │               │   │       ├── ☕ FeignRpcResultCheckUtil.java (1.4KB)
│   │               │   │       ├── ☕ FeignRpcResultUtil.java (1.7KB)
│   │               │   │       ├── ☕ FileManagerUtil.java (10.1KB)
│   │               │   │       ├── ☕ GetFileRule.java (38B)
│   │               │   │       ├── ☕ HttpOpenfire.java (1.2KB)
│   │               │   │       ├── ☕ HttpPostUtil.java (3.8KB)
│   │               │   │       ├── ☕ HttpPushUtil.java (3.0KB)
│   │               │   │       ├── ☕ IdWorker.java (7.1KB)
│   │               │   │       ├── ☕ JdbcSqlUtil.java (1.6KB)
│   │               │   │       ├── ☕ LocalDateTimeUtil.java (3.6KB)
│   │               │   │       ├── ☕ MapUtil.java (1.6KB)
│   │               │   │       ├── ☕ MonitorUtil.java (2.2KB)
│   │               │   │       ├── ☕ MultipartFileUtils.java (3.7KB)
│   │               │   │       ├── ☕ MyListUtils.java (1.0KB)
│   │               │   │       ├── ☕ NumberToCn.java (2.7KB)
│   │               │   │       ├── ☕ NumberUppercaseUtil.java (3.2KB)
│   │               │   │       ├── ☕ RedissonDistributedLocker.java (2.6KB)
│   │               │   │       ├── ☕ RedisTemplateUtil.java (5.2KB)
│   │               │   │       ├── ☕ ResponseInfoUtil.java (1.2KB)
│   │               │   │       ├── ☕ ResultData.java (2.4KB)
│   │               │   │       ├── ☕ ResultResponseUtil.java (1.5KB)
│   │               │   │       ├── ☕ ResultUtils.java (624B)
│   │               │   │       ├── ☕ RootUtil.java (516B)
│   │               │   │       ├── ☕ RuleExeUtil.java (2.6KB)
│   │               │   │       ├── ☕ SerialNoGeneraterUtils.java (1.8KB)
│   │               │   │       ├── ☕ SerialNoUtil.java (6.1KB)
│   │               │   │       ├── ☕ SpringBeanUtil.java (461B)
│   │               │   │       ├── ☕ SpringContextUtil.java (934B)
│   │               │   │       ├── ☕ SpringUtil.java (1.2KB)
│   │               │   │       ├── ☕ TraceIdUtil.java (1.7KB)
│   │               │   │       ├── ☕ UpdateUtil.java (2.9KB)
│   │               │   │       └── ☕ ValidatorUtils.java (3.5KB)
│   │               │   ├── 📁 domain/ (303 files)
│   │               │   │   ├── 📁 crcl/ (295 files)
│   │               │   │   │   ├── 📁 entity/ (42 files)
│   │               │   │   │   │   ├── ☕ CfcaSvsHis.java (2.6KB)
│   │               │   │   │   │   ├── ☕ CompanyData.java (2.6KB)
│   │               │   │   │   │   ├── ☕ CrclBatchCorrelation.java (2.4KB)
│   │               │   │   │   │   ├── ☕ CrclDistribFlag.java (2.5KB)
│   │               │   │   │   │   ├── ☕ CrclFixedFlowpath.java (2.9KB)
│   │               │   │   │   │   ├── ☕ CrclOpenbatch.java (5.1KB)
│   │               │   │   │   │   ├── ☕ CrclReserveTask.java (1.8KB)
│   │               │   │   │   │   ├── ☕ OpenAccountApply.java (2.7KB)
│   │               │   │   │   │   ├── ☕ OpenApply.java (13.5KB)
│   │               │   │   │   │   ├── ☕ OpenApplyStatus.java (4.2KB)
│   │               │   │   │   │   ├── ☕ OpenBatchSend.java (3.2KB)
│   │               │   │   │   │   ├── ☕ OpenChildNo.java (1.7KB)
│   │               │   │   │   │   ├── ☕ OpenCompanyLog.java (1.5KB)
│   │               │   │   │   │   ├── ☕ OpenConfig.java (4.0KB)
│   │               │   │   │   │   ├── ☕ OpenCrclCheck.java (2.7KB)
│   │               │   │   │   │   ├── ☕ OpenCrclRel.java (3.6KB)
│   │               │   │   │   │   ├── ☕ OpenError.java (3.3KB)
│   │               │   │   │   │   ├── ☕ OpenErrorLog.java (4.8KB)
│   │               │   │   │   │   ├── ☕ OpenFail.java (2.7KB)
│   │               │   │   │   │   ├── ☕ OpenFile.java (4.0KB)
│   │               │   │   │   │   ├── ☕ OpenIdempotent.java (3.6KB)
│   │               │   │   │   │   ├── ☕ OpenMain.java (10.5KB)
│   │               │   │   │   │   ├── ☕ OpenMainNo.java (2.0KB)
│   │               │   │   │   │   ├── ☕ OpenMqTransaction.java (1.1KB)
│   │               │   │   │   │   ├── ☕ OpenNo.java (1.6KB)
│   │               │   │   │   │   ├── ☕ OpenNoRecord.java (1.9KB)
│   │               │   │   │   │   ├── ☕ OpenOperateLog.java (3.3KB)
│   │               │   │   │   │   ├── ☕ OpenOperatePoint.java (2.0KB)
│   │               │   │   │   │   ├── ☕ OpenOperbatch.java (1.7KB)
│   │               │   │   │   │   ├── ☕ OpenSend.java (5.2KB)
│   │               │   │   │   │   ├── ☕ OpenSendHistory.java (4.6KB)
│   │               │   │   │   │   ├── ☕ OpenSendLog.java (3.8KB)
│   │               │   │   │   │   ├── ☕ OpenSeqence.java (999B)
│   │               │   │   │   │   ├── ☕ OpenWarning.java (3.6KB)
│   │               │   │   │   │   ├── ☕ OpenWarningLog.java (3.0KB)
│   │               │   │   │   │   ├── ☕ OpenWorkFlowNotice.java (2.8KB)
│   │               │   │   │   │   ├── ☕ ReceiveConf.java (3.2KB)
│   │               │   │   │   │   ├── ☕ ReceiveConfLog.java (2.9KB)
│   │               │   │   │   │   ├── ☕ ReceiveConfRecord.java (4.0KB)
│   │               │   │   │   │   ├── ☕ SysLog.java (2.5KB)
│   │               │   │   │   │   ├── ☕ UkeyRodePolicy.java (2.2KB)
│   │               │   │   │   │   └── ☕ WorkTicketMsgLog.java (3.2KB)
│   │               │   │   │   ├── 📁 liabilitypool/ (4 files)
│   │               │   │   │   │   ├── 📁 entity/ (1 files)
│   │               │   │   │   │   ├── 📁 mapper/ (1 files)
│   │               │   │   │   │   └── 📁 service/ (2 files)
│   │               │   │   │   ├── 📁 mapper/ (47 files)
│   │               │   │   │   │   ├── 📁 dataup/ (2 files)
│   │               │   │   │   │   ├── ☕ CfcaSvsHisMapper.java (1.6KB)
│   │               │   │   │   │   ├── ☕ CompanyDataMapper.java (1.1KB)
│   │               │   │   │   │   ├── ☕ CrclBatchCorrelationMapper.java (2.1KB)
│   │               │   │   │   │   ├── ☕ CrclDistribFlagMapper.java (2.0KB)
│   │               │   │   │   │   ├── ☕ CrclFixedFlowpathMapper.java (1.7KB)
│   │               │   │   │   │   ├── ☕ CrclFlagShipMapper.java (1.2KB)
│   │               │   │   │   │   ├── ☕ CrclManagerMapper.java (309B)
│   │               │   │   │   │   ├── ☕ CrclOpenbatchMapper.java (3.6KB)
│   │               │   │   │   │   ├── ☕ CrclReserveTaskMapper.java (818B)
│   │               │   │   │   │   ├── ☕ CrclSearchMapper.java (506B)
│   │               │   │   │   │   ├── ☕ CrclSessionMapper.java (1.1KB)
│   │               │   │   │   │   ├── ☕ OpenAccountApplyMapper.java (2.2KB)
│   │               │   │   │   │   ├── ☕ OpenApplyMapper.java (15.0KB)
│   │               │   │   │   │   ├── ☕ OpenApplyStatusMapper.java (1.0KB)
│   │               │   │   │   │   ├── ☕ OpenBatchSendMapper.java (771B)
│   │               │   │   │   │   ├── ☕ OpenChildNoMapper.java (1.1KB)
│   │               │   │   │   │   ├── ☕ OpenCompanyLogMapper.java (791B)
│   │               │   │   │   │   ├── ☕ OpenConfigMapper.java (876B)
│   │               │   │   │   │   ├── ☕ OpenCrclCheckMapper.java (951B)
│   │               │   │   │   │   ├── ☕ OpenCrclRelMapper.java (2.8KB)
│   │               │   │   │   │   ├── ☕ OpenErrorLogMapper.java (1.7KB)
│   │               │   │   │   │   ├── ☕ OpenErrorMapper.java (2.7KB)
│   │               │   │   │   │   ├── ☕ OpenFailMapper.java (1.0KB)
│   │               │   │   │   │   ├── ☕ OpenFileMapper.java (4.9KB)
│   │               │   │   │   │   ├── ☕ OpenIdempotentMapper.java (2.1KB)
│   │               │   │   │   │   ├── ☕ OpenMainMapper.java (21.5KB)
│   │               │   │   │   │   ├── ☕ OpenMainNoMapper.java (1.7KB)
│   │               │   │   │   │   ├── ☕ OpenMqTransactionMapper.java (874B)
│   │               │   │   │   │   ├── ☕ OpenNoRecordMapper.java (862B)
│   │               │   │   │   │   ├── ☕ OpenOperateLogMapper.java (725B)
│   │               │   │   │   │   ├── ☕ OpenOperatePointMapper.java (1.3KB)
│   │               │   │   │   │   ├── ☕ OpenOperbatchMapper.java (1.6KB)
│   │               │   │   │   │   ├── ☕ OpenSendHistoryMapper.java (905B)
│   │               │   │   │   │   ├── ☕ OpenSendLogMapper.java (1.6KB)
│   │               │   │   │   │   ├── ☕ OpenSendMapper.java (4.5KB)
│   │               │   │   │   │   ├── ☕ OpenSeqenceMapper.java (1.1KB)
│   │               │   │   │   │   ├── ☕ OpenWarningLogMapper.java (1.1KB)
│   │               │   │   │   │   ├── ☕ OpenWarningMapper.java (1.9KB)
│   │               │   │   │   │   ├── ☕ OpenWorkFlowNoticeMapper.java (1.1KB)
│   │               │   │   │   │   ├── ☕ ReceiveConfLogMapper.java (1.5KB)
│   │               │   │   │   │   ├── ☕ ReceiveConfMapper.java (1.7KB)
│   │               │   │   │   │   ├── ☕ ReceiveConfRecordMapper.java (2.3KB)
│   │               │   │   │   │   ├── ☕ SysLogMapper.java (1.1KB)
│   │               │   │   │   │   ├── ☕ UkeyRodePolicyMapper.java (1.1KB)
│   │               │   │   │   │   └── ☕ WorkTicketMsgLogMapper.java (981B)
│   │               │   │   │   ├── 📁 mongodb/ (4 files)
│   │               │   │   │   │   ├── 📁 mapper/ (2 files)
│   │               │   │   │   │   ├── ☕ OpenSendErrorLogDomain.java (1.4KB)
│   │               │   │   │   │   └── ☕ OpenSendLogDomain.java (819B)
│   │               │   │   │   ├── 📁 po/ (56 files)
│   │               │   │   │   │   ├── ☕ AliasNameByCoreIdPo.java (933B)
│   │               │   │   │   │   ├── ☕ AlreadyCrclNoUnitCheckNamePo.java (42B)
│   │               │   │   │   │   ├── ☕ AlreadyCrclNoUnitPo.java (4.0KB)
│   │               │   │   │   │   ├── ☕ AlreadyCrclUnitCheckNamePo.java (42B)
│   │               │   │   │   │   ├── ☕ AlreadyCrclUnitPo.java (42B)
│   │               │   │   │   │   ├── ☕ AlreadyOpenCrclPo.java (7.4KB)
│   │               │   │   │   │   ├── ☕ AppApplyMainPo.java (8.9KB)
│   │               │   │   │   │   ├── ☕ ApplyAndOpenMainPo.java (1.2KB)
│   │               │   │   │   │   ├── ☕ ApplyMainLimitPo.java (10.9KB)
│   │               │   │   │   │   ├── ☕ ApplyMainLimitSimplePo.java (729B)
│   │               │   │   │   │   ├── ☕ AvgDeadlineByHoldIdPo.java (730B)
│   │               │   │   │   │   ├── ☕ BatchAuditDetailPo.java (2.5KB)
│   │               │   │   │   │   ├── ☕ BatchAuditPo.java (3.9KB)
│   │               │   │   │   │   ├── ☕ CrclListPo.java (8.5KB)
│   │               │   │   │   │   ├── ☕ FileDetailPo.java (189B)
│   │               │   │   │   │   ├── ☕ HoldsByAbsLimitSoucePo.java (993B)
│   │               │   │   │   │   ├── ☕ LastEditDetailPo.java (890B)
│   │               │   │   │   │   ├── ☕ LimitIncentivePo.java (770B)
│   │               │   │   │   │   ├── ☕ MainFlowCompanyPo.java (4.4KB)
│   │               │   │   │   │   ├── ☕ MainLimitPo.java (3.1KB)
│   │               │   │   │   │   ├── ☕ ManagerGetReceOperListPo.java (2.4KB)
│   │               │   │   │   │   ├── ☕ MonthsOpenCrclPo.java (1.0KB)
│   │               │   │   │   │   ├── ☕ OpenAccountApplyPo.java (1.6KB)
│   │               │   │   │   │   ├── ☕ OpenApplyNoPo.java (1.1KB)
│   │               │   │   │   │   ├── ☕ OpenBatchCrclApplyPo.java (2.8KB)
│   │               │   │   │   │   ├── ☕ OpenBatchPo.java (4.2KB)
│   │               │   │   │   │   ├── ☕ OpenCrclAndLimitInfoPo.java (3.5KB)
│   │               │   │   │   │   ├── ☕ OpenCrclBusinessPo.java (3.9KB)
│   │               │   │   │   │   ├── ☕ OpenCrclRelByCrclNoPo.java (887B)
│   │               │   │   │   │   ├── ☕ OpenErrorLogPo.java (3.7KB)
│   │               │   │   │   │   ├── ☕ OpenFileNoPo.java (976B)
│   │               │   │   │   │   ├── ☕ OpenInfoPo.java (8.7KB)
│   │               │   │   │   │   ├── ☕ OpeningCrclPo.java (4.4KB)
│   │               │   │   │   │   ├── ☕ OpenLimitPo.java (4.3KB)
│   │               │   │   │   │   ├── ☕ OpenMainCrclLimitPo.java (1.6KB)
│   │               │   │   │   │   ├── ☕ OpenMainDistribTypePo.java (858B)
│   │               │   │   │   │   ├── ☕ OpenMainLimitPo.java (9.5KB)
│   │               │   │   │   │   ├── ☕ OpenMainPo.java (2.8KB)
│   │               │   │   │   │   ├── ☕ OpenMainSourceIdPo.java (897B)
│   │               │   │   │   │   ├── ☕ OpenNumLimitIdPo.java (820B)
│   │               │   │   │   │   ├── ☕ OpenSendErrorExportPo.java (3.2KB)
│   │               │   │   │   │   ├── ☕ OpenSendErrorPo.java (3.9KB)
│   │               │   │   │   │   ├── ☕ OpenSendInfoPo.java (548B)
│   │               │   │   │   │   ├── ☕ OpenSendPo.java (5.0KB)
│   │               │   │   │   │   ├── ☕ OpenSendWarningExportPo.java (2.9KB)
│   │               │   │   │   │   ├── ☕ OpenTradeBgPo.java (2.2KB)
│   │               │   │   │   │   ├── ☕ OpenWarningPo.java (4.0KB)
│   │               │   │   │   │   ├── ☕ PerformanceStatisticsTotalPo.java (1.4KB)
│   │               │   │   │   │   ├── ☕ QueryOpenedCrclPrefromancePo.java (1.2KB)
│   │               │   │   │   │   ├── ☕ QueryOpenedCrclTotalAmtPo.java (918B)
│   │               │   │   │   │   ├── ☕ ReceiveConfRecordPo.java (942B)
│   │               │   │   │   │   ├── ☕ RepaymentCheckingPo.java (767B)
│   │               │   │   │   │   ├── ☕ TradeBgAuditManagerPo.java (6.0KB)
│   │               │   │   │   │   ├── ☕ TradeBgManagerPo.java (7.2KB)
│   │               │   │   │   │   ├── ☕ UnitPositionPo.java (1.1KB)
│   │               │   │   │   │   └── ☕ WorkTicketMsgLogPo.java (1.5KB)
│   │               │   │   │   ├── 📁 service/ (90 files)
│   │               │   │   │   │   ├── 📁 impl/ (45 files)
│   │               │   │   │   │   ├── ☕ AppOpenCrclService.java (2.1KB)
│   │               │   │   │   │   ├── ☕ BatchSendService.java (213B)
│   │               │   │   │   │   ├── ☕ CfcaSvsHisService.java (1.1KB)
│   │               │   │   │   │   ├── ☕ CompanyDataService.java (749B)
│   │               │   │   │   │   ├── ☕ CrclBatchCorrelationService.java (1006B)
│   │               │   │   │   │   ├── ☕ CrclDistribFlagService.java (1009B)
│   │               │   │   │   │   ├── ☕ CrclFixedFlowpathService.java (1.3KB)
│   │               │   │   │   │   ├── ☕ CrclManagerService.java (195B)
│   │               │   │   │   │   ├── ☕ CrclOpenbatchService.java (2.7KB)
│   │               │   │   │   │   ├── ☕ CrclOpenBcpService.java (490B)
│   │               │   │   │   │   ├── ☕ CrclReserveTaskService.java (724B)
│   │               │   │   │   │   ├── ☕ CrclSearchService.java (1.2KB)
│   │               │   │   │   │   ├── ☕ CrclSessionService.java (993B)
│   │               │   │   │   │   ├── ☕ OpenAccountApplyService.java (1.0KB)
│   │               │   │   │   │   ├── ☕ OpenApplyService.java (11.1KB)
│   │               │   │   │   │   ├── ☕ OpenApplyStatusService.java (894B)
│   │               │   │   │   │   ├── ☕ OpenChildNoService.java (555B)
│   │               │   │   │   │   ├── ☕ OpenConfigService.java (2.0KB)
│   │               │   │   │   │   ├── ☕ OpenCrclCheckService.java (845B)
│   │               │   │   │   │   ├── ☕ OpenCrclRelService.java (2.7KB)
│   │               │   │   │   │   ├── ☕ OpenCrclService.java (8.4KB)
│   │               │   │   │   │   ├── ☕ OpenErrorLogService.java (1.7KB)
│   │               │   │   │   │   ├── ☕ OpenErrorService.java (2.0KB)
│   │               │   │   │   │   ├── ☕ OpenFailService.java (932B)
│   │               │   │   │   │   ├── ☕ OpenFileService.java (4.7KB)
│   │               │   │   │   │   ├── ☕ OpenIdempotentService.java (1.9KB)
│   │               │   │   │   │   ├── ☕ OpenJobService.java (552B)
│   │               │   │   │   │   ├── ☕ OpenMainNoService.java (743B)
│   │               │   │   │   │   ├── ☕ OpenMainService.java (15.3KB)
│   │               │   │   │   │   ├── ☕ OpenNoRecordService.java (289B)
│   │               │   │   │   │   ├── ☕ OpenOperateLogService.java (506B)
│   │               │   │   │   │   ├── ☕ OpenOperatePointService.java (1.2KB)
│   │               │   │   │   │   ├── ☕ OpenSendHistoryService.java (158B)
│   │               │   │   │   │   ├── ☕ OpenSendLogService.java (651B)
│   │               │   │   │   │   ├── ☕ OpenSendService.java (6.4KB)
│   │               │   │   │   │   ├── ☕ OpenSeqenceService.java (638B)
│   │               │   │   │   │   ├── ☕ OpenWarningLogService.java (685B)
│   │               │   │   │   │   ├── ☕ OpenWarningService.java (2.6KB)
│   │               │   │   │   │   ├── ☕ OpenWorkFlowNoticeService.java (658B)
│   │               │   │   │   │   ├── ☕ ReceiveConfLogService.java (1.4KB)
│   │               │   │   │   │   ├── ☕ ReceiveConfRecordService.java (2.1KB)
│   │               │   │   │   │   ├── ☕ ReceiveConfService.java (1.6KB)
│   │               │   │   │   │   ├── ☕ SysLogService.java (673B)
│   │               │   │   │   │   ├── ☕ UkeyRodePolicyService.java (620B)
│   │               │   │   │   │   └── ☕ WorkTicketMsgLogService.java (499B)
│   │               │   │   │   └── 📁 tradebg/ (52 files)
│   │               │   │   │       ├── 📁 dto/ (5 files)
│   │               │   │   │       ├── 📁 entity/ (13 files)
│   │               │   │   │       ├── 📁 mapper/ (9 files)
│   │               │   │   │       ├── 📁 po/ (13 files)
│   │               │   │   │       └── 📁 service/ (12 files)
│   │               │   │   └── 📁 ls/ (8 files)
│   │               │   │       ├── 📁 entity/ (1 files)
│   │               │   │       │   └── ☕ package-info.java (44B)
│   │               │   │       ├── 📁 mapper/ (1 files)
│   │               │   │       │   └── ☕ LsOpenMapper.java (2.6KB)
│   │               │   │       ├── 📁 po/ (4 files)
│   │               │   │       │   ├── ☕ GetLsOpenListByCustIdAndAcctIdPo.java (3.9KB)
│   │               │   │       │   ├── ☕ GetLsOpenMainByLsIdPo.java (6.0KB)
│   │               │   │       │   ├── ☕ LsLimitDistribTypePo.java (1.1KB)
│   │               │   │       │   └── ☕ package-info.java (40B)
│   │               │   │       └── 📁 service/ (2 files)
│   │               │   │           ├── 📁 impl/ (1 files)
│   │               │   │           └── ☕ LsOpenService.java (3.2KB)
│   │               │   └── 📁 interfaces/ (282 files)
│   │               │       └── 📁 facade/ (282 files)
│   │               │           ├── 📁 config/ (5 files)
│   │               │           │   ├── 📁 req/ (2 files)
│   │               │           │   ├── 📁 resp/ (1 files)
│   │               │           │   ├── ☕ OpenConfigController.java (2.7KB)
│   │               │           │   └── ☕ OpenConfigManagerController.java (3.9KB)
│   │               │           ├── 📁 crcl/ (266 files)
│   │               │           │   ├── 📁 freeze/ (18 files)
│   │               │           │   ├── 📁 liabilitypool/ (8 files)
│   │               │           │   ├── 📁 req/ (115 files)
│   │               │           │   ├── 📁 resp/ (61 files)
│   │               │           │   ├── 📁 statistics/ (1 files)
│   │               │           │   ├── 📁 tradebg/ (44 files)
│   │               │           │   ├── ☕ AppController.java (22.5KB)
│   │               │           │   ├── ☕ AuditCrclController.java (31.8KB)
│   │               │           │   ├── ☕ BaseOpenController.java (21.5KB)
│   │               │           │   ├── ☕ BatchTempDataController.java (2.2KB)
│   │               │           │   ├── ☕ CompanyDataController.java (1.3KB)
│   │               │           │   ├── ☕ CompanyOpenCrclController.java (4.0KB)
│   │               │           │   ├── ☕ CrclController.java (73.4KB)
│   │               │           │   ├── ☕ CrclFlagShipController.java (3.8KB)
│   │               │           │   ├── ☕ CrclManagerController.java (7.2KB)
│   │               │           │   ├── ☕ CrclSessionController.java (3.4KB)
│   │               │           │   ├── ☕ CreatePdfController.java (1.7KB)
│   │               │           │   ├── ☕ CsCrclController.java (2.4KB)
│   │               │           │   ├── ☕ HandleCrclController.java (55.6KB)
│   │               │           │   ├── ☕ OpenMainController.java (8.7KB)
│   │               │           │   ├── ☕ OpenSendController.java (9.2KB)
│   │               │           │   ├── ☕ ReceiveConfigController.java (12.3KB)
│   │               │           │   ├── ☕ TestContorller.java (4.5KB)
│   │               │           │   ├── ☕ ValidateController.java (9.4KB)
│   │               │           │   └── ☕ WorkTicketController.java (1.7KB)
│   │               │           ├── 📁 gateway/ (4 files)
│   │               │           │   └── 📁 vo/ (4 files)
│   │               │           ├── 📁 ls/ (6 files)
│   │               │           │   ├── 📁 req/ (4 files)
│   │               │           │   ├── 📁 resp/ (1 files)
│   │               │           │   └── ☕ LsOpenController.java (13.1KB)
│   │               │           └── ☕ PrometheusController.java (45B)
│   │               └── ☕ StartApplication.java (754B)
│   └── 📁 resources/ (111 files)
│       ├── 📁 mapper/ (109 files)
│       │   ├── 📁 crcl/ (53 files)
│       │   │   ├── 📁 liabilitypool/ (1 files)
│       │   │   │   └── 📋 LiabilityPoolIdempotentMapper.xml (5.0KB)
│       │   │   ├── 📁 trade/ (9 files)
│       │   │   │   ├── 📋 BillTallySendLogMapper.xml (7.5KB)
│       │   │   │   ├── 📋 OpenTradeBgMapper.xml (7.8KB)
│       │   │   │   ├── 📋 TradeBgAuditMapper.xml (6.8KB)
│       │   │   │   ├── 📋 TradeBgCheckResultMapper.xml (5.5KB)
│       │   │   │   ├── 📋 TradeBgContractLogMapper.xml (8.4KB)
│       │   │   │   ├── 📋 TradeBgContractMapper.xml (21.5KB)
│       │   │   │   ├── 📋 TradeBgInvoiceLogMapper.xml (8.6KB)
│       │   │   │   ├── 📋 TradeBgInvoiceMapper.xml (23.4KB)
│       │   │   │   └── 📋 TradeBgSwitchInfoMapper.xml (19.9KB)
│       │   │   ├── 📋 CfcaSvsHisMapper.xml (7.7KB)
│       │   │   ├── 📋 CompanyDataMapper.xml (4.4KB)
│       │   │   ├── 📋 CrclBatchCorrelationMapper.xml (6.7KB)
│       │   │   ├── 📋 CrclDistribFlagMapper.xml (6.3KB)
│       │   │   ├── 📋 CrclFixedFlowpathMapper.xml (8.1KB)
│       │   │   ├── 📋 CrclFlagShipMapper.xml (3.3KB)
│       │   │   ├── 📋 CrclManagerMapper.xml (716B)
│       │   │   ├── 📋 CrclOpenbatchMapper.xml (17.1KB)
│       │   │   ├── 📋 CrclReserveTaskMapper.xml (2.0KB)
│       │   │   ├── 📋 CrclSearchMapper.xml (1.1KB)
│       │   │   ├── 📋 OpenAccountApplyMapper.xml (8.2KB)
│       │   │   ├── 📋 OpenApplyMapper.xml (204.9KB)
│       │   │   ├── 📋 OpenApplyStatusMapper.xml (8.5KB)
│       │   │   ├── 📋 OpenBatchSendMapper.xml (9.1KB)
│       │   │   ├── 📋 OpenChildNoMapper.xml (2.4KB)
│       │   │   ├── 📋 OpenConfigMapper.xml (8.1KB)
│       │   │   ├── 📋 OpenCrclCheckMapper.xml (2.8KB)
│       │   │   ├── 📋 OpenCrclRelMapper.xml (10.3KB)
│       │   │   ├── 📋 OpenErrorLogMapper.xml (11.5KB)
│       │   │   ├── 📋 OpenErrorMapper.xml (16.5KB)
│       │   │   ├── 📋 OpenFailMapper.xml (6.2KB)
│       │   │   ├── 📋 OpenFileMapper.xml (16.2KB)
│       │   │   ├── 📋 OpenIdempotentMapper.xml (8.7KB)
│       │   │   ├── 📋 OpenMainMapper.xml (133.3KB)
│       │   │   ├── 📋 OpenMainNoMapper.xml (3.0KB)
│       │   │   ├── 📋 OpenMqTransactionMapper.xml (2.8KB)
│       │   │   ├── 📋 OpenNoRecordMapper.xml (3.1KB)
│       │   │   ├── 📋 OpenOperateLogMapper.xml (4.8KB)
│       │   │   ├── 📋 OpenOperatePointMapper.xml (4.7KB)
│       │   │   ├── 📋 OpenOperbatchMapper.xml (4.4KB)
│       │   │   ├── 📋 OpenSendHistoryMapper.xml (10.1KB)
│       │   │   ├── 📋 OpenSendLogMapper.xml (7.2KB)
│       │   │   ├── 📋 OpenSendMapper.xml (20.5KB)
│       │   │   ├── 📋 OpenSeqenceMapper.xml (2.9KB)
│       │   │   ├── 📋 OpenWarningLogMapper.xml (6.2KB)
│       │   │   ├── 📋 OpenWarningMapper.xml (10.3KB)
│       │   │   ├── 📋 OpenWorkFlowNoticeMapper.xml (8.2KB)
│       │   │   ├── 📋 ReceiveConfLogMapper.xml (8.3KB)
│       │   │   ├── 📋 ReceiveConfMapper.xml (7.0KB)
│       │   │   ├── 📋 ReceiveConfRecordMapper.xml (11.1KB)
│       │   │   ├── 📋 SysLogMapper.xml (4.8KB)
│       │   │   ├── 📋 UkeyRodePolicyMapper.xml (5.2KB)
│       │   │   └── 📋 WorkTicketMsgLogMapper.xml (3.6KB)
│       │   ├── 📁 credit/ (10 files)
│       │   │   ├── 📋 CreditBillDetailsMapper.xml (6.9KB)
│       │   │   ├── 📋 CreditBillMainMapper.xml (8.2KB)
│       │   │   ├── 📋 CreditFileMapper.xml (7.2KB)
│       │   │   ├── 📋 CreditIdempotentMapper.xml (4.2KB)
│       │   │   ├── 📋 CreditInfoHistoryMapper.xml (19.5KB)
│       │   │   ├── 📋 CreditInfoMapper.xml (11.2KB)
│       │   │   ├── 📋 CreditMainHistoryMapper.xml (29.6KB)
│       │   │   ├── 📋 CreditMainMapper.xml (26.1KB)
│       │   │   ├── 📋 CreditSourceHistoryMapper.xml (13.2KB)
│       │   │   └── 📋 CreditSourceMapper.xml (9.2KB)
│       │   ├── 📁 dataup/ (1 files)
│       │   │   └── 📋 DataUpWorkFlowMapper.xml (597B)
│       │   ├── 📁 limit/ (42 files)
│       │   │   ├── 📁 tradebgplan/ (5 files)
│       │   │   │   ├── 📋 TradeBgBaseFieldDetailMapper.xml (5.2KB)
│       │   │   │   ├── 📋 TradeBgBaseFieldMapper.xml (11.2KB)
│       │   │   │   ├── 📋 TradeBgBaseListMapper.xml (5.2KB)
│       │   │   │   ├── 📋 TradeBgPlanConfigMapper.xml (5.5KB)
│       │   │   │   └── 📋 TradeBgPlanMapper.xml (13.3KB)
│       │   │   ├── 📋 BcpLimitSynMapper.xml (9.2KB)
│       │   │   ├── 📋 CodeRuleMapper.xml (1.8KB)
│       │   │   ├── 📋 CrclCompanyMapper.xml (6.6KB)
│       │   │   ├── 📋 CrclConstituteMainMapper.xml (17.9KB)
│       │   │   ├── 📋 CrclConstituteMapper.xml (12.6KB)
│       │   │   ├── 📋 crclCredisExpireMapper.xml (10.2KB)
│       │   │   ├── 📋 CrclLimitCheckMapper.xml (2.6KB)
│       │   │   ├── 📋 CrclLimitFileMapper.xml (9.6KB)
│       │   │   ├── 📋 crclLimitInfoMapper.xml (11.5KB)
│       │   │   ├── 📋 CrclLimitInvestorAuthMapper.xml (9.4KB)
│       │   │   ├── 📋 crclLimitMainInfoMapper.xml (11.3KB)
│       │   │   ├── 📋 CrclLimitMainMapper.xml (58.3KB)
│       │   │   ├── 📋 CrclLimitMapper.xml (88.4KB)
│       │   │   ├── 📋 crclLimitReceivehisInfoMapper.xml (11.6KB)
│       │   │   ├── 📋 CrclLimitReceivehisMapper.xml (18.3KB)
│       │   │   ├── 📋 CrclLimitRecoverMapper.xml (6.4KB)
│       │   │   ├── 📋 CrclLimitScheduleMapper.xml (8.7KB)
│       │   │   ├── 📋 crclLimitSharehisInfoMapper.xml (17.9KB)
│       │   │   ├── 📋 CrclLimitSharehisMapper.xml (35.2KB)
│       │   │   ├── 📋 CrclPerformancePlanInfoMapper.xml (23.0KB)
│       │   │   ├── 📋 CrclPerformancePlanMapper.xml (6.8KB)
│       │   │   ├── 📋 CrclZyApprovalOrderMapper.xml (8.4KB)
│       │   │   ├── 📋 CreaditArchiveAllotDetailMapper.xml (8.1KB)
│       │   │   ├── 📋 CreaditArchiveMainMapper.xml (10.1KB)
│       │   │   ├── 📋 CreaditArchiveRecordMapper.xml (9.0KB)
│       │   │   ├── 📋 LimitChangeLogMapper.xml (16.2KB)
│       │   │   ├── 📋 LimitConstituteAllotHisMapper.xml (15.9KB)
│       │   │   ├── 📋 LimitConstituteAllotMainMapper.xml (10.5KB)
│       │   │   ├── 📋 LsLimitCleaningAccountHisMapper.xml (6.2KB)
│       │   │   ├── 📋 LsLimitCleaningAccountMapper.xml (3.1KB)
│       │   │   ├── 📋 LsLimitMapper.xml (13.5KB)
│       │   │   ├── 📋 OpenCompanyLogMapper.xml (2.0KB)
│       │   │   ├── 📋 OpenLimitBillDetailMapper.xml (11.3KB)
│       │   │   ├── 📋 OpenLimitRelMapper.xml (27.4KB)
│       │   │   ├── 📋 OpenServiceWarningMapper.xml (3.5KB)
│       │   │   ├── 📋 OpenUnitLimitMapper.xml (12.0KB)
│       │   │   └── 📋 ParamCrclLimitMapper.xml (7.9KB)
│       │   ├── 📁 ls/ (1 files)
│       │   │   └── 📋 LsOpenMapper.xml (9.6KB)
│       │   ├── 📁 session/ (1 files)
│       │   │   └── 📋 CrclSessionMapper.xml (7.2KB)
│       │   └── 📋 UnitLimitByCompanyIdMapper.xml (3.7KB)
│       ├── 📁 req/ (1 files)
│       │   └── 📄 Batchreq.json (2.8KB)
│       └── 📁 template/ (1 files)
│           └── 📁 openCrclBatchMessage/ (1 files)
│               └── 📄 openCrclBatchMessage.xls (17.5KB)
└── 📁 test/ (22 files)
    └── 📁 java/ (22 files)
        └── 📁 com/ (22 files)
            └── 📁 yljr/ (22 files)
                ├── 📁 crcl/ (13 files)
                │   ├── 📁 crcl/ (4 files)
                │   │   ├── ☕ AuditCrclControllerTest.java (4.9KB)
                │   │   ├── ☕ CrclControllerTest.java (4.0KB)
                │   │   ├── ☕ crclTest.java (4.0KB)
                │   │   └── ☕ HandleCrclControllerTest.java (6.2KB)
                │   ├── 📁 cyz/ (1 files)
                │   │   └── ☕ BaseTest.java (19.2KB)
                │   ├── 📁 del/ (2 files)
                │   │   └── 📁 service/ (2 files)
                │   │       ├── 📁 apply/ (1 files)
                │   │       │   └── 📁 impl/ (1 files)
                │   │       │       └── ☕ CrclPayApplyFeignServiceImplTest.java (1.9KB)
                │   │       └── 📁 crcl/ (1 files)
                │   │           └── ☕ CrclQueryServiceTest.java (2.4KB)
                │   └── 📁 open/ (6 files)
                │       ├── 📁 application/ (3 files)
                │       │   └── 📁 crcl/ (3 files)
                │       │       └── 📁 service/ (3 files)
                │       │           ├── ☕ CrclApplicationTest.java (687B)
                │       │           ├── ☕ HandleCrclApplicationTest.java (2.3KB)
                │       │           └── ☕ OpenSearchApplicationTest.java (1.0KB)
                │       ├── ☕ BaseTest.java (6.9KB)
                │       ├── ☕ OpenTest.java (12.4KB)
                │       └── ☕ ReceiveConfigTest.java (8.0KB)
                └── 📁 limit/ (9 files)
                    ├── ☕ BatchTest.java (6.2KB)
                    ├── ☕ ChargeFeignApiTest.java (680B)
                    ├── ☕ CrclLimitInterfaceTest.java (14.0KB)
                    ├── ☕ CrclLimitMainInterfaceTest.java (13.0KB)
                    ├── ☕ CrclLimitPerformanceInterfaceTest.java (6.7KB)
                    ├── ☕ HandlerTest.java (4.1KB)
                    ├── ☕ OpenLimitModifyTest.java (2.9KB)
                    ├── ☕ OpenLimitRelInterfaceTest.java (2.8KB)
                    └── ☕ ParamCrclLimitInterfaceTest.java (4.7KB)
📋 pom.xml (8.3KB)
📜 shutdown.sh (44B)
📜 startup.sh (379B)

## DDD架构分层要求
当前后端采用DDD（领域驱动设计）架构，请严格遵循以下分层结构：

1. **Controller层** (interfaces/): 对外REST接口，负责接收HTTP请求和参数校验
2. **Application Service层** (application/service): 应用服务，协调业务流程，不包含业务逻辑
3. **Domain Service层** (domain/service): 领域服务，核心业务逻辑的实现
4. **Domain Mapper层** (domain/mapper): 数据访问层接口，定义数据库操作方法
5. **Feign Client层** (application/feign): 外部服务调用接口，处理微服务间通信
6. **DTO层** (interfaces/dto): 数据传输对象，用于接口入参和出参
7. **Entity层** (domain/entity): 领域实体，表示业务核心概念
8. **XML映射** (resources/mapper): MyBatis SQL映射，具体的SQL实现



## 决策原则
请根据DDD架构原则和业务需求，决定如何实现新的API接口功能：

### Controller层决策原则
1. 如果存在功能相关的Controller且职责单一，优先选择 `enhance_existing`
2. 如果现有Controller职责过重或业务领域不同，选择 `create_new`
3. 考虑REST API的资源分组和版本管理
4. 如果Controller层不存在，则选择 `none`

### Application Service层决策原则
1. 如果存在相关的应用服务且流程相似，优先选择 `enhance_existing`
2. 如果业务流程复杂或涉及不同的业务上下文，选择 `create_new`
3. 应用服务应当薄薄一层，主要负责编排和协调
4. 如果应用服务层不存在，则选择 `none`

### Domain Service层决策原则
1. 如果存在相关的领域服务且业务逻辑相关，优先选择 `enhance_existing`
2. 如果涉及新的业务领域或核心逻辑差异很大，选择 `create_new`
3. 领域服务应当承载核心业务逻辑
4. 如果领域服务层不存在，则选择 `none`

### Domain Mapper层决策原则
1. 如果操作相同的数据表或实体，优先选择 `enhance_existing`
2. 如果涉及新的数据表或查询逻辑复杂，选择 `create_new`
3. 每个Mapper通常对应一个聚合根或核心实体
4. 如果Mapper层不存在，则选择 `none`

### Feign Client层决策原则
1. 如果调用相同的外部服务，优先选择 `enhance_existing`
2. 如果调用新的外部服务或不同的服务版本，选择 `create_new`
3. 按照外部服务进行分组
4. 如果Feign Client层不存在，则选择 `none`

## 输出格式
请严格按照以下JSON格式返回决策结果：

```json
{
  "controller": {
    "action": "enhance_existing 或 create_new",
    "target_class": "目标类名（如果是enhance_existing）",
    "package_path": "建议的包路径",
    "reason": "详细的决策原因，说明为什么选择这种方式"
  },
  "application_service": {
    "action": "enhance_existing 或 create_new",
    "target_class": "目标类名（如果是enhance_existing）",
    "package_path": "建议的包路径",
    "reason": "详细的决策原因，说明为什么选择这种方式"
  },
  "domain_service": {
    "action": "enhance_existing 或 create_new",
    "target_class": "目标类名（如果是enhance_existing）",
    "package_path": "建议的包路径",
    "reason": "详细的决策原因，说明为什么选择这种方式"
  },
  "mapper": {
    "action": "enhance_existing 或 create_new",
    "target_class": "目标类名（如果是enhance_existing）",
    "package_path": "建议的包路径",
    "reason": "详细的决策原因，说明为什么选择这种方式"
  },
  "feign_client": {
    "action": "enhance_existing 或 create_new",
    "target_class": "目标类名（如果是enhance_existing）",
    "package_path": "建议的包路径",
    "reason": "详细的决策原因，说明为什么选择这种方式"
  },
  "dto": {
    "action": "create_new",
    "request_dto": "请求DTO类名",
    "response_dto": "响应DTO类名",
    "package_path": "建议的包路径",
    "reason": "DTO通常需要为每个接口单独创建"
  },
  "entity": {
    "action": "enhance_existing 或 create_new",
    "target_class": "目标类名（如果是enhance_existing）",
    "package_path": "建议的包路径",
    "reason": "详细的决策原因，说明为什么选择这种方式"
  }
}
```

请仔细分析项目结构，遵循DDD架构原则，给出合理的决策建议。
2025-07-24 13:39:45 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 13:39:45 - src.corder_integration.code_generator.llm_decision_maker - INFO - 🤖 LLM响应: ```json
{
  "controller": {
    "action": "enhance_existing",
    "target_class": "UnitLimitByCompanyIdController",
    "package_path": "com.yljr.crcl.limit.interfaces",
    "reason": "当前已存在UnitLimitByCompanyIdController，且新接口与现有接口listUnitLimitByCompanyId属于同一业务领域（额度管理），职责单一。新增导出功能是对现有查询功能的扩展，符合RESTful设计原则，可以在同一Controller中增加新的导出端点"
  },
  "application_service": {
    "action": "enhance_existing",
    "target_class": "UnitLimitByCompanyIdApplication",
    "package_path": "com.yljr.crcl.limit.application.service",
    "reason": "已存在UnitLimitByCompanyIdApplication，负责协调listUnitLimitByCompanyId的业务流程。新增导出功能需要复用相同的查询逻辑，只需在应用服务层增加导出编排逻辑，无需新建服务"
  },
  "domain_service": {
    "action": "create_new",
    "target_class": "UnitLimitExportService",
    "package_path": "com.yljr.crcl.limit.domain.service",
    "reason": "导出Excel属于新的业务功能，涉及文件生成、本地存储、URL生成等独立业务逻辑。虽然复用查询数据，但导出处理是独立的业务领域，需要新建领域服务来承载Excel生成和文件管理的核心逻辑"
  },
  "mapper": {
    "action": "enhance_existing",
    "target_class": "UnitLimitByCompanyIdMapper",
    "package_path": "com.yljr.crcl.limit.domain.mapper",
    "reason": "导出功能需要复用listUnitLimitByCompanyId相同的查询逻辑和数据源，无需新增Mapper。现有Mapper已满足数据查询需求"
  },
  "feign_client": {
    "action": "enhance_existing",
    "target_class": "UnitLimitByCompanyIdFeignClient",
    "package_path": "com.yljr.crcl.limit.application.feign",
    "reason": "需要调用zqyl-user-center-service的/queryCompanyUnitList接口获取组织单元详细信息，但当前已存在UnitLimitByCompanyIdFeignClient，可以在此客户端中新增调用用户中心服务的方法"
  },
  "dto": {
    "action": "create_new",
    "request_dto": "UnitLimitByCompanyIdExportReq",
    "response_dto": "UnitLimitByCompanyIdExportResp",
    "package_path": "com.yljr.crcl.limit.interfaces.dto",
    "reason": "导出接口需要特定的请求参数（如导出文件名、格式等）和响应结构（包含文件下载地址），与查询接口的DTO不同，需要新建专门的DTO"
  },
  "entity": {
    "action": "none",
    "target_class": "",
    "package_path": "",
    "reason": "导出功能不涉及新的业务实体，仅是对现有额度数据的导出处理，无需新增实体类"
  }
}
```
2025-07-24 13:39:45 - src.corder_integration.code_generator.llm_decision_maker - INFO - 🔍 提取到JSON: {
  "controller": {
    "action": "enhance_existing",
    "target_class": "UnitLimitByCompanyIdController",
    "package_path": "com.yljr.crcl.limit.interfaces",
    "reason": "当前已存在UnitLimitByCompany...
2025-07-24 13:39:45 - src.corder_integration.code_generator.llm_decision_maker - INFO - ✅ LLM决策结果验证通过，包含字段: ['controller', 'application_service', 'domain_service', 'mapper', 'feign_client', 'dto', 'entity']
2025-07-24 13:39:45 - src.corder_integration.code_generator.llm_decision_maker - INFO - 🔧 添加service字段以保持向后兼容
2025-07-24 13:39:45 - src.corder_integration.code_generator.llm_decision_maker - INFO - ✅ LLM决策完成
2025-07-24 13:39:45 - src.corder_integration.code_generator.strategy1_manager - INFO - 📋 决策结果:
2025-07-24 13:39:45 - src.corder_integration.code_generator.strategy1_manager - INFO -   controller:
2025-07-24 13:39:45 - src.corder_integration.code_generator.strategy1_manager - INFO -     - 操作: enhance_existing
2025-07-24 13:39:45 - src.corder_integration.code_generator.strategy1_manager - INFO -     - 目标类: UnitLimitByCompanyIdController
2025-07-24 13:39:45 - src.corder_integration.code_generator.strategy1_manager - INFO -     - 包路径: com.yljr.crcl.limit.interfaces
2025-07-24 13:39:45 - src.corder_integration.code_generator.strategy1_manager - INFO -     - 原因: 当前已存在UnitLimitByCompanyIdController，且新接口与现有接口listUnitLimitByCompanyId属于同一业务领域（额度管理），职责单一。新增导出功能是对现有查询功能的扩展，符合RESTful设计原则，可以在同一Controller中增加新的导出端点
2025-07-24 13:39:45 - src.corder_integration.code_generator.strategy1_manager - INFO -   application_service:
2025-07-24 13:39:45 - src.corder_integration.code_generator.strategy1_manager - INFO -     - 操作: enhance_existing
2025-07-24 13:39:45 - src.corder_integration.code_generator.strategy1_manager - INFO -     - 目标类: UnitLimitByCompanyIdApplication
2025-07-24 13:39:45 - src.corder_integration.code_generator.strategy1_manager - INFO -     - 包路径: com.yljr.crcl.limit.application.service
2025-07-24 13:39:45 - src.corder_integration.code_generator.strategy1_manager - INFO -     - 原因: 已存在UnitLimitByCompanyIdApplication，负责协调listUnitLimitByCompanyId的业务流程。新增导出功能需要复用相同的查询逻辑，只需在应用服务层增加导出编排逻辑，无需新建服务
2025-07-24 13:39:45 - src.corder_integration.code_generator.strategy1_manager - INFO -   domain_service:
2025-07-24 13:39:45 - src.corder_integration.code_generator.strategy1_manager - INFO -     - 操作: create_new
2025-07-24 13:39:45 - src.corder_integration.code_generator.strategy1_manager - INFO -     - 目标类: UnitLimitExportService
2025-07-24 13:39:45 - src.corder_integration.code_generator.strategy1_manager - INFO -     - 包路径: com.yljr.crcl.limit.domain.service
2025-07-24 13:39:45 - src.corder_integration.code_generator.strategy1_manager - INFO -     - 原因: 导出Excel属于新的业务功能，涉及文件生成、本地存储、URL生成等独立业务逻辑。虽然复用查询数据，但导出处理是独立的业务领域，需要新建领域服务来承载Excel生成和文件管理的核心逻辑
2025-07-24 13:39:45 - src.corder_integration.code_generator.strategy1_manager - INFO -   mapper:
2025-07-24 13:39:45 - src.corder_integration.code_generator.strategy1_manager - INFO -     - 操作: enhance_existing
2025-07-24 13:39:45 - src.corder_integration.code_generator.strategy1_manager - INFO -     - 目标类: UnitLimitByCompanyIdMapper
2025-07-24 13:39:45 - src.corder_integration.code_generator.strategy1_manager - INFO -     - 包路径: com.yljr.crcl.limit.domain.mapper
2025-07-24 13:39:45 - src.corder_integration.code_generator.strategy1_manager - INFO -     - 原因: 导出功能需要复用listUnitLimitByCompanyId相同的查询逻辑和数据源，无需新增Mapper。现有Mapper已满足数据查询需求
2025-07-24 13:39:45 - src.corder_integration.code_generator.strategy1_manager - INFO -   feign_client:
2025-07-24 13:39:45 - src.corder_integration.code_generator.strategy1_manager - INFO -     - 操作: enhance_existing
2025-07-24 13:39:45 - src.corder_integration.code_generator.strategy1_manager - INFO -     - 目标类: UnitLimitByCompanyIdFeignClient
2025-07-24 13:39:45 - src.corder_integration.code_generator.strategy1_manager - INFO -     - 包路径: com.yljr.crcl.limit.application.feign
2025-07-24 13:39:45 - src.corder_integration.code_generator.strategy1_manager - INFO -     - 原因: 需要调用zqyl-user-center-service的/queryCompanyUnitList接口获取组织单元详细信息，但当前已存在UnitLimitByCompanyIdFeignClient，可以在此客户端中新增调用用户中心服务的方法
2025-07-24 13:39:45 - src.corder_integration.code_generator.strategy1_manager - INFO -   dto:
2025-07-24 13:39:45 - src.corder_integration.code_generator.strategy1_manager - INFO -     - 操作: create_new
2025-07-24 13:39:45 - src.corder_integration.code_generator.strategy1_manager - INFO -     - 目标类: unknown
2025-07-24 13:39:45 - src.corder_integration.code_generator.strategy1_manager - INFO -     - 包路径: com.yljr.crcl.limit.interfaces.dto
2025-07-24 13:39:45 - src.corder_integration.code_generator.strategy1_manager - INFO -     - 原因: 导出接口需要特定的请求参数（如导出文件名、格式等）和响应结构（包含文件下载地址），与查询接口的DTO不同，需要新建专门的DTO
2025-07-24 13:39:45 - src.corder_integration.code_generator.strategy1_manager - INFO -   entity:
2025-07-24 13:39:45 - src.corder_integration.code_generator.strategy1_manager - INFO -     - 操作: none
2025-07-24 13:39:45 - src.corder_integration.code_generator.strategy1_manager - INFO -     - 目标类: 
2025-07-24 13:39:45 - src.corder_integration.code_generator.strategy1_manager - INFO -     - 包路径: 
2025-07-24 13:39:45 - src.corder_integration.code_generator.strategy1_manager - INFO -     - 原因: 导出功能不涉及新的业务实体，仅是对现有额度数据的导出处理，无需新增实体类
2025-07-24 13:39:45 - src.corder_integration.code_generator.strategy1_manager - INFO -   service:
2025-07-24 13:39:45 - src.corder_integration.code_generator.strategy1_manager - INFO -     - 操作: enhance_existing
2025-07-24 13:39:45 - src.corder_integration.code_generator.strategy1_manager - INFO -     - 目标类: UnitLimitByCompanyIdApplication
2025-07-24 13:39:45 - src.corder_integration.code_generator.strategy1_manager - INFO -     - 包路径: com.yljr.crcl.limit.application.service
2025-07-24 13:39:45 - src.corder_integration.code_generator.strategy1_manager - INFO -     - 原因: 已存在UnitLimitByCompanyIdApplication，负责协调listUnitLimitByCompanyId的业务流程。新增导出功能需要复用相同的查询逻辑，只需在应用服务层增加导出编排逻辑，无需新建服务
2025-07-24 13:39:45 - src.corder_integration.code_generator.strategy1_manager - INFO - 🔧 第3步：初始化代码生成器
2025-07-24 13:39:45 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 📁 初始化备份目录: /Users/renyu/Documents/create_project/链数中建一局_1753328639/crcl-open/crcl-open/backup/strategy1_backup_20250724_133945
2025-07-24 13:39:45 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 LLM客户端支持chat方法: True
2025-07-24 13:39:45 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 检测到火山引擎客户端: True
2025-07-24 13:39:45 - src.corder_integration.code_generator.strategy1_manager - INFO - 💻 第4步：大模型自主生成代码并写入文件
2025-07-24 13:39:45 - src.corder_integration.code_generator.strategy1_manager - INFO - 🔨 生成dto层代码
2025-07-24 13:39:45 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🤖 开始生成dto代码（支持文件操作）
2025-07-24 13:39:45 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 使用_generate_with_function_calling生成dto层代码
2025-07-24 13:39:45 - src.corder_integration.code_generator.function_calling_code_generator - INFO -   - 操作: create_new
2025-07-24 13:39:45 - src.corder_integration.code_generator.function_calling_code_generator - INFO -   - 目标类: None
2025-07-24 13:39:45 - src.corder_integration.code_generator.function_calling_code_generator - INFO -   - 包路径: com.yljr.crcl.limit.interfaces.dto
2025-07-24 13:39:45 - src.corder_integration.code_generator.function_calling_code_generator - INFO - ✅ 成功使用简单模板渲染function_calling_prompt
2025-07-24 13:39:45 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第1轮开始
2025-07-24 13:39:45 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 13:39:59 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 13:39:59 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 13:39:59 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: file_exists
2025-07-24 13:39:59 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 🔍 检查文件存在: src/main/java/com/yljr/crcl/limit/interfaces/dto/ListUnitLimitByCompanyIdExportReq.java = False
2025-07-24 13:39:59 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: file_exists
2025-07-24 13:39:59 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第2轮开始
2025-07-24 13:39:59 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 13:40:02 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 13:40:02 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 13:40:02 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: file_exists
2025-07-24 13:40:02 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 🔍 检查文件存在: src/main/java/com/yljr/crcl/limit/interfaces/dto/ListUnitLimitByCompanyIdExportResp.java = False
2025-07-24 13:40:02 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: file_exists
2025-07-24 13:40:02 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第3轮开始
2025-07-24 13:40:02 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 13:40:38 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 13:40:38 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 13:40:38 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: write_file
2025-07-24 13:40:38 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 📝 覆盖写入文件: src/main/java/com/yljr/crcl/limit/interfaces/dto/ListUnitLimitByCompanyIdExportReq.java (2639 字符)
2025-07-24 13:40:38 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: write_file
2025-07-24 13:40:38 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第4轮开始
2025-07-24 13:40:38 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 13:40:56 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 13:40:56 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 13:40:56 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: write_file
2025-07-24 13:40:56 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 📝 覆盖写入文件: src/main/java/com/yljr/crcl/limit/interfaces/dto/ListUnitLimitByCompanyIdExportResp.java (2094 字符)
2025-07-24 13:40:56 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: write_file
2025-07-24 13:40:56 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第5轮开始
2025-07-24 13:40:56 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 13:41:19 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 13:41:19 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 13:41:19 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: write_file
2025-07-24 13:41:19 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 📝 覆盖写入文件: src/main/java/com/yljr/crcl/limit/interfaces/dto/UnitLimitExportDataDto.java (2612 字符)
2025-07-24 13:41:19 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: write_file
2025-07-24 13:41:19 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第6轮开始
2025-07-24 13:41:19 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 13:41:23 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 13:41:23 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 13:41:23 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: read_file
2025-07-24 13:41:23 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 📖 读取文件: src/main/java/com/yljr/crcl/limit/interfaces/dto/ListUnitLimitByCompanyIdExportReq.java (2639 字符)
2025-07-24 13:41:23 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: read_file
2025-07-24 13:41:23 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第7轮开始
2025-07-24 13:41:23 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 13:41:25 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 13:41:25 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 13:41:25 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: read_file
2025-07-24 13:41:25 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 📖 读取文件: src/main/java/com/yljr/crcl/limit/interfaces/dto/ListUnitLimitByCompanyIdExportResp.java (2094 字符)
2025-07-24 13:41:25 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: read_file
2025-07-24 13:41:25 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第8轮开始
2025-07-24 13:41:25 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 13:41:28 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 13:41:28 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 13:41:28 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: read_file
2025-07-24 13:41:28 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 📖 读取文件: src/main/java/com/yljr/crcl/limit/interfaces/dto/UnitLimitExportDataDto.java (2612 字符)
2025-07-24 13:41:28 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: read_file
2025-07-24 13:41:28 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第9轮开始
2025-07-24 13:41:28 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 13:41:31 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 13:41:31 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 13:41:31 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: list_files
2025-07-24 13:41:31 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 📂 列出文件: src/main/java/com/yljr/crcl/limit/interfaces/dto (3 个文件)
2025-07-24 13:41:31 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: list_files
2025-07-24 13:41:31 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第10轮开始
2025-07-24 13:41:31 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 13:41:46 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 13:41:46 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'str'>
2025-07-24 13:41:46 - src.corder_integration.code_generator.function_calling_code_generator - WARNING - ⚠️ 收到意外的响应格式: <class 'str'>
2025-07-24 13:41:46 - src.corder_integration.code_generator.function_calling_code_generator - INFO - ✅ Function calling对话完成，共10轮
2025-07-24 13:41:46 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🗑️ Function Calling清理备份目录: /Users/renyu/Documents/create_project/链数中建一局_1753328639/crcl-open/crcl-open/backup/strategy1_backup_20250724_133945
2025-07-24 13:41:46 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🗑️ 删除空的备份根目录: /Users/renyu/Documents/create_project/链数中建一局_1753328639/crcl-open/crcl-open/backup
2025-07-24 13:41:46 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🧹 Function Calling备份清理完成，删除了 1 个目录
2025-07-24 13:41:46 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🧹 Function Calling完成后清理了 1 个备份文件
2025-07-24 13:41:46 - src.corder_integration.code_generator.strategy1_manager - INFO - 🔨 生成mapper层代码
2025-07-24 13:41:46 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🤖 开始生成mapper代码（支持文件操作）
2025-07-24 13:41:46 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 使用_generate_with_function_calling生成mapper层代码
2025-07-24 13:41:46 - src.corder_integration.code_generator.function_calling_code_generator - INFO -   - 操作: enhance_existing
2025-07-24 13:41:46 - src.corder_integration.code_generator.function_calling_code_generator - INFO -   - 目标类: UnitLimitByCompanyIdMapper
2025-07-24 13:41:46 - src.corder_integration.code_generator.function_calling_code_generator - INFO -   - 包路径: com.yljr.crcl.limit.domain.mapper
2025-07-24 13:41:46 - src.corder_integration.code_generator.function_calling_code_generator - INFO - ✅ 成功使用简单模板渲染function_calling_prompt
2025-07-24 13:41:46 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第1轮开始
2025-07-24 13:41:46 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 13:42:02 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 13:42:02 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 13:42:02 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: file_exists
2025-07-24 13:42:02 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 🔍 检查文件存在: src/main/java/com/yljr/crcl/limit/domain/mapper/UnitLimitByCompanyIdMapper.java = False
2025-07-24 13:42:02 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: file_exists
2025-07-24 13:42:02 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第2轮开始
2025-07-24 13:42:02 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 13:42:31 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 13:42:31 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 13:42:31 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: write_file
2025-07-24 13:42:31 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 📝 覆盖写入文件: src/main/java/com/yljr/crcl/limit/domain/mapper/UnitLimitByCompanyIdMapper.java (2019 字符)
2025-07-24 13:42:31 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: write_file
2025-07-24 13:42:31 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第3轮开始
2025-07-24 13:42:31 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 13:42:52 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 13:42:52 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 13:42:52 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: write_file
2025-07-24 13:42:52 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 📋 备份文件: src/main/resources/mapper/UnitLimitByCompanyIdMapper.xml -> /Users/renyu/Documents/create_project/链数中建一局_1753328639/crcl-open/crcl-open/backup/strategy1_backup_20250724_133945/src/main/resources/mapper/UnitLimitByCompanyIdMapper.xml
2025-07-24 13:42:52 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 📝 覆盖写入文件: src/main/resources/mapper/UnitLimitByCompanyIdMapper.xml (2605 字符)
2025-07-24 13:42:52 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: write_file
2025-07-24 13:42:52 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第4轮开始
2025-07-24 13:42:52 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 13:42:55 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 13:42:55 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 13:42:55 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: read_file
2025-07-24 13:42:55 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 📖 读取文件: src/main/java/com/yljr/crcl/limit/domain/mapper/UnitLimitByCompanyIdMapper.java (2019 字符)
2025-07-24 13:42:55 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: read_file
2025-07-24 13:42:55 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第5轮开始
2025-07-24 13:42:55 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 13:43:01 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 13:43:01 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 13:43:01 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: read_file
2025-07-24 13:43:01 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 📖 读取文件: src/main/resources/mapper/UnitLimitByCompanyIdMapper.xml (2605 字符)
2025-07-24 13:43:01 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: read_file
2025-07-24 13:43:01 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第6轮开始
2025-07-24 13:43:01 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 13:43:05 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 13:43:05 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 13:43:05 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: file_exists
2025-07-24 13:43:05 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 🔍 检查文件存在: src/main/java/com/yljr/crcl/limit/domain/po/ListLsLimitByCompanyIdPo.java = True
2025-07-24 13:43:05 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: file_exists
2025-07-24 13:43:05 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第7轮开始
2025-07-24 13:43:05 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 13:43:13 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 13:43:13 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'str'>
2025-07-24 13:43:13 - src.corder_integration.code_generator.function_calling_code_generator - WARNING - ⚠️ 收到意外的响应格式: <class 'str'>
2025-07-24 13:43:13 - src.corder_integration.code_generator.function_calling_code_generator - INFO - ✅ Function calling对话完成，共7轮
2025-07-24 13:43:13 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🗑️ Function Calling清理备份目录: /Users/renyu/Documents/create_project/链数中建一局_1753328639/crcl-open/crcl-open/backup/strategy1_backup_20250724_133945
2025-07-24 13:43:13 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🗑️ 删除空的备份根目录: /Users/renyu/Documents/create_project/链数中建一局_1753328639/crcl-open/crcl-open/backup
2025-07-24 13:43:13 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🧹 Function Calling备份清理完成，删除了 1 个目录
2025-07-24 13:43:13 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🧹 Function Calling完成后清理了 1 个备份文件
2025-07-24 13:43:13 - src.corder_integration.code_generator.strategy1_manager - INFO - 🔨 生成domain_service层代码
2025-07-24 13:43:13 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🤖 开始生成domain_service代码（支持文件操作）
2025-07-24 13:43:13 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 使用_generate_with_function_calling生成domain_service层代码
2025-07-24 13:43:13 - src.corder_integration.code_generator.function_calling_code_generator - INFO -   - 操作: create_new
2025-07-24 13:43:13 - src.corder_integration.code_generator.function_calling_code_generator - INFO -   - 目标类: UnitLimitExportService
2025-07-24 13:43:13 - src.corder_integration.code_generator.function_calling_code_generator - INFO -   - 包路径: com.yljr.crcl.limit.domain.service
2025-07-24 13:43:13 - src.corder_integration.code_generator.function_calling_code_generator - INFO - ✅ 成功使用简单模板渲染function_calling_prompt
2025-07-24 13:43:13 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第1轮开始
2025-07-24 13:43:13 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 13:43:26 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 13:43:26 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 13:43:26 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: file_exists
2025-07-24 13:43:26 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 🔍 检查文件存在: src/main/java/com/yljr/crcl/limit/domain/service/UnitLimitExportService.java = False
2025-07-24 13:43:26 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: file_exists
2025-07-24 13:43:26 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第2轮开始
2025-07-24 13:43:26 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 13:44:24 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 13:44:24 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 13:44:24 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: write_file
2025-07-24 13:44:24 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 📝 覆盖写入文件: src/main/java/com/yljr/crcl/limit/domain/service/UnitLimitExportService.java (9537 字符)
2025-07-24 13:44:24 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: write_file
2025-07-24 13:44:24 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第3轮开始
2025-07-24 13:44:24 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 13:44:43 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 13:44:43 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 13:44:43 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: write_file
2025-07-24 13:44:43 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 📝 覆盖写入文件: src/main/java/com/yljr/crcl/limit/interfaces/dto/UnitLimitExportResp.java (1692 字符)
2025-07-24 13:44:43 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: write_file
2025-07-24 13:44:43 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第4轮开始
2025-07-24 13:44:43 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 13:44:57 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 13:44:57 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 13:44:57 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: read_file
2025-07-24 13:44:57 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 📖 读取文件: src/main/java/com/yljr/crcl/limit/domain/service/UnitLimitExportService.java (9537 字符)
2025-07-24 13:44:57 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: read_file
2025-07-24 13:44:57 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第5轮开始
2025-07-24 13:44:57 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 13:45:13 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 13:45:13 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 13:45:13 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: read_file
2025-07-24 13:45:13 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 📖 读取文件: src/main/java/com/yljr/crcl/limit/interfaces/dto/UnitLimitExportResp.java (1692 字符)
2025-07-24 13:45:13 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: read_file
2025-07-24 13:45:13 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第6轮开始
2025-07-24 13:45:13 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 13:45:16 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 13:45:16 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 13:45:16 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: file_exists
2025-07-24 13:45:16 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 🔍 检查文件存在: src/main/java/com/yljr/crcl/limit/application/feign/user/DataUserFeign.java = False
2025-07-24 13:45:16 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: file_exists
2025-07-24 13:45:16 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第7轮开始
2025-07-24 13:45:16 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 13:45:18 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 13:45:18 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 13:45:18 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: list_files
2025-07-24 13:45:18 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 📂 列出文件: src/main/java/com/yljr/crcl/limit/application/feign (0 个文件)
2025-07-24 13:45:18 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: list_files
2025-07-24 13:45:18 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第8轮开始
2025-07-24 13:45:18 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 13:45:23 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 13:45:23 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 13:45:23 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: list_files
2025-07-24 13:45:23 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 📂 列出文件: src/main/java/com/yljr/crcl/limit/application/feign (0 个文件)
2025-07-24 13:45:23 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: list_files
2025-07-24 13:45:23 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第9轮开始
2025-07-24 13:45:23 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 13:45:26 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 13:45:26 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 13:45:26 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: list_files
2025-07-24 13:45:26 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 📂 列出文件: src/main/java/com/yljr/crcl/open/application/feign/user (0 个文件)
2025-07-24 13:45:26 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: list_files
2025-07-24 13:45:26 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第10轮开始
2025-07-24 13:45:26 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 13:45:30 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 13:45:30 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 13:45:30 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: list_files
2025-07-24 13:45:30 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 📂 列出文件: src/main/java/com/yljr/crcl/open/application/feign (0 个文件)
2025-07-24 13:45:30 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: list_files
2025-07-24 13:45:30 - src.corder_integration.code_generator.function_calling_code_generator - WARNING - ⚠️ Function calling达到最大轮数10
2025-07-24 13:45:30 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🧹 Function Calling备份清理完成，删除了 0 个目录
2025-07-24 13:45:30 - src.corder_integration.code_generator.strategy1_manager - INFO - 🔨 生成feign_client层代码
2025-07-24 13:45:30 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🤖 开始生成feign_client代码（支持文件操作）
2025-07-24 13:45:30 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 使用_generate_with_function_calling生成feign_client层代码
2025-07-24 13:45:30 - src.corder_integration.code_generator.function_calling_code_generator - INFO -   - 操作: enhance_existing
2025-07-24 13:45:30 - src.corder_integration.code_generator.function_calling_code_generator - INFO -   - 目标类: UnitLimitByCompanyIdFeignClient
2025-07-24 13:45:30 - src.corder_integration.code_generator.function_calling_code_generator - INFO -   - 包路径: com.yljr.crcl.limit.application.feign
2025-07-24 13:45:30 - src.corder_integration.code_generator.function_calling_code_generator - INFO - ✅ 成功使用简单模板渲染function_calling_prompt
2025-07-24 13:45:30 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第1轮开始
2025-07-24 13:45:30 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 13:45:45 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 13:45:45 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 13:45:45 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: file_exists
2025-07-24 13:45:45 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 🔍 检查文件存在: src/main/java/com/yljr/crcl/limit/application/feign/UnitLimitByCompanyIdFeignClient.java = False
2025-07-24 13:45:45 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: file_exists
2025-07-24 13:45:45 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第2轮开始
2025-07-24 13:45:45 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 13:46:12 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 13:46:12 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 13:46:12 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: write_file
2025-07-24 13:46:12 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 📝 覆盖写入文件: src/main/java/com/yljr/crcl/limit/application/feign/UnitLimitByCompanyIdFeignClient.java (1576 字符)
2025-07-24 13:46:12 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: write_file
2025-07-24 13:46:12 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第3轮开始
2025-07-24 13:46:12 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 13:46:32 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 13:46:32 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 13:46:32 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: write_file
2025-07-24 13:46:32 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 📋 备份文件: src/main/java/com/yljr/crcl/limit/interfaces/dto/ListUnitLimitByCompanyIdExportReq.java -> /Users/renyu/Documents/create_project/链数中建一局_1753328639/crcl-open/crcl-open/backup/strategy1_backup_20250724_133945/src/main/java/com/yljr/crcl/limit/interfaces/dto/ListUnitLimitByCompanyIdExportReq.java
2025-07-24 13:46:32 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 📝 覆盖写入文件: src/main/java/com/yljr/crcl/limit/interfaces/dto/ListUnitLimitByCompanyIdExportReq.java (2547 字符)
2025-07-24 13:46:32 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: write_file
2025-07-24 13:46:32 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第4轮开始
2025-07-24 13:46:32 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 13:46:44 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 13:46:44 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 13:46:44 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: write_file
2025-07-24 13:46:44 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 📋 备份文件: src/main/java/com/yljr/crcl/limit/interfaces/dto/ListUnitLimitByCompanyIdExportResp.java -> /Users/renyu/Documents/create_project/链数中建一局_1753328639/crcl-open/crcl-open/backup/strategy1_backup_20250724_133945/src/main/java/com/yljr/crcl/limit/interfaces/dto/ListUnitLimitByCompanyIdExportResp.java
2025-07-24 13:46:44 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 📝 覆盖写入文件: src/main/java/com/yljr/crcl/limit/interfaces/dto/ListUnitLimitByCompanyIdExportResp.java (1290 字符)
2025-07-24 13:46:44 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: write_file
2025-07-24 13:46:44 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第5轮开始
2025-07-24 13:46:44 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 13:46:48 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 13:46:48 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 13:46:48 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: read_file
2025-07-24 13:46:48 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 📖 读取文件: src/main/java/com/yljr/crcl/limit/application/feign/UnitLimitByCompanyIdFeignClient.java (1576 字符)
2025-07-24 13:46:48 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: read_file
2025-07-24 13:46:48 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第6轮开始
2025-07-24 13:46:48 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 13:46:50 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 13:46:50 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 13:46:50 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: read_file
2025-07-24 13:46:50 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 📖 读取文件: src/main/java/com/yljr/crcl/limit/interfaces/dto/ListUnitLimitByCompanyIdExportReq.java (2547 字符)
2025-07-24 13:46:50 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: read_file
2025-07-24 13:46:50 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第7轮开始
2025-07-24 13:46:50 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 13:46:53 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 13:46:53 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 13:46:53 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: read_file
2025-07-24 13:46:53 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 📖 读取文件: src/main/java/com/yljr/crcl/limit/interfaces/dto/ListUnitLimitByCompanyIdExportResp.java (1290 字符)
2025-07-24 13:46:53 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: read_file
2025-07-24 13:46:53 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第8轮开始
2025-07-24 13:46:53 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 13:46:57 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 13:46:57 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 13:46:57 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: file_exists
2025-07-24 13:46:57 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 🔍 检查文件存在: src/main/java/com/yljr/crcl/limit/application/feign = True
2025-07-24 13:46:57 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: file_exists
2025-07-24 13:46:57 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第9轮开始
2025-07-24 13:46:57 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 13:47:00 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 13:47:00 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 13:47:00 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: file_exists
2025-07-24 13:47:00 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 🔍 检查文件存在: src/main/java/com/yljr/crcl/limit/interfaces/dto = True
2025-07-24 13:47:00 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: file_exists
2025-07-24 13:47:00 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第10轮开始
2025-07-24 13:47:00 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 13:47:12 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 13:47:12 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'str'>
2025-07-24 13:47:12 - src.corder_integration.code_generator.function_calling_code_generator - WARNING - ⚠️ 收到意外的响应格式: <class 'str'>
2025-07-24 13:47:12 - src.corder_integration.code_generator.function_calling_code_generator - INFO - ✅ Function calling对话完成，共10轮
2025-07-24 13:47:12 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🗑️ Function Calling清理备份目录: /Users/renyu/Documents/create_project/链数中建一局_1753328639/crcl-open/crcl-open/backup/strategy1_backup_20250724_133945
2025-07-24 13:47:12 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🗑️ 删除空的备份根目录: /Users/renyu/Documents/create_project/链数中建一局_1753328639/crcl-open/crcl-open/backup
2025-07-24 13:47:12 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🧹 Function Calling备份清理完成，删除了 1 个目录
2025-07-24 13:47:12 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🧹 Function Calling完成后清理了 1 个备份文件
2025-07-24 13:47:12 - src.corder_integration.code_generator.strategy1_manager - INFO - 🔨 生成application_service层代码
2025-07-24 13:47:12 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🤖 开始生成application_service代码（支持文件操作）
2025-07-24 13:47:12 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 使用_generate_with_function_calling生成application_service层代码
2025-07-24 13:47:12 - src.corder_integration.code_generator.function_calling_code_generator - INFO -   - 操作: enhance_existing
2025-07-24 13:47:12 - src.corder_integration.code_generator.function_calling_code_generator - INFO -   - 目标类: UnitLimitByCompanyIdApplication
2025-07-24 13:47:12 - src.corder_integration.code_generator.function_calling_code_generator - INFO -   - 包路径: com.yljr.crcl.limit.application.service
2025-07-24 13:47:12 - src.corder_integration.code_generator.function_calling_code_generator - INFO - ✅ 成功使用简单模板渲染function_calling_prompt
2025-07-24 13:47:12 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第1轮开始
2025-07-24 13:47:12 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 13:47:27 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 13:47:27 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 13:47:27 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: file_exists
2025-07-24 13:47:27 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 🔍 检查文件存在: src/main/java/com/yljr/crcl/limit/application/service/UnitLimitByCompanyIdApplication.java = False
2025-07-24 13:47:27 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: file_exists
2025-07-24 13:47:27 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第2轮开始
2025-07-24 13:47:27 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 13:48:21 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 13:48:21 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 13:48:21 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: write_file
2025-07-24 13:48:21 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 📝 覆盖写入文件: src/main/java/com/yljr/crcl/limit/application/service/UnitLimitByCompanyIdApplication.java (9272 字符)
2025-07-24 13:48:21 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: write_file
2025-07-24 13:48:21 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第3轮开始
2025-07-24 13:48:21 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 13:48:34 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 13:48:34 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 13:48:34 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: write_file
2025-07-24 13:48:34 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 📋 备份文件: src/main/java/com/yljr/crcl/limit/interfaces/dto/ListUnitLimitByCompanyIdExportReq.java -> /Users/renyu/Documents/create_project/链数中建一局_1753328639/crcl-open/crcl-open/backup/strategy1_backup_20250724_133945/src/main/java/com/yljr/crcl/limit/interfaces/dto/ListUnitLimitByCompanyIdExportReq.java
2025-07-24 13:48:34 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 📝 覆盖写入文件: src/main/java/com/yljr/crcl/limit/interfaces/dto/ListUnitLimitByCompanyIdExportReq.java (1071 字符)
2025-07-24 13:48:34 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: write_file
2025-07-24 13:48:34 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第4轮开始
2025-07-24 13:48:34 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 13:48:54 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 13:48:54 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 13:48:54 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: write_file
2025-07-24 13:48:54 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 📋 备份文件: src/main/java/com/yljr/crcl/limit/interfaces/dto/ListUnitLimitByCompanyIdExportResp.java -> /Users/renyu/Documents/create_project/链数中建一局_1753328639/crcl-open/crcl-open/backup/strategy1_backup_20250724_133945/src/main/java/com/yljr/crcl/limit/interfaces/dto/ListUnitLimitByCompanyIdExportResp.java
2025-07-24 13:48:54 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 📝 覆盖写入文件: src/main/java/com/yljr/crcl/limit/interfaces/dto/ListUnitLimitByCompanyIdExportResp.java (777 字符)
2025-07-24 13:48:54 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: write_file
2025-07-24 13:48:54 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第5轮开始
2025-07-24 13:48:54 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 13:49:02 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 13:49:02 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 13:49:02 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: write_file
2025-07-24 13:49:02 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 📝 覆盖写入文件: src/main/java/com/yljr/crcl/limit/application/feign/DataUserFeignClient.java (749 字符)
2025-07-24 13:49:02 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: write_file
2025-07-24 13:49:02 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第6轮开始
2025-07-24 13:49:02 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 13:49:10 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 13:49:10 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 13:49:10 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: write_file
2025-07-24 13:49:10 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 📝 覆盖写入文件: src/main/java/com/yljr/crcl/limit/application/feign/dto/CompanyUnitListReq.java (529 字符)
2025-07-24 13:49:10 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: write_file
2025-07-24 13:49:10 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第7轮开始
2025-07-24 13:49:10 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 13:49:24 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 13:49:24 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 13:49:24 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: write_file
2025-07-24 13:49:24 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 📝 覆盖写入文件: src/main/java/com/yljr/crcl/limit/application/feign/dto/CompanyUnitListResp.java (1131 字符)
2025-07-24 13:49:24 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: write_file
2025-07-24 13:49:24 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第8轮开始
2025-07-24 13:49:24 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 13:49:30 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 13:49:30 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 13:49:30 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: read_file
2025-07-24 13:49:30 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 📖 读取文件: src/main/java/com/yljr/crcl/limit/application/service/UnitLimitByCompanyIdApplication.java (9272 字符)
2025-07-24 13:49:30 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: read_file
2025-07-24 13:49:30 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第9轮开始
2025-07-24 13:49:30 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 13:49:33 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 13:49:33 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 13:49:33 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: read_file
2025-07-24 13:49:33 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 📖 读取文件: src/main/java/com/yljr/crcl/limit/interfaces/dto/ListUnitLimitByCompanyIdExportReq.java (1071 字符)
2025-07-24 13:49:33 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: read_file
2025-07-24 13:49:33 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第10轮开始
2025-07-24 13:49:33 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 13:49:38 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 13:49:38 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 收到LLM响应，类型: <class 'openai.types.chat.chat_completion.ChatCompletion'>
2025-07-24 13:49:38 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 执行函数: read_file
2025-07-24 13:49:38 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - 📖 读取文件: src/main/java/com/yljr/crcl/limit/application/feign/DataUserFeignClient.java (749 字符)
2025-07-24 13:49:38 - src.corder_integration.code_generator.file_operation_tool_invoker - INFO - ✅ 函数调用成功: read_file
2025-07-24 13:49:38 - src.corder_integration.code_generator.function_calling_code_generator - WARNING - ⚠️ Function calling达到最大轮数10
2025-07-24 13:49:38 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🗑️ Function Calling清理备份目录: /Users/renyu/Documents/create_project/链数中建一局_1753328639/crcl-open/crcl-open/backup/strategy1_backup_20250724_133945
2025-07-24 13:49:38 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🗑️ 删除空的备份根目录: /Users/renyu/Documents/create_project/链数中建一局_1753328639/crcl-open/crcl-open/backup
2025-07-24 13:49:38 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🧹 Function Calling备份清理完成，删除了 1 个目录
2025-07-24 13:49:38 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🧹 Function Calling完成后清理了 1 个备份文件
2025-07-24 13:49:38 - src.corder_integration.code_generator.strategy1_manager - INFO - 🔨 生成controller层代码
2025-07-24 13:49:38 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🤖 开始生成controller代码（支持文件操作）
2025-07-24 13:49:38 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 使用_generate_with_function_calling生成controller层代码
2025-07-24 13:49:38 - src.corder_integration.code_generator.function_calling_code_generator - INFO -   - 操作: enhance_existing
2025-07-24 13:49:38 - src.corder_integration.code_generator.function_calling_code_generator - INFO -   - 目标类: UnitLimitByCompanyIdController
2025-07-24 13:49:38 - src.corder_integration.code_generator.function_calling_code_generator - INFO -   - 包路径: com.yljr.crcl.limit.interfaces
2025-07-24 13:49:38 - src.corder_integration.code_generator.function_calling_code_generator - INFO - ✅ 成功使用简单模板渲染function_calling_prompt
2025-07-24 13:49:38 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔄 Function calling 第1轮开始
2025-07-24 13:49:38 - src.corder_integration.code_generator.function_calling_code_generator - INFO - 🔧 调用火山引擎Function Calling，工具数量: 7
2025-07-24 13:49:53 - werkzeug - INFO -  * Detected change in '/Users/renyu/Documents/ai_project/document_analyzer/src/corder_integration/code_generator/file_operation_tool_invoker.py', reloading
2025-07-24 13:49:54 - werkzeug - INFO -  * Restarting with stat
2025-07-24 13:49:54 - system - INFO - ==================================================
2025-07-24 13:49:54 - system - INFO - 🚀 智能分析系统日志系统初始化完成
2025-07-24 13:49:54 - system - INFO - 📁 日志根目录: /Users/renyu/Documents/ai_project/document_analyzer/logs
2025-07-24 13:49:54 - system - INFO - 📊 日志级别: INFO
2025-07-24 13:49:54 - system - INFO - 📅 按日期轮转: 每天午夜自动轮转
2025-07-24 13:49:54 - system - INFO - 📂 按月分目录: logs/YYYY-MM/
2025-07-24 13:49:54 - system - INFO - 📝 主日志: logs/2025-07/app.log
2025-07-24 13:49:54 - system - INFO - 🔧 API日志: logs/2025-07/api_server.log
2025-07-24 13:49:54 - system - INFO - 🗂️ 保留天数: 7 天
2025-07-24 13:49:54 - system - INFO - ==================================================
2025-07-24 13:49:57 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-24 13:49:57 - src.corder_integration.langgraph.nodes.task_simple_splitting_node - INFO - ✅ 成功加载配置文件: config.yaml
2025-07-24 13:49:57 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-24 13:49:57 - src.corder_integration.langgraph.nodes.task_simple_splitting_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250724094351-pnjf4(编码智能体专用)
2025-07-24 13:49:57 - src.corder_integration.langgraph.nodes.task_simple_splitting_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-24 13:49:58 - src.utils.task_storage - INFO - 数据库初始化成功
2025-07-24 13:49:58 - markdown_storage - INFO - Markdown存储管理器初始化完成
2025-07-24 13:49:58 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-24 13:49:58 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-24 13:49:58 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-24 13:49:59 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-24 13:49:59 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-24 13:49:59 - WeaviateVectorDatabase - INFO - ✅ Weaviate连接成功: http://localhost:8080 (gRPC: 50051)
2025-07-24 13:49:59 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/schema/AnalyDesignDocuments "HTTP/1.1 200 OK"
2025-07-24 13:49:59 - WeaviateVectorDatabase - INFO - ✅ Weaviate集合已存在: AnalyDesignDocuments
2025-07-24 13:49:59 - AnalysisServiceManager - INFO - 初始化向量数据库: weaviate
2025-07-24 13:49:59 - sentence_transformers.SentenceTransformer - INFO - Use pytorch device_name: mps
2025-07-24 13:49:59 - sentence_transformers.SentenceTransformer - INFO - Load pretrained SentenceTransformer: BAAI/bge-large-zh
2025-07-24 13:50:09 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-24 13:50:10 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-24 13:50:10 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-24 13:50:10 - src.utils.weaviate_helper - INFO - 成功连接到 Weaviate: localhost:8080
2025-07-24 13:50:10 - AnalysisServiceManager - INFO - 分析服务管理器初始化完成
2025-07-24 13:50:10 - src.utils.enhanced_analyzer - INFO - 增强分析器初始化完成
2025-07-24 13:50:10 - werkzeug - WARNING -  * Debugger is active!
2025-07-24 13:50:10 - werkzeug - INFO -  * Debugger PIN: 587-510-452
2025-07-24 13:50:17 - werkzeug - INFO -  * Detected change in '/Users/renyu/Documents/ai_project/document_analyzer/src/corder_integration/code_generator/file_operation_tool_invoker.py', reloading
2025-07-24 13:50:17 - werkzeug - INFO -  * Restarting with stat
2025-07-24 13:50:17 - system - INFO - ==================================================
2025-07-24 13:50:17 - system - INFO - 🚀 智能分析系统日志系统初始化完成
2025-07-24 13:50:17 - system - INFO - 📁 日志根目录: /Users/renyu/Documents/ai_project/document_analyzer/logs
2025-07-24 13:50:17 - system - INFO - 📊 日志级别: INFO
2025-07-24 13:50:17 - system - INFO - 📅 按日期轮转: 每天午夜自动轮转
2025-07-24 13:50:17 - system - INFO - 📂 按月分目录: logs/YYYY-MM/
2025-07-24 13:50:17 - system - INFO - 📝 主日志: logs/2025-07/app.log
2025-07-24 13:50:17 - system - INFO - 🔧 API日志: logs/2025-07/api_server.log
2025-07-24 13:50:17 - system - INFO - 🗂️ 保留天数: 7 天
2025-07-24 13:50:17 - system - INFO - ==================================================
2025-07-24 13:50:20 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-24 13:50:20 - src.corder_integration.langgraph.nodes.task_simple_splitting_node - INFO - ✅ 成功加载配置文件: config.yaml
2025-07-24 13:50:20 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-24 13:50:20 - src.corder_integration.langgraph.nodes.task_simple_splitting_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250724094351-pnjf4(编码智能体专用)
2025-07-24 13:50:20 - src.corder_integration.langgraph.nodes.task_simple_splitting_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-24 13:50:20 - src.utils.task_storage - INFO - 数据库初始化成功
2025-07-24 13:50:20 - markdown_storage - INFO - Markdown存储管理器初始化完成
2025-07-24 13:50:20 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-24 13:50:20 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-24 13:50:20 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-24 13:50:21 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-24 13:50:22 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-24 13:50:22 - WeaviateVectorDatabase - INFO - ✅ Weaviate连接成功: http://localhost:8080 (gRPC: 50051)
2025-07-24 13:50:22 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/schema/AnalyDesignDocuments "HTTP/1.1 200 OK"
2025-07-24 13:50:22 - WeaviateVectorDatabase - INFO - ✅ Weaviate集合已存在: AnalyDesignDocuments
2025-07-24 13:50:22 - AnalysisServiceManager - INFO - 初始化向量数据库: weaviate
2025-07-24 13:50:22 - sentence_transformers.SentenceTransformer - INFO - Use pytorch device_name: mps
2025-07-24 13:50:22 - sentence_transformers.SentenceTransformer - INFO - Load pretrained SentenceTransformer: BAAI/bge-large-zh
2025-07-24 13:50:30 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-24 13:50:30 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-24 13:50:30 - src.utils.weaviate_helper - INFO - 成功连接到 Weaviate: localhost:8080
2025-07-24 13:50:30 - AnalysisServiceManager - INFO - 分析服务管理器初始化完成
2025-07-24 13:50:30 - src.utils.enhanced_analyzer - INFO - 增强分析器初始化完成
2025-07-24 13:50:30 - werkzeug - WARNING -  * Debugger is active!
2025-07-24 13:50:30 - werkzeug - INFO -  * Debugger PIN: 587-510-452
2025-07-24 14:48:15 - werkzeug - INFO -  * Detected change in '/Users/renyu/Documents/ai_project/document_analyzer/src/corder_integration/langgraph/nodes/intelligent_coding_node.py', reloading
2025-07-24 14:48:16 - werkzeug - INFO -  * Restarting with stat
2025-07-24 14:48:16 - system - INFO - ==================================================
2025-07-24 14:48:16 - system - INFO - 🚀 智能分析系统日志系统初始化完成
2025-07-24 14:48:16 - system - INFO - 📁 日志根目录: /Users/renyu/Documents/ai_project/document_analyzer/logs
2025-07-24 14:48:16 - system - INFO - 📊 日志级别: INFO
2025-07-24 14:48:16 - system - INFO - 📅 按日期轮转: 每天午夜自动轮转
2025-07-24 14:48:16 - system - INFO - 📂 按月分目录: logs/YYYY-MM/
2025-07-24 14:48:16 - system - INFO - 📝 主日志: logs/2025-07/app.log
2025-07-24 14:48:16 - system - INFO - 🔧 API日志: logs/2025-07/api_server.log
2025-07-24 14:48:16 - system - INFO - 🗂️ 保留天数: 7 天
2025-07-24 14:48:16 - system - INFO - ==================================================
2025-07-24 14:48:19 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-24 14:48:20 - src.corder_integration.langgraph.nodes.task_simple_splitting_node - INFO - ✅ 成功加载配置文件: config.yaml
2025-07-24 14:48:20 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-24 14:48:20 - src.corder_integration.langgraph.nodes.task_simple_splitting_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250724094351-pnjf4(编码智能体专用)
2025-07-24 14:48:20 - src.corder_integration.langgraph.nodes.task_simple_splitting_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-24 14:48:20 - src.utils.task_storage - INFO - 数据库初始化成功
2025-07-24 14:48:20 - markdown_storage - INFO - Markdown存储管理器初始化完成
2025-07-24 14:48:20 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-24 14:48:20 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-24 14:48:20 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-24 14:48:21 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-24 14:48:21 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-24 14:48:21 - WeaviateVectorDatabase - INFO - ✅ Weaviate连接成功: http://localhost:8080 (gRPC: 50051)
2025-07-24 14:48:21 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/schema/AnalyDesignDocuments "HTTP/1.1 200 OK"
2025-07-24 14:48:21 - WeaviateVectorDatabase - INFO - ✅ Weaviate集合已存在: AnalyDesignDocuments
2025-07-24 14:48:21 - AnalysisServiceManager - INFO - 初始化向量数据库: weaviate
2025-07-24 14:48:21 - sentence_transformers.SentenceTransformer - INFO - Use pytorch device_name: mps
2025-07-24 14:48:21 - sentence_transformers.SentenceTransformer - INFO - Load pretrained SentenceTransformer: BAAI/bge-large-zh
2025-07-24 14:48:31 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-24 14:48:32 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-24 14:48:32 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-24 14:48:32 - src.utils.weaviate_helper - INFO - 成功连接到 Weaviate: localhost:8080
2025-07-24 14:48:32 - AnalysisServiceManager - INFO - 分析服务管理器初始化完成
2025-07-24 14:48:32 - src.utils.enhanced_analyzer - INFO - 增强分析器初始化完成
2025-07-24 14:48:32 - werkzeug - WARNING -  * Debugger is active!
2025-07-24 14:48:32 - werkzeug - INFO -  * Debugger PIN: 587-510-452
2025-07-24 14:49:23 - werkzeug - INFO -  * Detected change in '/Users/renyu/Documents/ai_project/document_analyzer/test_api_path_fix.py', reloading
2025-07-24 14:49:24 - werkzeug - INFO -  * Restarting with stat
2025-07-24 14:49:24 - system - INFO - ==================================================
2025-07-24 14:49:24 - system - INFO - 🚀 智能分析系统日志系统初始化完成
2025-07-24 14:49:24 - system - INFO - 📁 日志根目录: /Users/renyu/Documents/ai_project/document_analyzer/logs
2025-07-24 14:49:24 - system - INFO - 📊 日志级别: INFO
2025-07-24 14:49:24 - system - INFO - 📅 按日期轮转: 每天午夜自动轮转
2025-07-24 14:49:24 - system - INFO - 📂 按月分目录: logs/YYYY-MM/
2025-07-24 14:49:24 - system - INFO - 📝 主日志: logs/2025-07/app.log
2025-07-24 14:49:24 - system - INFO - 🔧 API日志: logs/2025-07/api_server.log
2025-07-24 14:49:24 - system - INFO - 🗂️ 保留天数: 7 天
2025-07-24 14:49:24 - system - INFO - ==================================================
2025-07-24 14:49:28 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-24 14:49:28 - src.corder_integration.langgraph.nodes.task_simple_splitting_node - INFO - ✅ 成功加载配置文件: config.yaml
2025-07-24 14:49:28 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-24 14:49:28 - src.corder_integration.langgraph.nodes.task_simple_splitting_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250724094351-pnjf4(编码智能体专用)
2025-07-24 14:49:28 - src.corder_integration.langgraph.nodes.task_simple_splitting_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-24 14:49:28 - src.utils.task_storage - INFO - 数据库初始化成功
2025-07-24 14:49:28 - markdown_storage - INFO - Markdown存储管理器初始化完成
2025-07-24 14:49:28 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-24 14:49:28 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-24 14:49:28 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-24 14:49:29 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-24 14:49:30 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-24 14:49:30 - WeaviateVectorDatabase - INFO - ✅ Weaviate连接成功: http://localhost:8080 (gRPC: 50051)
2025-07-24 14:49:30 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/schema/AnalyDesignDocuments "HTTP/1.1 200 OK"
2025-07-24 14:49:30 - WeaviateVectorDatabase - INFO - ✅ Weaviate集合已存在: AnalyDesignDocuments
2025-07-24 14:49:30 - AnalysisServiceManager - INFO - 初始化向量数据库: weaviate
2025-07-24 14:49:30 - sentence_transformers.SentenceTransformer - INFO - Use pytorch device_name: mps
2025-07-24 14:49:30 - sentence_transformers.SentenceTransformer - INFO - Load pretrained SentenceTransformer: BAAI/bge-large-zh
2025-07-24 14:49:38 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-24 14:49:39 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-24 14:49:40 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-24 14:49:40 - src.utils.weaviate_helper - INFO - 成功连接到 Weaviate: localhost:8080
2025-07-24 14:49:40 - AnalysisServiceManager - INFO - 分析服务管理器初始化完成
2025-07-24 14:49:40 - src.utils.enhanced_analyzer - INFO - 增强分析器初始化完成
2025-07-24 14:49:40 - werkzeug - WARNING -  * Debugger is active!
2025-07-24 14:49:40 - werkzeug - INFO -  * Debugger PIN: 587-510-452
2025-07-24 14:58:56 - system - INFO - ==================================================
2025-07-24 14:58:56 - system - INFO - 🚀 智能分析系统日志系统初始化完成
2025-07-24 14:58:56 - system - INFO - 📁 日志根目录: /Users/renyu/Documents/ai_project/document_analyzer/logs
2025-07-24 14:58:56 - system - INFO - 📊 日志级别: INFO
2025-07-24 14:58:56 - system - INFO - 📅 按日期轮转: 每天午夜自动轮转
2025-07-24 14:58:56 - system - INFO - 📂 按月分目录: logs/YYYY-MM/
2025-07-24 14:58:56 - system - INFO - 📝 主日志: logs/2025-07/app.log
2025-07-24 14:58:56 - system - INFO - 🔧 API日志: logs/2025-07/api_server.log
2025-07-24 14:58:56 - system - INFO - 🗂️ 保留天数: 7 天
2025-07-24 14:58:56 - system - INFO - ==================================================
2025-07-24 14:58:59 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-24 14:58:59 - src.corder_integration.langgraph.nodes.task_simple_splitting_node - INFO - ✅ 成功加载配置文件: config.yaml
2025-07-24 14:58:59 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-24 14:58:59 - src.corder_integration.langgraph.nodes.task_simple_splitting_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250724094351-pnjf4(编码智能体专用)
2025-07-24 14:58:59 - src.corder_integration.langgraph.nodes.task_simple_splitting_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-24 14:58:59 - src.utils.task_storage - INFO - 数据库初始化成功
2025-07-24 14:58:59 - markdown_storage - INFO - Markdown存储管理器初始化完成
2025-07-24 14:58:59 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-24 14:58:59 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-24 14:58:59 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-24 14:59:00 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-24 14:59:00 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-24 14:59:00 - WeaviateVectorDatabase - INFO - ✅ Weaviate连接成功: http://localhost:8080 (gRPC: 50051)
2025-07-24 14:59:00 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/schema/AnalyDesignDocuments "HTTP/1.1 200 OK"
2025-07-24 14:59:00 - WeaviateVectorDatabase - INFO - ✅ Weaviate集合已存在: AnalyDesignDocuments
2025-07-24 14:59:00 - AnalysisServiceManager - INFO - 初始化向量数据库: weaviate
2025-07-24 14:59:00 - sentence_transformers.SentenceTransformer - INFO - Use pytorch device_name: mps
2025-07-24 14:59:00 - sentence_transformers.SentenceTransformer - INFO - Load pretrained SentenceTransformer: BAAI/bge-large-zh
2025-07-24 14:59:09 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-24 14:59:12 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-24 14:59:12 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-24 14:59:12 - src.utils.weaviate_helper - INFO - 成功连接到 Weaviate: localhost:8080
2025-07-24 14:59:12 - AnalysisServiceManager - INFO - 分析服务管理器初始化完成
2025-07-24 14:59:12 - src.utils.enhanced_analyzer - INFO - 增强分析器初始化完成
2025-07-24 14:59:17 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:8082
 * Running on http://26.26.26.1:8082
2025-07-24 14:59:17 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-07-24 14:59:17 - werkzeug - INFO -  * Restarting with stat
2025-07-24 14:59:17 - system - INFO - ==================================================
2025-07-24 14:59:17 - system - INFO - 🚀 智能分析系统日志系统初始化完成
2025-07-24 14:59:17 - system - INFO - 📁 日志根目录: /Users/renyu/Documents/ai_project/document_analyzer/logs
2025-07-24 14:59:17 - system - INFO - 📊 日志级别: INFO
2025-07-24 14:59:17 - system - INFO - 📅 按日期轮转: 每天午夜自动轮转
2025-07-24 14:59:17 - system - INFO - 📂 按月分目录: logs/YYYY-MM/
2025-07-24 14:59:17 - system - INFO - 📝 主日志: logs/2025-07/app.log
2025-07-24 14:59:17 - system - INFO - 🔧 API日志: logs/2025-07/api_server.log
2025-07-24 14:59:17 - system - INFO - 🗂️ 保留天数: 7 天
2025-07-24 14:59:17 - system - INFO - ==================================================
2025-07-24 14:59:20 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-24 14:59:20 - src.corder_integration.langgraph.nodes.task_simple_splitting_node - INFO - ✅ 成功加载配置文件: config.yaml
2025-07-24 14:59:20 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-24 14:59:20 - src.corder_integration.langgraph.nodes.task_simple_splitting_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250724094351-pnjf4(编码智能体专用)
2025-07-24 14:59:20 - src.corder_integration.langgraph.nodes.task_simple_splitting_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-24 14:59:20 - src.utils.task_storage - INFO - 数据库初始化成功
2025-07-24 14:59:20 - markdown_storage - INFO - Markdown存储管理器初始化完成
2025-07-24 14:59:20 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-24 14:59:20 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-24 14:59:20 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-24 14:59:21 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-24 14:59:21 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-24 14:59:21 - WeaviateVectorDatabase - INFO - ✅ Weaviate连接成功: http://localhost:8080 (gRPC: 50051)
2025-07-24 14:59:21 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/schema/AnalyDesignDocuments "HTTP/1.1 200 OK"
2025-07-24 14:59:21 - WeaviateVectorDatabase - INFO - ✅ Weaviate集合已存在: AnalyDesignDocuments
2025-07-24 14:59:21 - AnalysisServiceManager - INFO - 初始化向量数据库: weaviate
2025-07-24 14:59:22 - sentence_transformers.SentenceTransformer - INFO - Use pytorch device_name: mps
2025-07-24 14:59:22 - sentence_transformers.SentenceTransformer - INFO - Load pretrained SentenceTransformer: BAAI/bge-large-zh
2025-07-24 14:59:30 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-24 14:59:31 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-24 14:59:31 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-24 14:59:31 - src.utils.weaviate_helper - INFO - 成功连接到 Weaviate: localhost:8080
2025-07-24 14:59:31 - AnalysisServiceManager - INFO - 分析服务管理器初始化完成
2025-07-24 14:59:31 - src.utils.enhanced_analyzer - INFO - 增强分析器初始化完成
2025-07-24 14:59:31 - werkzeug - WARNING -  * Debugger is active!
2025-07-24 14:59:31 - werkzeug - INFO -  * Debugger PIN: 587-510-452
2025-07-24 14:59:38 - src.apis.coder_agent_api - INFO - 开始处理文档: 链数中建一局_1753340378
2025-07-24 14:59:38 - src.apis.coder_agent_api - INFO - 项目唯一标识: 1231000004
2025-07-24 14:59:38 - src.apis.coder_agent_api - INFO - 文档长度: 7417 字符
2025-07-24 14:59:38 - src.apis.coder_agent_api - INFO - 使用LangGraph: True
2025-07-24 14:59:38 - src.apis.coder_agent_api - INFO - 代码输出路径: /Users/renyu/Documents/create_project
2025-07-24 14:59:38 - src.apis.coder_agent_api - INFO - 使用LangGraph工作流处理项目: 链数中建一局_1753340378
2025-07-24 14:59:38 - src.corder_integration.langgraph.workflow_orchestrator - INFO - 生成目标分支名称: 链数中建一局_1753340378 -> D_20250724_链数中建一局_1753340378
2025-07-24 14:59:38 - src.corder_integration.langgraph.workflow_orchestrator - INFO - 开始执行编码工作流: 链数中建一局_1753340378 -> /Users/renyu/Documents/create_project
2025-07-24 14:59:38 - src.corder_integration.langgraph.nodes.task_simple_splitting_node - INFO - 🚀 简化版任务拆分节点开始执行...
2025-07-24 14:59:38 - src.corder_integration.langgraph.nodes.task_simple_splitting_node - INFO - 🚀 开始简化版任务拆分
2025-07-24 14:59:38 - src.corder_integration.langgraph.nodes.task_simple_splitting_node - INFO - 📄 设计文档长度: 7416
2025-07-24 14:59:38 - src.corder_integration.langgraph.nodes.task_simple_splitting_node - INFO - 📋 项目名称: 链数中建一局_1753340378
2025-07-24 14:59:38 - src.corder_integration.langgraph.nodes.task_simple_splitting_node - INFO - 🏷️ 项目标识: 1231000004
2025-07-24 14:59:38 - src.corder_integration.langgraph.nodes.task_simple_splitting_node - INFO - 🎯 使用Jinja2模板生成任务...
2025-07-24 14:59:38 - src.corder_integration.langgraph.nodes.task_simple_splitting_node - INFO - 📝 渲染后的提示词长度: 22403
2025-07-24 14:59:38 - src.corder_integration.langgraph.nodes.task_simple_splitting_node - INFO - 📄 提示词内容:
你是资深任务管理专家，基于设计文档生成具体的开发任务。

详细设计文档：设计文档 - 一局对接链数优化V0.1
1. 系统架构设计
1.1 项目介绍
一局对接链数的项目上线后，核心企业反馈，希望就已推送至平台的数据，在核心企业内部系统内修改部分信息（如额度信息）后，使用原业务编号再次推送至平台。就目前的接口校验逻辑，相同业务编号的业务数据不可重复推送。因而，需要结合核心企业需求，对接口的校验逻辑进行调整。
建设目标及路线。调整接口校验逻辑，兼容核心企业重推数据的场景。
1.2 功能需求说明
1.2.1 链数额度功能调整
调整说明:本期，对原"链数额度"功能做如下调整：
- 功能名称由"链数额度"变更为"额度管理"；
- 页面右上方新增"组织单元额度"按钮，当且仅当当前登录企业为多组织企业时展示该按钮。用户点击"组织单元额度"按钮，则跳转至"组织单元额度"列表页。
- 列表新增字段"额度类型"，置于"额度名称"之后，若为链数额度则取值为"链数额度"。
1.2.2 新增组织单元额度功能
调整说明:本期在核心企业侧链数额度功能下，新增"组织单元额度"列表页。支持用户查询当前登录企业下的具体组织单元的链数额度、云信额度明细。
a.筛选字段：
序号	字段名	类型格式	长度	默认值	必填	规则
1	组织单元名称	文本输入框	-	-	-	模糊搜索
2	额度名称	文本输入框	-	-	-	模糊搜索
3	额度类型	下拉列表	-	链数额度	-	下拉选项：链数额度、云信额度、全部
b.汇总字段：
序号	字段名	类型格式	规则
1	总额度（元）	数值	满足筛选条件的列表数据的“已分配额度（元）”之和
2	已用额度（元）	数值	满足筛选条件的列表数据的“已用额度（元）”之和
3	可用额度（元）	数值	满足筛选条件的列表数据的“可用额度（元）”之和
备注：筛选条件更新后，汇总值需要同步更新计算。
c.列表字段：
序号	字段名	类型格式	规则
1	组织单元名称	字符串	无
2	额度名称	字符串	无
3	额度类型	字符串	无
4	已分配额度（元）	数值	无
5	已用额度（元）	数值	无
6	可用额度（元）	数值	无
备注：列表默认按照组织单元名称为主要关键字、额度类型为次要关键字降序排列。

1.3 总体架构
采用微服务架构模式，实现松耦合、高可扩展的系统设计：
- 涉及2个后端服务：
1. 用户服务：zqyl-user-center-service
2. 确权开立服务：crcl-open

- 涉及2个数据库：
1. 用户数据库：MySQL 
2. 缓存：Redis

1.4 技术栈选型
- 后端框架：Spring Boot 2.7.x + Spring Cloud 2021.x
- 数据访问：MyBatis Plus 3.5.x
- 数据库：MySQL 8.0
- 缓存：Redis 6.0
- 消息队列：RabbitMQ 3.8
- 服务发现：Nacos
- 配置中心：Nacos
- 后端分页：pageHelper
- 部署：将代码提交到git分支即可

2. 服务设计

2.1 用户服务 (zqyl-user-center-service)
职责：用户管理、权限控制、角色管理

2.1.1 核心模块：
- 组织单元管理

2.1.2 API设计：
2.1.2.1 新增接口：
uri : GET /general/multiorgManage/queryCompanyUnitList    
method: GET
description:查询企业组织单元列表
入参示例：
{
  "unitCode": "sdf1",  #组织单元编号
  "openStatus": 1 ,    #组织单元状态 1：正常；0：禁用 默认全部
  "unitList" :[1,2,234]  #组织单元id 必传 
}

返参示例：
{
  "data": [
    {
      "unitId" : 234234 ,     #组织单元id 必传 
      "unitTypeDicType" : 1 , #组织单元类型 1：开立，2：支付
      "unitTypeId" : 12   ,   #组织单元类型表id 
      "openStatus" : 1   ,    #组织单元状态  1：正常；0：禁用 默认全部
      "unitCode" : "sdfsdfsd",#组织编号
      "unitName" : "测试单元" #组织单元名称
    }
  ]
}

2.1.3 数据库表设计：
CREATE TABLE t_cust_multiorg_unit(
  id bigint(20) NOT NULL COMMENT '主键id...
2025-07-24 15:01:20 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 15:01:20 - src.corder_integration.langgraph.nodes.task_simple_splitting_node - INFO - ✅ LLM响应接收完成，长度: 12357
2025-07-24 15:01:20 - src.corder_integration.langgraph.nodes.task_simple_splitting_node - INFO - 📄 LLM完整响应内容:
```json
{
  "tasks": [
    {
      "task_id": "task_001",
      "project_task_id": "一局对接链数优化V0.1-001",
      "service_name": "系统",
      "task_type": "git_extraction",
      "priority": 1,
      "dependencies": [],
      "estimated_duration": "5分钟",
      "description": "从设计文档提取 GitLab 仓库地址",
      "implementation_details": "解析设计文档 3.1 节，提取用户服务 http://localhost:30000/ls/zqyl-user-center-service.git 和确权开立服务 http://localhost:30000/ls/crcl-open.git 仓库地址",
      "deliverables": ["GitLab 仓库地址清单", "仓库访问验证报告"],
      "completion_criteria": "成功提取并验证两个 GitLab 仓库地址可访问性",
      "parameters": {
        "repositories": ["zqyl-user-center-service", "crcl-open"]
      }
    },
    {
      "task_id": "task_002",
      "project_task_id": "一局对接链数优化V0.1-002",
      "service_name": "用户服务",
      "task_type": "git_clone",
      "priority": 2,
      "dependencies": ["task_001"],
      "estimated_duration": "10分钟",
      "description": "下载用户服务代码到 /Users/renyu/Documents/create_project/链数中建一局_1753340378/zqyl-user-center-service",
      "implementation_details": "使用 git clone 命令下载用户服务代码到指定目录，确保项目结构完整可编译",
      "deliverables": ["用户服务源码目录"],
      "completion_criteria": "代码下载完成，项目目录存在且包含 pom.xml 文件",
      "parameters": {
        "git_url": "http://localhost:30000/ls/zqyl-user-center-service.git",
        "local_path": "/Users/renyu/Documents/create_project/链数中建一局_1753340378/zqyl-user-center-service"
      }
    },
    {
      "task_id": "task_003",
      "project_task_id": "一局对接链数优化V0.1-003",
      "service_name": "确权开立服务",
      "task_type": "git_clone",
      "priority": 2,
      "dependencies": ["task_001"],
      "estimated_duration": "10分钟",
      "description": "下载确权开立服务代码到 /Users/renyu/Documents/create_project/链数中建一局_1753340378/crcl-open",
      "implementation_details": "使用 git clone 命令下载确权开立服务代码到指定目录，确保项目结构完整可编译",
      "deliverables": ["确权开立服务源码目录"],
      "completion_criteria": "代码下载完成，项目目录存在且包含 pom.xml 文件",
      "parameters": {
        "git_url": "http://localhost:30000/ls/crcl-open.git",
        "local_path": "/Users/renyu/Documents/create_project/链数中建一局_1753340378/crcl-open"
      }
    },
    {
      "task_id": "task_004",
      "project_task_id": "一局对接链数优化V0.1-004",
      "service_name": "用户服务",
      "task_type": "code_analysis",
      "priority": 3,
      "dependencies": ["task_002"],
      "estimated_duration": "20分钟",
      "description": "分析用户服务代码结构，确定 MultiorgManageController 添加位置",
      "implementation_details": "分析项目 package 结构和 controller 层，找到或创建 MultiorgManageController 类的最佳位置",
      "deliverables": ["代码结构从 Controller 层开始到数据获取的完整路径"],
      "completion_criteria": "确定 MultiorgManageController 的包路径和文件位置，明确依赖的 Service 层结构",
      "parameters": {
        "project_path": "/Users/renyu/Documents/create_project/链数中建一局_1753340378/zqyl-user-center-service",
        "target_controller": "MultiorgManageController",
        "target_api": "/general/multiorgManage/queryCompanyUnitList"
      }
    },
    {
      "task_id": "task_005",
      "project_task_id": "一局对接链数优化V0.1-005",
      "service_name": "确权开立服务",
      "task_type": "code_analysis",
      "priority": 3,
      "dependencies": ["task_003"],
      "estimated_duration": "20分钟",
      "description": "分析确权开立服务代码结构，确定 LsLimitController 添加位置",
      "implementation_details": "分析项目 package 结构和 controller 层，找到或创建 LsLimitController 类的最佳位置，支持两个接口开发",
      "deliverables": ["代码结构从 Controller 层开始到数据获取的完整路径", "Feign 客户端配置方案"],
      "completion_criteria": "确定 LsLimitController 的包路径和文件位置，明确服务间调用的 Feign 配置",
      "parameters": {
        "project_path": "/Users/renyu/Documents/create_project/链数中建一局_1753340378/crcl-open",
        "target_controller": "LsLimitController",
        "target_apis": ["/crcl-open-api/lsLimit/listUnitLimitByCompanyId", "/crcl-open-api/lsLimit/listUnitLimitByCompanyIdExport"]
      }
    },
    {
      "task_id": "task_006",
      "project_task_id": "一局对接链数优化V0.1-006",
      "service_name": "用户服务",
      "task_type": "config",
      "priority": 4,
      "dependencies": ["task_004"],
      "estimated_duration": "15分钟",
      "description": "配置用户服务数据库连接：jdbc:mysql://localhost:6446/dbwebappdb",
      "implementation_details": "修改 application.yml 文件，配置数据库连接信息包括 URL、用户名密码和连接池设置",
      "deliverables": ["数据库配置文件", "连接测试报告"],
      "completion_criteria": "application.yml 文件已更新，数据库连接配置正确且可连通",
      "parameters": {
        "config_file": "/Users/renyu/Documents/create_project/链数中建一局_1753340378/zqyl-user-center-service/src/main/resources/application.yml",
        "database_url": "jdbc:mysql://localhost:6446/dbwebappdb?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC&characterEncoding=utf8&useUnicode=true",
        "username": "dbwebapp",
        "password": "dbwebapp"
      }
    },
    {
      "task_id": "task_007",
      "project_task_id": "一局对接链数优化V0.1-007",
      "service_name": "用户服务",
      "task_type": "database",
      "priority": 5,
      "dependencies": ["task_006"],
      "estimated_duration": "15分钟",
      "description": "创建 t_cust_multiorg_unit 表，包含 id, company_id, unit_code, unit_name 等字段",
      "implementation_details": "编写建表 SQL 脚本，定义主键、索引和字段约束，创建对应的 Entity 和 Mapper 文件",
      "deliverables": ["建表 SQL 脚本", "Entity 实体类", "Mapper 接口文件"],
      "completion_criteria": "表结构创建成功，Entity 和 Mapper 文件可正常编译，支持基本 CRUD 操作",
      "parameters": {
        "table_name": "t_cust_multiorg_unit",
        "sql_location": "src/main/resources/sql/t_cust_multiorg_unit.sql"
      }
    },
    {
      "task_id": "task_008",
      "project_task_id": "一局对接链数优化V0.1-008",
      "service_name": "用户服务",
      "task_type": "api",
      "priority": 6,
      "dependencies": ["task_007"],
      "estimated_duration": "60分钟",
      "description": "实现 GET /general/multiorgManage/queryCompanyUnitList 接口",
      "implementation_details": "在 MultiorgManageController 中实现查询接口，支持条件查询和分页，返回规定的字段格式",
      "deliverables": ["MultiorgManageController 类", "Service 业务逻辑层", "接口文档"],
      "completion_criteria": "接口可正常访问，返回数据格式符合规范，支持条件查询和分页功能",
      "parameters": {
        "project_path": "/Users/renyu/Documents/create_project/链数中建一局_1753340378/zqyl-user-center-service",
        "api_path": "/general/multiorgManage/queryCompanyUnitList",
        "http_method": "GET",
        "content_type": "application/json",
        "request_params": {
          "unitCode": "组织单元编号(可选)",
          "openStatus": "组织单元状态 1：正常；0：禁用(可选)",
          "unitList": "组织单元 id 列表(可选)"
        },
        "response_params": {
          "unitId": "组织单元 id",
          "unitTypeDicType": "组织单元类型 1：开立，2：支付",
          "unitTypeId": "组织单元类型表 id",
          "openStatus": "组织单元状态 1：正常；0：禁用",
          "unitCode": "组织单元编号",
          "unitName": "组织单元名称"
        },
        "business_logic": "根据查询条件查询组织单元信息，支持按编码、状态等条件筛选",
        "data_source": "t_cust_multiorg_unit 表",
        "validation_rules": {
          "unitCode": "长度不超过 50 字符",
          "openStatus": "取值范围 0-1"
        }
      }
    },
    {
      "task_id": "task_009",
      "project_task_id": "一局对接链数优化V0.1-009",
      "service_name": "确权开立服务",
      "task_type": "api",
      "priority": 7,
      "dependencies": ["task_008"],
      "estimated_duration": "90分钟",
      "description": "实现 GET /crcl-open-api/lsLimit/listUnitLimitByCompanyId 接口，调用用户服务",
      "implementation_details": "在 LsLimitController 中实现额度查询接口，配置 Feign 客户端调用用户服务接口获取组织单元信息",
      "deliverables": ["LsLimitController 类", "Feign 客户端配置", "业务逻辑层"],
      "completion_criteria": "接口可正常访问，能成功调用用户服务，返回额度数据格式正确",
      "parameters": {
        "project_path": "/Users/renyu/Documents/create_project/链数中建一局_1753340378/crcl-open",
        "api_path": "/crcl-open-api/lsLimit/listUnitLimitByCompanyId",
        "http_method": "GET",
        "content_type": "application/json",
        "request_params": {
          "gwCompanyId": "当前登录企业 id(必填)",
          "unitName": "组织单元名称(模糊搜索)(可选)",
          "limitSource": "额度名称(模糊搜索)(可选)",
          "bizType": "额度类型：10 云信额度，80 链数额度(可选，默认 80)",
          "page": "页码(必填)",
          "pageRow": "每页记录数(必填)"
        },
        "response_params": {
          "totalLimitAmt": "总额度(元)",
          "usedLimitAmt": "已用额度(元)",
          "usableLimitAmt": "可用额度(元)",
          "unitLimitListDetail": "额度信息列表"
        },
        "business_logic": "根据公司 ID 和筛选条件查询组织单元额度信息，调用用户服务 /general/multiorgManage/queryCompanyUnitList 接口获取组织单元详细信息；采用 pagehelper 进行分页；列表默认按照组织单元名称为主要关键字、额度类型为次要关键字降序排列；筛选条件更新后，汇总值需要同步更新计算",
        "data_source": "本地额度表 + 用户服务接口",
        "validation_rules": {
          "gwCompanyId": "必填，数值类型",
          "bizType": "可选，取值 10 或 80",
          "page": "正整数，默认 1",
          "pageRow": "正整数，范围 1-100"
        }
      }
    },
    {
      "task_id": "task_010",
      "project_task_id": "一局对接链数优化V0.1-010",
      "service_name": "确权开立服务",
      "task_type": "api",
      "priority": 8,
      "dependencies": ["task_009"],
      "estimated_duration": "45分钟",
      "description": "实现 GET /crcl-open-api/lsLimit/listUnitLimitByCompanyIdExport 导出接口",
      "implementation_details": "在 LsLimitController 中实现 Excel 导出接口，复用 listUnitLimitByCompanyId 的数据逻辑",
      "deliverables": ["导出接口方法", "Excel 工具类", "导出模板文件"],
      "completion_criteria": "接口可正常访问，能成功导出 Excel 文件，表头和数据格式正确",
      "parameters": {
        "project_path": "/Users/renyu/Documents/create_project/链数中建一局_1753340378/crcl-open",
        "api_path": "/crcl-open-api/lsLimit/listUnitLimitByCompanyIdExport",
        "http_method": "GET",
        "content_type": "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
        "request_params": {
          "gwCompanyId": "当前登录企业 id(必填)",
          "unitName": "组织单元名称(模糊搜索)(可选)",
          "limitSource": "额度名称(模糊搜索)(可选)",
          "bizType": "额度类型：10 云信额度，80 链数额度(可选，默认 80)",
          "page": "页码(必填)",
          "pageRow": "每页记录数(必填)"
        },
        "response_params": {
          "flag": "0 文件生成失败，1 文件生成成功",
          "msg": "flag=0 时的提示内容",
          "data": "flag=1 时的文件下载地址"
        },
        "business_logic": "复用 listUnitLimitByCompanyId 接口的查询逻辑，将结果导出为 Excel 格式；文件生成在本地目录，采用本地链接形式返回路径；文件类型为 Excel 列表，文件类型：xlsx；列表头列内容：组织单元名称、额度名称、额度类型、已分配额度（元）、已用额度（元）、可用额度（元）；需要调用用户服务 /general/multiorgManage/queryCompanyUnitList 接口获取组织单元详细信息",
        "data_source": "调用 listUnitLimitByCompanyId 接口获取数据",
        "validation_rules": {
          "gwCompanyId": "必填，数值类型",
          "bizType": "可选，取值 10 或 80"
        }
      }
    },
    {
      "task_id": "task_011",
      "project_task_id": "一局对接链数优化V0.1-011",
      "service_name": "系统",
      "task_type": "integration_test",
      "priority": 9,
      "dependencies": ["task_008", "task_009", "task_010"],
      "estimated_duration": "30分钟",
      "description": "测试确权开立服务调用用户服务接口的完整流程",
      "implementation_details": "编写集成测试用例，验证服务间调用正确性和数据完整性",
      "deliverables": ["集成测试用例", "测试数据脚本", "测试报告"],
      "completion_criteria": "所有测试用例通过，接口调用链路正常，数据返回格式正确",
      "parameters": {
        "test_scenarios": ["组织单元额度查询测试", "额度列表导出测试"],
        "test_data": {"gwCompanyId": 1, "unitName": "测试单元", "bizType": 80}
      }
    },
    {
      "task_id": "task_012",
      "project_task_id": "一局对接链数优化V0.1-012",
      "service_name": "系统",
      "task_type": "deployment",
      "priority": 10,
      "dependencies": ["task_011"],
      "estimated_duration": "20分钟",
      "description": "提交代码到 GitLab 仓库，commit message: feat: 新增组织单元额度管理功能",
      "implementation_details": "执行 git add、git commit 和 git push 命令，提交所有新增和修改的代码文件",
      "deliverables": ["Git 提交记录", "代码合并报告", "部署文档"],
      "completion_criteria": "代码成功提交到 GitLab 仓库，commit 信息清晰，无冲突",
      "parameters": {
        "repositories": [
          {"path": "/Users/renyu/Documents/create_project/链数中建一局_1753340378/zqyl-user-center-service", "changes": "新增组织单元查询接口"},
          {"path": "/Users/renyu/Documents/create_project/链数中建一局_1753340378/crcl-open", "changes": "新增组织单元额度列表和导出接口"}
        ]
      }
    }
  ],
  "task_summary": {
    "total_tasks": 12,
    "execution_phases": [
      {"phase": "代码管理", "tasks": ["task_001", "task_002", "task_003"]},
      {"phase": "结构分析", "tasks": ["task_004", "task_005"]},
      {"phase": "环境配置", "tasks": ["task_006", "task_007"]},
      {"phase": "接口开发", "tasks": ["task_008", "task_009", "task_010"]},
      {"phase": "测试部署", "tasks": ["task_011", "task_012"]}
    ]
  },
  "summary": "生成任务：GitLab 代码下载->结构分析->环境配置->接口开发->测试部署。严格使用设计文档中的真实接口路径和参数，确保先开发用户服务接口，再开发依赖它的确权开立服务接口。"
}
```
2025-07-24 15:01:20 - src.corder_integration.langgraph.nodes.task_simple_splitting_node - INFO - ✅ JSON解析成功，数据类型: <class 'dict'>
2025-07-24 15:01:20 - src.corder_integration.langgraph.nodes.task_simple_splitting_node - INFO - 📋 从JSON中提取的任务数量: 12
2025-07-24 15:01:20 - src.corder_integration.langgraph.nodes.task_simple_splitting_node - INFO - ✅ 已为 12 个任务添加项目标识: 1231000004
2025-07-24 15:01:20 - src.corder_integration.langgraph.nodes.task_simple_splitting_node - INFO - ✅ 任务拆分完成，生成 12 个任务
2025-07-24 15:01:20 - src.corder_integration.langgraph.nodes.task_simple_splitting_node - INFO - 📋 任务 1: git_extraction - 从设计文档提取 GitLab 仓库地址...
2025-07-24 15:01:20 - src.corder_integration.langgraph.nodes.task_simple_splitting_node - INFO - 📋 任务 2: git_clone - 下载用户服务代码到 /Users/renyu/Documents/create_project/链数...
2025-07-24 15:01:20 - src.corder_integration.langgraph.nodes.task_simple_splitting_node - INFO - 📋 任务 3: git_clone - 下载确权开立服务代码到 /Users/renyu/Documents/create_project/...
2025-07-24 15:01:20 - src.corder_integration.langgraph.nodes.task_simple_splitting_node - INFO - 📋 还有 9 个任务未显示
2025-07-24 15:01:20 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-24 15:01:20 - src.corder_integration.langgraph.nodes.task_simple_splitting_node - INFO - 🔄 将项目 1231000004 的旧任务设置为过期状态...
2025-07-24 15:01:20 - src.corder_integration.langgraph.nodes.task_simple_splitting_node - INFO - ✅ 成功将 12 个旧任务设置为过期状态
2025-07-24 15:01:20 - src.corder_integration.langgraph.nodes.task_simple_splitting_node - INFO - 💾 开始保存 12 个任务到数据库...
2025-07-24 15:01:20 - src.corder_integration.langgraph.nodes.task_simple_splitting_node - INFO - ✅ 任务已保存到数据库，共 12 个
2025-07-24 15:01:20 - src.corder_integration.langgraph.nodes.task_simple_splitting_node - INFO - ✅ 简化版任务拆分完成，识别 3 个服务
2025-07-24 15:01:20 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🚀 Git管理节点开始执行...
2025-07-24 15:01:20 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-24 15:01:20 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🎯 git_management_node 开始执行任务...
2025-07-24 15:01:20 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 📋 找到 3 个可执行任务
2025-07-24 15:01:20 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🚀 开始执行任务: task_001 (git_extraction)
2025-07-24 15:01:20 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_001 已被 git_management_node 领取
2025-07-24 15:01:20 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🔍 执行Git提取任务: task_001
2025-07-24 15:01:20 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 📄 提取源文本: 解析设计文档 3.1 节，提取用户服务 http://localhost:30000/ls/zqyl-user-center-service.git 和确权开立服务 http://localhost:30000/ls/crcl-open.git 仓库地址 从设计文档提取 GitLab 仓库地址...
2025-07-24 15:01:20 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🔍 开始从文本提取Git URL...
2025-07-24 15:01:20 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🔗 找到Git仓库: http://localhost:30000/ls/zqyl-user-center-service.git
2025-07-24 15:01:20 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🔗 找到Git仓库: http://localhost:30000/ls/crcl-open.git
2025-07-24 15:01:20 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 提取到 2 个Git仓库
2025-07-24 15:01:20 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_001 状态更新为 completed
2025-07-24 15:01:20 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 任务 task_001 执行成功
2025-07-24 15:01:20 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🚀 开始执行任务: task_002 (git_clone)
2025-07-24 15:01:20 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_002 已被 git_management_node 领取
2025-07-24 15:01:20 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 📥 执行Git克隆任务: task_002
2025-07-24 15:01:20 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🔍 任务参数中无repo_url，尝试从git_extraction任务结果获取...
2025-07-24 15:01:20 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 📋 从任务 task_001 的parameters中获取到 2 个仓库
2025-07-24 15:01:20 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 通过名称匹配找到仓库: zqyl-user-center-service
2025-07-24 15:01:20 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 从git_extraction结果获取到仓库地址: http://localhost:30000/ls/zqyl-user-center-service.git
2025-07-24 15:01:20 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🌿 生成新分支名称: D_202507241501_defaultproject
2025-07-24 15:01:20 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 📥 开始克隆仓库: http://localhost:30000/ls/zqyl-user-center-service.git -> /Users/renyu/Documents/create_project/default_project/zqyl-user-center-service
2025-07-24 15:01:20 - src.corder_integration.langgraph.nodes.git_management_node - WARNING - ⚠️ 目标目录已存在，将清理后重新克隆: /Users/renyu/Documents/create_project/default_project/zqyl-user-center-service
2025-07-24 15:01:20 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 已清理旧目录: /Users/renyu/Documents/create_project/default_project/zqyl-user-center-service
2025-07-24 15:01:20 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 已创建并切换到新分支: D_202507241501_defaultproject
2025-07-24 15:01:20 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 仓库克隆成功: /Users/renyu/Documents/create_project/default_project/zqyl-user-center-service
2025-07-24 15:01:20 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_002 状态更新为 completed
2025-07-24 15:01:20 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 任务 task_002 执行成功
2025-07-24 15:01:20 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🚀 开始执行任务: task_003 (git_clone)
2025-07-24 15:01:20 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_003 已被 git_management_node 领取
2025-07-24 15:01:20 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 📥 执行Git克隆任务: task_003
2025-07-24 15:01:20 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🔍 任务参数中无repo_url，尝试从git_extraction任务结果获取...
2025-07-24 15:01:20 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 📋 从任务 task_001 的parameters中获取到 2 个仓库
2025-07-24 15:01:20 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 通过名称匹配找到仓库: zqyl-user-center-service
2025-07-24 15:01:20 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 从git_extraction结果获取到仓库地址: http://localhost:30000/ls/zqyl-user-center-service.git
2025-07-24 15:01:20 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🌿 生成新分支名称: D_202507241501_defaultproject
2025-07-24 15:01:20 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 📥 开始克隆仓库: http://localhost:30000/ls/zqyl-user-center-service.git -> /Users/renyu/Documents/create_project/default_project/zqyl-user-center-service
2025-07-24 15:01:20 - src.corder_integration.langgraph.nodes.git_management_node - WARNING - ⚠️ 目标目录已存在，将清理后重新克隆: /Users/renyu/Documents/create_project/default_project/zqyl-user-center-service
2025-07-24 15:01:20 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 已清理旧目录: /Users/renyu/Documents/create_project/default_project/zqyl-user-center-service
2025-07-24 15:01:20 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 已创建并切换到新分支: D_202507241501_defaultproject
2025-07-24 15:01:20 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 仓库克隆成功: /Users/renyu/Documents/create_project/default_project/zqyl-user-center-service
2025-07-24 15:01:20 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_003 状态更新为 completed
2025-07-24 15:01:20 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 任务 task_003 执行成功
2025-07-24 15:01:20 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ Git管理任务执行完成，共处理 3 个任务
2025-07-24 15:01:20 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🚀 基于提取结果自动克隆 2 个仓库...
2025-07-24 15:01:20 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 📥 自动克隆仓库: http://localhost:30000/ls/zqyl-user-center-service.git -> /Users/renyu/Documents/create_project/链数中建一局_1753340378/zqyl-user-center-service
2025-07-24 15:01:20 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 📥 开始克隆仓库: http://localhost:30000/ls/zqyl-user-center-service.git -> /Users/renyu/Documents/create_project/链数中建一局_1753340378/zqyl-user-center-service
2025-07-24 15:01:21 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 已创建并切换到新分支: D_202507241501_链数中建一局
2025-07-24 15:01:21 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 仓库克隆成功: /Users/renyu/Documents/create_project/链数中建一局_1753340378/zqyl-user-center-service
2025-07-24 15:01:21 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 自动克隆成功: zqyl-user-center-service
2025-07-24 15:01:21 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 📥 自动克隆仓库: http://localhost:30000/ls/crcl-open.git -> /Users/renyu/Documents/create_project/链数中建一局_1753340378/crcl-open
2025-07-24 15:01:21 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 📥 开始克隆仓库: http://localhost:30000/ls/crcl-open.git -> /Users/renyu/Documents/create_project/链数中建一局_1753340378/crcl-open
2025-07-24 15:01:21 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 已创建并切换到新分支: D_202507241501_链数中建一局
2025-07-24 15:01:21 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 仓库克隆成功: /Users/renyu/Documents/create_project/链数中建一局_1753340378/crcl-open
2025-07-24 15:01:21 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 自动克隆成功: crcl-open
2025-07-24 15:01:21 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ Git管理节点完成 - 提取: 2 个仓库, 克隆: 4 个仓库, 仓库初始化状态: True
2025-07-24 15:01:21 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-24 15:01:21 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-24 15:01:21 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: config.yaml
2025-07-24 15:01:21 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-24 15:01:21 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250724094351-pnjf4(编码智能体专用)
2025-07-24 15:01:21 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-24 15:01:21 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-24 15:01:21 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-24 15:01:21 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 增强版模板+AI生成器初始化完成
2025-07-24 15:01:21 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 增强版模板+AI代码生成器初始化完成
2025-07-24 15:01:21 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 从工作流状态获取设计文档 (7416 字符)
2025-07-24 15:01:21 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🏷️ 智能编码节点获取项目标识: 1231000004
2025-07-24 15:01:21 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-24 15:01:21 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🏷️ 过滤项目任务标识: 1231000004
2025-07-24 15:01:21 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-24 15:01:21 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 第1轮找到 7 个可执行任务
2025-07-24 15:01:21 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 开始执行任务: task_004 (code_analysis)
2025-07-24 15:01:21 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_004 已被 intelligent_coding_node 领取
2025-07-24 15:01:21 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行代码分析任务: task_004
2025-07-24 15:01:21 - src.utils.java_code_analyzer - INFO - 🔍 开始分析企业级Java项目: /Users/renyu/Documents/create_project/链数中建一局_1753340378/zqyl-user-center-service
2025-07-24 15:01:22 - src.utils.java_code_analyzer - INFO - ✅ 企业级项目分析完成，共分析 408 个Java文件
2025-07-24 15:01:22 - src.utils.java_code_analyzer - INFO - 📄 企业级分析报告已导出: outputs/用户服务_java_analysis_20250724_150122.md
2025-07-24 15:01:23 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_004 状态更新为 completed
2025-07-24 15:01:23 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 任务 task_004 执行成功
2025-07-24 15:01:23 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 开始执行任务: task_005 (code_analysis)
2025-07-24 15:01:23 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_005 已被 intelligent_coding_node 领取
2025-07-24 15:01:23 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行代码分析任务: task_005
2025-07-24 15:01:23 - src.utils.java_code_analyzer - INFO - 🔍 开始分析企业级Java项目: /Users/renyu/Documents/create_project/链数中建一局_1753340378/crcl-open
2025-07-24 15:01:27 - src.utils.java_code_analyzer - INFO - ✅ 企业级项目分析完成，共分析 2262 个Java文件
2025-07-24 15:01:28 - src.utils.java_code_analyzer - INFO - 📄 企业级分析报告已导出: outputs/确权开立服务_java_analysis_20250724_150127.md
2025-07-24 15:01:28 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_005 状态更新为 completed
2025-07-24 15:01:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 任务 task_005 执行成功
2025-07-24 15:01:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 开始执行任务: task_006 (config)
2025-07-24 15:01:28 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_006 已被 intelligent_coding_node 领取
2025-07-24 15:01:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ⚙️ 执行配置生成任务: task_006
2025-07-24 15:01:28 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_006 状态更新为 completed
2025-07-24 15:01:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 任务 task_006 执行成功
2025-07-24 15:01:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 开始执行任务: task_007 (database)
2025-07-24 15:01:28 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_007 已被 intelligent_coding_node 领取
2025-07-24 15:01:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🗄️ 执行数据库设计任务: task_007
2025-07-24 15:01:28 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_007 状态更新为 completed
2025-07-24 15:01:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 任务 task_007 执行成功
2025-07-24 15:01:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 开始执行任务: task_008 (api)
2025-07-24 15:01:28 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_008 已被 intelligent_coding_node 领取
2025-07-24 15:01:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🌐 执行API接口生成任务: task_008
2025-07-24 15:01:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 解析的接口信息:
2025-07-24 15:01:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 接口名称: CompanyUnitList
2025-07-24 15:01:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - API路径: /general/multiorgManage/queryCompanyUnitList
2025-07-24 15:01:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - HTTP方法: GET
2025-07-24 15:01:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 输入参数: 3个
2025-07-24 15:01:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 输出参数: 6个
2025-07-24 15:01:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 业务描述: 根据查询条件查询组织单元信息，支持按编码、状态等条件筛选
2025-07-24 15:01:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 在 /Users/renyu/Documents/create_project/链数中建一局_1753340378/zqyl-user-center-service 中查找最佳Java项目路径...
2025-07-24 15:01:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 目标服务名: 用户服务
2025-07-24 15:01:28 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 15:01:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 发现Java项目: user-basic-general
2025-07-24 15:01:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       🎯 相对路径: zqyl-user-center-service/user-basic-service/user-basic-general
2025-07-24 15:01:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       📊 Java文件: 408个
2025-07-24 15:01:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       📐 目录深度: 3
2025-07-24 15:01:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       🏆 优先级分数: 650
2025-07-24 15:01:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 排序后的候选路径（前3个）:
2025-07-24 15:01:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    1. zqyl-user-center-service/user-basic-service/user-basic-general (优先级: 650)
2025-07-24 15:01:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 选择最佳Java项目路径:
2025-07-24 15:01:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 完整路径: /Users/renyu/Documents/create_project/链数中建一局_1753340378/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general
2025-07-24 15:01:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📋 相对路径: zqyl-user-center-service/user-basic-service/user-basic-general
2025-07-24 15:01:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    🏆 最终优先级: 650
2025-07-24 15:01:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📁 基础项目路径: /Users/renyu/Documents/create_project/链数中建一局_1753340378/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general
2025-07-24 15:01:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 从API路径 /general/multiorgManage/queryCompanyUnitList 提取关键字: general
2025-07-24 15:01:28 - src.corder_integration.config.domain_mapping_config - INFO - ✅ 成功加载业务领域映射配置: /Users/renyu/Documents/ai_project/document_analyzer/src/corder_integration/config/domain_mapping.yaml
2025-07-24 15:01:28 - src.corder_integration.config.domain_mapping_config - INFO - 🔍 映射API关键字到业务领域: general
2025-07-24 15:01:28 - src.corder_integration.config.domain_mapping_config - INFO - ✅ 精确匹配: general -> general
2025-07-24 15:01:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 API关键字映射: general -> general
2025-07-24 15:01:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🤖 使用大模型智能匹配Controller: general (API: /general/multiorgManage/queryCompanyUnitList)
2025-07-24 15:01:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功扫描到 26 个Controller文件
2025-07-24 15:01:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 找到 26 个Controller文件
2025-07-24 15:01:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🤖 调用volcengine分析Controller相似度...
2025-07-24 15:01:35 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 15:01:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - ERROR - ❌ LLM响应JSON解析失败: Expecting value: line 1 column 1 (char 0)
2025-07-24 15:01:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 使用规则匹配方式查找Controller: general
2025-07-24 15:01:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 智能匹配找到相似Controller: SearchCompanyGeneralController
2025-07-24 15:01:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 Controller路径: /Users/renyu/Documents/create_project/链数中建一局_1753340378/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general/src/main/java/com/yljr/user/basicgeneral/interfaces/controller/company/SearchCompanyGeneralController.java
2025-07-24 15:01:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    🔢 相似度分数: 0.77
2025-07-24 15:01:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    💡 匹配原因: 类名包含关键字: general, 路径包含关键字: general, 路径片段匹配: ['general']
2025-07-24 15:01:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 分析目标项目: /Users/renyu/Documents/create_project/链数中建一局_1753340378/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general/src/main/java
2025-07-24 15:01:35 - src.apis.project_analysis_api - INFO - 🔍 开始分析项目用于代码生成: /Users/renyu/Documents/create_project/链数中建一局_1753340378/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general/src/main/java
2025-07-24 15:01:35 - src.apis.project_analysis_api - INFO - 🔍 在 /Users/renyu/Documents/create_project/链数中建一局_1753340378/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general/src/main/java 中查找最佳Java项目路径...
2025-07-24 15:01:35 - src.apis.project_analysis_api - INFO - 🎯 目标服务名: 用户服务
2025-07-24 15:01:35 - src.apis.project_analysis_api - WARNING - ⚠️ 在 /Users/renyu/Documents/create_project/链数中建一局_1753340378/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general/src/main/java 中未找到包含Java文件的src/main/java结构
2025-07-24 15:01:35 - src.apis.project_analysis_api - INFO - 📂 实际分析路径: /Users/renyu/Documents/create_project/链数中建一局_1753340378/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general/src/main/java
2025-07-24 15:01:35 - src.utils.java_code_analyzer - INFO - 🔍 开始分析企业级Java项目: /Users/renyu/Documents/create_project/链数中建一局_1753340378/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general/src/main/java
2025-07-24 15:01:36 - src.utils.java_code_analyzer - INFO - ✅ 企业级项目分析完成，共分析 408 个Java文件
2025-07-24 15:01:36 - src.apis.project_analysis_api - INFO - 📦 动态检测到基础包: com.yljr.user.basicgeneral (出现408次)
2025-07-24 15:01:36 - src.apis.project_analysis_api - INFO - 📦 动态检测到基础包: com.yljr.user.basicgeneral (出现408次)
2025-07-24 15:01:36 - src.apis.project_analysis_api - INFO - 📋 提取到26个Controller的详细信息
2025-07-24 15:01:36 - src.apis.project_analysis_api - INFO - 📦 动态检测到基础包: com.yljr.user.basicgeneral (出现408次)
2025-07-24 15:01:36 - src.apis.project_analysis_api - INFO - ✅ 项目分析完成，已提取代码生成上下文
2025-07-24 15:01:36 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 从编码代理获取设计文档内容 (7416 字符)
2025-07-24 15:01:36 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 设计文档内容已添加到项目上下文 (7416 字符)
2025-07-24 15:01:36 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 使用详细Controller信息，共26个Controller
2025-07-24 15:01:36 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 Controller关联性分析完成:
2025-07-24 15:01:36 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 总Controller数: 26
2025-07-24 15:01:36 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 相关Controller数: 2
2025-07-24 15:01:36 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 最高关联度: 0.45
2025-07-24 15:01:36 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 Controller关联性分析:
2025-07-24 15:01:36 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 总Controller数: 26
2025-07-24 15:01:36 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 相关Controller数: 2
2025-07-24 15:01:36 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 关联度得分: 0.45
2025-07-24 15:01:36 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 相关Controllers: ['SearchCompanyGeneralController', 'SearchCompanyTypeGeneralController']
2025-07-24 15:01:36 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🤖 调用volcengine分析项目策略...发送的prompt信息: Java文件数=408, Controller数=26
2025-07-24 15:01:40 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 15:01:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 项目策略判断: create_new - 当前所有相关Controller的关联度均为0.45，低于0.6的阈值；且现有Controller（SearchCompanyGeneralController、SearchCompanyTypeGeneralController）的业务关键词仅停留在“company”层面，而API路径“/general/multiorgManage/queryCompanyUnitList”涉及“multiorgManage”这一新的组织管理领域，与现有Controller的业务范畴不完全一致，属于新的业务领域，因此更适合新建Controller。
2025-07-24 15:01:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📁 策略2：直接使用新文件生成策略，原因: 当前所有相关Controller的关联度均为0.45，低于0.6的阈值；且现有Controller（SearchCompanyGeneralController、SearchCompanyTypeGeneralController）的业务关键词仅停留在“company”层面，而API路径“/general/multiorgManage/queryCompanyUnitList”涉及“multiorgManage”这一新的组织管理领域，与现有Controller的业务范畴不完全一致，属于新的业务领域，因此更适合新建Controller。
2025-07-24 15:01:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔧 规范化项目路径: /Users/renyu/Documents/create_project/链数中建一局_1753340378/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general/src/main/java -> /Users/renyu/Documents/create_project/链数中建一局_1753340378/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general
2025-07-24 15:01:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔧 策略2路径规范化:
2025-07-24 15:01:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    原始路径: /Users/renyu/Documents/create_project/链数中建一局_1753340378/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general/src/main/java
2025-07-24 15:01:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    规范化后: /Users/renyu/Documents/create_project/链数中建一局_1753340378/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general
2025-07-24 15:01:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -  调用volcengine大模型生成代码...
2025-07-24 15:01:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 开始代码生成...
2025-07-24 15:01:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎨 使用模板+AI混合模式生成代码
2025-07-24 15:01:40 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - 🎨 开始增强版代码生成: CompanyUnitList
2025-07-24 15:01:40 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - 🔍 解析到表结构: t_cust_multiorg_unit (14列)
2025-07-24 15:01:40 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - 🤖 使用智能文件复用和专门化提示词模板增强代码...
2025-07-24 15:01:40 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 设置设计文档内容，长度: 7416
2025-07-24 15:01:40 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO - 🔍 分析项目结构: /Users/renyu/Documents/create_project/链数中建一局_1753340378/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general
2025-07-24 15:01:41 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO - 🔍 从文件 GeneralApplication.java 推断基础包名: com.yljr.user.basicgeneral
2025-07-24 15:01:41 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO - ✅ 项目结构分析完成
2025-07-24 15:01:41 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO -    Controllers: 26
2025-07-24 15:01:41 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO -    Application Services: 0
2025-07-24 15:01:41 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO -    Domain Services: 0
2025-07-24 15:01:41 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO -    Mappers: 0
2025-07-24 15:01:41 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO -    Feign Clients: 0
2025-07-24 15:01:41 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO -    XML Files: 0
2025-07-24 15:01:41 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO - 🤔 决策文件复用策略: CompanyUnitList
2025-07-24 15:01:41 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO - 📋 文件复用策略决策完成:
2025-07-24 15:01:41 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO -    controller: create_new - 未找到合适的Controller (最高分数: 50)
2025-07-24 15:01:41 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO -    application_service: skip - 本地调用，可直接使用Domain Service
2025-07-24 15:01:41 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO -    domain_service: create_new - 未找到合适的Domain Service，需要创建
2025-07-24 15:01:41 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO -    mapper: create_new - 未找到合适的Mapper，需要创建
2025-07-24 15:01:41 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO -    feign_client: skip - 不需要外部服务调用
2025-07-24 15:01:41 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO -    xml_file: create_new - 需要创建新的XML文件
2025-07-24 15:01:41 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - 📋 智能文件复用策略:
2025-07-24 15:01:41 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO -    controller: create_new - 未找到合适的Controller (最高分数: 50)
2025-07-24 15:01:41 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO -    application_service: skip - 本地调用，可直接使用Domain Service
2025-07-24 15:01:41 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO -    domain_service: create_new - 未找到合适的Domain Service，需要创建
2025-07-24 15:01:41 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO -    mapper: create_new - 未找到合适的Mapper，需要创建
2025-07-24 15:01:41 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO -    feign_client: skip - 不需要外部服务调用
2025-07-24 15:01:41 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO -    xml_file: create_new - 需要创建新的XML文件
2025-07-24 15:01:41 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO - 🔗 生成完整调用链: CompanyUnitList
2025-07-24 15:01:41 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO - 🔍 找到表结构: T_CUST_MULTIORG_UNIT
2025-07-24 15:01:41 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO - ✅ 解析到 14 个字段
2025-07-24 15:01:41 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO - ✅ 调用链代码生成完成，包含 7 个组件
2025-07-24 15:01:41 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 智能文件复用生成了 7 个组件
2025-07-24 15:01:41 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - 📝 需要创建 7 个新文件
2025-07-24 15:01:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI生成成功，生成代码类型: ['controller_method', 'domain_service', 'domain_service_impl', 'request_dto', 'response_dto', 'mapper', 'xml_mapping']
2025-07-24 15:01:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 开始写入生成的代码文件...
2025-07-24 15:01:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔧 统一类名基础: CompanyUnitList
2025-07-24 15:01:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ controller_method 类名: CompanyUnitListController
2025-07-24 15:01:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ domain_service_impl 类名: CompanyUnitListServiceImpl
2025-07-24 15:01:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ request_dto 类名: CompanyUnitListReq
2025-07-24 15:01:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ response_dto 类名: CompanyUnitListResp
2025-07-24 15:01:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 标准化后的代码类型: ['controller_method', 'domain_service', 'domain_service_impl', 'request_dto', 'response_dto', 'mapper', 'xml_mapping']
2025-07-24 15:01:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🤖 调用volcengine判断Java文件输出路径...
2025-07-24 15:02:10 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 15:02:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM路径判断成功，配置了 7 个Java文件路径
2025-07-24 15:02:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 controller_method: CompanyUnitListController.java
2025-07-24 15:02:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 domain_service: CompanyUnitListService.java
2025-07-24 15:02:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 domain_service_impl: CompanyUnitListServiceImpl.java
2025-07-24 15:02:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 request_dto: CompanyUnitListReq.java
2025-07-24 15:02:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 response_dto: CompanyUnitListResp.java
2025-07-24 15:02:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 mapper: CompanyUnitListMapper.java
2025-07-24 15:02:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 xml_mapping: CompanyUnitListMapper.xml
2025-07-24 15:02:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 代码内容 (controller_method):

package com.yljr.user.basicgeneral.interfaces;

import com.yljr.user.basicgeneral.interfaces.dto.CompanyUnitListReq;
import com.yljr.user.basicgeneral.interfaces.dto.CompanyUnitListResp;
import com.yljr.common.dto.Response;
import org.springframework.web.bind.annotation.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.validation.annotation.Validated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import io.swagger.annotations.ApiOperation;

import javax.validation.Valid;

/**
 * CompanyUnitList Controller
 * 根据查询条件查询组织单元信息，支持按编码、状态等条件筛选
 */
@Validated
@RestController
@RequestMapping("/api/companyUnitList")
public class CompanyUnitListController {

    private final Logger logger = LoggerFactory.getLogger(this.getClass());
    
    @Autowired
    private CompanyUnitListService companyunitlistService;

    /**
     * 根据查询条件查询组织单元信息，支持按编码、状态等条件筛选
     */
    @PostMapping("/companyUnitList")
    @ApiOperation(value = "根据查询条件查询组织单元信息，支持按编码、状态等条件筛选")
    public Response<CompanyUnitListResp> companyUnitList(@RequestBody @Valid CompanyUnitListReq request) {
        try {
            logger.info("开始执行companyUnitList，请求参数: {}", request);
            
            return companyUnitListService.companyUnitList(request);
            
        } catch (Exception e) {
            logger.error("执行companyUnitList失败", e);
            return Response.error("执行失败: " + e.getMessage());
        }
    }
}
2025-07-24 15:02:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: /Users/renyu/Documents/create_project/链数中建一局_1753340378/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general/src/main/java/com/yljr/user/basicgeneral/interfaces/CompanyUnitListController.java
2025-07-24 15:02:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: /Users/renyu/Documents/create_project/链数中建一局_1753340378/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general/src/main/java/com/yljr/user/basicgeneral/interfaces/CompanyUnitListController.java
2025-07-24 15:02:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 代码内容 (domain_service):
package com.yljr.user.basicgeneral.domain.service;

import com.yljr.user.basicgeneral.interfaces.dto.CompanyUnitListReq;
import com.yljr.user.basicgeneral.interfaces.dto.CompanyUnitListResp;

/**
 * CompanyUnitList Domain Service Interface
 * 根据查询条件查询组织单元信息，支持按编码、状态等条件筛选
 */
public interface CompanyUnitListService {

    /**
     * 根据查询条件查询组织单元信息，支持按编码、状态等条件筛选
     */
    CompanyUnitListResp companyUnitList(CompanyUnitListReq request);
}
2025-07-24 15:02:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: /Users/renyu/Documents/create_project/链数中建一局_1753340378/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general/src/main/java/com/yljr/user/basicgeneral/domain/service/CompanyUnitListService.java
2025-07-24 15:02:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: /Users/renyu/Documents/create_project/链数中建一局_1753340378/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general/src/main/java/com/yljr/user/basicgeneral/domain/service/CompanyUnitListService.java
2025-07-24 15:02:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 代码内容 (domain_service_impl):
package com.yljr.user.basicgeneral.domain.service.impl;

import com.yljr.user.basicgeneral.domain.service.CompanyUnitListService;
import com.yljr.user.basicgeneral.interfaces.dto.CompanyUnitListReq;
import com.yljr.user.basicgeneral.interfaces.dto.CompanyUnitListResp;
import com.yljr.user.basicgeneral.domain.entity.CompanyUnitList;
import com.yljr.user.basicgeneral.domain.mapper.CompanyUnitListMapper;
import org.springframework.stereotype.Service;
import org.springframework.beans.factory.annotation.Autowired;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import java.util.List;

/**
 * CompanyUnitList Domain Service Implementation
 * 根据查询条件查询组织单元信息，支持按编码、状态等条件筛选
 */
@Service
public class CompanyUnitListServiceImpl implements CompanyUnitListService {

    private static final Logger logger = LoggerFactory.getLogger(CompanyUnitListServiceImpl.class);
    
    @Autowired
    private CompanyUnitListMapper companyunitlistMapper;

    /**
     * 根据查询条件查询组织单元信息，支持按编码、状态等条件筛选
     */
    @Override
    public CompanyUnitListResp companyUnitList(CompanyUnitListReq request) {
        logger.info("Domain Service执行CompanyUnitList，参数: {}", request);
        
        try {
        // 调用Mapper查询数据
        List<CompanyUnitList> dataList = companyunitlistMapper.selectCompanyUnitListList(request);
        
        // 构建响应
        CompanyUnitListResp response = new CompanyUnitListResp();
        response.setDataList(dataList);
        response.setTotalCount(dataList.size());
        
        return response;
        } catch (Exception e) {
            logger.error("Domain Service执行CompanyUnitList失败", e);
            throw new RuntimeException("执行失败: " + e.getMessage(), e);
        }
    }
}
2025-07-24 15:02:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: /Users/renyu/Documents/create_project/链数中建一局_1753340378/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general/src/main/java/com/yljr/user/basicgeneral/domain/service/impl/CompanyUnitListServiceImpl.java
2025-07-24 15:02:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: /Users/renyu/Documents/create_project/链数中建一局_1753340378/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general/src/main/java/com/yljr/user/basicgeneral/domain/service/impl/CompanyUnitListServiceImpl.java
2025-07-24 15:02:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 代码内容 (request_dto):

package com.yljr.user.basicgeneral.interfaces.dto;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Date;
import java.math.BigDecimal;

/**
 * CompanyUnitList 请求DTO
 * 根据查询条件查询组织单元信息，支持按编码、状态等条件筛选
 */
@ApiModel(value = "CompanyUnitListReq", description = "根据查询条件查询组织单元信息，支持按编码、状态等条件筛选")
public class CompanyUnitListReq {

    /**
     * 组织单元编号(可选)
     */
    @ApiModelProperty(value = "组织单元编号(可选)")
    private String unitCode;
    /**
     * 组织单元状态 1：正常；0：禁用(可选)
     */
    @ApiModelProperty(value = "组织单元状态 1：正常；0：禁用(可选)")
    private String openStatus;
    /**
     * 组织单元 id 列表(可选)
     */
    @ApiModelProperty(value = "组织单元 id 列表(可选)")
    private String unitList;

    public String getUnitCode() {
        return unitCode;
    }

    public void setUnitCode(String unitCode) {
        this.unitCode = unitCode;
    }
    public String getOpenStatus() {
        return openStatus;
    }

    public void setOpenStatus(String openStatus) {
        this.openStatus = openStatus;
    }
    public String getUnitList() {
        return unitList;
    }

    public void setUnitList(String unitList) {
        this.unitList = unitList;
    }

    @Override
    public String toString() {
        return "CompanyUnitListReq{" +
                "unitCode=" + unitCode + ", " +
                "openStatus=" + openStatus + ", " +
                "unitList=" + unitList +
                "};";
    }
}
2025-07-24 15:02:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: /Users/renyu/Documents/create_project/链数中建一局_1753340378/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general/src/main/java/com/yljr/user/basicgeneral/interfaces/dto/CompanyUnitListReq.java
2025-07-24 15:02:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: /Users/renyu/Documents/create_project/链数中建一局_1753340378/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general/src/main/java/com/yljr/user/basicgeneral/interfaces/dto/CompanyUnitListReq.java
2025-07-24 15:02:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 代码内容 (response_dto):

package com.yljr.user.basicgeneral.interfaces.dto;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.List;
import java.util.Date;
import java.math.BigDecimal;

/**
 * CompanyUnitList 响应DTO
 * 根据查询条件查询组织单元信息，支持按编码、状态等条件筛选
 */
@ApiModel(value = "CompanyUnitListResp", description = "根据查询条件查询组织单元信息，支持按编码、状态等条件筛选")
public class CompanyUnitListResp {

    /**
     * 组织单元 id
     */
    @ApiModelProperty(value = "组织单元 id")
    private String unitId;
    /**
     * 组织单元类型 1：开立，2：支付
     */
    @ApiModelProperty(value = "组织单元类型 1：开立，2：支付")
    private String unitTypeDicType;
    /**
     * 组织单元类型表 id
     */
    @ApiModelProperty(value = "组织单元类型表 id")
    private String unitTypeId;
    /**
     * 组织单元状态 1：正常；0：禁用
     */
    @ApiModelProperty(value = "组织单元状态 1：正常；0：禁用")
    private String openStatus;
    /**
     * 组织单元编号
     */
    @ApiModelProperty(value = "组织单元编号")
    private String unitCode;
    /**
     * 组织单元名称
     */
    @ApiModelProperty(value = "组织单元名称")
    private String unitName;

    public String getUnitId() {
        return unitId;
    }

    public void setUnitId(String unitId) {
        this.unitId = unitId;
    }
    public String getUnitTypeDicType() {
        return unitTypeDicType;
    }

    public void setUnitTypeDicType(String unitTypeDicType) {
        this.unitTypeDicType = unitTypeDicType;
    }
    public String getUnitTypeId() {
        return unitTypeId;
    }

    public void setUnitTypeId(String unitTypeId) {
        this.unitTypeId = unitTypeId;
    }
    public String getOpenStatus() {
        return openStatus;
    }

    public void setOpenStatus(String openStatus) {
        this.openStatus = openStatus;
    }
    public String getUnitCode() {
        return unitCode;
    }

    public void setUnitCode(String unitCode) {
        this.unitCode = unitCode;
    }
    public String getUnitName() {
        return unitName;
    }

    public void setUnitName(String unitName) {
        this.unitName = unitName;
    }

    @Override
    public String toString() {
        return "CompanyUnitListResp{" +
                "unitId=" + unitId + ", " +
                "unitTypeDicType=" + unitTypeDicType + ", " +
                "unitTypeId=" + unitTypeId + ", " +
                "openStatus=" + openStatus + ", " +
                "unitCode=" + unitCode + ", " +
                "unitName=" + unitName +
                "};";
    }
}
2025-07-24 15:02:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: /Users/renyu/Documents/create_project/链数中建一局_1753340378/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general/src/main/java/com/yljr/user/basicgeneral/interfaces/dto/CompanyUnitListResp.java
2025-07-24 15:02:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: /Users/renyu/Documents/create_project/链数中建一局_1753340378/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general/src/main/java/com/yljr/user/basicgeneral/interfaces/dto/CompanyUnitListResp.java
2025-07-24 15:02:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 代码内容 (mapper):

package com.yljr.user.basicgeneral.domain.mapper;

import com.yljr.user.basicgeneral.interfaces.dto.CompanyUnitListReq;
import com.yljr.user.basicgeneral.domain.entity.CompanyUnitList;
import org.apache.ibatis.annotations.Mapper;
import org.apache.ibatis.annotations.Param;
import java.util.List;

/**
 * CompanyUnitList Mapper接口
 * 根据查询条件查询组织单元信息，支持按编码、状态等条件筛选
 */
@Mapper
public interface CompanyUnitListMapper {

    /**
     * 根据条件查询CompanyUnitList列表
     */
    List<CompanyUnitList> selectCompanyUnitListList(@Param("condition") CompanyUnitListReq condition);

    /**
     * 根据主键查询CompanyUnitList
     */
    CompanyUnitList selectByPrimaryKey(@Param("id") Long id);

    /**
     * 新增CompanyUnitList记录
     */
    int insert(CompanyUnitList record);

    /**
     * 更新CompanyUnitList记录
     */
    int updateByPrimaryKey(CompanyUnitList record);

    /**
     * 删除CompanyUnitList记录
     */
    int deleteByPrimaryKey(@Param("id") Long id);
}
2025-07-24 15:02:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: /Users/renyu/Documents/create_project/链数中建一局_1753340378/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general/src/main/java/com/yljr/user/basicgeneral/domain/mapper/CompanyUnitListMapper.java
2025-07-24 15:02:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: /Users/renyu/Documents/create_project/链数中建一局_1753340378/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general/src/main/java/com/yljr/user/basicgeneral/domain/mapper/CompanyUnitListMapper.java
2025-07-24 15:02:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 代码内容 (xml_mapping):
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yljr.user.basicgeneral.domain.mapper.CompanyUnitListMapper">

    <resultMap id="BaseResultMap" type="com.yljr.user.basicgeneral.domain.entity.CompanyUnitList">
        <id column="id" jdbcType="BIGINT" property="id" />
        <result column="company_id" jdbcType="BIGINT" property="companyId" />
        <result column="mutilorg_id" jdbcType="BIGINT" property="mutilorgId" />
        <result column="unit_code" jdbcType="VARCHAR" property="unitCode" />
        <result column="unit_name" jdbcType="VARCHAR" property="unitName" />
        <result column="remark" jdbcType="VARCHAR" property="remark" />
        <result column="platform_type" jdbcType="INTEGER" property="platformType" />
        <result column="status" jdbcType="INTEGER" property="status" />
        <result column="create_id" jdbcType="BIGINT" property="createId" />
        <result column="oper_user_name" jdbcType="VARCHAR" property="operUserName" />
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
        <result column="modify_id" jdbcType="BIGINT" property="modifyId" />
        <result column="modify_user_name" jdbcType="VARCHAR" property="modifyUserName" />
        <result column="modify_time" jdbcType="TIMESTAMP" property="modifyTime" />
    </resultMap>

    <sql id="Base_Column_List">
        id, company_id, mutilorg_id, unit_code, unit_name, remark, platform_type, status, create_id, oper_user_name,
        create_time, modify_id, modify_user_name, modify_time
    </sql>

    <select id="selectCompanyUnitListList" parameterType="com.yljr.user.basicgeneral.interfaces.dto.CompanyUnitListReq" 
            resultMap="BaseResultMap">
        SELECT 
        <include refid="Base_Column_List" />
        FROM T_CUST_MULTIORG_UNIT
        WHERE 1=1
        <if test="condition.unitCode != null and condition.unitCode != ''">
            AND unit_code = #{condition.unitCode}
        </if>
        <if test="condition.status != null">
            AND status = #{condition.status}
        </if>
        ORDER BY CREATE_TIME DESC
    </select>

    <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
        SELECT 
        <include refid="Base_Column_List" />
        FROM T_CUST_MULTIORG_UNIT
        WHERE ID = #{id,jdbcType=BIGINT}
    </select>

    <insert id="insert" parameterType="com.yljr.user.basicgeneral.domain.entity.CompanyUnitList">
        INSERT INTO T_CUST_MULTIORG_UNIT (company_id, mutilorg_id, unit_code, unit_name, remark, platform_type, status, create_id, oper_user_name, create_time, modify_id, modify_user_name, modify_time)
        VALUES (#{companyId}, #{mutilorgId}, #{unitCode}, #{unitName}, #{remark}, #{platformType}, #{status}, #{createId}, #{operUserName}, #{createTime}, #{modifyId}, #{modifyUserName}, #{modifyTime})
    </insert>

    <update id="updateByPrimaryKey" parameterType="com.yljr.user.basicgeneral.domain.entity.CompanyUnitList">
        UPDATE T_CUST_MULTIORG_UNIT
        SET company_id = #{companyId},
            mutilorg_id = #{mutilorgId},
            unit_code = #{unitCode},
            unit_name = #{unitName},
            remark = #{remark},
            platform_type = #{platformType},
            status = #{status},
            create_id = #{createId},
            oper_user_name = #{operUserName},
            modify_id = #{modifyId},
            modify_user_name = #{modifyUserName},
            modify_time = #{modifyTime}
        WHERE ID = #{id}
    </update>

    <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
        DELETE FROM T_CUST_MULTIORG_UNIT
        WHERE ID = #{id,jdbcType=BIGINT}
    </delete>

</mapper>
2025-07-24 15:02:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: /Users/renyu/Documents/create_project/链数中建一局_1753340378/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general/src/main/resources/mapper/CompanyUnitListMapper.xml
2025-07-24 15:02:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: /Users/renyu/Documents/create_project/链数中建一局_1753340378/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general/src/main/resources/mapper/CompanyUnitListMapper.xml
2025-07-24 15:02:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📊 代码生成完成，共写入 7 个文件到项目中
2025-07-24 15:02:10 - src.corder_integration.utils.backup_cleaner - INFO - 🧹 开始清理项目备份: /Users/renyu/Documents/create_project/链数中建一局_1753340378/zqyl-user-center-service/zqyl-user-center-service/user-basic-service/user-basic-general
2025-07-24 15:02:10 - src.corder_integration.utils.backup_cleaner - INFO - 🎉 备份清理完成: 删除 0 目录, 0 文件
2025-07-24 15:02:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🗑️ 已清理项目分析缓存，确保下次分析获取最新状态
2025-07-24 15:02:10 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_008 状态更新为 completed
2025-07-24 15:02:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 任务 task_008 执行成功
2025-07-24 15:02:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 开始执行任务: task_009 (api)
2025-07-24 15:02:10 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_009 已被 intelligent_coding_node 领取
2025-07-24 15:02:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🌐 执行API接口生成任务: task_009
2025-07-24 15:02:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 解析的接口信息:
2025-07-24 15:02:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 接口名称: UnitLimitByCompanyId
2025-07-24 15:02:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - API路径: /crcl-open-api/lsLimit/listUnitLimitByCompanyId
2025-07-24 15:02:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - HTTP方法: GET
2025-07-24 15:02:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 输入参数: 6个
2025-07-24 15:02:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 输出参数: 4个
2025-07-24 15:02:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 业务描述: 根据公司 ID 和筛选条件查询组织单元额度信息，调用用户服务 /general/multiorgManage/queryCompanyUnitList 接口获取组织单元详细信息；采用 pagehelper 进行分页；列表默认按照组织单元名称为主要关键字、额度类型为次要关键字降序排列；筛选条件更新后，汇总值需要同步更新计算
2025-07-24 15:02:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 在 /Users/renyu/Documents/create_project/链数中建一局_1753340378/crcl-open 中查找最佳Java项目路径...
2025-07-24 15:02:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 目标服务名: 确权开立服务
2025-07-24 15:02:11 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 15:02:11 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 发现Java项目: crcl-open
2025-07-24 15:02:11 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       🎯 相对路径: crcl-open
2025-07-24 15:02:11 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       📊 Java文件: 2251个
2025-07-24 15:02:11 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       📐 目录深度: 1
2025-07-24 15:02:11 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       🏆 优先级分数: 650
2025-07-24 15:02:11 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 排序后的候选路径（前3个）:
2025-07-24 15:02:11 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    1. crcl-open (优先级: 650)
2025-07-24 15:02:11 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 选择最佳Java项目路径:
2025-07-24 15:02:11 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 完整路径: /Users/renyu/Documents/create_project/链数中建一局_1753340378/crcl-open/crcl-open
2025-07-24 15:02:11 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📋 相对路径: crcl-open
2025-07-24 15:02:11 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    🏆 最终优先级: 650
2025-07-24 15:02:11 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📁 基础项目路径: /Users/renyu/Documents/create_project/链数中建一局_1753340378/crcl-open/crcl-open
2025-07-24 15:02:11 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 从API路径 /crcl-open-api/lsLimit/listUnitLimitByCompanyId 提取关键字: lsLimit
2025-07-24 15:02:11 - src.corder_integration.config.domain_mapping_config - INFO - 🔍 映射API关键字到业务领域: lsLimit
2025-07-24 15:02:11 - src.corder_integration.config.domain_mapping_config - INFO - ✅ 精确匹配: lsLimit -> lsLimit
2025-07-24 15:02:11 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 API关键字映射: lsLimit -> lsLimit
2025-07-24 15:02:11 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🤖 使用大模型智能匹配Controller: lsLimit (API: /crcl-open-api/lsLimit/listUnitLimitByCompanyId)
2025-07-24 15:02:11 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功扫描到 53 个Controller文件
2025-07-24 15:02:11 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 找到 53 个Controller文件
2025-07-24 15:02:11 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🤖 调用volcengine分析Controller相似度...
2025-07-24 15:02:19 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 15:02:19 - src.corder_integration.langgraph.nodes.intelligent_coding_node - ERROR - ❌ LLM响应JSON解析失败: Expecting value: line 1 column 1 (char 0)
2025-07-24 15:02:19 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 使用规则匹配方式查找Controller: lsLimit
2025-07-24 15:02:19 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 智能匹配找到相似Controller: LsLimitController
2025-07-24 15:02:19 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 Controller路径: /Users/renyu/Documents/create_project/链数中建一局_1753340378/crcl-open/crcl-open/src/main/java/com/yljr/crcl/limit/interfaces/LsLimitController.java
2025-07-24 15:02:19 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    🔢 相似度分数: 0.80
2025-07-24 15:02:19 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    💡 匹配原因: 类名包含关键字: lsLimit, 路径包含关键字: lsLimit, 包名业务相关: limit
2025-07-24 15:02:19 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 分析目标项目: /Users/renyu/Documents/create_project/链数中建一局_1753340378/crcl-open/crcl-open/src/main/java
2025-07-24 15:02:19 - src.apis.project_analysis_api - INFO - 🔍 开始分析项目用于代码生成: /Users/renyu/Documents/create_project/链数中建一局_1753340378/crcl-open/crcl-open/src/main/java
2025-07-24 15:02:19 - src.apis.project_analysis_api - INFO - 🔍 在 /Users/renyu/Documents/create_project/链数中建一局_1753340378/crcl-open/crcl-open/src/main/java 中查找最佳Java项目路径...
2025-07-24 15:02:19 - src.apis.project_analysis_api - INFO - 🎯 目标服务名: 确权开立服务
2025-07-24 15:02:19 - src.apis.project_analysis_api - WARNING - ⚠️ 在 /Users/renyu/Documents/create_project/链数中建一局_1753340378/crcl-open/crcl-open/src/main/java 中未找到包含Java文件的src/main/java结构
2025-07-24 15:02:19 - src.apis.project_analysis_api - INFO - 📂 实际分析路径: /Users/renyu/Documents/create_project/链数中建一局_1753340378/crcl-open/crcl-open/src/main/java
2025-07-24 15:02:19 - src.utils.java_code_analyzer - INFO - 🔍 开始分析企业级Java项目: /Users/renyu/Documents/create_project/链数中建一局_1753340378/crcl-open/crcl-open/src/main/java
2025-07-24 15:02:24 - src.utils.java_code_analyzer - INFO - ✅ 企业级项目分析完成，共分析 2240 个Java文件
2025-07-24 15:02:24 - src.apis.project_analysis_api - INFO - 📦 动态检测到基础包: com.yljr.crcl (出现2240次)
2025-07-24 15:02:24 - src.apis.project_analysis_api - INFO - 📦 动态检测到基础包: com.yljr.crcl (出现2240次)
2025-07-24 15:02:24 - src.apis.project_analysis_api - INFO - 📋 提取到48个Controller的详细信息
2025-07-24 15:02:24 - src.apis.project_analysis_api - INFO - 📦 动态检测到基础包: com.yljr.crcl (出现2240次)
2025-07-24 15:02:24 - src.apis.project_analysis_api - INFO - ✅ 项目分析完成，已提取代码生成上下文
2025-07-24 15:02:24 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 从编码代理获取设计文档内容 (7416 字符)
2025-07-24 15:02:24 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 设计文档内容已添加到项目上下文 (7416 字符)
2025-07-24 15:02:24 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 使用详细Controller信息，共48个Controller
2025-07-24 15:02:24 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 Controller关联性分析完成:
2025-07-24 15:02:24 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 总Controller数: 48
2025-07-24 15:02:24 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 相关Controller数: 1
2025-07-24 15:02:24 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 最高关联度: 0.45
2025-07-24 15:02:24 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 Controller关联性分析:
2025-07-24 15:02:24 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 总Controller数: 48
2025-07-24 15:02:24 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 相关Controller数: 1
2025-07-24 15:02:24 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 关联度得分: 0.45
2025-07-24 15:02:24 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 相关Controllers: ['LsLimitController']
2025-07-24 15:02:24 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🤖 调用volcengine分析项目策略...发送的prompt信息: Java文件数=2240, Controller数=48
2025-07-24 15:02:31 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 15:02:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 项目策略判断: create_new - 虽然存在名为 LsLimitController 的 Controller，但其业务关联度仅为 0.45（< 0.6），未达到“增强现有”阈值；同时 API 路径 /crcl-open-api/lsLimit/listUnitLimitByCompanyId 与现有 Controller 的路径模式并不完全匹配，且确权开立服务本身属于相对独立的业务域。因此更适合新建一个专门处理该 API 的 Controller，以保持职责单一、降低耦合。
2025-07-24 15:02:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📁 策略2：直接使用新文件生成策略，原因: 虽然存在名为 LsLimitController 的 Controller，但其业务关联度仅为 0.45（< 0.6），未达到“增强现有”阈值；同时 API 路径 /crcl-open-api/lsLimit/listUnitLimitByCompanyId 与现有 Controller 的路径模式并不完全匹配，且确权开立服务本身属于相对独立的业务域。因此更适合新建一个专门处理该 API 的 Controller，以保持职责单一、降低耦合。
2025-07-24 15:02:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔧 规范化项目路径: /Users/renyu/Documents/create_project/链数中建一局_1753340378/crcl-open/crcl-open/src/main/java -> /Users/renyu/Documents/create_project/链数中建一局_1753340378/crcl-open/crcl-open
2025-07-24 15:02:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔧 策略2路径规范化:
2025-07-24 15:02:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    原始路径: /Users/renyu/Documents/create_project/链数中建一局_1753340378/crcl-open/crcl-open/src/main/java
2025-07-24 15:02:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    规范化后: /Users/renyu/Documents/create_project/链数中建一局_1753340378/crcl-open/crcl-open
2025-07-24 15:02:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -  调用volcengine大模型生成代码...
2025-07-24 15:02:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 开始代码生成...
2025-07-24 15:02:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎨 使用模板+AI混合模式生成代码
2025-07-24 15:02:31 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - 🎨 开始增强版代码生成: UnitLimitByCompanyId
2025-07-24 15:02:31 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - 🔍 检测到PageHelper分页要求
2025-07-24 15:02:31 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - 🔍 解析到表结构: t_cust_multiorg_unit (14列)
2025-07-24 15:02:31 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - 🤖 使用智能文件复用和专门化提示词模板增强代码...
2025-07-24 15:02:31 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 设置设计文档内容，长度: 7416
2025-07-24 15:02:31 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO - 🔍 分析项目结构: /Users/renyu/Documents/create_project/链数中建一局_1753340378/crcl-open/crcl-open
2025-07-24 15:02:31 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO - ✅ 项目结构分析完成
2025-07-24 15:02:31 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO -    Controllers: 49
2025-07-24 15:02:31 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO -    Application Services: 36
2025-07-24 15:02:31 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO -    Domain Services: 37
2025-07-24 15:02:31 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO -    Mappers: 46
2025-07-24 15:02:31 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO -    Feign Clients: 0
2025-07-24 15:02:31 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO -    XML Files: 108
2025-07-24 15:02:31 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO - 🤔 决策文件复用策略: UnitLimitByCompanyId
2025-07-24 15:02:31 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO - 📋 文件复用策略决策完成:
2025-07-24 15:02:31 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO -    controller: create_new - 未找到合适的Controller (最高分数: 0)
2025-07-24 15:02:31 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO -    application_service: create_new - 需要Feign调用，创建新的Application Service
2025-07-24 15:02:31 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO -    domain_service: create_new - 未找到合适的Domain Service，需要创建
2025-07-24 15:02:31 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO -    mapper: create_new - 未找到合适的Mapper，需要创建
2025-07-24 15:02:31 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO -    feign_client: create_new - 未找到合适的Feign Client，需要创建
2025-07-24 15:02:31 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO -    xml_file: create_new - 需要创建新的XML文件
2025-07-24 15:02:31 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - 📋 智能文件复用策略:
2025-07-24 15:02:31 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO -    controller: create_new - 未找到合适的Controller (最高分数: 0)
2025-07-24 15:02:31 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO -    application_service: create_new - 需要Feign调用，创建新的Application Service
2025-07-24 15:02:31 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO -    domain_service: create_new - 未找到合适的Domain Service，需要创建
2025-07-24 15:02:31 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO -    mapper: create_new - 未找到合适的Mapper，需要创建
2025-07-24 15:02:31 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO -    feign_client: create_new - 未找到合适的Feign Client，需要创建
2025-07-24 15:02:31 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO -    xml_file: create_new - 需要创建新的XML文件
2025-07-24 15:02:31 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO - 🔗 生成完整调用链: UnitLimitByCompanyId
2025-07-24 15:02:31 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO - 🔍 找到表结构: T_CUST_MULTIORG_UNIT
2025-07-24 15:02:31 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO - ✅ 解析到 14 个字段
2025-07-24 15:02:31 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO - ✅ 调用链代码生成完成，包含 9 个组件
2025-07-24 15:02:31 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 智能文件复用生成了 9 个组件
2025-07-24 15:02:31 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - 📝 需要创建 9 个新文件
2025-07-24 15:02:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI生成成功，生成代码类型: ['controller_method', 'application_service', 'domain_service', 'domain_service_impl', 'request_dto', 'response_dto', 'mapper', 'feign_client', 'xml_mapping']
2025-07-24 15:02:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 开始写入生成的代码文件...
2025-07-24 15:02:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔧 统一类名基础: UnitLimitByCompanyId
2025-07-24 15:02:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ controller_method 类名: UnitLimitByCompanyIdController
2025-07-24 15:02:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ application_service 类名: UnitLimitByCompanyIdApplication
2025-07-24 15:02:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ domain_service_impl 类名: UnitLimitByCompanyIdServiceImpl
2025-07-24 15:02:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ request_dto 类名: UnitLimitByCompanyIdReq
2025-07-24 15:02:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ response_dto 类名: UnitLimitByCompanyIdResp
2025-07-24 15:02:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 标准化后的代码类型: ['controller_method', 'application_service', 'domain_service', 'domain_service_impl', 'request_dto', 'response_dto', 'mapper', 'feign_client', 'xml_mapping']
2025-07-24 15:02:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🤖 调用volcengine判断Java文件输出路径...
2025-07-24 15:02:58 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 15:02:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM路径判断成功，配置了 9 个Java文件路径
2025-07-24 15:02:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 controller_method: UnitLimitByCompanyIdController.java
2025-07-24 15:02:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 application_service: UnitLimitByCompanyIdApplication.java
2025-07-24 15:02:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 domain_service: UnitLimitByCompanyIdService.java
2025-07-24 15:02:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 domain_service_impl: UnitLimitByCompanyIdServiceImpl.java
2025-07-24 15:02:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 request_dto: UnitLimitByCompanyIdReq.java
2025-07-24 15:02:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 response_dto: UnitLimitByCompanyIdResp.java
2025-07-24 15:02:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 mapper: UnitLimitByCompanyIdMapper.java
2025-07-24 15:02:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 feign_client: UnitLimitByCompanyIdFeignClient.java
2025-07-24 15:02:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 xml_mapping: UnitLimitByCompanyIdMapper.xml
2025-07-24 15:02:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 代码内容 (controller_method):

package com.yljr.crcl.interfaces;

import com.yljr.crcl.interfaces.dto.UnitLimitByCompanyIdReq;
import com.yljr.crcl.interfaces.dto.UnitLimitByCompanyIdResp;
import com.yljr.common.dto.Response;
import org.springframework.web.bind.annotation.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.validation.annotation.Validated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import io.swagger.annotations.ApiOperation;

import javax.validation.Valid;

/**
 * UnitLimitByCompanyId Controller
 * 根据公司 ID 和筛选条件查询组织单元额度信息，调用用户服务 /general/multiorgManage/queryCompanyUnitList 接口获取组织单元详细信息；采用 pagehelper 进行分页；列表默认按照组织单元名称为主要关键字、额度类型为次要关键字降序排列；筛选条件更新后，汇总值需要同步更新计算
 */
@Validated
@RestController
@RequestMapping("/api/unitLimitByCompanyId")
public class UnitLimitByCompanyIdController {

    private final Logger logger = LoggerFactory.getLogger(this.getClass());
    
    @Autowired
    private UnitLimitByCompanyIdApplication unitLimitByCompanyIdApplication;

    /**
     * 根据公司 ID 和筛选条件查询组织单元额度信息，调用用户服务 /general/multiorgManage/queryCompanyUnitList 接口获取组织单元详细信息；采用 pagehelper 进行分页；列表默认按照组织单元名称为主要关键字、额度类型为次要关键字降序排列；筛选条件更新后，汇总值需要同步更新计算
     */
    @PostMapping("/unitLimitByCompanyId")
    @ApiOperation(value = "根据公司 ID 和筛选条件查询组织单元额度信息，调用用户服务 /general/multiorgManage/queryCompanyUnitList 接口获取组织单元详细信息；采用 pagehelper 进行分页；列表默认按照组织单元名称为主要关键字、额度类型为次要关键字降序排列；筛选条件更新后，汇总值需要同步更新计算")
    public Response<UnitLimitByCompanyIdResp> unitLimitByCompanyId(@RequestBody @Valid UnitLimitByCompanyIdReq request) {
        try {
            logger.info("开始执行unitLimitByCompanyId，请求参数: {}", request);
            
            return unitLimitByCompanyIdApplication.unitLimitByCompanyId(request);
            
        } catch (Exception e) {
            logger.error("执行unitLimitByCompanyId失败", e);
            return Response.error("执行失败: " + e.getMessage());
        }
    }
}
2025-07-24 15:02:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: /Users/renyu/Documents/create_project/链数中建一局_1753340378/crcl-open/crcl-open/src/main/java/com/yljr/crcl/interfaces/UnitLimitByCompanyIdController.java
2025-07-24 15:02:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: /Users/renyu/Documents/create_project/链数中建一局_1753340378/crcl-open/crcl-open/src/main/java/com/yljr/crcl/interfaces/UnitLimitByCompanyIdController.java
2025-07-24 15:02:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 代码内容 (application_service):

package com.yljr.crcl.application.service;

import com.yljr.crcl.interfaces.dto.UnitLimitByCompanyIdReq;
import com.yljr.crcl.interfaces.dto.UnitLimitByCompanyIdResp;
import org.springframework.stereotype.Service;
import org.springframework.beans.factory.annotation.Autowired;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * UnitLimitByCompanyId Application Service
 * 根据公司 ID 和筛选条件查询组织单元额度信息，调用用户服务 /general/multiorgManage/queryCompanyUnitList 接口获取组织单元详细信息；采用 pagehelper 进行分页；列表默认按照组织单元名称为主要关键字、额度类型为次要关键字降序排列；筛选条件更新后，汇总值需要同步更新计算
 */
@Service
public class UnitLimitByCompanyIdApplication {

    private static final Logger logger = LoggerFactory.getLogger(UnitLimitByCompanyIdApplication.class);
    
    @Autowired
    private UnitLimitByCompanyIdFeignClient unitlimitbycompanyidFeignClient;

    /**
     * 根据公司 ID 和筛选条件查询组织单元额度信息，调用用户服务 /general/multiorgManage/queryCompanyUnitList 接口获取组织单元详细信息；采用 pagehelper 进行分页；列表默认按照组织单元名称为主要关键字、额度类型为次要关键字降序排列；筛选条件更新后，汇总值需要同步更新计算
     */
    public UnitLimitByCompanyIdResp UnitLimitByCompanyId(UnitLimitByCompanyIdReq request) {
        logger.info("Application Service执行UnitLimitByCompanyId，参数: {}", request);
        
        try {
            return unitlimitbycompanyidFeignClient.UnitLimitByCompanyId(request);
        } catch (Exception e) {
            logger.error("Application Service执行UnitLimitByCompanyId失败", e);
            throw new RuntimeException("执行失败: " + e.getMessage(), e);
        }
    }
}
2025-07-24 15:02:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: /Users/renyu/Documents/create_project/链数中建一局_1753340378/crcl-open/crcl-open/src/main/java/com/yljr/crcl/application/service/UnitLimitByCompanyIdApplication.java
2025-07-24 15:02:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: /Users/renyu/Documents/create_project/链数中建一局_1753340378/crcl-open/crcl-open/src/main/java/com/yljr/crcl/application/service/UnitLimitByCompanyIdApplication.java
2025-07-24 15:02:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 代码内容 (domain_service):
package com.yljr.crcl.domain.service;

import com.yljr.crcl.interfaces.dto.UnitLimitByCompanyIdReq;
import com.yljr.crcl.interfaces.dto.UnitLimitByCompanyIdResp;

/**
 * UnitLimitByCompanyId Domain Service Interface
 * 根据公司 ID 和筛选条件查询组织单元额度信息，调用用户服务 /general/multiorgManage/queryCompanyUnitList 接口获取组织单元详细信息；采用 pagehelper 进行分页；列表默认按照组织单元名称为主要关键字、额度类型为次要关键字降序排列；筛选条件更新后，汇总值需要同步更新计算
 */
public interface UnitLimitByCompanyIdService {

    /**
     * 根据公司 ID 和筛选条件查询组织单元额度信息，调用用户服务 /general/multiorgManage/queryCompanyUnitList 接口获取组织单元详细信息；采用 pagehelper 进行分页；列表默认按照组织单元名称为主要关键字、额度类型为次要关键字降序排列；筛选条件更新后，汇总值需要同步更新计算
     */
    UnitLimitByCompanyIdResp unitLimitByCompanyId(UnitLimitByCompanyIdReq request);
}
2025-07-24 15:02:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: /Users/renyu/Documents/create_project/链数中建一局_1753340378/crcl-open/crcl-open/src/main/java/com/yljr/crcl/domain/service/UnitLimitByCompanyIdService.java
2025-07-24 15:02:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: /Users/renyu/Documents/create_project/链数中建一局_1753340378/crcl-open/crcl-open/src/main/java/com/yljr/crcl/domain/service/UnitLimitByCompanyIdService.java
2025-07-24 15:02:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 代码内容 (domain_service_impl):
package com.yljr.crcl.domain.service.impl;

import com.yljr.crcl.domain.service.UnitLimitByCompanyIdService;
import com.yljr.crcl.interfaces.dto.UnitLimitByCompanyIdReq;
import com.yljr.crcl.interfaces.dto.UnitLimitByCompanyIdResp;
import com.yljr.crcl.domain.entity.UnitLimitByCompanyId;
import com.yljr.crcl.domain.mapper.UnitLimitByCompanyIdMapper;
import org.springframework.stereotype.Service;
import org.springframework.beans.factory.annotation.Autowired;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import java.util.List;

/**
 * UnitLimitByCompanyId Domain Service Implementation
 * 根据公司 ID 和筛选条件查询组织单元额度信息，调用用户服务 /general/multiorgManage/queryCompanyUnitList 接口获取组织单元详细信息；采用 pagehelper 进行分页；列表默认按照组织单元名称为主要关键字、额度类型为次要关键字降序排列；筛选条件更新后，汇总值需要同步更新计算
 */
@Service
public class UnitLimitByCompanyIdServiceImpl implements UnitLimitByCompanyIdService {

    private static final Logger logger = LoggerFactory.getLogger(UnitLimitByCompanyIdServiceImpl.class);
    
    @Autowired
    private UnitLimitByCompanyIdMapper unitlimitbycompanyidMapper;

    /**
     * 根据公司 ID 和筛选条件查询组织单元额度信息，调用用户服务 /general/multiorgManage/queryCompanyUnitList 接口获取组织单元详细信息；采用 pagehelper 进行分页；列表默认按照组织单元名称为主要关键字、额度类型为次要关键字降序排列；筛选条件更新后，汇总值需要同步更新计算
     */
    @Override
    public UnitLimitByCompanyIdResp unitLimitByCompanyId(UnitLimitByCompanyIdReq request) {
        logger.info("Domain Service执行UnitLimitByCompanyId，参数: {}", request);
        
        try {
        // 调用Mapper查询数据
        List<UnitLimitByCompanyId> dataList = unitlimitbycompanyidMapper.selectUnitLimitByCompanyIdList(request);
        
        // 构建响应
        UnitLimitByCompanyIdResp response = new UnitLimitByCompanyIdResp();
        response.setDataList(dataList);
        response.setTotalCount(dataList.size());
        
        return response;
        } catch (Exception e) {
            logger.error("Domain Service执行UnitLimitByCompanyId失败", e);
            throw new RuntimeException("执行失败: " + e.getMessage(), e);
        }
    }
}
2025-07-24 15:02:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: /Users/renyu/Documents/create_project/链数中建一局_1753340378/crcl-open/crcl-open/src/main/java/com/yljr/crcl/domain/service/impl/UnitLimitByCompanyIdServiceImpl.java
2025-07-24 15:02:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: /Users/renyu/Documents/create_project/链数中建一局_1753340378/crcl-open/crcl-open/src/main/java/com/yljr/crcl/domain/service/impl/UnitLimitByCompanyIdServiceImpl.java
2025-07-24 15:02:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 代码内容 (request_dto):

package com.yljr.crcl.interfaces.dto;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Date;
import java.math.BigDecimal;

/**
 * UnitLimitByCompanyId 请求DTO
 * 根据公司 ID 和筛选条件查询组织单元额度信息，调用用户服务 /general/multiorgManage/queryCompanyUnitList 接口获取组织单元详细信息；采用 pagehelper 进行分页；列表默认按照组织单元名称为主要关键字、额度类型为次要关键字降序排列；筛选条件更新后，汇总值需要同步更新计算
 */
@ApiModel(value = "UnitLimitByCompanyIdReq", description = "根据公司 ID 和筛选条件查询组织单元额度信息，调用用户服务 /general/multiorgManage/queryCompanyUnitList 接口获取组织单元详细信息；采用 pagehelper 进行分页；列表默认按照组织单元名称为主要关键字、额度类型为次要关键字降序排列；筛选条件更新后，汇总值需要同步更新计算")
public class UnitLimitByCompanyIdReq {

    /**
     * 当前登录企业 id(必填)
     */
    @ApiModelProperty(value = "当前登录企业 id(必填)")
    private String gwCompanyId;
    /**
     * 组织单元名称(模糊搜索)(可选)
     */
    @ApiModelProperty(value = "组织单元名称(模糊搜索)(可选)")
    private String unitName;
    /**
     * 额度名称(模糊搜索)(可选)
     */
    @ApiModelProperty(value = "额度名称(模糊搜索)(可选)")
    private String limitSource;
    /**
     * 额度类型：10 云信额度，80 链数额度(可选，默认 80)
     */
    @ApiModelProperty(value = "额度类型：10 云信额度，80 链数额度(可选，默认 80)")
    private String bizType;
    /**
     * 页码(必填)
     */
    @ApiModelProperty(value = "页码(必填)")
    private String page;
    /**
     * 每页记录数(必填)
     */
    @ApiModelProperty(value = "每页记录数(必填)")
    private String pageRow;

    public String getGwCompanyId() {
        return gwCompanyId;
    }

    public void setGwCompanyId(String gwCompanyId) {
        this.gwCompanyId = gwCompanyId;
    }
    public String getUnitName() {
        return unitName;
    }

    public void setUnitName(String unitName) {
        this.unitName = unitName;
    }
    public String getLimitSource() {
        return limitSource;
    }

    public void setLimitSource(String limitSource) {
        this.limitSource = limitSource;
    }
    public String getBizType() {
        return bizType;
    }

    public void setBizType(String bizType) {
        this.bizType = bizType;
    }
    public String getPage() {
        return page;
    }

    public void setPage(String page) {
        this.page = page;
    }
    public String getPageRow() {
        return pageRow;
    }

    public void setPageRow(String pageRow) {
        this.pageRow = pageRow;
    }

    @Override
    public String toString() {
        return "UnitLimitByCompanyIdReq{" +
                "gwCompanyId=" + gwCompanyId + ", " +
                "unitName=" + unitName + ", " +
                "limitSource=" + limitSource + ", " +
                "bizType=" + bizType + ", " +
                "page=" + page + ", " +
                "pageRow=" + pageRow +
                "};";
    }
}
2025-07-24 15:02:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: /Users/renyu/Documents/create_project/链数中建一局_1753340378/crcl-open/crcl-open/src/main/java/com/yljr/crcl/interfaces/dto/UnitLimitByCompanyIdReq.java
2025-07-24 15:02:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: /Users/renyu/Documents/create_project/链数中建一局_1753340378/crcl-open/crcl-open/src/main/java/com/yljr/crcl/interfaces/dto/UnitLimitByCompanyIdReq.java
2025-07-24 15:02:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 代码内容 (response_dto):

package com.yljr.crcl.interfaces.dto;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.List;
import java.util.Date;
import java.math.BigDecimal;

/**
 * UnitLimitByCompanyId 响应DTO
 * 根据公司 ID 和筛选条件查询组织单元额度信息，调用用户服务 /general/multiorgManage/queryCompanyUnitList 接口获取组织单元详细信息；采用 pagehelper 进行分页；列表默认按照组织单元名称为主要关键字、额度类型为次要关键字降序排列；筛选条件更新后，汇总值需要同步更新计算
 */
@ApiModel(value = "UnitLimitByCompanyIdResp", description = "根据公司 ID 和筛选条件查询组织单元额度信息，调用用户服务 /general/multiorgManage/queryCompanyUnitList 接口获取组织单元详细信息；采用 pagehelper 进行分页；列表默认按照组织单元名称为主要关键字、额度类型为次要关键字降序排列；筛选条件更新后，汇总值需要同步更新计算")
public class UnitLimitByCompanyIdResp {

    /**
     * 总额度(元)
     */
    @ApiModelProperty(value = "总额度(元)")
    private String totalLimitAmt;
    /**
     * 已用额度(元)
     */
    @ApiModelProperty(value = "已用额度(元)")
    private String usedLimitAmt;
    /**
     * 可用额度(元)
     */
    @ApiModelProperty(value = "可用额度(元)")
    private String usableLimitAmt;
    /**
     * 额度信息列表
     */
    @ApiModelProperty(value = "额度信息列表")
    private String unitLimitListDetail;

    public String getTotalLimitAmt() {
        return totalLimitAmt;
    }

    public void setTotalLimitAmt(String totalLimitAmt) {
        this.totalLimitAmt = totalLimitAmt;
    }
    public String getUsedLimitAmt() {
        return usedLimitAmt;
    }

    public void setUsedLimitAmt(String usedLimitAmt) {
        this.usedLimitAmt = usedLimitAmt;
    }
    public String getUsableLimitAmt() {
        return usableLimitAmt;
    }

    public void setUsableLimitAmt(String usableLimitAmt) {
        this.usableLimitAmt = usableLimitAmt;
    }
    public String getUnitLimitListDetail() {
        return unitLimitListDetail;
    }

    public void setUnitLimitListDetail(String unitLimitListDetail) {
        this.unitLimitListDetail = unitLimitListDetail;
    }

    @Override
    public String toString() {
        return "UnitLimitByCompanyIdResp{" +
                "totalLimitAmt=" + totalLimitAmt + ", " +
                "usedLimitAmt=" + usedLimitAmt + ", " +
                "usableLimitAmt=" + usableLimitAmt + ", " +
                "unitLimitListDetail=" + unitLimitListDetail +
                "};";
    }
}
2025-07-24 15:02:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: /Users/renyu/Documents/create_project/链数中建一局_1753340378/crcl-open/crcl-open/src/main/java/com/yljr/crcl/interfaces/dto/UnitLimitByCompanyIdResp.java
2025-07-24 15:02:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: /Users/renyu/Documents/create_project/链数中建一局_1753340378/crcl-open/crcl-open/src/main/java/com/yljr/crcl/interfaces/dto/UnitLimitByCompanyIdResp.java
2025-07-24 15:02:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 代码内容 (mapper):

package com.yljr.crcl.domain.mapper;

import com.yljr.crcl.interfaces.dto.UnitLimitByCompanyIdReq;
import com.yljr.crcl.domain.entity.UnitLimitByCompanyId;
import org.apache.ibatis.annotations.Mapper;
import org.apache.ibatis.annotations.Param;
import java.util.List;

/**
 * UnitLimitByCompanyId Mapper接口
 * 根据公司 ID 和筛选条件查询组织单元额度信息，调用用户服务 /general/multiorgManage/queryCompanyUnitList 接口获取组织单元详细信息；采用 pagehelper 进行分页；列表默认按照组织单元名称为主要关键字、额度类型为次要关键字降序排列；筛选条件更新后，汇总值需要同步更新计算
 */
@Mapper
public interface UnitLimitByCompanyIdMapper {

    /**
     * 根据条件查询UnitLimitByCompanyId列表
     */
    List<UnitLimitByCompanyId> selectUnitLimitByCompanyIdList(@Param("condition") UnitLimitByCompanyIdReq condition);

    /**
     * 根据主键查询UnitLimitByCompanyId
     */
    UnitLimitByCompanyId selectByPrimaryKey(@Param("id") Long id);

    /**
     * 新增UnitLimitByCompanyId记录
     */
    int insert(UnitLimitByCompanyId record);

    /**
     * 更新UnitLimitByCompanyId记录
     */
    int updateByPrimaryKey(UnitLimitByCompanyId record);

    /**
     * 删除UnitLimitByCompanyId记录
     */
    int deleteByPrimaryKey(@Param("id") Long id);
}
2025-07-24 15:02:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: /Users/renyu/Documents/create_project/链数中建一局_1753340378/crcl-open/crcl-open/src/main/java/com/yljr/crcl/domain/mapper/UnitLimitByCompanyIdMapper.java
2025-07-24 15:02:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: /Users/renyu/Documents/create_project/链数中建一局_1753340378/crcl-open/crcl-open/src/main/java/com/yljr/crcl/domain/mapper/UnitLimitByCompanyIdMapper.java
2025-07-24 15:02:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 代码内容 (feign_client):

package com.yljr.crcl.application.feign;

import com.yljr.crcl.interfaces.dto.UnitLimitByCompanyIdReq;
import com.yljr.crcl.interfaces.dto.UnitLimitByCompanyIdResp;
import com.yljr.common.dto.ResponseInfo;
import org.springframework.cloud.openfeign.FeignClient;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.http.MediaType;

/**
 * UnitLimitByCompanyId Feign接口
 * 根据公司 ID 和筛选条件查询组织单元额度信息，调用用户服务 /general/multiorgManage/queryCompanyUnitList 接口获取组织单元详细信息；采用 pagehelper 进行分页；列表默认按照组织单元名称为主要关键字、额度类型为次要关键字降序排列；筛选条件更新后，汇总值需要同步更新计算
 */
@FeignClient(name = "zqyl-user-auth", path = "/userCenter/server")
public interface UnitLimitByCompanyIdFeignClient {

    /**
     * 根据公司 ID 和筛选条件查询组织单元额度信息，调用用户服务 /general/multiorgManage/queryCompanyUnitList 接口获取组织单元详细信息；采用 pagehelper 进行分页；列表默认按照组织单元名称为主要关键字、额度类型为次要关键字降序排列；筛选条件更新后，汇总值需要同步更新计算
     */
    @PostMapping(value = "/queryCompanyInfo", consumes = MediaType.APPLICATION_JSON_UTF8_VALUE)
    ResponseInfo<UnitLimitByCompanyIdResp> UnitLimitByCompanyId(@RequestBody UnitLimitByCompanyIdReq request);
}
2025-07-24 15:02:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: /Users/renyu/Documents/create_project/链数中建一局_1753340378/crcl-open/crcl-open/src/main/java/com/yljr/crcl/application/feign/UnitLimitByCompanyIdFeignClient.java
2025-07-24 15:02:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: /Users/renyu/Documents/create_project/链数中建一局_1753340378/crcl-open/crcl-open/src/main/java/com/yljr/crcl/application/feign/UnitLimitByCompanyIdFeignClient.java
2025-07-24 15:02:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 代码内容 (xml_mapping):
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yljr.crcl.domain.mapper.UnitLimitByCompanyIdMapper">

    <resultMap id="BaseResultMap" type="com.yljr.crcl.domain.entity.UnitLimitByCompanyId">
        <id column="id" jdbcType="BIGINT" property="id" />
        <result column="company_id" jdbcType="BIGINT" property="companyId" />
        <result column="mutilorg_id" jdbcType="BIGINT" property="mutilorgId" />
        <result column="unit_code" jdbcType="VARCHAR" property="unitCode" />
        <result column="unit_name" jdbcType="VARCHAR" property="unitName" />
        <result column="remark" jdbcType="VARCHAR" property="remark" />
        <result column="platform_type" jdbcType="INTEGER" property="platformType" />
        <result column="status" jdbcType="INTEGER" property="status" />
        <result column="create_id" jdbcType="BIGINT" property="createId" />
        <result column="oper_user_name" jdbcType="VARCHAR" property="operUserName" />
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
        <result column="modify_id" jdbcType="BIGINT" property="modifyId" />
        <result column="modify_user_name" jdbcType="VARCHAR" property="modifyUserName" />
        <result column="modify_time" jdbcType="TIMESTAMP" property="modifyTime" />
    </resultMap>

    <sql id="Base_Column_List">
        id, company_id, mutilorg_id, unit_code, unit_name, remark, platform_type, status, create_id, oper_user_name,
        create_time, modify_id, modify_user_name, modify_time
    </sql>

    <select id="selectUnitLimitByCompanyIdList" parameterType="com.yljr.crcl.interfaces.dto.UnitLimitByCompanyIdReq" 
            resultMap="BaseResultMap">
        SELECT 
        <include refid="Base_Column_List" />
        FROM T_CUST_MULTIORG_UNIT
        WHERE 1=1
        <if test="condition.unitName != null and condition.unitName != ''">
            AND unit_name LIKE CONCAT('%', #{condition.unitName}, '%')
        </if>
        <if test="condition.status != null">
            AND status = #{condition.status}
        </if>
        ORDER BY CREATE_TIME DESC
    </select>

    <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
        SELECT 
        <include refid="Base_Column_List" />
        FROM T_CUST_MULTIORG_UNIT
        WHERE ID = #{id,jdbcType=BIGINT}
    </select>

    <insert id="insert" parameterType="com.yljr.crcl.domain.entity.UnitLimitByCompanyId">
        INSERT INTO T_CUST_MULTIORG_UNIT (company_id, mutilorg_id, unit_code, unit_name, remark, platform_type, status, create_id, oper_user_name, create_time, modify_id, modify_user_name, modify_time)
        VALUES (#{companyId}, #{mutilorgId}, #{unitCode}, #{unitName}, #{remark}, #{platformType}, #{status}, #{createId}, #{operUserName}, #{createTime}, #{modifyId}, #{modifyUserName}, #{modifyTime})
    </insert>

    <update id="updateByPrimaryKey" parameterType="com.yljr.crcl.domain.entity.UnitLimitByCompanyId">
        UPDATE T_CUST_MULTIORG_UNIT
        SET company_id = #{companyId},
            mutilorg_id = #{mutilorgId},
            unit_code = #{unitCode},
            unit_name = #{unitName},
            remark = #{remark},
            platform_type = #{platformType},
            status = #{status},
            create_id = #{createId},
            oper_user_name = #{operUserName},
            modify_id = #{modifyId},
            modify_user_name = #{modifyUserName},
            modify_time = #{modifyTime}
        WHERE ID = #{id}
    </update>

    <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
        DELETE FROM T_CUST_MULTIORG_UNIT
        WHERE ID = #{id,jdbcType=BIGINT}
    </delete>

</mapper>
2025-07-24 15:02:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: /Users/renyu/Documents/create_project/链数中建一局_1753340378/crcl-open/crcl-open/src/main/resources/mapper/UnitLimitByCompanyIdMapper.xml
2025-07-24 15:02:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: /Users/renyu/Documents/create_project/链数中建一局_1753340378/crcl-open/crcl-open/src/main/resources/mapper/UnitLimitByCompanyIdMapper.xml
2025-07-24 15:02:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📊 代码生成完成，共写入 9 个文件到项目中
2025-07-24 15:02:58 - src.corder_integration.utils.backup_cleaner - INFO - 🧹 开始清理项目备份: /Users/renyu/Documents/create_project/链数中建一局_1753340378/crcl-open/crcl-open
2025-07-24 15:02:58 - src.corder_integration.utils.backup_cleaner - INFO - 🎉 备份清理完成: 删除 0 目录, 0 文件
2025-07-24 15:02:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🗑️ 已清理项目分析缓存，确保下次分析获取最新状态
2025-07-24 15:02:58 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_009 状态更新为 completed
2025-07-24 15:02:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 任务 task_009 执行成功
2025-07-24 15:02:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 开始执行任务: task_010 (api)
2025-07-24 15:02:58 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_010 已被 intelligent_coding_node 领取
2025-07-24 15:02:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🌐 执行API接口生成任务: task_010
2025-07-24 15:02:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 解析的接口信息:
2025-07-24 15:02:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 接口名称: UnitLimitByCompanyIdExport
2025-07-24 15:02:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - API路径: /crcl-open-api/lsLimit/listUnitLimitByCompanyIdExport
2025-07-24 15:02:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - HTTP方法: GET
2025-07-24 15:02:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 输入参数: 6个
2025-07-24 15:02:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 输出参数: 3个
2025-07-24 15:02:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 业务描述: 复用 listUnitLimitByCompanyId 接口的查询逻辑，将结果导出为 Excel 格式；文件生成在本地目录，采用本地链接形式返回路径；文件类型为 Excel 列表，文件类型：xlsx；列表头列内容：组织单元名称、额度名称、额度类型、已分配额度（元）、已用额度（元）、可用额度（元）；需要调用用户服务 /general/multiorgManage/queryCompanyUnitList 接口获取组织单元详细信息
2025-07-24 15:02:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 在 /Users/renyu/Documents/create_project/链数中建一局_1753340378/crcl-open 中查找最佳Java项目路径...
2025-07-24 15:02:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 目标服务名: 确权开立服务
2025-07-24 15:02:58 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 15:02:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 发现Java项目: crcl-open
2025-07-24 15:02:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       🎯 相对路径: crcl-open
2025-07-24 15:02:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       📊 Java文件: 2259个
2025-07-24 15:02:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       📐 目录深度: 1
2025-07-24 15:02:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       🏆 优先级分数: 750
2025-07-24 15:02:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 排序后的候选路径（前3个）:
2025-07-24 15:02:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    1. crcl-open (优先级: 750)
2025-07-24 15:02:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 选择最佳Java项目路径:
2025-07-24 15:02:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 完整路径: /Users/renyu/Documents/create_project/链数中建一局_1753340378/crcl-open/crcl-open
2025-07-24 15:02:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📋 相对路径: crcl-open
2025-07-24 15:02:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    🏆 最终优先级: 750
2025-07-24 15:02:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📁 基础项目路径: /Users/renyu/Documents/create_project/链数中建一局_1753340378/crcl-open/crcl-open
2025-07-24 15:02:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 从API路径 /crcl-open-api/lsLimit/listUnitLimitByCompanyIdExport 提取关键字: lsLimit
2025-07-24 15:02:58 - src.corder_integration.config.domain_mapping_config - INFO - 🔍 映射API关键字到业务领域: lsLimit
2025-07-24 15:02:58 - src.corder_integration.config.domain_mapping_config - INFO - ✅ 精确匹配: lsLimit -> lsLimit
2025-07-24 15:02:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 API关键字映射: lsLimit -> lsLimit
2025-07-24 15:02:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🤖 使用大模型智能匹配Controller: lsLimit (API: /crcl-open-api/lsLimit/listUnitLimitByCompanyIdExport)
2025-07-24 15:02:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功扫描到 54 个Controller文件
2025-07-24 15:02:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 找到 54 个Controller文件
2025-07-24 15:02:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🤖 调用volcengine分析Controller相似度...
2025-07-24 15:03:07 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 15:03:07 - src.corder_integration.langgraph.nodes.intelligent_coding_node - ERROR - ❌ LLM响应JSON解析失败: Expecting value: line 1 column 1 (char 0)
2025-07-24 15:03:07 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 使用规则匹配方式查找Controller: lsLimit
2025-07-24 15:03:07 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 智能匹配找到相似Controller: LsLimitController
2025-07-24 15:03:07 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 Controller路径: /Users/renyu/Documents/create_project/链数中建一局_1753340378/crcl-open/crcl-open/src/main/java/com/yljr/crcl/limit/interfaces/LsLimitController.java
2025-07-24 15:03:07 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    🔢 相似度分数: 0.80
2025-07-24 15:03:07 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    💡 匹配原因: 类名包含关键字: lsLimit, 路径包含关键字: lsLimit, 包名业务相关: limit
2025-07-24 15:03:07 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 分析目标项目: /Users/renyu/Documents/create_project/链数中建一局_1753340378/crcl-open/crcl-open/src/main/java
2025-07-24 15:03:07 - src.apis.project_analysis_api - INFO - 🔍 开始分析项目用于代码生成: /Users/renyu/Documents/create_project/链数中建一局_1753340378/crcl-open/crcl-open/src/main/java
2025-07-24 15:03:07 - src.apis.project_analysis_api - INFO - 🔄 检测到Java文件数量变化 (2251 -> 2259)，清除缓存
2025-07-24 15:03:07 - src.apis.project_analysis_api - INFO - 🔍 在 /Users/renyu/Documents/create_project/链数中建一局_1753340378/crcl-open/crcl-open/src/main/java 中查找最佳Java项目路径...
2025-07-24 15:03:07 - src.apis.project_analysis_api - INFO - 🎯 目标服务名: 确权开立服务
2025-07-24 15:03:07 - src.apis.project_analysis_api - WARNING - ⚠️ 在 /Users/renyu/Documents/create_project/链数中建一局_1753340378/crcl-open/crcl-open/src/main/java 中未找到包含Java文件的src/main/java结构
2025-07-24 15:03:07 - src.apis.project_analysis_api - INFO - 📂 实际分析路径: /Users/renyu/Documents/create_project/链数中建一局_1753340378/crcl-open/crcl-open/src/main/java
2025-07-24 15:03:07 - src.utils.java_code_analyzer - INFO - 🔍 开始分析企业级Java项目: /Users/renyu/Documents/create_project/链数中建一局_1753340378/crcl-open/crcl-open/src/main/java
2025-07-24 15:03:12 - src.utils.java_code_analyzer - INFO - ✅ 企业级项目分析完成，共分析 2248 个Java文件
2025-07-24 15:03:12 - src.apis.project_analysis_api - INFO - 📦 动态检测到基础包: com.yljr.crcl (出现2248次)
2025-07-24 15:03:12 - src.apis.project_analysis_api - INFO - 📦 动态检测到基础包: com.yljr.crcl (出现2248次)
2025-07-24 15:03:12 - src.apis.project_analysis_api - INFO - 📋 提取到49个Controller的详细信息
2025-07-24 15:03:12 - src.apis.project_analysis_api - INFO - 📦 动态检测到基础包: com.yljr.crcl (出现2248次)
2025-07-24 15:03:12 - src.apis.project_analysis_api - INFO - ✅ 项目分析完成，已提取代码生成上下文
2025-07-24 15:03:12 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 从编码代理获取设计文档内容 (7416 字符)
2025-07-24 15:03:12 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 设计文档内容已添加到项目上下文 (7416 字符)
2025-07-24 15:03:12 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 使用详细Controller信息，共49个Controller
2025-07-24 15:03:12 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 Controller关联性分析完成:
2025-07-24 15:03:12 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 总Controller数: 49
2025-07-24 15:03:12 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 相关Controller数: 1
2025-07-24 15:03:12 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 最高关联度: 0.45
2025-07-24 15:03:12 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 Controller关联性分析:
2025-07-24 15:03:12 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 总Controller数: 49
2025-07-24 15:03:12 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 相关Controller数: 1
2025-07-24 15:03:12 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 关联度得分: 0.45
2025-07-24 15:03:12 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 相关Controllers: ['LsLimitController']
2025-07-24 15:03:12 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🤖 调用volcengine分析项目策略...发送的prompt信息: Java文件数=2248, Controller数=49
2025-07-24 15:03:15 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 15:03:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 项目策略判断: create_new - 虽然项目已存在名为 LsLimitController 的 Controller，但其业务关联度仅为 0.45（< 0.6），未达到“业务相关”阈值；同时 API 路径 /crcl-open-api/lsLimit/listUnitLimitByCompanyIdExport 与现有 Controller 的路径模式（/lsLimit/**）虽前缀一致，但功能点（listUnitLimitByCompanyIdExport）属于全新的导出场景，业务语义与现有接口差异较大，属于新的业务领域扩展。因此选择新建 Controller 以保持职责单一、避免既有 Controller 臃肿。
2025-07-24 15:03:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📁 策略2：直接使用新文件生成策略，原因: 虽然项目已存在名为 LsLimitController 的 Controller，但其业务关联度仅为 0.45（< 0.6），未达到“业务相关”阈值；同时 API 路径 /crcl-open-api/lsLimit/listUnitLimitByCompanyIdExport 与现有 Controller 的路径模式（/lsLimit/**）虽前缀一致，但功能点（listUnitLimitByCompanyIdExport）属于全新的导出场景，业务语义与现有接口差异较大，属于新的业务领域扩展。因此选择新建 Controller 以保持职责单一、避免既有 Controller 臃肿。
2025-07-24 15:03:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔧 规范化项目路径: /Users/renyu/Documents/create_project/链数中建一局_1753340378/crcl-open/crcl-open/src/main/java -> /Users/renyu/Documents/create_project/链数中建一局_1753340378/crcl-open/crcl-open
2025-07-24 15:03:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔧 策略2路径规范化:
2025-07-24 15:03:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    原始路径: /Users/renyu/Documents/create_project/链数中建一局_1753340378/crcl-open/crcl-open/src/main/java
2025-07-24 15:03:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    规范化后: /Users/renyu/Documents/create_project/链数中建一局_1753340378/crcl-open/crcl-open
2025-07-24 15:03:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -  调用volcengine大模型生成代码...
2025-07-24 15:03:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 开始代码生成...
2025-07-24 15:03:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎨 使用模板+AI混合模式生成代码
2025-07-24 15:03:15 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - 🎨 开始增强版代码生成: UnitLimitByCompanyIdExport
2025-07-24 15:03:15 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - 🔍 检测到Excel导出要求
2025-07-24 15:03:15 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - 🔍 解析到表结构: t_cust_multiorg_unit (14列)
2025-07-24 15:03:15 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - 🤖 使用智能文件复用和专门化提示词模板增强代码...
2025-07-24 15:03:15 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 设置设计文档内容，长度: 7416
2025-07-24 15:03:15 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO - 🔍 分析项目结构: /Users/renyu/Documents/create_project/链数中建一局_1753340378/crcl-open/crcl-open
2025-07-24 15:03:15 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO - ✅ 项目结构分析完成
2025-07-24 15:03:15 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO -    Controllers: 50
2025-07-24 15:03:15 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO -    Application Services: 37
2025-07-24 15:03:15 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO -    Domain Services: 38
2025-07-24 15:03:15 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO -    Mappers: 47
2025-07-24 15:03:15 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO -    Feign Clients: 1
2025-07-24 15:03:15 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO -    XML Files: 109
2025-07-24 15:03:15 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO - 🤔 决策文件复用策略: UnitLimitByCompanyIdExport
2025-07-24 15:03:15 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO - 📋 文件复用策略决策完成:
2025-07-24 15:03:15 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO -    controller: create_new - 未找到合适的Controller (最高分数: 0)
2025-07-24 15:03:15 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO -    application_service: create_new - 需要Feign调用，创建新的Application Service
2025-07-24 15:03:15 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO -    domain_service: create_new - 未找到合适的Domain Service，需要创建
2025-07-24 15:03:15 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO -    mapper: create_new - 未找到合适的Mapper，需要创建
2025-07-24 15:03:15 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO -    feign_client: create_new - 未找到合适的Feign Client，需要创建
2025-07-24 15:03:15 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO -    xml_file: create_new - 需要创建新的XML文件
2025-07-24 15:03:15 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - 📋 智能文件复用策略:
2025-07-24 15:03:15 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO -    controller: create_new - 未找到合适的Controller (最高分数: 0)
2025-07-24 15:03:15 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO -    application_service: create_new - 需要Feign调用，创建新的Application Service
2025-07-24 15:03:15 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO -    domain_service: create_new - 未找到合适的Domain Service，需要创建
2025-07-24 15:03:15 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO -    mapper: create_new - 未找到合适的Mapper，需要创建
2025-07-24 15:03:15 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO -    feign_client: create_new - 未找到合适的Feign Client，需要创建
2025-07-24 15:03:15 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO -    xml_file: create_new - 需要创建新的XML文件
2025-07-24 15:03:15 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO - 🔗 生成完整调用链: UnitLimitByCompanyIdExport
2025-07-24 15:03:15 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO - 🔍 找到表结构: T_CUST_MULTIORG_UNIT
2025-07-24 15:03:15 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO - ✅ 解析到 14 个字段
2025-07-24 15:03:15 - src.corder_integration.code_generator.intelligent_file_reuse_manager - INFO - ✅ 调用链代码生成完成，包含 9 个组件
2025-07-24 15:03:15 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 智能文件复用生成了 9 个组件
2025-07-24 15:03:15 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - 📝 需要创建 9 个新文件
2025-07-24 15:03:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI生成成功，生成代码类型: ['controller_method', 'application_service', 'domain_service', 'domain_service_impl', 'request_dto', 'response_dto', 'mapper', 'feign_client', 'xml_mapping']
2025-07-24 15:03:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 开始写入生成的代码文件...
2025-07-24 15:03:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔧 统一类名基础: UnitLimitByCompanyIdExport
2025-07-24 15:03:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ controller_method 类名: UnitLimitByCompanyIdExportController
2025-07-24 15:03:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ application_service 类名: UnitLimitByCompanyIdExportApplication
2025-07-24 15:03:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ domain_service_impl 类名: UnitLimitByCompanyIdExportServiceImpl
2025-07-24 15:03:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ request_dto 类名: UnitLimitByCompanyIdExportReq
2025-07-24 15:03:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ response_dto 类名: UnitLimitByCompanyIdExportResp
2025-07-24 15:03:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 标准化后的代码类型: ['controller_method', 'application_service', 'domain_service', 'domain_service_impl', 'request_dto', 'response_dto', 'mapper', 'feign_client', 'xml_mapping']
2025-07-24 15:03:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🤖 调用volcengine判断Java文件输出路径...
2025-07-24 15:03:30 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-24 15:03:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM路径判断成功，配置了 9 个Java文件路径
2025-07-24 15:03:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 controller_method: UnitLimitByCompanyIdExportController.java
2025-07-24 15:03:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 application_service: UnitLimitByCompanyIdExportApplication.java
2025-07-24 15:03:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 domain_service: UnitLimitByCompanyIdExportService.java
2025-07-24 15:03:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 domain_service_impl: UnitLimitByCompanyIdExportServiceImpl.java
2025-07-24 15:03:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 request_dto: UnitLimitByCompanyIdExportReq.java
2025-07-24 15:03:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 response_dto: UnitLimitByCompanyIdExportResp.java
2025-07-24 15:03:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 mapper: UnitLimitByCompanyIdExportMapper.java
2025-07-24 15:03:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 feign_client: UnitLimitByCompanyIdExportFeignClient.java
2025-07-24 15:03:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 xml_mapping: UnitLimitByCompanyIdExportMapper.xml
2025-07-24 15:03:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 代码内容 (controller_method):

package com.yljr.crcl.interfaces;

import com.yljr.crcl.interfaces.dto.UnitLimitByCompanyIdExportReq;
import com.yljr.crcl.interfaces.dto.UnitLimitByCompanyIdExportResp;
import com.yljr.common.dto.Response;
import org.springframework.web.bind.annotation.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.validation.annotation.Validated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import io.swagger.annotations.ApiOperation;

import javax.validation.Valid;

/**
 * UnitLimitByCompanyIdExport Controller
 * 复用 listUnitLimitByCompanyId 接口的查询逻辑，将结果导出为 Excel 格式；文件生成在本地目录，采用本地链接形式返回路径；文件类型为 Excel 列表，文件类型：xlsx；列表头列内容：组织单元名称、额度名称、额度类型、已分配额度（元）、已用额度（元）、可用额度（元）；需要调用用户服务 /general/multiorgManage/queryCompanyUnitList 接口获取组织单元详细信息
 */
@Validated
@RestController
@RequestMapping("/api/unitLimitByCompanyIdExport")
public class UnitLimitByCompanyIdExportController {

    private final Logger logger = LoggerFactory.getLogger(this.getClass());
    
    @Autowired
    private UnitLimitByCompanyIdExportApplication unitLimitByCompanyIdExportApplication;

    /**
     * 复用 listUnitLimitByCompanyId 接口的查询逻辑，将结果导出为 Excel 格式；文件生成在本地目录，采用本地链接形式返回路径；文件类型为 Excel 列表，文件类型：xlsx；列表头列内容：组织单元名称、额度名称、额度类型、已分配额度（元）、已用额度（元）、可用额度（元）；需要调用用户服务 /general/multiorgManage/queryCompanyUnitList 接口获取组织单元详细信息
     */
    @PostMapping("/unitLimitByCompanyIdExport")
    @ApiOperation(value = "复用 listUnitLimitByCompanyId 接口的查询逻辑，将结果导出为 Excel 格式；文件生成在本地目录，采用本地链接形式返回路径；文件类型为 Excel 列表，文件类型：xlsx；列表头列内容：组织单元名称、额度名称、额度类型、已分配额度（元）、已用额度（元）、可用额度（元）；需要调用用户服务 /general/multiorgManage/queryCompanyUnitList 接口获取组织单元详细信息")
    public Response<UnitLimitByCompanyIdExportResp> unitLimitByCompanyIdExport(@RequestBody @Valid UnitLimitByCompanyIdExportReq request) {
        try {
            logger.info("开始执行unitLimitByCompanyIdExport，请求参数: {}", request);
            
            return unitLimitByCompanyIdExportApplication.unitLimitByCompanyIdExport(request);
            
        } catch (Exception e) {
            logger.error("执行unitLimitByCompanyIdExport失败", e);
            return Response.error("执行失败: " + e.getMessage());
        }
    }
}
2025-07-24 15:03:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: /Users/renyu/Documents/create_project/链数中建一局_1753340378/crcl-open/crcl-open/src/main/java/com/yljr/crcl/interfaces/UnitLimitByCompanyIdExportController.java
2025-07-24 15:03:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: /Users/renyu/Documents/create_project/链数中建一局_1753340378/crcl-open/crcl-open/src/main/java/com/yljr/crcl/interfaces/UnitLimitByCompanyIdExportController.java
2025-07-24 15:03:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 代码内容 (application_service):

package com.yljr.crcl.application.service;

import com.yljr.crcl.interfaces.dto.UnitLimitByCompanyIdExportReq;
import com.yljr.crcl.interfaces.dto.UnitLimitByCompanyIdExportResp;
import org.springframework.stereotype.Service;
import org.springframework.beans.factory.annotation.Autowired;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * UnitLimitByCompanyIdExport Application Service
 * 复用 listUnitLimitByCompanyId 接口的查询逻辑，将结果导出为 Excel 格式；文件生成在本地目录，采用本地链接形式返回路径；文件类型为 Excel 列表，文件类型：xlsx；列表头列内容：组织单元名称、额度名称、额度类型、已分配额度（元）、已用额度（元）、可用额度（元）；需要调用用户服务 /general/multiorgManage/queryCompanyUnitList 接口获取组织单元详细信息
 */
@Service
public class UnitLimitByCompanyIdExportApplication {

    private static final Logger logger = LoggerFactory.getLogger(UnitLimitByCompanyIdExportApplication.class);
    
    @Autowired
    private UnitLimitByCompanyIdExportFeignClient unitlimitbycompanyidexportFeignClient;

    /**
     * 复用 listUnitLimitByCompanyId 接口的查询逻辑，将结果导出为 Excel 格式；文件生成在本地目录，采用本地链接形式返回路径；文件类型为 Excel 列表，文件类型：xlsx；列表头列内容：组织单元名称、额度名称、额度类型、已分配额度（元）、已用额度（元）、可用额度（元）；需要调用用户服务 /general/multiorgManage/queryCompanyUnitList 接口获取组织单元详细信息
     */
    public UnitLimitByCompanyIdExportResp UnitLimitByCompanyIdExport(UnitLimitByCompanyIdExportReq request) {
        logger.info("Application Service执行UnitLimitByCompanyIdExport，参数: {}", request);
        
        try {
            return unitlimitbycompanyidexportFeignClient.UnitLimitByCompanyIdExport(request);
        } catch (Exception e) {
            logger.error("Application Service执行UnitLimitByCompanyIdExport失败", e);
            throw new RuntimeException("执行失败: " + e.getMessage(), e);
        }
    }
}
2025-07-24 15:03:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: /Users/renyu/Documents/create_project/链数中建一局_1753340378/crcl-open/crcl-open/src/main/java/com/yljr/crcl/application/service/UnitLimitByCompanyIdExportApplication.java
2025-07-24 15:03:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: /Users/renyu/Documents/create_project/链数中建一局_1753340378/crcl-open/crcl-open/src/main/java/com/yljr/crcl/application/service/UnitLimitByCompanyIdExportApplication.java
2025-07-24 15:03:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 代码内容 (domain_service):
package com.yljr.crcl.domain.service;

import com.yljr.crcl.interfaces.dto.UnitLimitByCompanyIdExportReq;
import com.yljr.crcl.interfaces.dto.UnitLimitByCompanyIdExportResp;

/**
 * UnitLimitByCompanyIdExport Domain Service Interface
 * 复用 listUnitLimitByCompanyId 接口的查询逻辑，将结果导出为 Excel 格式；文件生成在本地目录，采用本地链接形式返回路径；文件类型为 Excel 列表，文件类型：xlsx；列表头列内容：组织单元名称、额度名称、额度类型、已分配额度（元）、已用额度（元）、可用额度（元）；需要调用用户服务 /general/multiorgManage/queryCompanyUnitList 接口获取组织单元详细信息
 */
public interface UnitLimitByCompanyIdExportService {

    /**
     * 复用 listUnitLimitByCompanyId 接口的查询逻辑，将结果导出为 Excel 格式；文件生成在本地目录，采用本地链接形式返回路径；文件类型为 Excel 列表，文件类型：xlsx；列表头列内容：组织单元名称、额度名称、额度类型、已分配额度（元）、已用额度（元）、可用额度（元）；需要调用用户服务 /general/multiorgManage/queryCompanyUnitList 接口获取组织单元详细信息
     */
    UnitLimitByCompanyIdExportResp unitLimitByCompanyIdExport(UnitLimitByCompanyIdExportReq request);
}
2025-07-24 15:03:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: /Users/renyu/Documents/create_project/链数中建一局_1753340378/crcl-open/crcl-open/src/main/java/com/yljr/crcl/domain/service/UnitLimitByCompanyIdExportService.java
2025-07-24 15:03:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: /Users/renyu/Documents/create_project/链数中建一局_1753340378/crcl-open/crcl-open/src/main/java/com/yljr/crcl/domain/service/UnitLimitByCompanyIdExportService.java
2025-07-24 15:03:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 代码内容 (domain_service_impl):
package com.yljr.crcl.domain.service.impl;

import com.yljr.crcl.domain.service.UnitLimitByCompanyIdExportService;
import com.yljr.crcl.interfaces.dto.UnitLimitByCompanyIdExportReq;
import com.yljr.crcl.interfaces.dto.UnitLimitByCompanyIdExportResp;
import com.yljr.crcl.domain.entity.UnitLimitByCompanyIdExport;
import com.yljr.crcl.domain.mapper.UnitLimitByCompanyIdExportMapper;
import org.springframework.stereotype.Service;
import org.springframework.beans.factory.annotation.Autowired;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import java.util.List;

/**
 * UnitLimitByCompanyIdExport Domain Service Implementation
 * 复用 listUnitLimitByCompanyId 接口的查询逻辑，将结果导出为 Excel 格式；文件生成在本地目录，采用本地链接形式返回路径；文件类型为 Excel 列表，文件类型：xlsx；列表头列内容：组织单元名称、额度名称、额度类型、已分配额度（元）、已用额度（元）、可用额度（元）；需要调用用户服务 /general/multiorgManage/queryCompanyUnitList 接口获取组织单元详细信息
 */
@Service
public class UnitLimitByCompanyIdExportServiceImpl implements UnitLimitByCompanyIdExportService {

    private static final Logger logger = LoggerFactory.getLogger(UnitLimitByCompanyIdExportServiceImpl.class);
    
    @Autowired
    private UnitLimitByCompanyIdExportMapper unitlimitbycompanyidexportMapper;

    /**
     * 复用 listUnitLimitByCompanyId 接口的查询逻辑，将结果导出为 Excel 格式；文件生成在本地目录，采用本地链接形式返回路径；文件类型为 Excel 列表，文件类型：xlsx；列表头列内容：组织单元名称、额度名称、额度类型、已分配额度（元）、已用额度（元）、可用额度（元）；需要调用用户服务 /general/multiorgManage/queryCompanyUnitList 接口获取组织单元详细信息
     */
    @Override
    public UnitLimitByCompanyIdExportResp unitLimitByCompanyIdExport(UnitLimitByCompanyIdExportReq request) {
        logger.info("Domain Service执行UnitLimitByCompanyIdExport，参数: {}", request);
        
        try {
        // 调用Mapper查询数据
        List<UnitLimitByCompanyIdExport> dataList = unitlimitbycompanyidexportMapper.selectUnitLimitByCompanyIdExportList(request);
        
        // 构建响应
        UnitLimitByCompanyIdExportResp response = new UnitLimitByCompanyIdExportResp();
        response.setDataList(dataList);
        response.setTotalCount(dataList.size());
        
        return response;
        } catch (Exception e) {
            logger.error("Domain Service执行UnitLimitByCompanyIdExport失败", e);
            throw new RuntimeException("执行失败: " + e.getMessage(), e);
        }
    }
}
2025-07-24 15:03:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: /Users/renyu/Documents/create_project/链数中建一局_1753340378/crcl-open/crcl-open/src/main/java/com/yljr/crcl/domain/service/impl/UnitLimitByCompanyIdExportServiceImpl.java
2025-07-24 15:03:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: /Users/renyu/Documents/create_project/链数中建一局_1753340378/crcl-open/crcl-open/src/main/java/com/yljr/crcl/domain/service/impl/UnitLimitByCompanyIdExportServiceImpl.java
2025-07-24 15:03:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 代码内容 (request_dto):

package com.yljr.crcl.interfaces.dto;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Date;
import java.math.BigDecimal;

/**
 * UnitLimitByCompanyIdExport 请求DTO
 * 复用 listUnitLimitByCompanyId 接口的查询逻辑，将结果导出为 Excel 格式；文件生成在本地目录，采用本地链接形式返回路径；文件类型为 Excel 列表，文件类型：xlsx；列表头列内容：组织单元名称、额度名称、额度类型、已分配额度（元）、已用额度（元）、可用额度（元）；需要调用用户服务 /general/multiorgManage/queryCompanyUnitList 接口获取组织单元详细信息
 */
@ApiModel(value = "UnitLimitByCompanyIdExportReq", description = "复用 listUnitLimitByCompanyId 接口的查询逻辑，将结果导出为 Excel 格式；文件生成在本地目录，采用本地链接形式返回路径；文件类型为 Excel 列表，文件类型：xlsx；列表头列内容：组织单元名称、额度名称、额度类型、已分配额度（元）、已用额度（元）、可用额度（元）；需要调用用户服务 /general/multiorgManage/queryCompanyUnitList 接口获取组织单元详细信息")
public class UnitLimitByCompanyIdExportReq {

    /**
     * 当前登录企业 id(必填)
     */
    @ApiModelProperty(value = "当前登录企业 id(必填)")
    private String gwCompanyId;
    /**
     * 组织单元名称(模糊搜索)(可选)
     */
    @ApiModelProperty(value = "组织单元名称(模糊搜索)(可选)")
    private String unitName;
    /**
     * 额度名称(模糊搜索)(可选)
     */
    @ApiModelProperty(value = "额度名称(模糊搜索)(可选)")
    private String limitSource;
    /**
     * 额度类型：10 云信额度，80 链数额度(可选，默认 80)
     */
    @ApiModelProperty(value = "额度类型：10 云信额度，80 链数额度(可选，默认 80)")
    private String bizType;
    /**
     * 页码(必填)
     */
    @ApiModelProperty(value = "页码(必填)")
    private String page;
    /**
     * 每页记录数(必填)
     */
    @ApiModelProperty(value = "每页记录数(必填)")
    private String pageRow;

    public String getGwCompanyId() {
        return gwCompanyId;
    }

    public void setGwCompanyId(String gwCompanyId) {
        this.gwCompanyId = gwCompanyId;
    }
    public String getUnitName() {
        return unitName;
    }

    public void setUnitName(String unitName) {
        this.unitName = unitName;
    }
    public String getLimitSource() {
        return limitSource;
    }

    public void setLimitSource(String limitSource) {
        this.limitSource = limitSource;
    }
    public String getBizType() {
        return bizType;
    }

    public void setBizType(String bizType) {
        this.bizType = bizType;
    }
    public String getPage() {
        return page;
    }

    public void setPage(String page) {
        this.page = page;
    }
    public String getPageRow() {
        return pageRow;
    }

    public void setPageRow(String pageRow) {
        this.pageRow = pageRow;
    }

    @Override
    public String toString() {
        return "UnitLimitByCompanyIdExportReq{" +
                "gwCompanyId=" + gwCompanyId + ", " +
                "unitName=" + unitName + ", " +
                "limitSource=" + limitSource + ", " +
                "bizType=" + bizType + ", " +
                "page=" + page + ", " +
                "pageRow=" + pageRow +
                "};";
    }
}
2025-07-24 15:03:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: /Users/renyu/Documents/create_project/链数中建一局_1753340378/crcl-open/crcl-open/src/main/java/com/yljr/crcl/interfaces/dto/UnitLimitByCompanyIdExportReq.java
2025-07-24 15:03:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: /Users/renyu/Documents/create_project/链数中建一局_1753340378/crcl-open/crcl-open/src/main/java/com/yljr/crcl/interfaces/dto/UnitLimitByCompanyIdExportReq.java
2025-07-24 15:03:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 代码内容 (response_dto):

package com.yljr.crcl.interfaces.dto;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.List;
import java.util.Date;
import java.math.BigDecimal;

/**
 * UnitLimitByCompanyIdExport 响应DTO
 * 复用 listUnitLimitByCompanyId 接口的查询逻辑，将结果导出为 Excel 格式；文件生成在本地目录，采用本地链接形式返回路径；文件类型为 Excel 列表，文件类型：xlsx；列表头列内容：组织单元名称、额度名称、额度类型、已分配额度（元）、已用额度（元）、可用额度（元）；需要调用用户服务 /general/multiorgManage/queryCompanyUnitList 接口获取组织单元详细信息
 */
@ApiModel(value = "UnitLimitByCompanyIdExportResp", description = "复用 listUnitLimitByCompanyId 接口的查询逻辑，将结果导出为 Excel 格式；文件生成在本地目录，采用本地链接形式返回路径；文件类型为 Excel 列表，文件类型：xlsx；列表头列内容：组织单元名称、额度名称、额度类型、已分配额度（元）、已用额度（元）、可用额度（元）；需要调用用户服务 /general/multiorgManage/queryCompanyUnitList 接口获取组织单元详细信息")
public class UnitLimitByCompanyIdExportResp {

    /**
     * 0 文件生成失败，1 文件生成成功
     */
    @ApiModelProperty(value = "0 文件生成失败，1 文件生成成功")
    private String flag;
    /**
     * flag=0 时的提示内容
     */
    @ApiModelProperty(value = "flag=0 时的提示内容")
    private String msg;
    /**
     * flag=1 时的文件下载地址
     */
    @ApiModelProperty(value = "flag=1 时的文件下载地址")
    private String data;

    public String getFlag() {
        return flag;
    }

    public void setFlag(String flag) {
        this.flag = flag;
    }
    public String getMsg() {
        return msg;
    }

    public void setMsg(String msg) {
        this.msg = msg;
    }
    public String getData() {
        return data;
    }

    public void setData(String data) {
        this.data = data;
    }

    @Override
    public String toString() {
        return "UnitLimitByCompanyIdExportResp{" +
                "flag=" + flag + ", " +
                "msg=" + msg + ", " +
                "data=" + data +
                "};";
    }
}
2025-07-24 15:03:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: /Users/renyu/Documents/create_project/链数中建一局_1753340378/crcl-open/crcl-open/src/main/java/com/yljr/crcl/interfaces/dto/UnitLimitByCompanyIdExportResp.java
2025-07-24 15:03:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: /Users/renyu/Documents/create_project/链数中建一局_1753340378/crcl-open/crcl-open/src/main/java/com/yljr/crcl/interfaces/dto/UnitLimitByCompanyIdExportResp.java
2025-07-24 15:03:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 代码内容 (mapper):

package com.yljr.crcl.domain.mapper;

import com.yljr.crcl.interfaces.dto.UnitLimitByCompanyIdExportReq;
import com.yljr.crcl.domain.entity.UnitLimitByCompanyIdExport;
import org.apache.ibatis.annotations.Mapper;
import org.apache.ibatis.annotations.Param;
import java.util.List;

/**
 * UnitLimitByCompanyIdExport Mapper接口
 * 复用 listUnitLimitByCompanyId 接口的查询逻辑，将结果导出为 Excel 格式；文件生成在本地目录，采用本地链接形式返回路径；文件类型为 Excel 列表，文件类型：xlsx；列表头列内容：组织单元名称、额度名称、额度类型、已分配额度（元）、已用额度（元）、可用额度（元）；需要调用用户服务 /general/multiorgManage/queryCompanyUnitList 接口获取组织单元详细信息
 */
@Mapper
public interface UnitLimitByCompanyIdExportMapper {

    /**
     * 根据条件查询UnitLimitByCompanyIdExport列表
     */
    List<UnitLimitByCompanyIdExport> selectUnitLimitByCompanyIdExportList(@Param("condition") UnitLimitByCompanyIdExportReq condition);

    /**
     * 根据主键查询UnitLimitByCompanyIdExport
     */
    UnitLimitByCompanyIdExport selectByPrimaryKey(@Param("id") Long id);

    /**
     * 新增UnitLimitByCompanyIdExport记录
     */
    int insert(UnitLimitByCompanyIdExport record);

    /**
     * 更新UnitLimitByCompanyIdExport记录
     */
    int updateByPrimaryKey(UnitLimitByCompanyIdExport record);

    /**
     * 删除UnitLimitByCompanyIdExport记录
     */
    int deleteByPrimaryKey(@Param("id") Long id);
}
2025-07-24 15:03:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: /Users/renyu/Documents/create_project/链数中建一局_1753340378/crcl-open/crcl-open/src/main/java/com/yljr/crcl/domain/mapper/UnitLimitByCompanyIdExportMapper.java
2025-07-24 15:03:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: /Users/renyu/Documents/create_project/链数中建一局_1753340378/crcl-open/crcl-open/src/main/java/com/yljr/crcl/domain/mapper/UnitLimitByCompanyIdExportMapper.java
2025-07-24 15:03:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 代码内容 (feign_client):

package com.yljr.crcl.application.feign;

import com.yljr.crcl.interfaces.dto.UnitLimitByCompanyIdExportReq;
import com.yljr.crcl.interfaces.dto.UnitLimitByCompanyIdExportResp;
import com.yljr.common.dto.ResponseInfo;
import org.springframework.cloud.openfeign.FeignClient;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.http.MediaType;

/**
 * UnitLimitByCompanyIdExport Feign接口
 * 复用 listUnitLimitByCompanyId 接口的查询逻辑，将结果导出为 Excel 格式；文件生成在本地目录，采用本地链接形式返回路径；文件类型为 Excel 列表，文件类型：xlsx；列表头列内容：组织单元名称、额度名称、额度类型、已分配额度（元）、已用额度（元）、可用额度（元）；需要调用用户服务 /general/multiorgManage/queryCompanyUnitList 接口获取组织单元详细信息
 */
@FeignClient(name = "zqyl-user-auth", path = "/userCenter/server")
public interface UnitLimitByCompanyIdExportFeignClient {

    /**
     * 复用 listUnitLimitByCompanyId 接口的查询逻辑，将结果导出为 Excel 格式；文件生成在本地目录，采用本地链接形式返回路径；文件类型为 Excel 列表，文件类型：xlsx；列表头列内容：组织单元名称、额度名称、额度类型、已分配额度（元）、已用额度（元）、可用额度（元）；需要调用用户服务 /general/multiorgManage/queryCompanyUnitList 接口获取组织单元详细信息
     */
    @PostMapping(value = "/queryCompanyInfo", consumes = MediaType.APPLICATION_JSON_UTF8_VALUE)
    ResponseInfo<UnitLimitByCompanyIdExportResp> UnitLimitByCompanyIdExport(@RequestBody UnitLimitByCompanyIdExportReq request);
}
2025-07-24 15:03:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: /Users/renyu/Documents/create_project/链数中建一局_1753340378/crcl-open/crcl-open/src/main/java/com/yljr/crcl/application/feign/UnitLimitByCompanyIdExportFeignClient.java
2025-07-24 15:03:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: /Users/renyu/Documents/create_project/链数中建一局_1753340378/crcl-open/crcl-open/src/main/java/com/yljr/crcl/application/feign/UnitLimitByCompanyIdExportFeignClient.java
2025-07-24 15:03:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 代码内容 (xml_mapping):
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yljr.crcl.domain.mapper.UnitLimitByCompanyIdExportMapper">

    <resultMap id="BaseResultMap" type="com.yljr.crcl.domain.entity.UnitLimitByCompanyIdExport">
        <id column="id" jdbcType="BIGINT" property="id" />
        <result column="company_id" jdbcType="BIGINT" property="companyId" />
        <result column="mutilorg_id" jdbcType="BIGINT" property="mutilorgId" />
        <result column="unit_code" jdbcType="VARCHAR" property="unitCode" />
        <result column="unit_name" jdbcType="VARCHAR" property="unitName" />
        <result column="remark" jdbcType="VARCHAR" property="remark" />
        <result column="platform_type" jdbcType="INTEGER" property="platformType" />
        <result column="status" jdbcType="INTEGER" property="status" />
        <result column="create_id" jdbcType="BIGINT" property="createId" />
        <result column="oper_user_name" jdbcType="VARCHAR" property="operUserName" />
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
        <result column="modify_id" jdbcType="BIGINT" property="modifyId" />
        <result column="modify_user_name" jdbcType="VARCHAR" property="modifyUserName" />
        <result column="modify_time" jdbcType="TIMESTAMP" property="modifyTime" />
    </resultMap>

    <sql id="Base_Column_List">
        id, company_id, mutilorg_id, unit_code, unit_name, remark, platform_type, status, create_id, oper_user_name,
        create_time, modify_id, modify_user_name, modify_time
    </sql>

    <select id="selectUnitLimitByCompanyIdExportList" parameterType="com.yljr.crcl.interfaces.dto.UnitLimitByCompanyIdExportReq" 
            resultMap="BaseResultMap">
        SELECT 
        <include refid="Base_Column_List" />
        FROM T_CUST_MULTIORG_UNIT
        WHERE 1=1
        <if test="condition.unitName != null and condition.unitName != ''">
            AND unit_name LIKE CONCAT('%', #{condition.unitName}, '%')
        </if>
        <if test="condition.status != null">
            AND status = #{condition.status}
        </if>
        ORDER BY CREATE_TIME DESC
    </select>

    <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
        SELECT 
        <include refid="Base_Column_List" />
        FROM T_CUST_MULTIORG_UNIT
        WHERE ID = #{id,jdbcType=BIGINT}
    </select>

    <insert id="insert" parameterType="com.yljr.crcl.domain.entity.UnitLimitByCompanyIdExport">
        INSERT INTO T_CUST_MULTIORG_UNIT (company_id, mutilorg_id, unit_code, unit_name, remark, platform_type, status, create_id, oper_user_name, create_time, modify_id, modify_user_name, modify_time)
        VALUES (#{companyId}, #{mutilorgId}, #{unitCode}, #{unitName}, #{remark}, #{platformType}, #{status}, #{createId}, #{operUserName}, #{createTime}, #{modifyId}, #{modifyUserName}, #{modifyTime})
    </insert>

    <update id="updateByPrimaryKey" parameterType="com.yljr.crcl.domain.entity.UnitLimitByCompanyIdExport">
        UPDATE T_CUST_MULTIORG_UNIT
        SET company_id = #{companyId},
            mutilorg_id = #{mutilorgId},
            unit_code = #{unitCode},
            unit_name = #{unitName},
            remark = #{remark},
            platform_type = #{platformType},
            status = #{status},
            create_id = #{createId},
            oper_user_name = #{operUserName},
            modify_id = #{modifyId},
            modify_user_name = #{modifyUserName},
            modify_time = #{modifyTime}
        WHERE ID = #{id}
    </update>

    <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
        DELETE FROM T_CUST_MULTIORG_UNIT
        WHERE ID = #{id,jdbcType=BIGINT}
    </delete>

</mapper>
2025-07-24 15:03:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: /Users/renyu/Documents/create_project/链数中建一局_1753340378/crcl-open/crcl-open/src/main/resources/mapper/UnitLimitByCompanyIdExportMapper.xml
2025-07-24 15:03:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: /Users/renyu/Documents/create_project/链数中建一局_1753340378/crcl-open/crcl-open/src/main/resources/mapper/UnitLimitByCompanyIdExportMapper.xml
2025-07-24 15:03:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📊 代码生成完成，共写入 9 个文件到项目中
2025-07-24 15:03:31 - src.corder_integration.utils.backup_cleaner - INFO - 🧹 开始清理项目备份: /Users/renyu/Documents/create_project/链数中建一局_1753340378/crcl-open/crcl-open
2025-07-24 15:03:31 - src.corder_integration.utils.backup_cleaner - INFO - 🎉 备份清理完成: 删除 0 目录, 0 文件
2025-07-24 15:03:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🗑️ 已清理项目分析缓存，确保下次分析获取最新状态
2025-07-24 15:03:31 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_010 状态更新为 completed
2025-07-24 15:03:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 任务 task_010 执行成功
2025-07-24 15:03:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 第1轮执行完成，处理了 7 个任务
2025-07-24 15:03:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第2轮任务检查...
2025-07-24 15:03:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第2轮没有可执行的智能编码任务
2025-07-24 15:03:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 7 个任务，共2轮
2025-07-24 15:03:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 7 个任务
2025-07-24 15:03:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-24 15:03:31 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-24 15:03:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: config.yaml
2025-07-24 15:03:31 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-24 15:03:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250724094351-pnjf4(编码智能体专用)
2025-07-24 15:03:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-24 15:03:31 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-24 15:03:31 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-24 15:03:31 - src.corder_integration.code_generator.enhanced_template_ai_generator - INFO - ✅ 增强版模板+AI生成器初始化完成
2025-07-24 15:03:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 增强版模板+AI代码生成器初始化完成
2025-07-24 15:03:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📄 从工作流状态获取设计文档 (7416 字符)
2025-07-24 15:03:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🏷️ 智能编码节点获取项目标识: 1231000004
2025-07-24 15:03:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 智能编码节点重试，当前重试次数: 1
2025-07-24 15:03:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-24 15:03:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🏷️ 过滤项目任务标识: 1231000004
2025-07-24 15:03:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-24 15:03:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-24 15:03:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-24 15:03:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-24 15:03:31 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-24 15:03:31 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-24 15:03:31 - src.corder_integration.langgraph.workflow_orchestrator - INFO - ✅ 所有编码相关任务已完成，进入下一阶段
2025-07-24 15:03:31 - src.corder_integration.langgraph.nodes.code_review_node - INFO - 🚀 代码审查节点开始执行...
2025-07-24 15:03:31 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-24 15:03:31 - src.corder_integration.langgraph.nodes.code_review_node - INFO - 🏷️ 代码审查节点获取项目标识: 1231000004
2025-07-24 15:03:31 - src.corder_integration.langgraph.nodes.code_review_node - INFO - 🎯 code_review_node 开始执行任务...
2025-07-24 15:03:31 - src.corder_integration.langgraph.nodes.code_review_node - INFO - 🏷️ 过滤项目任务标识: 1231000004
2025-07-24 15:03:31 - src.corder_integration.langgraph.nodes.code_review_node - INFO - ℹ️ 没有可执行的代码审查任务
2025-07-24 15:03:31 - src.corder_integration.langgraph.nodes.code_review_node - INFO - 🔍 执行传统代码审查（向后兼容）
2025-07-24 15:03:31 - src.corder_integration.langgraph.nodes.code_review_node - INFO - ✅ 代码审查节点完成，处理了 0 个任务
2025-07-24 15:03:31 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🚀 单元测试节点开始执行...
2025-07-24 15:03:31 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-24 15:03:31 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 单元测试节点获取项目标识: 1231000004
2025-07-24 15:03:31 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🎯 unit_testing_node 开始执行任务...
2025-07-24 15:03:31 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🏷️ 过滤项目任务标识: 1231000004
2025-07-24 15:03:31 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 📋 找到 1 个可执行任务
2025-07-24 15:03:31 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🚀 开始执行任务: task_011 (integration_test)
2025-07-24 15:03:31 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_011 已被 unit_testing_node 领取
2025-07-24 15:03:31 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - 🧪 执行集成测试任务: task_011
2025-07-24 15:03:31 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_011 状态更新为 completed
2025-07-24 15:03:31 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ✅ 任务 task_011 执行成功
2025-07-24 15:03:31 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ✅ 单元测试任务执行完成，共处理 1 个任务
2025-07-24 15:03:31 - src.corder_integration.langgraph.nodes.unit_testing_node - INFO - ✅ 单元测试节点完成，处理了 1 个任务
2025-07-24 15:03:31 - src.corder_integration.langgraph.nodes.git_commit_node - INFO - 🚀 Git提交节点开始执行...
2025-07-24 15:03:31 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: /Users/renyu/Documents/ai_project/document_analyzer/coding_agent_workflow.db
2025-07-24 15:03:31 - src.corder_integration.langgraph.nodes.git_commit_node - INFO - 🏷️ Git提交节点获取项目标识: 1231000004
2025-07-24 15:03:31 - src.corder_integration.langgraph.nodes.git_commit_node - INFO - 🎯 git_commit_node 开始执行任务...
2025-07-24 15:03:31 - src.corder_integration.langgraph.nodes.git_commit_node - INFO - 🏷️ 过滤项目任务标识: 1231000004
2025-07-24 15:03:31 - src.corder_integration.langgraph.nodes.git_commit_node - INFO - 📋 找到 1 个可执行任务
2025-07-24 15:03:31 - src.corder_integration.langgraph.nodes.git_commit_node - INFO - 🚀 开始执行任务: task_012 (deployment)
2025-07-24 15:03:31 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_012 已被 git_commit_node 领取
2025-07-24 15:03:31 - src.corder_integration.langgraph.nodes.git_commit_node - INFO - 🚀 执行部署任务: task_012
2025-07-24 15:03:31 - src.corder_integration.langgraph.nodes.git_commit_node - INFO - 📝 模拟系统服务的Git提交流程
2025-07-24 15:03:31 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_012 状态更新为 completed
2025-07-24 15:03:31 - src.corder_integration.langgraph.nodes.git_commit_node - INFO - ✅ 任务 task_012 执行成功
2025-07-24 15:03:31 - src.corder_integration.langgraph.nodes.git_commit_node - INFO - ✅ Git提交任务执行完成，共处理 1 个任务
2025-07-24 15:03:31 - src.corder_integration.langgraph.nodes.git_commit_node - INFO - ✅ Git提交节点完成，处理了 1 个任务
2025-07-24 15:03:31 - src.corder_integration.langgraph.workflow_orchestrator - INFO - 工作流执行成功: 链数中建一局_1753340378, 完成服务数: 0
2025-07-24 15:03:31 - werkzeug - INFO - 127.0.0.1 - - [24/Jul/2025 15:03:31] "POST /api/coder-agent/process-document HTTP/1.1" 200 -
2025-07-24 15:26:42 - werkzeug - INFO -  * Detected change in '/Users/renyu/Documents/ai_project/document_analyzer/src/analysis_services/content_analyzer.py', reloading
2025-07-24 15:26:42 - werkzeug - INFO -  * Restarting with stat
2025-07-24 15:26:43 - system - INFO - ==================================================
2025-07-24 15:26:43 - system - INFO - 🚀 智能分析系统日志系统初始化完成
2025-07-24 15:26:43 - system - INFO - 📁 日志根目录: /Users/renyu/Documents/ai_project/document_analyzer/logs
2025-07-24 15:26:43 - system - INFO - 📊 日志级别: INFO
2025-07-24 15:26:43 - system - INFO - 📅 按日期轮转: 每天午夜自动轮转
2025-07-24 15:26:43 - system - INFO - 📂 按月分目录: logs/YYYY-MM/
2025-07-24 15:26:43 - system - INFO - 📝 主日志: logs/2025-07/app.log
2025-07-24 15:26:43 - system - INFO - 🔧 API日志: logs/2025-07/api_server.log
2025-07-24 15:26:43 - system - INFO - 🗂️ 保留天数: 7 天
2025-07-24 15:26:43 - system - INFO - ==================================================
2025-07-24 15:26:46 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-24 15:26:46 - src.corder_integration.langgraph.nodes.task_simple_splitting_node - INFO - ✅ 成功加载配置文件: config.yaml
2025-07-24 15:26:46 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-24 15:26:46 - src.corder_integration.langgraph.nodes.task_simple_splitting_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250724094351-pnjf4(编码智能体专用)
2025-07-24 15:26:46 - src.corder_integration.langgraph.nodes.task_simple_splitting_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-24 15:26:46 - src.utils.task_storage - INFO - 数据库初始化成功
2025-07-24 15:26:46 - markdown_storage - INFO - Markdown存储管理器初始化完成
2025-07-24 15:26:46 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-24 15:26:46 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-24 15:26:46 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-24 15:26:47 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-24 15:26:47 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-24 15:26:47 - WeaviateVectorDatabase - INFO - ✅ Weaviate连接成功: http://localhost:8080 (gRPC: 50051)
2025-07-24 15:26:47 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/schema/AnalyDesignDocuments "HTTP/1.1 200 OK"
2025-07-24 15:26:47 - WeaviateVectorDatabase - INFO - ✅ Weaviate集合已存在: AnalyDesignDocuments
2025-07-24 15:26:47 - AnalysisServiceManager - INFO - 初始化向量数据库: weaviate
2025-07-24 15:26:47 - sentence_transformers.SentenceTransformer - INFO - Use pytorch device_name: mps
2025-07-24 15:26:47 - sentence_transformers.SentenceTransformer - INFO - Load pretrained SentenceTransformer: BAAI/bge-large-zh
2025-07-24 15:26:57 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-24 15:26:58 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-24 15:26:59 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-24 15:26:59 - src.utils.weaviate_helper - INFO - 成功连接到 Weaviate: localhost:8080
2025-07-24 15:26:59 - AnalysisServiceManager - INFO - 分析服务管理器初始化完成
2025-07-24 15:26:59 - src.utils.enhanced_analyzer - INFO - 增强分析器初始化完成
2025-07-24 15:26:59 - werkzeug - WARNING -  * Debugger is active!
2025-07-24 15:26:59 - werkzeug - INFO -  * Debugger PIN: 587-510-452
2025-07-24 15:28:40 - werkzeug - INFO -  * Detected change in '/Users/renyu/Documents/ai_project/document_analyzer/src/corder_integration/langgraph/nodes/intelligent_coding_node.py', reloading
2025-07-24 15:28:41 - werkzeug - INFO -  * Restarting with stat
2025-07-24 15:28:41 - system - INFO - ==================================================
2025-07-24 15:28:41 - system - INFO - 🚀 智能分析系统日志系统初始化完成
2025-07-24 15:28:41 - system - INFO - 📁 日志根目录: /Users/renyu/Documents/ai_project/document_analyzer/logs
2025-07-24 15:28:41 - system - INFO - 📊 日志级别: INFO
2025-07-24 15:28:41 - system - INFO - 📅 按日期轮转: 每天午夜自动轮转
2025-07-24 15:28:41 - system - INFO - 📂 按月分目录: logs/YYYY-MM/
2025-07-24 15:28:41 - system - INFO - 📝 主日志: logs/2025-07/app.log
2025-07-24 15:28:41 - system - INFO - 🔧 API日志: logs/2025-07/api_server.log
2025-07-24 15:28:41 - system - INFO - 🗂️ 保留天数: 7 天
2025-07-24 15:28:41 - system - INFO - ==================================================
2025-07-24 15:28:44 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-24 15:28:44 - src.corder_integration.langgraph.nodes.task_simple_splitting_node - INFO - ✅ 成功加载配置文件: config.yaml
2025-07-24 15:28:44 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-24 15:28:44 - src.corder_integration.langgraph.nodes.task_simple_splitting_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250724094351-pnjf4(编码智能体专用)
2025-07-24 15:28:44 - src.corder_integration.langgraph.nodes.task_simple_splitting_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-24 15:28:44 - src.utils.task_storage - INFO - 数据库初始化成功
2025-07-24 15:28:44 - markdown_storage - INFO - Markdown存储管理器初始化完成
2025-07-24 15:28:44 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-24 15:28:44 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-24 15:28:44 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-24 15:28:45 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-24 15:28:45 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-24 15:28:45 - WeaviateVectorDatabase - INFO - ✅ Weaviate连接成功: http://localhost:8080 (gRPC: 50051)
2025-07-24 15:28:45 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/schema/AnalyDesignDocuments "HTTP/1.1 200 OK"
2025-07-24 15:28:45 - WeaviateVectorDatabase - INFO - ✅ Weaviate集合已存在: AnalyDesignDocuments
2025-07-24 15:28:45 - AnalysisServiceManager - INFO - 初始化向量数据库: weaviate
2025-07-24 15:28:45 - sentence_transformers.SentenceTransformer - INFO - Use pytorch device_name: mps
2025-07-24 15:28:45 - sentence_transformers.SentenceTransformer - INFO - Load pretrained SentenceTransformer: BAAI/bge-large-zh
2025-07-24 15:28:54 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-24 15:28:55 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-24 15:28:56 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-24 15:28:56 - src.utils.weaviate_helper - INFO - 成功连接到 Weaviate: localhost:8080
2025-07-24 15:28:56 - AnalysisServiceManager - INFO - 分析服务管理器初始化完成
2025-07-24 15:28:56 - src.utils.enhanced_analyzer - INFO - 增强分析器初始化完成
2025-07-24 15:28:56 - werkzeug - WARNING -  * Debugger is active!
2025-07-24 15:28:56 - werkzeug - INFO -  * Debugger PIN: 587-510-452
