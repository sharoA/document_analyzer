2025-07-10 10:08:46 - werkzeug - INFO -  * Restarting with stat
2025-07-10 10:08:47 - system - INFO - ==================================================
2025-07-10 10:08:47 - system - INFO - 🚀 智能分析系统日志系统初始化完成
2025-07-10 10:08:47 - system - INFO - 📁 日志根目录: D:\ai_project\document_analyzer\logs
2025-07-10 10:08:47 - system - INFO - 📊 日志级别: INFO
2025-07-10 10:08:47 - system - INFO - 📅 按日期轮转: 每天午夜自动轮转
2025-07-10 10:08:47 - system - INFO - 📂 按月分目录: logs/YYYY-MM/
2025-07-10 10:08:47 - system - INFO - 📝 主日志: logs/2025-07/app.log
2025-07-10 10:08:47 - system - INFO - 🔧 API日志: logs/2025-07/api_server.log
2025-07-10 10:08:47 - system - INFO - 🧪 分析日志: logs/2025-07/analysis_service.log
2025-07-10 10:08:47 - system - INFO - ❌ 错误日志: logs/2025-07/error.log
2025-07-10 10:08:47 - system - INFO - 🗂️ 保留天数: 5 天
2025-07-10 10:08:47 - system - INFO - ==================================================
2025-07-10 10:08:53 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-10 10:08:53 - root - WARNING - 智能编码节点不可用: cannot import name 'generate_single_service' from partially initialized module 'src.corder_integration.langgraph.nodes.intelligent_coding_node' (most likely due to a circular import) (D:\ai_project\document_analyzer\src\corder_integration\langgraph\nodes\intelligent_coding_node.py)
2025-07-10 10:08:53 - src.utils.task_storage - INFO - 数据库初始化成功
2025-07-10 10:08:53 - markdown_storage - INFO - Markdown存储管理器初始化完成
2025-07-10 10:08:53 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-10 10:08:53 - api_server - INFO - 从配置文件读取火山引擎配置: {'api_key': '7fcb3541-9363-4bfa-90aa-19e9f691bc25', 'endpoint': 'https://ark.cn-beijing.volces.com/api/v3', 'max_tokens': 4000, 'model': 'ep-20250605091804-wmw6w', 'temperature': 0.7}
2025-07-10 10:08:53 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-10 10:08:53 - api_server - INFO - 火山引擎客户端初始化成功
2025-07-10 10:08:53 - api_server - INFO - Weaviate配置: http://localhost:8080
2025-07-10 10:08:53 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-10 10:08:54 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-10 10:08:54 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-10 10:08:54 - WeaviateVectorDatabase - INFO - ✅ Weaviate连接成功: http://localhost:8080 (gRPC: 50051)
2025-07-10 10:08:54 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/schema/AnalyDesignDocuments "HTTP/1.1 200 OK"
2025-07-10 10:08:54 - WeaviateVectorDatabase - INFO - ✅ Weaviate集合已存在: AnalyDesignDocuments
2025-07-10 10:08:54 - AnalysisServiceManager - INFO - 初始化向量数据库: weaviate
2025-07-10 10:08:54 - sentence_transformers.SentenceTransformer - INFO - Use pytorch device_name: cpu
2025-07-10 10:08:54 - sentence_transformers.SentenceTransformer - INFO - Load pretrained SentenceTransformer: BAAI/bge-large-zh
2025-07-10 10:09:00 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-10 10:09:01 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-10 10:09:01 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-10 10:09:01 - src.utils.weaviate_helper - INFO - 成功连接到 Weaviate: localhost:8080
2025-07-10 10:09:01 - AnalysisServiceManager - INFO - 分析服务管理器初始化完成
2025-07-10 10:09:01 - api_server - INFO - 分析服务管理器初始化成功
2025-07-10 10:09:01 - api_server - INFO - 分析服务管理器已集成到API服务器
2025-07-10 10:09:01 - src.utils.enhanced_analyzer - INFO - 增强分析器初始化完成
2025-07-10 10:09:01 - api_server - INFO - 增强分析器初始化成功
2025-07-10 10:09:01 - api_server - INFO - 初始化任务存储数据库...
2025-07-10 10:09:01 - api_server - INFO - 任务存储数据库初始化成功
2025-07-10 10:09:01 - werkzeug - WARNING -  * Debugger is active!
2025-07-10 10:09:01 - werkzeug - INFO -  * Debugger PIN: 887-537-592
2025-07-10 10:09:33 - src.apis.coder_agent_api - INFO - 开始处理文档: 链数中建一局_1752113373
2025-07-10 10:09:33 - src.apis.coder_agent_api - INFO - 文档长度: 4931 字符
2025-07-10 10:09:33 - src.apis.coder_agent_api - INFO - 使用LangGraph: True
2025-07-10 10:09:33 - src.apis.coder_agent_api - INFO - 代码输出路径: D:\gitlab\create_project
2025-07-10 10:09:33 - src.apis.coder_agent_api - INFO - 使用LangGraph工作流处理项目: 链数中建一局_1752113373
2025-07-10 10:09:33 - src.corder_integration.langgraph.workflow_orchestrator - INFO - 准备使用异步SQLite检查点: D:\ai_project\document_analyzer\workflow_checkpoints.db
2025-07-10 10:09:33 - src.corder_integration.langgraph.workflow_orchestrator - INFO - 生成目标分支名称: 链数中建一局_1752113373 -> D_20250710_链数中建一局_1752113373
2025-07-10 10:09:33 - src.corder_integration.langgraph.workflow_orchestrator - INFO - 开始执行编码工作流: 链数中建一局_1752113373 -> D:\gitlab\create_project
2025-07-10 10:09:33 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 🚀 开始执行任务拆分: 链数中建一局_1752113373
2025-07-10 10:09:33 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📥 输入状态键: ['design_doc', 'project_name', 'identified_services', 'service_dependencies', 'task_execution_plan', 'parallel_tasks', 'git_repo_url', 'target_branch', 'project_paths', 'output_path', 'repo_initialized', 'generated_services', 'generated_apis', 'generated_sql', 'service_interconnections', 'unit_test_results', 'test_coverage', 'interface_compatibility', 'code_review_results', 'static_analysis_results', 'security_scan_results', 'commit_hashes', 'push_results', 'pr_urls', 'current_phase', 'completed_services', 'failed_services', 'retry_count', 'execution_errors']
2025-07-10 10:09:33 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📄 设计文档长度: 4930
2025-07-10 10:09:33 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 🔄 当前阶段: task_splitting
2025-07-10 10:09:33 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📁 计算的基础项目路径: D:\gitlab\create_project/链数中建一局_1752113373
2025-07-10 10:09:33 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-10 10:09:33 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 模板 task_splitting/design_analysis_prompts.jinja2 加载成功
2025-07-10 10:09:33 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 模板 task_splitting/service_boundary_prompts.jinja2 加载成功
2025-07-10 10:09:33 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 模板 task_splitting/dependency_analysis_prompts.jinja2 加载成功
2025-07-10 10:09:33 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 模板 task_splitting/task_scheduling_prompts.jinja2 加载成功
2025-07-10 10:09:33 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 模板 task_splitting/generate_sqlite_tasks_prompts.jinja2 加载成功
2025-07-10 10:09:33 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 任务数据库初始化完成
2025-07-10 10:09:33 - src.corder_integration.langgraph.nodes.task_splitting_node - WARNING - ⚠️ 无法删除文件 coding_agent_workflow.db-wal，可能被其他进程占用
2025-07-10 10:09:33 - src.corder_integration.langgraph.nodes.task_splitting_node - WARNING - ⚠️ 无法删除文件 coding_agent_workflow.db-shm，可能被其他进程占用
2025-07-10 10:09:33 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 数据库WAL检查点和优化完成
2025-07-10 10:09:33 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 数据库表结构重置完成
2025-07-10 10:09:33 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📋 步骤1：开始设计文档分析...
2025-07-10 10:09:33 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📄 文档分割完成：4930 字符 -> 3 个窗口
2025-07-10 10:09:33 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📄 设计文档分割成 3 个窗口
2025-07-10 10:09:33 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 分析窗口 1/3 (字符: 0-1926)
2025-07-10 10:09:53 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-10 10:09:53 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 窗口 1 分析完成
2025-07-10 10:09:53 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 分析窗口 2/3 (字符: 1626-3553)
2025-07-10 10:10:07 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-10 10:10:07 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 窗口 2 分析完成
2025-07-10 10:10:07 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 分析窗口 3/3 (字符: 3253-4930)
2025-07-10 10:10:21 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-10 10:10:21 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 窗口 3 分析完成
2025-07-10 10:10:21 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 🔄 合并 3 个设计分析分析结果...
2025-07-10 10:10:21 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📊 合并后的设计分析结果: {'architecture_style': '微服务', 'technology_stack': ['Excel导出工具（如Apache POI或EasyExcel）', 'Spring Cloud 2021.x', 'RabbitMQ 3.8', 'MySQL', 'RESTful API', 'Spring Boot 2.7.x', 'Nacos', 'MySQL 8.0', 'Redis', 'PageHelper', 'pageHelper', 'Redis 6.0', 'Spring Boot', 'MyBatis Plus 3.5.x'], 'functional_modules': [{'name': '用户服务 (zqyl-user-center-service)', 'description': '处理用户管理、权限控制和角色管理', 'responsibilities': ['组织单元管理', '用户认证与授权']}, {'name': '确权开立服务 (crcl-open)', 'description': '处理额度管理和数据推送逻辑', 'responsibilities': ['额度管理功能', '组织单元额度查询', '数据推送接口校验']}, {'name': '多组织单元管理', 'description': '管理组织单元的基本信息和状态', 'responsibilities': ['组织单元CRUD', '状态管理', '关联企业信息管理']}, {'name': '确权开立服务', 'description': '处理确权开立和额度管理业务', 'responsibilities': ['额度分配', '额度查询', '额度使用情况跟踪']}, {'name': '额度管理模块', 'description': '处理组织单元额度的查询和导出功能', 'responsibilities': ['查询组织单元额度信息', '导出额度信息到Excel']}, {'name': '用户服务集成模块', 'description': '与zqyl-user-center-service服务集成', 'responsibilities': ['调用/queryCompanyUnitList接口获取组织单元详细信息']}], 'system_components': ['RabbitMQ消息队列', '确权开立API服务(/crcl-open-api)', '确权开立服务', 'Redis缓存', '用户服务', 'MySQL数据库', '额度管理模块', '用户服务（zqyl-user-center-service）', '确权开立服务（crcl-open）', '多组织单元数据库(t_cust_multiorg_unit)'], 'data_flow': ['业务操作→额度使用记录', '用户请求 -> 用户服务 -> 组织单元数据查询', '额度信息从MySQL数据库读取，可能通过Redis缓存加速访问', '组织单元→额度分配', '客户端请求 -> crcl-open服务 -> 调用zqyl-user-center-service获取组织单元信息 -> 查询数据库获取额度信息 -> 生成Excel文件 -> 返回文件下载地址', 'Redis缓存组织单元和额度信息', '企业信息→组织单元创建', '额度修改 -> 确权开立服务 -> 数据推送至平台'], 'integration_points': ['确权开立服务→业务系统', '用户服务与确权开立服务间的API调用', 'Redis缓存连接', '企业信息系统→多组织单元服务', 'zqyl-user-center-service的/queryCompanyUnitList接口', 'Nacos服务发现与配置管理', '确权开立服务与外部平台的数据推送接口', 'MySQL数据库连接', '多组织单元服务→确权开立服务'], 'summary': '该设计采用微服务架构，通过用户服务和确权开立服务实现松耦合。技术栈选型成熟，包含Spring Boot、MySQL和Redis等。主要调整额度管理功能，支持组织单元额度查询和重复数据推送。架构具备良好的扩展性和维护性，通过Nacos实现服务治理。 该设计采用微服务架构，包含多组织单元管理和确权开立两个核心服务。技术栈基于Spring Boot和MySQL，通过RESTful API进行服务间通信。'}
2025-07-10 10:10:21 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 设计概要: 该设计采用微服务架构，通过用户服务和确权开立服务实现松耦合。技术栈选型成熟，包含Spring Boot、MySQL和Redis等。主要调整额度管理功能，支持组织单元额度查询和重复数据推送。架构具备良好的扩展性和维护性，通过Nacos实现服务治理。 该设计采用微服务架构，包含多组织单元管理和确权开立两个核心服务。技术栈基于Spring Boot和MySQL，通过RESTful API进行服务间通信。
2025-07-10 10:10:21 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 🏗️ 步骤2：开始技术架构分析...
2025-07-10 10:10:21 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 技术架构概要: 该设计采用微服务架构，通过用户服务和确权开立服务实现松耦合。技术栈选型成熟，包含Spring Boot、MySQL和Redis等。主要调整额度管理功能，支持组织单元额度查询和重复数据推送。架构具备良好的扩展性和维护性，通过Nacos实现服务治理。 该设计采用微服务架构，包含多组织单元管理和确权开立两个核心服务。技术栈基于Spring Boot和MySQL，通过RESTful API进行服务间通信。
2025-07-10 10:10:21 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 🔍 步骤3：开始服务边界识别...
2025-07-10 10:10:21 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 输入 - 设计概要: 该设计采用微服务架构，通过用户服务和确权开立服务实现松耦合。技术栈选型成熟，包含Spring Boot、MySQL和Redis等。主要调整额度管理功能，支持组织单元额度查询和重复数据推送。架构具备良好的扩展性和维护性，通过Nacos实现服务治理。 该设计采用微服务架构，包含多组织单元管理和确权开立两个核心服务。技术栈基于Spring Boot和MySQL，通过RESTful API进行服务间通信。
2025-07-10 10:10:21 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 输入 - 架构概要: 该设计采用微服务架构，通过用户服务和确权开立服务实现松耦合。技术栈选型成熟，包含Spring Boot、MySQL和Redis等。主要调整额度管理功能，支持组织单元额度查询和重复数据推送。架构具备良好的扩展性和维护性，通过Nacos实现服务治理。 该设计采用微服务架构，包含多组织单元管理和确权开立两个核心服务。技术栈基于Spring Boot和MySQL，通过RESTful API进行服务间通信。
2025-07-10 10:10:21 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 服务拆分提示词长度: 2333
2025-07-10 10:10:38 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-10 10:10:38 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 服务拆分LLM响应长度: 1527
2025-07-10 10:10:38 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📊 服务拆分解析结果: {'identified_services': [{'name': '用户服务', 'description': '处理用户相关功能，与确权开立服务解耦', 'git_repository': '', 'responsibilities': ['用户管理'], 'api_endpoints': [], 'database_tables': [], 'external_service_calls': [], 'config_requirements': ['MySQL连接', 'Redis配置']}, {'name': '确权开立服务', 'description': '处理确权开立相关业务逻辑', 'git_repository': '', 'responsibilities': ['确权开立管理'], 'api_endpoints': [], 'database_tables': [], 'external_service_calls': [], 'config_requirements': ['MySQL连接']}, {'name': '多组织单元管理服务', 'description': '管理多组织单元相关功能', 'git_repository': '', 'responsibilities': ['组织单元管理', '额度管理'], 'api_endpoints': [{'method': 'GET', 'path': '/api/organization/units/quota', 'description': '组织单元额度查询', 'request_params': 'unitId', 'response_fields': 'unitId, quotaAmount', 'special_requirements': ''}, {'method': 'POST', 'path': '/api/organization/units/data/push', 'description': '重复数据推送', 'request_params': 'data', 'response_fields': 'status', 'special_requirements': ''}], 'database_tables': [], 'external_service_calls': [], 'config_requirements': ['MySQL连接']}], 'service_call_relationships': {'dependencies': []}, 'summary': '基于设计文档的服务分析概要，确认涉及3个服务，2个新增接口，0个明确提到的数据库表'}
2025-07-10 10:10:38 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 🎯 识别的服务列表: [{'name': '用户服务', 'description': '处理用户相关功能，与确权开立服务解耦', 'git_repository': '', 'responsibilities': ['用户管理'], 'api_endpoints': [], 'database_tables': [], 'external_service_calls': [], 'config_requirements': ['MySQL连接', 'Redis配置']}, {'name': '确权开立服务', 'description': '处理确权开立相关业务逻辑', 'git_repository': '', 'responsibilities': ['确权开立管理'], 'api_endpoints': [], 'database_tables': [], 'external_service_calls': [], 'config_requirements': ['MySQL连接']}, {'name': '多组织单元管理服务', 'description': '管理多组织单元相关功能', 'git_repository': '', 'responsibilities': ['组织单元管理', '额度管理'], 'api_endpoints': [{'method': 'GET', 'path': '/api/organization/units/quota', 'description': '组织单元额度查询', 'request_params': 'unitId', 'response_fields': 'unitId, quotaAmount', 'special_requirements': ''}, {'method': 'POST', 'path': '/api/organization/units/data/push', 'description': '重复数据推送', 'request_params': 'data', 'response_fields': 'status', 'special_requirements': ''}], 'database_tables': [], 'external_service_calls': [], 'config_requirements': ['MySQL连接']}]
2025-07-10 10:10:38 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 🔢 识别的服务数量: 3
2025-07-10 10:10:38 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 服务拆分概要: 基于设计文档的服务分析概要，确认涉及3个服务，2个新增接口，0个明确提到的数据库表
2025-07-10 10:10:38 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 🌐 步骤4：开始依赖分析...
2025-07-10 10:10:38 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 依赖分析提示词长度: 2320
2025-07-10 10:10:59 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-10 10:10:59 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 依赖分析LLM响应长度: 1760
2025-07-10 10:10:59 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📊 依赖分析解析结果: {'service_dependencies': {'用户服务': {'database_dependencies': [{'database_type': 'MySQL', 'config_info': '未明确提及', 'tables_needed': [], 'description': '用户数据存储'}], 'api_call_dependencies': [], 'provides_apis': [{'endpoint': '未明确提及', 'used_by': ['确权开立服务']}]}, '确权开立服务': {'database_dependencies': [{'database_type': 'MySQL', 'config_info': '未明确提及', 'tables_needed': [], 'description': '确权数据存储'}], 'api_call_dependencies': [{'target_service': '用户服务', 'target_endpoint': '未明确提及', 'call_purpose': '获取用户信息', 'dependency_type': '强依赖'}], 'provides_apis': []}, '多组织单元管理服务': {'database_dependencies': [{'database_type': 'MySQL', 'config_info': '未明确提及', 'tables_needed': [], 'description': '组织单元数据存储'}], 'api_call_dependencies': [], 'provides_apis': []}}, 'development_order': [{'phase': 1, 'services': ['用户服务', '多组织单元管理服务'], 'tasks': ['创建数据库表', '实现基础接口'], 'reason': '确权开立服务依赖用户服务的接口'}, {'phase': 2, 'services': ['确权开立服务'], 'tasks': ['实现业务接口', '调用用户服务接口'], 'reason': '依赖用户服务的接口'}], 'critical_path': ['用户服务', '确权开立服务'], 'parallel_development': [{'phase': '阶段1', 'parallel_services': ['用户服务', '多组织单元管理服务'], 'reason': '这两个服务之间没有直接依赖关系'}], 'summary': '分析了3个服务的依赖关系，建议分2个阶段开发，关键路径为用户服务→确权开立服务'}
2025-07-10 10:10:59 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 依赖分析概要: 分析了3个服务的依赖关系，建议分2个阶段开发，关键路径为用户服务→确权开立服务
2025-07-10 10:10:59 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📅 步骤5：开始制定执行计划...
2025-07-10 10:10:59 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 任务调度提示词长度: 6209
2025-07-10 10:12:30 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-10 10:12:30 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 任务调度LLM响应长度: 8560
2025-07-10 10:12:30 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📊 执行计划解析结果: {'execution_phases': [{'phase_name': '基础设施搭建阶段', 'phase_order': 1, 'description': '搭建项目基础设施，包括数据库、配置服务、监控等基础组件', 'estimated_duration': '3天', 'services_involved': ['用户服务', '确权开立服务', '额度管理服务'], 'task_categories': [{'category': 'database', 'description': '数据库基础设施', 'tasks': [{'task_name': '创建数据库实例', 'service': '基础设施', 'deliverable': 'MySQL数据库实例', 'estimated_hours': 4, 'prerequisites': [], 'assignee_role': 'DBA'}, {'task_name': '设计用户服务表结构', 'service': '用户服务', 'deliverable': '用户表SQL脚本', 'estimated_hours': 6, 'prerequisites': ['数据库实例'], 'assignee_role': '后端开发'}, {'task_name': '设计确权服务表结构', 'service': '确权开立服务', 'deliverable': '确权表SQL脚本', 'estimated_hours': 6, 'prerequisites': ['数据库实例'], 'assignee_role': '后端开发'}]}, {'category': 'config', 'description': '配置管理服务', 'tasks': [{'task_name': '搭建Nacos配置中心', 'service': '基础设施', 'deliverable': 'Nacos服务就绪', 'estimated_hours': 4, 'prerequisites': [], 'assignee_role': '运维工程师'}, {'task_name': '配置服务注册发现', 'service': '基础设施', 'deliverable': '服务注册配置完成', 'estimated_hours': 3, 'prerequisites': ['Nacos就绪'], 'assignee_role': '运维工程师'}]}, {'category': 'monitoring', 'description': '监控配置', 'tasks': [{'task_name': '搭建Prometheus监控', 'service': '基础设施', 'deliverable': '监控系统就绪', 'estimated_hours': 4, 'prerequisites': [], 'assignee_role': '运维工程师'}]}], 'success_criteria': ['数据库正常连接', '配置中心可用', '服务注册发现正常', '监控系统运行'], 'parallel_execution': True}, {'phase_name': '核心服务开发阶段', 'phase_order': 2, 'description': '开发核心业务服务，按照依赖关系分两个阶段实施', 'estimated_duration': '7天', 'services_involved': ['用户服务', '确权开立服务', '额度管理服务'], 'task_categories': [{'category': 'api', 'description': 'API接口开发', 'tasks': [{'task_name': '实现用户查询接口', 'service': '用户服务', 'deliverable': 'GET /api/users/{id}', 'estimated_hours': 8, 'prerequisites': ['用户表创建'], 'assignee_role': '后端开发'}, {'task_name': '实现确权开立接口', 'service': '确权开立服务', 'deliverable': 'POST /api/rights/open', 'estimated_hours': 12, 'prerequisites': ['确权表创建', '用户服务API就绪'], 'assignee_role': '后端开发'}, {'task_name': '实现额度查询接口', 'service': '额度管理服务', 'deliverable': 'GET /api/limits/query', 'estimated_hours': 8, 'prerequisites': ['确权服务API就绪'], 'assignee_role': '后端开发'}]}, {'category': 'service', 'description': '业务逻辑实现', 'tasks': [{'task_name': '用户服务业务逻辑', 'service': '用户服务', 'deliverable': 'UserServiceImpl类', 'estimated_hours': 16, 'prerequisites': ['用户接口设计'], 'assignee_role': '后端开发'}, {'task_name': '确权服务业务逻辑', 'service': '确权开立服务', 'deliverable': 'RightOpenServiceImpl类', 'estimated_hours': 20, 'prerequisites': ['用户服务完成'], 'assignee_role': '后端开发'}, {'task_name': '额度管理业务逻辑', 'service': '额度管理服务', 'deliverable': 'LimitServiceImpl类', 'estimated_hours': 12, 'prerequisites': ['确权服务完成'], 'assignee_role': '后端开发'}]}], 'success_criteria': ['核心API测试通过', '业务逻辑单元测试覆盖率>80%'], 'parallel_execution': False}, {'phase_name': '服务集成阶段', 'phase_order': 3, 'description': '服务间集成、联调测试', 'estimated_duration': '4天', 'services_involved': ['用户服务', '确权开立服务', '额度管理服务'], 'task_categories': [{'category': 'integration', 'description': '服务集成', 'tasks': [{'task_name': '用户-确权服务集成', 'service': '集成', 'deliverable': '集成测试用例', 'estimated_hours': 8, 'prerequisites': ['核心服务开发完成'], 'assignee_role': '测试工程师'}, {'task_name': '确权-额度服务集成', 'service': '集成', 'deliverable': '集成测试用例', 'estimated_hours': 8, 'prerequisites': ['用户-确权集成完成'], 'assignee_role': '测试工程师'}]}, {'category': 'e2e', 'description': '端到端测试', 'tasks': [{'task_name': '全链路测试', 'service': '测试', 'deliverable': '端到端测试报告', 'estimated_hours': 16, 'prerequisites': ['服务集成完成'], 'assignee_role': '测试工程师'}]}], 'success_criteria': ['服务间调用成功率>99.9%', '端到端测试通过率100%'], 'parallel_execution': False}, {'phase_name': '部署上线阶段', 'phase_order': 4, 'description': '生产环境部署、监控配置', 'estimated_duration': '3天', 'services_involved': ['用户服务', '确权开立服务', '额度管理服务'], 'task_categories': [{'category': 'deployment', 'description': '部署配置', 'tasks': [{'task_name': '容器化打包', 'service': '部署', 'deliverable': 'Docker镜像', 'estimated_hours': 8, 'prerequisites': ['集成测试通过'], 'assignee_role': '运维工程师'}, {'task_name': '生产环境部署', 'service': '部署', 'deliverable': '生产环境服务', 'estimated_hours': 8, 'prerequisites': ['容器化打包完成'], 'assignee_role': '运维工程师'}]}, {'category': 'monitoring', 'description': '生产监控', 'tasks': [{'task_name': '生产监控配置', 'service': '监控', 'deliverable': '生产监控仪表盘', 'estimated_hours': 4, 'prerequisites': ['生产环境部署'], 'assignee_role': '运维工程师'}]}], 'success_criteria': ['生产环境运行正常', '监控告警系统就绪'], 'parallel_execution': False}], 'parallel_groups': [{'group_name': '基础设施并行组', 'group_order': 1, 'services': ['数据库', '配置中心', '监控'], 'estimated_duration': '3天', 'description': '基础设施组件可并行搭建', 'coordination_points': ['网络配置统一']}, {'group_name': '服务开发并行组', 'group_order': 2, 'services': ['用户服务', '确权开立服务'], 'estimated_duration': '5天', 'description': '用户服务先行，确权服务部分功能可并行开发', 'coordination_points': ['用户服务API稳定']}], 'execution_order': ['数据库搭建', '配置中心部署', '监控系统安装', '用户服务开发(阶段1)', '确权服务开发(阶段2)', '额度服务开发(阶段2)', '用户-确权集成', '确权-额度集成', '全链路测试', '生产部署'], 'resource_allocation': {'backend_developers': 4, 'test_engineers': 2, 'devops_engineers': 2, 'dba': 1, 'total_estimated_time': '17天'}, 'risk_management': {'critical_dependencies': [{'task': '用户服务开发', 'risk': '延期影响后续服务', 'mitigation': '优先保障资源，设置3天缓冲期'}, {'task': '服务集成', 'risk': '接口兼容性问题', 'mitigation': '提前定义接口契约，版本化管理'}], 'buffer_time': '25%', 'contingency_plans': ['关键路径人员备份', '紧急回滚方案']}, 'summary': '项目分为4个阶段，预估17天完成，包含3个微服务的开发、集成和部署，关键路径为用户服务→确权开立服务→额度管理服务'}
2025-07-10 10:12:30 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 💾 步骤6：开始生成SQLite任务...
2025-07-10 10:12:30 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📄 执行计划较长(9260字符)，使用滑动窗口处理
2025-07-10 10:12:30 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📄 文档分割完成：9260 字符 -> 6 个窗口
2025-07-10 10:12:30 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 处理计划窗口 1/6
2025-07-10 10:14:39 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-10 10:14:39 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 窗口 1 任务生成完成
2025-07-10 10:14:39 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 处理计划窗口 2/6
2025-07-10 10:16:48 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-10 10:16:48 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 窗口 2 任务生成完成
2025-07-10 10:16:48 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 处理计划窗口 3/6
2025-07-10 10:19:01 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-10 10:19:02 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 窗口 3 任务生成完成
2025-07-10 10:19:02 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 处理计划窗口 4/6
2025-07-10 10:21:49 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-10 10:21:49 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 窗口 4 任务生成完成
2025-07-10 10:21:49 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 处理计划窗口 5/6
2025-07-10 10:22:19 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-10 10:22:19 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 窗口 5 任务生成完成
2025-07-10 10:22:19 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 处理计划窗口 6/6
2025-07-10 10:24:29 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-10 10:24:29 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 窗口 6 任务生成完成
2025-07-10 10:24:29 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 🔄 合并 6 个任务生成分析结果...
2025-07-10 10:24:29 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📊 任务生成解析结果: {'tasks': [{'task_id': 'task_001', 'service_name': '系统', 'task_type': 'git_extraction', 'priority': 1, 'dependencies': [], 'estimated_duration': '5分钟', 'description': '从设计文档提取GitLab仓库地址', 'implementation_details': '解析设计文档，提取用户服务 http://gitlab.local/ls/zqyl-user-center-service.git 和确权开立服务 http://gitlab.local/ls/crcl-open.git 仓库地址', 'deliverables': ['GitLab仓库地址清单', '仓库访问验证报告'], 'completion_criteria': '成功提取并验证两个GitLab仓库地址可访问性', 'parameters': {'repositories': ['zqyl-user-center-service', 'crcl-open']}}, {'task_id': 'task_002', 'service_name': '用户服务', 'task_type': 'git_clone', 'priority': 2, 'dependencies': ['task_001'], 'estimated_duration': '10分钟', 'description': '下载用户服务代码到D:\\gitlab\\create_project/链数中建一局_1752113373/zqyl-user-center-service', 'implementation_details': '使用git clone命令下载用户服务代码到指定目录，确保项目结构完整可编译', 'deliverables': ['用户服务源码目录'], 'completion_criteria': '代码下载完成，项目目录存在且包含pom.xml文件', 'parameters': {'git_url': 'http://gitlab.local/ls/zqyl-user-center-service.git', 'local_path': 'D:\\gitlab\\create_project/链数中建一局_1752113373/zqyl-user-center-service'}}, {'task_id': 'task_003', 'service_name': '确权开立服务', 'task_type': 'git_clone', 'priority': 2, 'dependencies': ['task_001'], 'estimated_duration': '10分钟', 'description': '下载确权开立服务代码到D:\\gitlab\\create_project/链数中建一局_1752113373/crcl-open', 'implementation_details': '使用git clone命令下载确权开立服务代码到指定目录，确保项目结构完整可编译', 'deliverables': ['确权开立服务源码目录'], 'completion_criteria': '代码下载完成，项目目录存在且包含pom.xml文件', 'parameters': {'git_url': 'http://gitlab.local/ls/crcl-open.git', 'local_path': 'D:\\gitlab\\create_project/链数中建一局_1752113373/crcl-open'}}, {'task_id': 'task_004', 'service_name': '用户服务', 'task_type': 'code_analysis', 'priority': 3, 'dependencies': ['task_002'], 'estimated_duration': '20分钟', 'description': '分析用户服务代码结构，确定MultiorgManageController添加位置', 'implementation_details': '分析项目package结构和controller层，找到或创建MultiorgManageController类的最佳位置', 'deliverables': ['代码结构从Controller层开始到数据获取的完整路径'], 'completion_criteria': '确定MultiorgManageController的包路径和文件位置，明确依赖的Service层结构', 'parameters': {'project_path': 'D:\\gitlab\\create_project/链数中建一局_1752113373/zqyl-user-center-service', 'target_controller': 'MultiorgManageController', 'target_api': '/general/multiorgManage/queryCompanyUnitList'}}, {'task_id': 'task_005', 'service_name': '确权开立服务', 'task_type': 'code_analysis', 'priority': 3, 'dependencies': ['task_003'], 'estimated_duration': '20分钟', 'description': '分析确权开立服务代码结构，确定LsLimitController添加位置', 'implementation_details': '分析项目package结构和controller层，找到或创建LsLimitController类的最佳位置，支持两个接口开发', 'deliverables': ['代码结构从Controller层开始到数据获取的完整路径', 'Feign客户端配置方案'], 'completion_criteria': '确定LsLimitController的包路径和文件位置，明确服务间调用的Feign配置', 'parameters': {'project_path': 'D:\\gitlab\\create_project/链数中建一局_1752113373/crcl-open', 'target_controller': 'LsLimitController', 'target_apis': ['/crcl-open-api/lsLimit/listUnitLimitByCompanyId', '/crcl-open-api/lsLimit/listUnitLimitByCompanyIdExport']}}, {'task_id': 'task_006', 'service_name': '用户服务', 'task_type': 'config', 'priority': 4, 'dependencies': ['task_004'], 'estimated_duration': '15分钟', 'description': '配置用户服务数据库连接：jdbc:mysql://localhost:6446/dbwebappdb', 'implementation_details': '修改application.yml文件，配置数据库连接信息包括URL、用户名密码和连接池设置', 'deliverables': ['数据库配置文件', '连接测试报告'], 'completion_criteria': 'application.yml文件已更新，数据库连接配置正确且可连通', 'parameters': {'config_file': 'D:\\gitlab\\create_project/链数中建一局_1752113373/zqyl-user-center-service/src/main/resources/application.yml', 'database_url': 'jdbc:mysql://localhost:6446/dbwebappdb?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC&characterEncoding=utf8&useUnicode=true', 'username': 'dbwebapp', 'password': 'dbwebapp'}}, {'task_id': 'task_007', 'service_name': '用户服务', 'task_type': 'database', 'priority': 5, 'dependencies': ['task_006'], 'estimated_duration': '15分钟', 'description': '创建t_cust_multiorg_unit表，包含id,company_id,unit_code,unit_name等字段', 'implementation_details': '编写建表SQL脚本，定义主键、索引和字段约束，创建对应的Entity和Mapper文件', 'deliverables': ['建表SQL脚本', 'Entity实体类', 'Mapper接口文件'], 'completion_criteria': '表结构创建成功，Entity和Mapper文件可正常编译，支持基本CRUD操作', 'parameters': {'table_name': 't_cust_multiorg_unit', 'sql_location': 'src/main/resources/sql/t_cust_multiorg_unit.sql'}}, {'task_id': 'task_008', 'service_name': '用户服务', 'task_type': 'api', 'priority': 6, 'dependencies': ['task_007'], 'estimated_duration': '60分钟', 'description': '实现GET /general/multiorgManage/queryCompanyUnitList接口', 'implementation_details': '在MultiorgManageController中实现查询接口，支持条件查询和分页，返回规定的字段格式', 'deliverables': ['MultiorgManageController类', 'Service业务逻辑层', '接口文档'], 'completion_criteria': '接口可正常访问，返回数据格式符合规范，支持条件查询和分页功能', 'parameters': {'project_path': 'D:\\gitlab\\create_project/链数中建一局_1752113373/zqyl-user-center-service', 'api_path': '/general/multiorgManage/queryCompanyUnitList', 'http_method': 'GET', 'content_type': 'application/json', 'request_params': {'unitCode': '组织单元编码(可选)', 'openStatus': '开通状态(可选)', 'unitList': '组织单元列表(可选)'}, 'response_params': {'unitId': '组织单元ID', 'unitTypeDicType': '组织单元类型字典类型', 'unitTypeId': '组织单元类型ID', 'openStatus': '开通状态', 'unitCode': '组织单元编码', 'unitName': '组织单元名称'}, 'business_logic': '根据查询条件查询组织单元信息，支持按编码、状态等条件筛选', 'data_source': 't_cust_multiorg_unit表', 'validation_rules': {'unitCode': '长度不超过50字符', 'openStatus': '取值范围0-1'}}}, {'task_id': 'task_009', 'service_name': '确权开立服务', 'task_type': 'api', 'priority': 7, 'dependencies': ['task_008'], 'estimated_duration': '90分钟', 'description': '实现GET /crcl-open-api/lsLimit/listUnitLimitByCompanyId接口，调用用户服务', 'implementation_details': '在LsLimitController中实现额度查询接口，配置Feign客户端调用用户服务接口获取组织单元信息', 'deliverables': ['LsLimitController类', 'Feign客户端配置', '业务逻辑层'], 'completion_criteria': '接口可正常访问，能成功调用用户服务，返回额度数据格式正确', 'parameters': {'project_path': 'D:\\gitlab\\create_project/链数中建一局_1752113373/crcl-open', 'api_path': '/crcl-open-api/lsLimit/listUnitLimitByCompanyId', 'http_method': 'GET', 'content_type': 'application/json', 'request_params': {'gwCompanyId': '公司ID(必填)', 'unitName': '组织单元名称(可选)', 'limitSource': '额度来源(可选)', 'bizType': '业务类型(必填)', 'page': '页码(可选,默认1)', 'pageRow': '每页行数(可选,默认10)'}, 'response_params': {'totalLimitAmt': '总额度金额', 'usedLimitAmt': '已用额度金额', 'usableLimitAmt': '可用额度金额', 'unitLimitListDetail': '单元额度详情列表'}, 'business_logic': '根据公司ID和筛选条件查询组织单元额度信息，调用用户服务获取组织单元基础信息', 'data_source': '本地额度表 + 用户服务接口', 'external_call': '/general/multiorgManage/queryCompanyUnitList', 'validation_rules': {'gwCompanyId': '必填，数值类型', 'bizType': '必填，业务类型枚举值', 'page': '正整数，默认1', 'pageRow': '正整数，范围1-100'}}}, {'task_id': 'task_010', 'service_name': '确权开立服务', 'task_type': 'api', 'priority': 8, 'dependencies': ['task_009'], 'estimated_duration': '45分钟', 'description': '实现GET /crcl-open-api/lsLimit/listUnitLimitByCompanyIdExport导出接口', 'implementation_details': '在LsLimitController中实现Excel导出接口，复用listUnitLimitByCompanyId的数据逻辑', 'deliverables': ['导出接口方法', 'Excel工具类', '导出模板文件'], 'completion_criteria': '接口可正常访问，能成功导出Excel文件，表头和数据格式正确', 'parameters': {'project_path': 'D:\\gitlab\\create_project/链数中建一局_1752113373/crcl-open', 'api_path': '/crcl-open-api/lsLimit/listUnitLimitByCompanyIdExport', 'http_method': 'GET', 'content_type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'request_params': {'gwCompanyId': '公司ID(必填)', 'unitName': '组织单元名称(可选)', 'limitSource': '额度来源(可选)', 'bizType': '业务类型(必填)'}, 'response_params': {'file': 'Excel文件流', 'filename': '导出文件名', 'contentType': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'}, 'business_logic': '复用listUnitLimitByCompanyId接口的查询逻辑，将结果导出为Excel格式', 'data_source': '调用listUnitLimitByCompanyId接口获取数据', 'export_format': 'xlsx', 'export_headers': ['组织单元名称', '额度名称', '额度类型', '已分配额度', '已用额度', '可用额度'], 'validation_rules': {'gwCompanyId': '必填，数值类型', 'bizType': '必填，业务类型枚举值'}}}, {'task_id': 'task_011', 'service_name': '系统', 'task_type': 'integration_test', 'priority': 9, 'dependencies': ['task_008', 'task_009', 'task_010'], 'estimated_duration': '30分钟', 'description': '测试确权开立服务调用用户服务接口的完整流程', 'implementation_details': '编写集成测试用例，验证服务间调用正确性和数据完整性', 'deliverables': ['集成测试用例', '测试数据脚本', '测试报告'], 'completion_criteria': '所有测试用例通过，接口调用链路正常，数据返回格式正确', 'parameters': {'test_scenarios': ['组织单元额度查询测试'], 'test_data': {'gwCompanyId': 1, 'unitName': '测试单元', 'bizType': 80}}}, {'task_id': 'task_012', 'service_name': '系统', 'task_type': 'deployment', 'priority': 10, 'dependencies': ['task_011'], 'estimated_duration': '20分钟', 'description': '提交代码到GitLab仓库，commit message: feat: 新增组织单元额度管理功能', 'implementation_details': '执行git add、git commit和git push命令，提交所有新增和修改的代码文件', 'deliverables': ['Git提交记录', '代码合并报告', '部署文档'], 'completion_criteria': '代码成功提交到GitLab仓库，commit信息清晰，无冲突', 'parameters': {'repositories': [{'path': 'D:\\gitlab\\create_project/链数中建一局_1752113373/zqyl-user-center-service', 'changes': '新增组织单元查询接口'}, {'path': 'D:\\gitlab\\create_project/链数中建一局_1752113373/crcl-open', 'changes': '新增组织单元额度列表和导出接口'}]}}], 'total_tasks': 12, 'summary': '生成12个任务：GitLab代码下载->结构分析->环境配置->接口开发->测试部署。严格使用设计文档中的真实接口路径和参数，确保先开发用户服务接口，再开发依赖它的确权开立服务接口。 生成12个任务：GitLab代码下载->结构分析->环境配置->接口开发->测试部署。严格使用设计文档中的真实接口路径和参数，确保先开发用户服务接口，再开发依赖它的确权开立服务接口。 生成12个任务：GitLab代码'}
2025-07-10 10:24:29 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 🎯 生成的任务列表: [{'task_id': 'task_001', 'service_name': '系统', 'task_type': 'git_extraction', 'priority': 1, 'dependencies': [], 'estimated_duration': '5分钟', 'description': '从设计文档提取GitLab仓库地址', 'implementation_details': '解析设计文档，提取用户服务 http://gitlab.local/ls/zqyl-user-center-service.git 和确权开立服务 http://gitlab.local/ls/crcl-open.git 仓库地址', 'deliverables': ['GitLab仓库地址清单', '仓库访问验证报告'], 'completion_criteria': '成功提取并验证两个GitLab仓库地址可访问性', 'parameters': {'repositories': ['zqyl-user-center-service', 'crcl-open']}}, {'task_id': 'task_002', 'service_name': '用户服务', 'task_type': 'git_clone', 'priority': 2, 'dependencies': ['task_001'], 'estimated_duration': '10分钟', 'description': '下载用户服务代码到D:\\gitlab\\create_project/链数中建一局_1752113373/zqyl-user-center-service', 'implementation_details': '使用git clone命令下载用户服务代码到指定目录，确保项目结构完整可编译', 'deliverables': ['用户服务源码目录'], 'completion_criteria': '代码下载完成，项目目录存在且包含pom.xml文件', 'parameters': {'git_url': 'http://gitlab.local/ls/zqyl-user-center-service.git', 'local_path': 'D:\\gitlab\\create_project/链数中建一局_1752113373/zqyl-user-center-service'}}, {'task_id': 'task_003', 'service_name': '确权开立服务', 'task_type': 'git_clone', 'priority': 2, 'dependencies': ['task_001'], 'estimated_duration': '10分钟', 'description': '下载确权开立服务代码到D:\\gitlab\\create_project/链数中建一局_1752113373/crcl-open', 'implementation_details': '使用git clone命令下载确权开立服务代码到指定目录，确保项目结构完整可编译', 'deliverables': ['确权开立服务源码目录'], 'completion_criteria': '代码下载完成，项目目录存在且包含pom.xml文件', 'parameters': {'git_url': 'http://gitlab.local/ls/crcl-open.git', 'local_path': 'D:\\gitlab\\create_project/链数中建一局_1752113373/crcl-open'}}, {'task_id': 'task_004', 'service_name': '用户服务', 'task_type': 'code_analysis', 'priority': 3, 'dependencies': ['task_002'], 'estimated_duration': '20分钟', 'description': '分析用户服务代码结构，确定MultiorgManageController添加位置', 'implementation_details': '分析项目package结构和controller层，找到或创建MultiorgManageController类的最佳位置', 'deliverables': ['代码结构从Controller层开始到数据获取的完整路径'], 'completion_criteria': '确定MultiorgManageController的包路径和文件位置，明确依赖的Service层结构', 'parameters': {'project_path': 'D:\\gitlab\\create_project/链数中建一局_1752113373/zqyl-user-center-service', 'target_controller': 'MultiorgManageController', 'target_api': '/general/multiorgManage/queryCompanyUnitList'}}, {'task_id': 'task_005', 'service_name': '确权开立服务', 'task_type': 'code_analysis', 'priority': 3, 'dependencies': ['task_003'], 'estimated_duration': '20分钟', 'description': '分析确权开立服务代码结构，确定LsLimitController添加位置', 'implementation_details': '分析项目package结构和controller层，找到或创建LsLimitController类的最佳位置，支持两个接口开发', 'deliverables': ['代码结构从Controller层开始到数据获取的完整路径', 'Feign客户端配置方案'], 'completion_criteria': '确定LsLimitController的包路径和文件位置，明确服务间调用的Feign配置', 'parameters': {'project_path': 'D:\\gitlab\\create_project/链数中建一局_1752113373/crcl-open', 'target_controller': 'LsLimitController', 'target_apis': ['/crcl-open-api/lsLimit/listUnitLimitByCompanyId', '/crcl-open-api/lsLimit/listUnitLimitByCompanyIdExport']}}, {'task_id': 'task_006', 'service_name': '用户服务', 'task_type': 'config', 'priority': 4, 'dependencies': ['task_004'], 'estimated_duration': '15分钟', 'description': '配置用户服务数据库连接：jdbc:mysql://localhost:6446/dbwebappdb', 'implementation_details': '修改application.yml文件，配置数据库连接信息包括URL、用户名密码和连接池设置', 'deliverables': ['数据库配置文件', '连接测试报告'], 'completion_criteria': 'application.yml文件已更新，数据库连接配置正确且可连通', 'parameters': {'config_file': 'D:\\gitlab\\create_project/链数中建一局_1752113373/zqyl-user-center-service/src/main/resources/application.yml', 'database_url': 'jdbc:mysql://localhost:6446/dbwebappdb?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC&characterEncoding=utf8&useUnicode=true', 'username': 'dbwebapp', 'password': 'dbwebapp'}}, {'task_id': 'task_007', 'service_name': '用户服务', 'task_type': 'database', 'priority': 5, 'dependencies': ['task_006'], 'estimated_duration': '15分钟', 'description': '创建t_cust_multiorg_unit表，包含id,company_id,unit_code,unit_name等字段', 'implementation_details': '编写建表SQL脚本，定义主键、索引和字段约束，创建对应的Entity和Mapper文件', 'deliverables': ['建表SQL脚本', 'Entity实体类', 'Mapper接口文件'], 'completion_criteria': '表结构创建成功，Entity和Mapper文件可正常编译，支持基本CRUD操作', 'parameters': {'table_name': 't_cust_multiorg_unit', 'sql_location': 'src/main/resources/sql/t_cust_multiorg_unit.sql'}}, {'task_id': 'task_008', 'service_name': '用户服务', 'task_type': 'api', 'priority': 6, 'dependencies': ['task_007'], 'estimated_duration': '60分钟', 'description': '实现GET /general/multiorgManage/queryCompanyUnitList接口', 'implementation_details': '在MultiorgManageController中实现查询接口，支持条件查询和分页，返回规定的字段格式', 'deliverables': ['MultiorgManageController类', 'Service业务逻辑层', '接口文档'], 'completion_criteria': '接口可正常访问，返回数据格式符合规范，支持条件查询和分页功能', 'parameters': {'project_path': 'D:\\gitlab\\create_project/链数中建一局_1752113373/zqyl-user-center-service', 'api_path': '/general/multiorgManage/queryCompanyUnitList', 'http_method': 'GET', 'content_type': 'application/json', 'request_params': {'unitCode': '组织单元编码(可选)', 'openStatus': '开通状态(可选)', 'unitList': '组织单元列表(可选)'}, 'response_params': {'unitId': '组织单元ID', 'unitTypeDicType': '组织单元类型字典类型', 'unitTypeId': '组织单元类型ID', 'openStatus': '开通状态', 'unitCode': '组织单元编码', 'unitName': '组织单元名称'}, 'business_logic': '根据查询条件查询组织单元信息，支持按编码、状态等条件筛选', 'data_source': 't_cust_multiorg_unit表', 'validation_rules': {'unitCode': '长度不超过50字符', 'openStatus': '取值范围0-1'}}}, {'task_id': 'task_009', 'service_name': '确权开立服务', 'task_type': 'api', 'priority': 7, 'dependencies': ['task_008'], 'estimated_duration': '90分钟', 'description': '实现GET /crcl-open-api/lsLimit/listUnitLimitByCompanyId接口，调用用户服务', 'implementation_details': '在LsLimitController中实现额度查询接口，配置Feign客户端调用用户服务接口获取组织单元信息', 'deliverables': ['LsLimitController类', 'Feign客户端配置', '业务逻辑层'], 'completion_criteria': '接口可正常访问，能成功调用用户服务，返回额度数据格式正确', 'parameters': {'project_path': 'D:\\gitlab\\create_project/链数中建一局_1752113373/crcl-open', 'api_path': '/crcl-open-api/lsLimit/listUnitLimitByCompanyId', 'http_method': 'GET', 'content_type': 'application/json', 'request_params': {'gwCompanyId': '公司ID(必填)', 'unitName': '组织单元名称(可选)', 'limitSource': '额度来源(可选)', 'bizType': '业务类型(必填)', 'page': '页码(可选,默认1)', 'pageRow': '每页行数(可选,默认10)'}, 'response_params': {'totalLimitAmt': '总额度金额', 'usedLimitAmt': '已用额度金额', 'usableLimitAmt': '可用额度金额', 'unitLimitListDetail': '单元额度详情列表'}, 'business_logic': '根据公司ID和筛选条件查询组织单元额度信息，调用用户服务获取组织单元基础信息', 'data_source': '本地额度表 + 用户服务接口', 'external_call': '/general/multiorgManage/queryCompanyUnitList', 'validation_rules': {'gwCompanyId': '必填，数值类型', 'bizType': '必填，业务类型枚举值', 'page': '正整数，默认1', 'pageRow': '正整数，范围1-100'}}}, {'task_id': 'task_010', 'service_name': '确权开立服务', 'task_type': 'api', 'priority': 8, 'dependencies': ['task_009'], 'estimated_duration': '45分钟', 'description': '实现GET /crcl-open-api/lsLimit/listUnitLimitByCompanyIdExport导出接口', 'implementation_details': '在LsLimitController中实现Excel导出接口，复用listUnitLimitByCompanyId的数据逻辑', 'deliverables': ['导出接口方法', 'Excel工具类', '导出模板文件'], 'completion_criteria': '接口可正常访问，能成功导出Excel文件，表头和数据格式正确', 'parameters': {'project_path': 'D:\\gitlab\\create_project/链数中建一局_1752113373/crcl-open', 'api_path': '/crcl-open-api/lsLimit/listUnitLimitByCompanyIdExport', 'http_method': 'GET', 'content_type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'request_params': {'gwCompanyId': '公司ID(必填)', 'unitName': '组织单元名称(可选)', 'limitSource': '额度来源(可选)', 'bizType': '业务类型(必填)'}, 'response_params': {'file': 'Excel文件流', 'filename': '导出文件名', 'contentType': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'}, 'business_logic': '复用listUnitLimitByCompanyId接口的查询逻辑，将结果导出为Excel格式', 'data_source': '调用listUnitLimitByCompanyId接口获取数据', 'export_format': 'xlsx', 'export_headers': ['组织单元名称', '额度名称', '额度类型', '已分配额度', '已用额度', '可用额度'], 'validation_rules': {'gwCompanyId': '必填，数值类型', 'bizType': '必填，业务类型枚举值'}}}, {'task_id': 'task_011', 'service_name': '系统', 'task_type': 'integration_test', 'priority': 9, 'dependencies': ['task_008', 'task_009', 'task_010'], 'estimated_duration': '30分钟', 'description': '测试确权开立服务调用用户服务接口的完整流程', 'implementation_details': '编写集成测试用例，验证服务间调用正确性和数据完整性', 'deliverables': ['集成测试用例', '测试数据脚本', '测试报告'], 'completion_criteria': '所有测试用例通过，接口调用链路正常，数据返回格式正确', 'parameters': {'test_scenarios': ['组织单元额度查询测试'], 'test_data': {'gwCompanyId': 1, 'unitName': '测试单元', 'bizType': 80}}}, {'task_id': 'task_012', 'service_name': '系统', 'task_type': 'deployment', 'priority': 10, 'dependencies': ['task_011'], 'estimated_duration': '20分钟', 'description': '提交代码到GitLab仓库，commit message: feat: 新增组织单元额度管理功能', 'implementation_details': '执行git add、git commit和git push命令，提交所有新增和修改的代码文件', 'deliverables': ['Git提交记录', '代码合并报告', '部署文档'], 'completion_criteria': '代码成功提交到GitLab仓库，commit信息清晰，无冲突', 'parameters': {'repositories': [{'path': 'D:\\gitlab\\create_project/链数中建一局_1752113373/zqyl-user-center-service', 'changes': '新增组织单元查询接口'}, {'path': 'D:\\gitlab\\create_project/链数中建一局_1752113373/crcl-open', 'changes': '新增组织单元额度列表和导出接口'}]}}]
2025-07-10 10:24:29 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 🔢 生成的任务数量: 12
2025-07-10 10:24:29 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 已保存 12 个任务到数据库
2025-07-10 10:24:29 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 已生成并保存 12 个任务到数据库
2025-07-10 10:24:29 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📤 最终服务列表: ['用户服务', '确权开立服务', '多组织单元管理服务']
2025-07-10 10:24:29 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📤 生成并行任务批次: [{'batch_id': 'batch_1', 'services': ['用户服务', '确权开立服务', '多组织单元管理服务'], 'dependencies': []}]
2025-07-10 10:24:29 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📤 输出状态键: ['design_doc', 'project_name', 'identified_services', 'service_dependencies', 'task_execution_plan', 'parallel_tasks', 'git_repo_url', 'target_branch', 'project_paths', 'output_path', 'repo_initialized', 'generated_services', 'generated_apis', 'generated_sql', 'service_interconnections', 'unit_test_results', 'test_coverage', 'interface_compatibility', 'code_review_results', 'static_analysis_results', 'security_scan_results', 'commit_hashes', 'push_results', 'pr_urls', 'current_phase', 'completed_services', 'failed_services', 'retry_count', 'execution_errors', 'generated_tasks']
2025-07-10 10:24:29 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📤 输出 - 识别服务: ['用户服务', '确权开立服务', '多组织单元管理服务']
2025-07-10 10:24:29 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📤 输出 - 当前阶段: intelligent_coding
2025-07-10 10:24:29 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 任务拆分完成，识别 3 个服务，生成 12 个任务
2025-07-10 10:24:29 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🚀 Git管理节点开始执行...
2025-07-10 10:24:29 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 10:24:29 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🎯 git_management_node 开始执行任务...
2025-07-10 10:24:29 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 📋 找到 1 个可执行任务
2025-07-10 10:24:29 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🚀 开始执行任务: task_001 (git_extraction)
2025-07-10 10:24:29 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_001 已被 git_management_node 领取
2025-07-10 10:24:29 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🔍 执行Git提取任务: task_001
2025-07-10 10:24:29 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 📄 提取源文本: 解析设计文档，提取用户服务 http://gitlab.local/ls/zqyl-user-center-service.git 和确权开立服务 http://gitlab.local/ls/crcl-open.git 仓库地址 从设计文档提取GitLab仓库地址...
2025-07-10 10:24:29 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🔍 开始从文本提取Git URL...
2025-07-10 10:24:29 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🔗 找到Git仓库: http://gitlab.local/ls/zqyl-user-center-service.git
2025-07-10 10:24:29 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🔗 找到Git仓库: http://gitlab.local/ls/crcl-open.git
2025-07-10 10:24:29 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 提取到 2 个Git仓库
2025-07-10 10:24:29 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_001 状态更新为 completed
2025-07-10 10:24:29 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 任务 task_001 执行成功
2025-07-10 10:24:29 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ Git管理任务执行完成，共处理 1 个任务
2025-07-10 10:24:29 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🚀 基于提取结果自动克隆 2 个仓库...
2025-07-10 10:24:29 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 📥 自动克隆仓库: http://gitlab.local/ls/zqyl-user-center-service.git -> D:\gitlab\create_project/链数中建一局_1752113373/zqyl-user-center-service
2025-07-10 10:24:29 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 📥 开始克隆仓库: http://gitlab.local/ls/zqyl-user-center-service.git -> D:\gitlab\create_project/链数中建一局_1752113373/zqyl-user-center-service
2025-07-10 10:24:31 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 已切换到分支: master
2025-07-10 10:24:31 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 仓库克隆成功: D:\gitlab\create_project/链数中建一局_1752113373/zqyl-user-center-service
2025-07-10 10:24:31 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 自动克隆成功: zqyl-user-center-service
2025-07-10 10:24:31 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 已标记任务 task_002 为完成状态
2025-07-10 10:24:31 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 📥 自动克隆仓库: http://gitlab.local/ls/crcl-open.git -> D:\gitlab\create_project/链数中建一局_1752113373/crcl-open
2025-07-10 10:24:31 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 📥 开始克隆仓库: http://gitlab.local/ls/crcl-open.git -> D:\gitlab\create_project/链数中建一局_1752113373/crcl-open
2025-07-10 10:24:33 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 已切换到分支: master
2025-07-10 10:24:33 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 仓库克隆成功: D:\gitlab\create_project/链数中建一局_1752113373/crcl-open
2025-07-10 10:24:33 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 自动克隆成功: crcl-open
2025-07-10 10:24:33 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 已标记任务 task_003 为完成状态
2025-07-10 10:24:33 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ Git管理节点完成 - 提取: 2 个仓库, 克隆: 2 个仓库, 仓库初始化状态: True
2025-07-10 10:24:33 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 10:24:33 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 10:24:33 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 10:24:33 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: none)
2025-07-10 10:24:33 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 10:24:33 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 10:24:33 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 10:24:33 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 第1轮找到 2 个可执行任务
2025-07-10 10:24:33 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 开始执行任务: task_004 (code_analysis)
2025-07-10 10:24:33 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_004 已被 intelligent_coding_node 领取
2025-07-10 10:24:33 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行代码分析任务: task_004
2025-07-10 10:24:33 - src.utils.java_code_analyzer - INFO - 🔍 开始分析企业级Java项目: D:\gitlab\create_project/链数中建一局_1752113373/zqyl-user-center-service
2025-07-10 10:24:33 - src.utils.java_code_analyzer - INFO - ✅ 企业级项目分析完成，共分析 29 个Java文件
2025-07-10 10:24:33 - src.utils.java_code_analyzer - INFO - 📄 企业级分析报告已导出: outputs\用户服务_java_analysis_20250710_102433.md
2025-07-10 10:24:33 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_004 状态更新为 completed
2025-07-10 10:24:33 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 任务 task_004 执行成功
2025-07-10 10:24:33 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 开始执行任务: task_005 (code_analysis)
2025-07-10 10:24:33 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_005 已被 intelligent_coding_node 领取
2025-07-10 10:24:33 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行代码分析任务: task_005
2025-07-10 10:24:33 - src.utils.java_code_analyzer - INFO - 🔍 开始分析企业级Java项目: D:\gitlab\create_project/链数中建一局_1752113373/crcl-open
2025-07-10 10:24:43 - src.utils.java_code_analyzer - INFO - ✅ 企业级项目分析完成，共分析 2262 个Java文件
2025-07-10 10:24:44 - src.utils.java_code_analyzer - INFO - 📄 企业级分析报告已导出: outputs\确权开立服务_java_analysis_20250710_102443.md
2025-07-10 10:24:44 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_005 状态更新为 completed
2025-07-10 10:24:44 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 任务 task_005 执行成功
2025-07-10 10:24:44 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 第1轮执行完成，处理了 2 个任务
2025-07-10 10:24:44 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第2轮任务检查...
2025-07-10 10:24:45 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 第2轮找到 1 个可执行任务
2025-07-10 10:24:45 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 开始执行任务: task_006 (config)
2025-07-10 10:24:45 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_006 已被 intelligent_coding_node 领取
2025-07-10 10:24:45 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ⚙️ 执行配置生成任务: task_006
2025-07-10 10:24:45 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_006 状态更新为 completed
2025-07-10 10:24:45 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 任务 task_006 执行成功
2025-07-10 10:24:45 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 第2轮执行完成，处理了 1 个任务
2025-07-10 10:24:45 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第3轮任务检查...
2025-07-10 10:24:45 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 第3轮找到 1 个可执行任务
2025-07-10 10:24:45 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 开始执行任务: task_007 (database)
2025-07-10 10:24:45 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_007 已被 intelligent_coding_node 领取
2025-07-10 10:24:45 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🗄️ 执行数据库设计任务: task_007
2025-07-10 10:24:45 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_007 状态更新为 completed
2025-07-10 10:24:45 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 任务 task_007 执行成功
2025-07-10 10:24:45 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 第3轮执行完成，处理了 1 个任务
2025-07-10 10:24:45 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第4轮任务检查...
2025-07-10 10:24:45 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 第4轮找到 1 个可执行任务
2025-07-10 10:24:45 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 开始执行任务: task_008 (api)
2025-07-10 10:24:45 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_008 已被 intelligent_coding_node 领取
2025-07-10 10:24:45 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🌐 执行API接口生成任务: task_008
2025-07-10 10:24:45 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_008 状态更新为 failed
2025-07-10 10:24:45 - src.corder_integration.langgraph.nodes.intelligent_coding_node - ERROR - ❌ 任务 task_008 执行失败: LLM客户端未初始化，无法执行代码生成
2025-07-10 10:24:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 第4轮执行完成，处理了 1 个任务
2025-07-10 10:24:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第5轮任务检查...
2025-07-10 10:24:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第5轮没有可执行的智能编码任务
2025-07-10 10:24:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 5 个任务，共5轮
2025-07-10 10:24:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 5 个任务
2025-07-10 10:24:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 10:24:49 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 10:24:49 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 10:24:49 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: none)
2025-07-10 10:24:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 10:24:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 10:24:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 10:24:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 10:24:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 10:24:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 10:24:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 10:24:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 10:24:49 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 10:24:49 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 10:24:49 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: none)
2025-07-10 10:24:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 10:24:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 10:24:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 10:24:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 10:24:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 10:24:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 10:24:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 10:24:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 10:24:49 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 10:24:49 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 10:24:49 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: none)
2025-07-10 10:24:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 10:24:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 10:24:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 10:24:50 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 10:24:50 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 10:24:50 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 10:24:50 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 10:24:50 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 10:24:50 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 10:24:50 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 10:24:50 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: none)
2025-07-10 10:24:50 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 10:24:50 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 10:24:50 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 10:24:50 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 10:24:50 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 10:24:50 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 10:24:50 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 10:24:50 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 10:24:50 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 10:24:50 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 10:24:50 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: none)
2025-07-10 10:24:50 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 10:24:50 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 10:24:50 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 10:24:50 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 10:24:50 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 10:24:50 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 10:24:50 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 10:24:50 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 10:24:50 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 10:24:50 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 10:24:50 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: none)
2025-07-10 10:24:50 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 10:24:50 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 10:24:50 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 10:24:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 10:24:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 10:24:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 10:24:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 10:24:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 10:24:51 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 10:24:51 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 10:24:51 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: none)
2025-07-10 10:24:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 10:24:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 10:24:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 10:24:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 10:24:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 10:24:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 10:24:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 10:24:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 10:24:51 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 10:24:51 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 10:24:51 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: none)
2025-07-10 10:24:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 10:24:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 10:24:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 10:24:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 10:24:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 10:24:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 10:24:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 10:24:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 10:24:51 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 10:24:51 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 10:24:51 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: none)
2025-07-10 10:24:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 10:24:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 10:24:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 10:24:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 10:24:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 10:24:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 10:24:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 10:24:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 10:24:52 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 10:24:52 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 10:24:52 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: none)
2025-07-10 10:24:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 10:24:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 10:24:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 10:24:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 10:24:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 10:24:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 10:24:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 10:24:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 10:24:52 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 10:24:52 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 10:24:52 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: none)
2025-07-10 10:24:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 10:24:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 10:24:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 10:24:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 10:24:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 10:24:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 10:24:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 10:24:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 10:24:52 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 10:24:52 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 10:24:52 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: none)
2025-07-10 10:24:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 10:24:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 10:24:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 10:24:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 10:24:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 10:24:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 10:24:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 10:24:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 10:24:52 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 10:24:52 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 10:24:52 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: none)
2025-07-10 10:24:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 10:24:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 10:24:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 10:24:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 10:24:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 10:24:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 10:24:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 10:24:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 10:24:53 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 10:24:53 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 10:24:53 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: none)
2025-07-10 10:24:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 10:24:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 10:24:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 10:24:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 10:24:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 10:24:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 10:24:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 10:24:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 10:24:53 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 10:24:53 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 10:24:53 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: none)
2025-07-10 10:24:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 10:24:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 10:24:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 10:24:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 10:24:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 10:24:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 10:24:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 10:24:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 10:24:54 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 10:24:54 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 10:24:54 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: none)
2025-07-10 10:24:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 10:24:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 10:24:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 10:24:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 10:24:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 10:24:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 10:24:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 10:24:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 10:24:54 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 10:24:54 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 10:24:54 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: none)
2025-07-10 10:24:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 10:24:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 10:24:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 10:24:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 10:24:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 10:24:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 10:24:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 10:24:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 10:24:54 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 10:24:54 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 10:24:54 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: none)
2025-07-10 10:24:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 10:24:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 10:24:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 10:24:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 10:24:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 10:24:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 10:24:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 10:24:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 10:24:54 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 10:24:54 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 10:24:54 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: none)
2025-07-10 10:24:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 10:24:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 10:24:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 10:24:55 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 10:24:55 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 10:24:55 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 10:24:55 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 10:24:55 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 10:24:55 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 10:24:55 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 10:24:55 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: none)
2025-07-10 10:24:55 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 10:24:55 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 10:24:55 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 10:24:55 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 10:24:55 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 10:24:55 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 10:24:55 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 10:24:55 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 10:24:55 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 10:24:55 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 10:24:55 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: none)
2025-07-10 10:24:55 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 10:24:55 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 10:24:55 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 10:24:55 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 10:24:55 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 10:24:55 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 10:24:55 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 10:24:55 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 10:24:55 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 10:24:55 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 10:24:55 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: none)
2025-07-10 10:24:55 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 10:24:55 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 10:24:55 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 10:24:56 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 10:24:56 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 10:24:56 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 10:24:56 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 10:24:56 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 10:24:56 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 10:24:56 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 10:24:56 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: none)
2025-07-10 10:24:56 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 10:24:56 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 10:24:56 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 10:24:56 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 10:24:56 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 10:24:56 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 10:24:56 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 10:24:56 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 10:24:56 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 10:24:56 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 10:24:56 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: none)
2025-07-10 10:24:56 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 10:24:56 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 10:24:56 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 10:24:56 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 10:24:56 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 10:24:56 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 10:24:56 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 10:24:56 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 10:24:56 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 10:24:56 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 10:24:56 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: none)
2025-07-10 10:24:56 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 10:24:56 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 10:24:56 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 10:24:57 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 10:24:57 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 10:24:57 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 10:24:57 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 10:24:57 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 10:24:57 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 10:24:57 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 10:24:57 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: none)
2025-07-10 10:24:57 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 10:24:57 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 10:24:57 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 10:24:57 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 10:24:57 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 10:24:57 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 10:24:57 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 10:24:57 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 10:24:57 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 10:24:57 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 10:24:57 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: none)
2025-07-10 10:24:57 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 10:24:57 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 10:24:57 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 10:24:57 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 10:24:57 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 10:24:57 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 10:24:57 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 10:24:57 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 10:24:57 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 10:24:57 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 10:24:57 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: none)
2025-07-10 10:24:57 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 10:24:57 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 10:24:57 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 10:24:57 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 10:24:57 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 10:24:57 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 10:24:57 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 10:24:57 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 10:24:57 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 10:24:57 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 10:24:57 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: none)
2025-07-10 10:24:57 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 10:24:57 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 10:24:57 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 10:24:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 10:24:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 10:24:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 10:24:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 10:24:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 10:24:58 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 10:24:58 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 10:24:58 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: none)
2025-07-10 10:24:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 10:24:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 10:24:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 10:24:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 10:24:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 10:24:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 10:24:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 10:24:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 10:24:58 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 10:24:58 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 10:24:58 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: none)
2025-07-10 10:24:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 10:24:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 10:24:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 10:24:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 10:24:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 10:24:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 10:24:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 10:24:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 10:24:58 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 10:24:58 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 10:24:58 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: none)
2025-07-10 10:24:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 10:24:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 10:24:58 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 10:24:59 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 10:24:59 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 10:24:59 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 10:24:59 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 10:24:59 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 10:24:59 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 10:24:59 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 10:24:59 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: none)
2025-07-10 10:24:59 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 10:24:59 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 10:24:59 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 10:24:59 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 10:24:59 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 10:24:59 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 10:24:59 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 10:24:59 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 10:24:59 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 10:24:59 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 10:24:59 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: none)
2025-07-10 10:24:59 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 10:24:59 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 10:24:59 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 10:24:59 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 10:24:59 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 10:24:59 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 10:24:59 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 10:24:59 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 10:24:59 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 10:24:59 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 10:24:59 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: none)
2025-07-10 10:24:59 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 10:24:59 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 10:24:59 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 10:25:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 10:25:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 10:25:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 10:25:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 10:25:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 10:25:00 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 10:25:00 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 10:25:00 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: none)
2025-07-10 10:25:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 10:25:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 10:25:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 10:25:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 10:25:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 10:25:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 10:25:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 10:25:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 10:25:00 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 10:25:00 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 10:25:00 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: none)
2025-07-10 10:25:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 10:25:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 10:25:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 10:25:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 10:25:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 10:25:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 10:25:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 10:25:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 10:25:00 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 10:25:00 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 10:25:00 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: none)
2025-07-10 10:25:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 10:25:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 10:25:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 10:25:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 10:25:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 10:25:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 10:25:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 10:25:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 10:25:00 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 10:25:00 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 10:25:00 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: none)
2025-07-10 10:25:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 10:25:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 10:25:00 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 10:25:01 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 10:25:01 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 10:25:01 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 10:25:01 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 10:25:01 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 10:25:01 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 10:25:01 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 10:25:01 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: none)
2025-07-10 10:25:01 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 10:25:01 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 10:25:01 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 10:25:01 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 10:25:01 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 10:25:01 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 10:25:01 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 10:25:01 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 10:25:01 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 10:25:01 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 10:25:01 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: none)
2025-07-10 10:25:01 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 10:25:01 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 10:25:01 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 10:25:01 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 10:25:01 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 10:25:01 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 10:25:01 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 10:25:01 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 10:25:01 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 10:25:01 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 10:25:01 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: none)
2025-07-10 10:25:01 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 10:25:01 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 10:25:01 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 10:25:02 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 10:25:02 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 10:25:02 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 10:25:02 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 10:25:02 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 10:25:02 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 10:25:02 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 10:25:02 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: none)
2025-07-10 10:25:02 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 10:25:02 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 10:25:02 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 10:25:02 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 10:25:02 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 10:25:02 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 10:25:02 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 10:25:02 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 10:25:02 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 10:25:02 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 10:25:02 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: none)
2025-07-10 10:25:02 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 10:25:02 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 10:25:02 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 10:25:02 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 10:25:02 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 10:25:02 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 10:25:02 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 10:25:02 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 10:25:02 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 10:25:02 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 10:25:02 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: none)
2025-07-10 10:25:02 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 10:25:02 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 10:25:02 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 10:25:03 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 10:25:03 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 10:25:03 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 10:25:03 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 10:25:03 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 10:25:03 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 10:25:03 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 10:25:03 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: none)
2025-07-10 10:25:03 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 10:25:03 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 10:25:03 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 10:25:03 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 10:25:03 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 10:25:03 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 10:25:03 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 10:25:03 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 10:25:03 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 10:25:03 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 10:25:03 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: none)
2025-07-10 10:25:03 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 10:25:03 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 10:25:03 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 10:25:03 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 10:25:03 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 10:25:03 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 10:25:03 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 10:25:03 - src.corder_integration.langgraph.workflow_orchestrator - ERROR - 工作流执行失败: Recursion limit of 50 reached without hitting a stop condition. You can increase the limit by setting the `recursion_limit` config key.
For troubleshooting, visit: https://python.langchain.com/docs/troubleshooting/errors/GRAPH_RECURSION_LIMIT
2025-07-10 10:25:06 - api_server - INFO - ✅ POST coder_agent_api.process_design_document [200] (933.23s)
2025-07-10 10:25:06 - werkzeug - INFO - 127.0.0.1 - - [10/Jul/2025 10:25:06] "POST /api/coder-agent/process-document HTTP/1.1" 200 -
2025-07-10 10:51:28 - system - INFO - ==================================================
2025-07-10 10:51:28 - system - INFO - 🚀 智能分析系统日志系统初始化完成
2025-07-10 10:51:28 - system - INFO - 📁 日志根目录: D:\ai_project\document_analyzer\logs
2025-07-10 10:51:28 - system - INFO - 📊 日志级别: INFO
2025-07-10 10:51:28 - system - INFO - 📅 按日期轮转: 每天午夜自动轮转
2025-07-10 10:51:28 - system - INFO - 📂 按月分目录: logs/YYYY-MM/
2025-07-10 10:51:28 - system - INFO - 📝 主日志: logs/2025-07/app.log
2025-07-10 10:51:28 - system - INFO - 🔧 API日志: logs/2025-07/api_server.log
2025-07-10 10:51:28 - system - INFO - 🧪 分析日志: logs/2025-07/analysis_service.log
2025-07-10 10:51:28 - system - INFO - ❌ 错误日志: logs/2025-07/error.log
2025-07-10 10:51:28 - system - INFO - 🗂️ 保留天数: 5 天
2025-07-10 10:51:28 - system - INFO - ==================================================
2025-07-10 10:51:37 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-10 10:51:38 - root - WARNING - 智能编码节点不可用: cannot import name 'IntelligentCodingAgent' from partially initialized module 'src.corder_integration.langgraph.nodes.intelligent_coding_node' (most likely due to a circular import) (D:\ai_project\document_analyzer\src\corder_integration\langgraph\nodes\intelligent_coding_node.py)
2025-07-10 10:51:38 - src.utils.task_storage - INFO - 数据库初始化成功
2025-07-10 10:51:38 - markdown_storage - INFO - Markdown存储管理器初始化完成
2025-07-10 10:51:38 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-10 10:51:38 - api_server - INFO - 从配置文件读取火山引擎配置: {'api_key': '7fcb3541-9363-4bfa-90aa-19e9f691bc25', 'endpoint': 'https://ark.cn-beijing.volces.com/api/v3', 'max_tokens': 4000, 'model': 'ep-20250605091804-wmw6w', 'temperature': 0.7}
2025-07-10 10:51:38 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-10 10:51:38 - api_server - INFO - 火山引擎客户端初始化成功
2025-07-10 10:51:38 - api_server - INFO - Weaviate配置: http://localhost:8080
2025-07-10 10:51:38 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-10 10:51:39 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-10 10:51:39 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-10 10:51:39 - WeaviateVectorDatabase - INFO - ✅ Weaviate连接成功: http://localhost:8080 (gRPC: 50051)
2025-07-10 10:51:39 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/schema/AnalyDesignDocuments "HTTP/1.1 200 OK"
2025-07-10 10:51:39 - WeaviateVectorDatabase - INFO - ✅ Weaviate集合已存在: AnalyDesignDocuments
2025-07-10 10:51:39 - AnalysisServiceManager - INFO - 初始化向量数据库: weaviate
2025-07-10 10:51:39 - sentence_transformers.SentenceTransformer - INFO - Use pytorch device_name: cpu
2025-07-10 10:51:39 - sentence_transformers.SentenceTransformer - INFO - Load pretrained SentenceTransformer: BAAI/bge-large-zh
2025-07-10 10:51:45 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-10 10:51:46 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-10 10:51:46 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-10 10:51:46 - src.utils.weaviate_helper - INFO - 成功连接到 Weaviate: localhost:8080
2025-07-10 10:51:46 - AnalysisServiceManager - INFO - 分析服务管理器初始化完成
2025-07-10 10:51:46 - api_server - INFO - 分析服务管理器初始化成功
2025-07-10 10:51:46 - api_server - INFO - 分析服务管理器已集成到API服务器
2025-07-10 10:51:46 - src.utils.enhanced_analyzer - INFO - 增强分析器初始化完成
2025-07-10 10:51:46 - api_server - INFO - 增强分析器初始化成功
2025-07-10 10:51:46 - api_server - INFO - 初始化任务存储数据库...
2025-07-10 10:51:46 - api_server - INFO - 任务存储数据库初始化成功
2025-07-10 10:51:46 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:8082
 * Running on http://26.26.26.1:8082
2025-07-10 10:51:46 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-07-10 10:51:46 - werkzeug - INFO -  * Restarting with stat
2025-07-10 10:51:47 - system - INFO - ==================================================
2025-07-10 10:51:47 - system - INFO - 🚀 智能分析系统日志系统初始化完成
2025-07-10 10:51:47 - system - INFO - 📁 日志根目录: D:\ai_project\document_analyzer\logs
2025-07-10 10:51:47 - system - INFO - 📊 日志级别: INFO
2025-07-10 10:51:47 - system - INFO - 📅 按日期轮转: 每天午夜自动轮转
2025-07-10 10:51:47 - system - INFO - 📂 按月分目录: logs/YYYY-MM/
2025-07-10 10:51:47 - system - INFO - 📝 主日志: logs/2025-07/app.log
2025-07-10 10:51:47 - system - INFO - 🔧 API日志: logs/2025-07/api_server.log
2025-07-10 10:51:47 - system - INFO - 🧪 分析日志: logs/2025-07/analysis_service.log
2025-07-10 10:51:47 - system - INFO - ❌ 错误日志: logs/2025-07/error.log
2025-07-10 10:51:47 - system - INFO - 🗂️ 保留天数: 5 天
2025-07-10 10:51:47 - system - INFO - ==================================================
2025-07-10 10:51:53 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-10 10:51:53 - root - WARNING - 智能编码节点不可用: cannot import name 'IntelligentCodingAgent' from partially initialized module 'src.corder_integration.langgraph.nodes.intelligent_coding_node' (most likely due to a circular import) (D:\ai_project\document_analyzer\src\corder_integration\langgraph\nodes\intelligent_coding_node.py)
2025-07-10 10:51:54 - src.utils.task_storage - INFO - 数据库初始化成功
2025-07-10 10:51:54 - markdown_storage - INFO - Markdown存储管理器初始化完成
2025-07-10 10:51:54 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-10 10:51:54 - api_server - INFO - 从配置文件读取火山引擎配置: {'api_key': '7fcb3541-9363-4bfa-90aa-19e9f691bc25', 'endpoint': 'https://ark.cn-beijing.volces.com/api/v3', 'max_tokens': 4000, 'model': 'ep-20250605091804-wmw6w', 'temperature': 0.7}
2025-07-10 10:51:54 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-10 10:51:54 - api_server - INFO - 火山引擎客户端初始化成功
2025-07-10 10:51:54 - api_server - INFO - Weaviate配置: http://localhost:8080
2025-07-10 10:51:54 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-10 10:51:55 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-10 10:51:55 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-10 10:51:55 - WeaviateVectorDatabase - INFO - ✅ Weaviate连接成功: http://localhost:8080 (gRPC: 50051)
2025-07-10 10:51:55 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/schema/AnalyDesignDocuments "HTTP/1.1 200 OK"
2025-07-10 10:51:55 - WeaviateVectorDatabase - INFO - ✅ Weaviate集合已存在: AnalyDesignDocuments
2025-07-10 10:51:55 - AnalysisServiceManager - INFO - 初始化向量数据库: weaviate
2025-07-10 10:51:55 - sentence_transformers.SentenceTransformer - INFO - Use pytorch device_name: cpu
2025-07-10 10:51:55 - sentence_transformers.SentenceTransformer - INFO - Load pretrained SentenceTransformer: BAAI/bge-large-zh
2025-07-10 10:52:00 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-10 10:52:01 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-10 10:52:01 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-10 10:52:01 - src.utils.weaviate_helper - INFO - 成功连接到 Weaviate: localhost:8080
2025-07-10 10:52:01 - AnalysisServiceManager - INFO - 分析服务管理器初始化完成
2025-07-10 10:52:01 - api_server - INFO - 分析服务管理器初始化成功
2025-07-10 10:52:01 - api_server - INFO - 分析服务管理器已集成到API服务器
2025-07-10 10:52:01 - src.utils.enhanced_analyzer - INFO - 增强分析器初始化完成
2025-07-10 10:52:01 - api_server - INFO - 增强分析器初始化成功
2025-07-10 10:52:01 - api_server - INFO - 初始化任务存储数据库...
2025-07-10 10:52:01 - api_server - INFO - 任务存储数据库初始化成功
2025-07-10 10:52:01 - werkzeug - WARNING -  * Debugger is active!
2025-07-10 10:52:01 - werkzeug - INFO -  * Debugger PIN: 887-537-592
2025-07-10 10:52:11 - src.apis.coder_agent_api - INFO - 开始处理文档: 链数中建一局_1752115931
2025-07-10 10:52:11 - src.apis.coder_agent_api - INFO - 文档长度: 4931 字符
2025-07-10 10:52:11 - src.apis.coder_agent_api - INFO - 使用LangGraph: True
2025-07-10 10:52:11 - src.apis.coder_agent_api - INFO - 代码输出路径: D:\gitlab\create_project
2025-07-10 10:52:11 - src.apis.coder_agent_api - INFO - 使用LangGraph工作流处理项目: 链数中建一局_1752115931
2025-07-10 10:52:11 - src.corder_integration.langgraph.workflow_orchestrator - INFO - 准备使用异步SQLite检查点: D:\ai_project\document_analyzer\workflow_checkpoints.db
2025-07-10 10:52:11 - src.corder_integration.langgraph.workflow_orchestrator - INFO - 生成目标分支名称: 链数中建一局_1752115931 -> D_20250710_链数中建一局_1752115931
2025-07-10 10:52:11 - src.corder_integration.langgraph.workflow_orchestrator - INFO - 开始执行编码工作流: 链数中建一局_1752115931 -> D:\gitlab\create_project
2025-07-10 10:52:11 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 🚀 开始执行任务拆分: 链数中建一局_1752115931
2025-07-10 10:52:11 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📥 输入状态键: ['design_doc', 'project_name', 'identified_services', 'service_dependencies', 'task_execution_plan', 'parallel_tasks', 'git_repo_url', 'target_branch', 'project_paths', 'output_path', 'repo_initialized', 'generated_services', 'generated_apis', 'generated_sql', 'service_interconnections', 'unit_test_results', 'test_coverage', 'interface_compatibility', 'code_review_results', 'static_analysis_results', 'security_scan_results', 'commit_hashes', 'push_results', 'pr_urls', 'current_phase', 'completed_services', 'failed_services', 'retry_count', 'execution_errors']
2025-07-10 10:52:11 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📄 设计文档长度: 4930
2025-07-10 10:52:11 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 🔄 当前阶段: task_splitting
2025-07-10 10:52:11 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📁 计算的基础项目路径: D:\gitlab\create_project/链数中建一局_1752115931
2025-07-10 10:52:11 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-10 10:52:11 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 模板 task_splitting/design_analysis_prompts.jinja2 加载成功
2025-07-10 10:52:11 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 模板 task_splitting/service_boundary_prompts.jinja2 加载成功
2025-07-10 10:52:11 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 模板 task_splitting/dependency_analysis_prompts.jinja2 加载成功
2025-07-10 10:52:11 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 模板 task_splitting/task_scheduling_prompts.jinja2 加载成功
2025-07-10 10:52:11 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 模板 task_splitting/generate_sqlite_tasks_prompts.jinja2 加载成功
2025-07-10 10:52:11 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 任务数据库初始化完成
2025-07-10 10:52:11 - src.corder_integration.langgraph.nodes.task_splitting_node - WARNING - ⚠️ 无法删除文件 coding_agent_workflow.db-wal，可能被其他进程占用
2025-07-10 10:52:11 - src.corder_integration.langgraph.nodes.task_splitting_node - WARNING - ⚠️ 无法删除文件 coding_agent_workflow.db-shm，可能被其他进程占用
2025-07-10 10:52:11 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 数据库WAL检查点和优化完成
2025-07-10 10:52:11 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 数据库表结构重置完成
2025-07-10 10:52:11 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📋 步骤1：开始设计文档分析...
2025-07-10 10:52:11 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📄 文档分割完成：4930 字符 -> 3 个窗口
2025-07-10 10:52:11 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📄 设计文档分割成 3 个窗口
2025-07-10 10:52:11 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 分析窗口 1/3 (字符: 0-1926)
2025-07-10 10:52:27 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-10 10:52:27 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 窗口 1 分析完成
2025-07-10 10:52:27 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 分析窗口 2/3 (字符: 1626-3553)
2025-07-10 10:52:39 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-10 10:52:39 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 窗口 2 分析完成
2025-07-10 10:52:39 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 分析窗口 3/3 (字符: 3253-4930)
2025-07-10 10:52:52 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-10 10:52:52 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 窗口 3 分析完成
2025-07-10 10:52:52 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 🔄 合并 3 个设计分析分析结果...
2025-07-10 10:52:52 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📊 合并后的设计分析结果: {'architecture_style': '微服务', 'technology_stack': ['pageHelper', 'RESTful API', 'Spring Cloud 2021.x', 'Redis', 'Redis 6.0', 'Nacos', 'Spring Boot', 'Spring Boot 2.7.x', 'MyBatis Plus 3.5.x', 'RabbitMQ 3.8', 'MySQL', 'PageHelper', 'Apache POI (for Excel export)', 'MySQL 8.0'], 'functional_modules': [{'name': '用户服务', 'description': '处理用户管理、权限控制和角色管理', 'responsibilities': ['组织单元管理', '用户认证与授权']}, {'name': '确权开立服务', 'description': '处理额度管理和数据推送逻辑', 'responsibilities': ['额度管理功能', '数据推送接口校验']}, {'name': '多组织单元管理', 'description': '管理组织单元的基本信息和状态', 'responsibilities': ['组织单元CRUD', '状态管理', '关联企业信息']}, {'name': '确权开立服务', 'description': '处理确权开立和额度管理', 'responsibilities': ['额度分配', '额度查询', '额度使用情况跟踪']}, {'name': '额度管理模块', 'description': '处理组织单元额度的查询和导出功能', 'responsibilities': ['查询组织单元额度信息', '导出额度信息到Excel文件']}, {'name': '组织单元信息模块', 'description': '从用户服务获取组织单元详细信息', 'responsibilities': ['调用zqyl-user-center-service服务获取组织单元数据']}], 'system_components': ['crcl-open服务', 'crcl-open', 'crcl-open-api服务', 'MySQL数据库', 'API网关', 'zqyl-user-center-service', 'zqyl-user-center-service服务', 'Redis缓存', 't_cust_multiorg_unit数据库表'], 'data_flow': ['企业信息→组织单元创建', '额度查询→返回使用情况', '核心企业修改数据后重新推送至平台', '组织单元→额度分配', 'Redis缓存可能用于缓存常用查询结果', '前端请求 -> crcl-open-api服务 -> 查询MySQL数据库 -> 调用zqyl-user-center-service服务 -> 生成Excel文件 -> 返回下载链接', '组织单元额度数据查询与展示'], 'integration_points': ['zqyl-user-center-service服务的/queryCompanyUnitList接口', 'MySQL数据库连接', '用户服务与确权开立服务间的API调用', '核心企业系统与平台的数据推送接口', '企业服务与组织单元服务的ID关联', '组织单元服务与确权服务的额度管理接口', 'Redis缓存连接'], 'summary': '该设计采用微服务架构，通过用户服务和确权开立服务实现松耦合。主要优化了额度管理功能，新增组织单元额度查询，并调整了数据推送接口的校验逻辑以支持重推场景。技术栈选型成熟，包含Spring Cloud生态组件和主流中间件，适合企业级应用。 该设计采用微服务架构，包含组织单元管理和确权开立两个核心模块。使用MySQL存储组织单元信息，通过RESTful API提供服务。系统通过企业ID关联组织单元，支持'}
2025-07-10 10:52:52 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 设计概要: 该设计采用微服务架构，通过用户服务和确权开立服务实现松耦合。主要优化了额度管理功能，新增组织单元额度查询，并调整了数据推送接口的校验逻辑以支持重推场景。技术栈选型成熟，包含Spring Cloud生态组件和主流中间件，适合企业级应用。 该设计采用微服务架构，包含组织单元管理和确权开立两个核心模块。使用MySQL存储组织单元信息，通过RESTful API提供服务。系统通过企业ID关联组织单元，支持
2025-07-10 10:52:52 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 🏗️ 步骤2：开始技术架构分析...
2025-07-10 10:52:52 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 技术架构概要: 该设计采用微服务架构，通过用户服务和确权开立服务实现松耦合。主要优化了额度管理功能，新增组织单元额度查询，并调整了数据推送接口的校验逻辑以支持重推场景。技术栈选型成熟，包含Spring Cloud生态组件和主流中间件，适合企业级应用。 该设计采用微服务架构，包含组织单元管理和确权开立两个核心模块。使用MySQL存储组织单元信息，通过RESTful API提供服务。系统通过企业ID关联组织单元，支持
2025-07-10 10:52:52 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 🔍 步骤3：开始服务边界识别...
2025-07-10 10:52:52 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 输入 - 设计概要: 该设计采用微服务架构，通过用户服务和确权开立服务实现松耦合。主要优化了额度管理功能，新增组织单元额度查询，并调整了数据推送接口的校验逻辑以支持重推场景。技术栈选型成熟，包含Spring Cloud生态组件和主流中间件，适合企业级应用。 该设计采用微服务架构，包含组织单元管理和确权开立两个核心模块。使用MySQL存储组织单元信息，通过RESTful API提供服务。系统通过企业ID关联组织单元，支持
2025-07-10 10:52:52 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 输入 - 架构概要: 该设计采用微服务架构，通过用户服务和确权开立服务实现松耦合。主要优化了额度管理功能，新增组织单元额度查询，并调整了数据推送接口的校验逻辑以支持重推场景。技术栈选型成熟，包含Spring Cloud生态组件和主流中间件，适合企业级应用。 该设计采用微服务架构，包含组织单元管理和确权开立两个核心模块。使用MySQL存储组织单元信息，通过RESTful API提供服务。系统通过企业ID关联组织单元，支持
2025-07-10 10:52:52 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 服务拆分提示词长度: 2333
2025-07-10 10:53:07 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-10 10:53:07 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 服务拆分LLM响应长度: 1418
2025-07-10 10:53:07 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📊 服务拆分解析结果: {'identified_services': [{'name': '用户服务', 'description': '处理用户相关功能，与确权开立服务松耦合', 'git_repository': '', 'responsibilities': ['用户管理'], 'api_endpoints': [], 'database_tables': [], 'external_service_calls': [], 'config_requirements': []}, {'name': '确权开立服务', 'description': '处理确权开立相关功能，包含组织单元管理和额度管理', 'git_repository': '', 'responsibilities': ['组织单元管理', '额度管理'], 'api_endpoints': [{'method': 'GET', 'path': '/api/organization-units/query', 'description': '组织单元额度查询', 'request_params': '企业ID', 'response_fields': '组织单元信息,额度信息', 'special_requirements': ''}, {'method': 'POST', 'path': '/api/data-push', 'description': '数据推送接口', 'request_params': '推送数据', 'response_fields': '推送结果', 'special_requirements': '支持重推场景'}], 'database_tables': [{'table_name': 'organization_units', 'create_sql': '', 'description': '存储组织单元信息'}], 'external_service_calls': [], 'config_requirements': ['MySQL', 'Spring Cloud组件']}], 'service_call_relationships': {'dependencies': []}, 'summary': '基于设计文档的服务分析概要，确认涉及2个服务（用户服务和确权开立服务），2个新增接口（组织单元额度查询和数据推送接口），1个数据库表（organization_units）'}
2025-07-10 10:53:07 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 🎯 识别的服务列表: [{'name': '用户服务', 'description': '处理用户相关功能，与确权开立服务松耦合', 'git_repository': '', 'responsibilities': ['用户管理'], 'api_endpoints': [], 'database_tables': [], 'external_service_calls': [], 'config_requirements': []}, {'name': '确权开立服务', 'description': '处理确权开立相关功能，包含组织单元管理和额度管理', 'git_repository': '', 'responsibilities': ['组织单元管理', '额度管理'], 'api_endpoints': [{'method': 'GET', 'path': '/api/organization-units/query', 'description': '组织单元额度查询', 'request_params': '企业ID', 'response_fields': '组织单元信息,额度信息', 'special_requirements': ''}, {'method': 'POST', 'path': '/api/data-push', 'description': '数据推送接口', 'request_params': '推送数据', 'response_fields': '推送结果', 'special_requirements': '支持重推场景'}], 'database_tables': [{'table_name': 'organization_units', 'create_sql': '', 'description': '存储组织单元信息'}], 'external_service_calls': [], 'config_requirements': ['MySQL', 'Spring Cloud组件']}]
2025-07-10 10:53:07 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 🔢 识别的服务数量: 2
2025-07-10 10:53:07 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 服务拆分概要: 基于设计文档的服务分析概要，确认涉及2个服务（用户服务和确权开立服务），2个新增接口（组织单元额度查询和数据推送接口），1个数据库表（organization_units）
2025-07-10 10:53:07 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 🌐 步骤4：开始依赖分析...
2025-07-10 10:53:07 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 依赖分析提示词长度: 2410
2025-07-10 10:53:29 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-10 10:53:29 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 依赖分析LLM响应长度: 1702
2025-07-10 10:53:29 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📊 依赖分析解析结果: {'service_dependencies': {'用户服务': {'database_dependencies': [{'database_type': 'MySQL', 'config_info': 'organization_units表', 'tables_needed': ['organization_units'], 'description': '存储组织单元信息'}], 'api_call_dependencies': [], 'provides_apis': [{'endpoint': '/organization-units/credit', 'used_by': ['确权开立服务']}]}, '确权开立服务': {'database_dependencies': [], 'api_call_dependencies': [{'target_service': '用户服务', 'target_endpoint': '/organization-units/credit', 'call_purpose': '查询组织单元额度', 'dependency_type': '强依赖'}], 'provides_apis': [{'endpoint': '/data-push', 'used_by': []}]}}, 'development_order': [{'phase': 1, 'services': ['用户服务'], 'tasks': ['创建organization_units表', '实现组织单元额度查询接口(/organization-units/credit)'], 'reason': '确权开立服务强依赖用户服务的组织单元额度查询接口'}, {'phase': 2, 'services': ['确权开立服务'], 'tasks': ['实现数据推送接口(/data-push)', '调用用户服务的组织单元额度查询接口'], 'reason': '依赖用户服务的接口'}], 'critical_path': ['用户服务(数据库表创建)', '用户服务(组织单元额度查询接口实现)', '确权开立服务(数据推送接口实现)'], 'parallel_development': [{'phase': '阶段1', 'parallel_services': ['用户服务'], 'reason': '这是基础服务，必须单独先开发'}, {'phase': '阶段2', 'parallel_services': ['确权开立服务'], 'reason': '依赖用户服务完成后才能开发'}], 'summary': '分析了2个服务的依赖关系，建议分2个阶段开发，关键路径为用户服务数据库表创建→用户服务接口实现→确权开立服务接口实现'}
2025-07-10 10:53:29 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 依赖分析概要: 分析了2个服务的依赖关系，建议分2个阶段开发，关键路径为用户服务数据库表创建→用户服务接口实现→确权开立服务接口实现
2025-07-10 10:53:29 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📅 步骤5：开始制定执行计划...
2025-07-10 10:53:29 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 任务调度提示词长度: 6318
2025-07-10 10:54:39 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-10 10:54:39 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 任务调度LLM响应长度: 6779
2025-07-10 10:54:39 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📊 执行计划解析结果: {'execution_phases': [{'phase_name': '基础设施搭建阶段', 'phase_order': 1, 'description': '搭建项目基础设施，包括数据库、配置服务、监控等基础组件', 'estimated_duration': '2天', 'services_involved': ['用户服务', '确权开立服务'], 'task_categories': [{'category': 'database', 'description': '数据库基础设施', 'tasks': [{'task_name': '创建organization_units表', 'service': '用户服务', 'deliverable': 'organization_units表DDL脚本', 'estimated_hours': 4, 'prerequisites': ['数据库实例准备'], 'assignee_role': '后端开发'}, {'task_name': '设计表索引和约束', 'service': '用户服务', 'deliverable': '索引创建SQL脚本', 'estimated_hours': 2, 'prerequisites': ['表结构设计'], 'assignee_role': '后端开发'}]}, {'category': 'config', 'description': '配置管理', 'tasks': [{'task_name': '搭建Spring Cloud Config', 'service': '基础设施', 'deliverable': '配置中心服务', 'estimated_hours': 4, 'prerequisites': [], 'assignee_role': '运维工程师'}, {'task_name': '配置服务注册中心', 'service': '基础设施', 'deliverable': 'Nacos/Eureka服务', 'estimated_hours': 3, 'prerequisites': [], 'assignee_role': '运维工程师'}]}], 'success_criteria': ['organization_units表可正常访问', '配置中心可正常获取配置', '服务注册中心运行正常'], 'parallel_execution': True}, {'phase_name': '核心服务开发阶段', 'phase_order': 2, 'description': '按依赖顺序开发用户服务和确权开立服务', 'estimated_duration': '6天', 'services_involved': ['用户服务', '确权开立服务'], 'task_categories': [{'category': 'api', 'description': 'API接口开发', 'tasks': [{'task_name': '实现组织单元额度查询接口', 'service': '用户服务', 'deliverable': 'GET /api/organization-units/{id}/quota', 'estimated_hours': 8, 'prerequisites': ['organization_units表就绪'], 'assignee_role': '后端开发'}, {'task_name': '实现数据推送接口', 'service': '确权开立服务', 'deliverable': 'POST /api/data/push', 'estimated_hours': 8, 'prerequisites': ['用户服务接口开发完成'], 'assignee_role': '后端开发'}]}, {'category': 'service', 'description': '业务逻辑实现', 'tasks': [{'task_name': '组织单元额度计算逻辑', 'service': '用户服务', 'deliverable': 'QuotaCalculationService实现类', 'estimated_hours': 6, 'prerequisites': ['表结构就绪'], 'assignee_role': '后端开发'}, {'task_name': '数据推送校验逻辑', 'service': '确权开立服务', 'deliverable': 'DataValidationService实现类', 'estimated_hours': 6, 'prerequisites': ['用户服务接口开发完成'], 'assignee_role': '后端开发'}]}], 'success_criteria': ['接口Swagger文档完整', '单元测试覆盖率≥80%', '核心业务逻辑验证通过'], 'parallel_execution': False}, {'phase_name': '接口对接和联调阶段', 'phase_order': 3, 'description': '服务间API集成和端到端测试', 'estimated_duration': '3天', 'services_involved': ['用户服务', '确权开立服务'], 'task_categories': [{'category': 'integration', 'description': '服务集成', 'tasks': [{'task_name': '配置Feign客户端', 'service': '确权开立服务', 'deliverable': 'UserServiceClient配置', 'estimated_hours': 4, 'prerequisites': ['核心服务开发完成'], 'assignee_role': '后端开发'}]}, {'category': 'test', 'description': '集成测试', 'tasks': [{'task_name': '额度查询→数据推送全链路测试', 'service': '集成测试', 'deliverable': '端到端测试用例', 'estimated_hours': 8, 'prerequisites': ['Feign配置完成'], 'assignee_role': '测试工程师'}]}], 'success_criteria': ['接口调用成功率100%', '全链路时延<500ms', '异常场景处理验证通过'], 'parallel_execution': False}, {'phase_name': '系统测试和部署阶段', 'phase_order': 4, 'description': '最终验证和生产环境部署', 'estimated_duration': '2天', 'services_involved': ['用户服务', '确权开立服务'], 'task_categories': [{'category': 'deployment', 'description': '部署配置', 'tasks': [{'task_name': '构建Docker镜像', 'service': '基础设施', 'deliverable': '服务镜像文件', 'estimated_hours': 3, 'prerequisites': ['集成测试通过'], 'assignee_role': '运维工程师'}]}, {'category': 'monitoring', 'description': '监控配置', 'tasks': [{'task_name': '配置Prometheus监控', 'service': '基础设施', 'deliverable': 'Grafana监控面板', 'estimated_hours': 4, 'prerequisites': ['服务部署完成'], 'assignee_role': '运维工程师'}]}], 'success_criteria': ['生产环境运行稳定', '关键指标监控正常', '回滚方案验证通过'], 'parallel_execution': False}], 'parallel_groups': [{'group_name': '基础设施并行组', 'group_order': 1, 'services': ['数据库', '配置中心'], 'estimated_duration': '2天', 'description': '数据库和配置服务可并行搭建', 'coordination_points': ['网络策略配置']}], 'execution_order': ['organization_units表创建', '配置中心搭建', '用户服务开发(关键路径)', '确权开立服务开发', 'Feign客户端集成', '全链路测试', '生产部署'], 'resource_allocation': {'backend_developers': 2, 'test_engineers': 1, 'devops_engineers': 1, 'total_estimated_time': '13天', 'critical_path': '用户服务开发→确权开立服务开发→集成测试'}, 'risk_management': {'critical_dependencies': [{'task': 'organization_units表设计', 'risk': '字段变更影响接口定义', 'mitigation': '提前冻结数据模型'}, {'task': 'Feign客户端集成', 'risk': '服务间通信异常', 'mitigation': '配置熔断降级策略'}], 'buffer_time': '15%', 'contingency_plans': ['核心开发人员AB角', '预发环境全量备份']}, 'summary': '项目分4个阶段实施，关键路径为13天，重点保障用户服务开发进度'}
2025-07-10 10:54:39 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 💾 步骤6：开始生成SQLite任务...
2025-07-10 10:54:39 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📄 执行计划较长(7223字符)，使用滑动窗口处理
2025-07-10 10:54:39 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📄 文档分割完成：7223 字符 -> 5 个窗口
2025-07-10 10:54:39 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 处理计划窗口 1/5
2025-07-10 10:56:52 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-10 10:56:52 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 窗口 1 任务生成完成
2025-07-10 10:56:52 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 处理计划窗口 2/5
2025-07-10 10:59:04 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-10 10:59:04 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 窗口 2 任务生成完成
2025-07-10 10:59:04 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 处理计划窗口 3/5
2025-07-10 11:01:35 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-10 11:01:35 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 窗口 3 任务生成完成
2025-07-10 11:01:35 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 处理计划窗口 4/5
2025-07-10 11:03:49 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-10 11:03:49 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 窗口 4 任务生成完成
2025-07-10 11:03:49 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 处理计划窗口 5/5
2025-07-10 11:05:58 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-10 11:05:58 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 窗口 5 任务生成完成
2025-07-10 11:05:58 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 🔄 合并 5 个任务生成分析结果...
2025-07-10 11:05:58 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📊 任务生成解析结果: {'tasks': [{'task_id': 'task_001', 'service_name': '系统', 'task_type': 'git_extraction', 'priority': 1, 'dependencies': [], 'estimated_duration': '5分钟', 'description': '从设计文档提取GitLab仓库地址', 'implementation_details': '解析设计文档，提取用户服务 http://gitlab.local/ls/zqyl-user-center-service.git 和确权开立服务 http://gitlab.local/ls/crcl-open.git 仓库地址', 'deliverables': ['GitLab仓库地址清单', '仓库访问验证报告'], 'completion_criteria': '成功提取并验证两个GitLab仓库地址可访问性', 'parameters': {'repositories': ['zqyl-user-center-service', 'crcl-open']}}, {'task_id': 'task_002', 'service_name': '用户服务', 'task_type': 'git_clone', 'priority': 2, 'dependencies': ['task_001'], 'estimated_duration': '10分钟', 'description': '下载用户服务代码到D:\\gitlab\\create_project/链数中建一局_1752115931/zqyl-user-center-service', 'implementation_details': '使用git clone命令下载用户服务代码到指定目录，确保项目结构完整可编译', 'deliverables': ['用户服务源码目录'], 'completion_criteria': '代码下载完成，项目目录存在且包含pom.xml文件', 'parameters': {'git_url': 'http://gitlab.local/ls/zqyl-user-center-service.git', 'local_path': 'D:\\gitlab\\create_project/链数中建一局_1752115931/zqyl-user-center-service'}}, {'task_id': 'task_003', 'service_name': '确权开立服务', 'task_type': 'git_clone', 'priority': 2, 'dependencies': ['task_001'], 'estimated_duration': '10分钟', 'description': '下载确权开立服务代码到D:\\gitlab\\create_project/链数中建一局_1752115931/crcl-open', 'implementation_details': '使用git clone命令下载确权开立服务代码到指定目录，确保项目结构完整可编译', 'deliverables': ['确权开立服务源码目录'], 'completion_criteria': '代码下载完成，项目目录存在且包含pom.xml文件', 'parameters': {'git_url': 'http://gitlab.local/ls/crcl-open.git', 'local_path': 'D:\\gitlab\\create_project/链数中建一局_1752115931/crcl-open'}}, {'task_id': 'task_004', 'service_name': '用户服务', 'task_type': 'code_analysis', 'priority': 3, 'dependencies': ['task_002'], 'estimated_duration': '20分钟', 'description': '分析用户服务代码结构，确定MultiorgManageController添加位置', 'implementation_details': '分析项目package结构和controller层，找到或创建MultiorgManageController类的最佳位置', 'deliverables': ['代码结构从Controller层开始到数据获取的完整路径'], 'completion_criteria': '确定MultiorgManageController的包路径和文件位置，明确依赖的Service层结构', 'parameters': {'project_path': 'D:\\gitlab\\create_project/链数中建一局_1752115931/zqyl-user-center-service', 'target_controller': 'MultiorgManageController', 'target_api': '/general/multiorgManage/queryCompanyUnitList'}}, {'task_id': 'task_005', 'service_name': '确权开立服务', 'task_type': 'code_analysis', 'priority': 3, 'dependencies': ['task_003'], 'estimated_duration': '20分钟', 'description': '分析确权开立服务代码结构，确定LsLimitController添加位置', 'implementation_details': '分析项目package结构和controller层，找到或创建LsLimitController类的最佳位置，支持两个接口开发', 'deliverables': ['代码结构从Controller层开始到数据获取的完整路径', 'Feign客户端配置方案'], 'completion_criteria': '确定LsLimitController的包路径和文件位置，明确服务间调用的Feign配置', 'parameters': {'project_path': 'D:\\gitlab\\create_project/链数中建一局_1752115931/crcl-open', 'target_controller': 'LsLimitController', 'target_apis': ['/crcl-open-api/lsLimit/listUnitLimitByCompanyId', '/crcl-open-api/lsLimit/listUnitLimitByCompanyIdExport']}}, {'task_id': 'task_006', 'service_name': '用户服务', 'task_type': 'config', 'priority': 4, 'dependencies': ['task_004'], 'estimated_duration': '15分钟', 'description': '配置用户服务数据库连接：jdbc:mysql://localhost:6446/dbwebappdb', 'implementation_details': '修改application.yml文件，配置数据库连接信息包括URL、用户名密码和连接池设置', 'deliverables': ['数据库配置文件', '连接测试报告'], 'completion_criteria': 'application.yml文件已更新，数据库连接配置正确且可连通', 'parameters': {'config_file': 'D:\\gitlab\\create_project/链数中建一局_1752115931/zqyl-user-center-service/src/main/resources/application.yml', 'database_url': 'jdbc:mysql://localhost:6446/dbwebappdb?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC&characterEncoding=utf8&useUnicode=true', 'username': 'dbwebapp', 'password': 'dbwebapp'}}, {'task_id': 'task_007', 'service_name': '用户服务', 'task_type': 'database', 'priority': 5, 'dependencies': ['task_006'], 'estimated_duration': '15分钟', 'description': '创建t_cust_multiorg_unit表，包含id,company_id,unit_code,unit_name等字段', 'implementation_details': '编写建表SQL脚本，定义主键、索引和字段约束，创建对应的Entity和Mapper文件', 'deliverables': ['建表SQL脚本', 'Entity实体类', 'Mapper接口文件'], 'completion_criteria': '表结构创建成功，Entity和Mapper文件可正常编译，支持基本CRUD操作', 'parameters': {'table_name': 't_cust_multiorg_unit', 'sql_location': 'src/main/resources/sql/t_cust_multiorg_unit.sql'}}, {'task_id': 'task_008', 'service_name': '用户服务', 'task_type': 'api', 'priority': 6, 'dependencies': ['task_007'], 'estimated_duration': '60分钟', 'description': '实现GET /general/multiorgManage/queryCompanyUnitList接口', 'implementation_details': '在MultiorgManageController中实现查询接口，支持条件查询和分页，返回规定的字段格式', 'deliverables': ['MultiorgManageController类', 'Service业务逻辑层', '接口文档'], 'completion_criteria': '接口可正常访问，返回数据格式符合规范，支持条件查询和分页功能', 'parameters': {'project_path': 'D:\\gitlab\\create_project/链数中建一局_1752115931/zqyl-user-center-service', 'api_path': '/general/multiorgManage/queryCompanyUnitList', 'http_method': 'GET', 'content_type': 'application/json', 'request_params': {'unitCode': '组织单元编码(可选)', 'openStatus': '开通状态(可选)', 'unitList': '组织单元列表(可选)'}, 'response_params': {'unitId': '组织单元ID', 'unitTypeDicType': '组织单元类型字典类型', 'unitTypeId': '组织单元类型ID', 'openStatus': '开通状态', 'unitCode': '组织单元编码', 'unitName': '组织单元名称'}, 'business_logic': '根据查询条件查询组织单元信息，支持按编码、状态等条件筛选', 'data_source': 't_cust_multiorg_unit表', 'validation_rules': {'unitCode': '长度不超过50字符', 'openStatus': '取值范围0-1'}}}, {'task_id': 'task_009', 'service_name': '确权开立服务', 'task_type': 'api', 'priority': 7, 'dependencies': ['task_008'], 'estimated_duration': '90分钟', 'description': '实现GET /crcl-open-api/lsLimit/listUnitLimitByCompanyId接口，调用用户服务', 'implementation_details': '在LsLimitController中实现额度查询接口，配置Feign客户端调用用户服务接口获取组织单元信息', 'deliverables': ['LsLimitController类', 'Feign客户端配置', '业务逻辑层'], 'completion_criteria': '接口可正常访问，能成功调用用户服务，返回额度数据格式正确', 'parameters': {'project_path': 'D:\\gitlab\\create_project/链数中建一局_1752115931/crcl-open', 'api_path': '/crcl-open-api/lsLimit/listUnitLimitByCompanyId', 'http_method': 'GET', 'content_type': 'application/json', 'request_params': {'gwCompanyId': '公司ID(必填)', 'unitName': '组织单元名称(可选)', 'limitSource': '额度来源(可选)', 'bizType': '业务类型(必填)', 'page': '页码(可选,默认1)', 'pageRow': '每页行数(可选,默认10)'}, 'response_params': {'totalLimitAmt': '总额度金额', 'usedLimitAmt': '已用额度金额', 'usableLimitAmt': '可用额度金额', 'unitLimitListDetail': '单元额度详情列表'}, 'business_logic': '根据公司ID和筛选条件查询组织单元额度信息，调用用户服务获取组织单元基础信息', 'data_source': '本地额度表 + 用户服务接口', 'external_call': '/general/multiorgManage/queryCompanyUnitList', 'validation_rules': {'gwCompanyId': '必填，数值类型', 'bizType': '必填，业务类型枚举值', 'page': '正整数，默认1', 'pageRow': '正整数，范围1-100'}}}, {'task_id': 'task_010', 'service_name': '确权开立服务', 'task_type': 'api', 'priority': 8, 'dependencies': ['task_009'], 'estimated_duration': '45分钟', 'description': '实现GET /crcl-open-api/lsLimit/listUnitLimitByCompanyIdExport导出接口', 'implementation_details': '在LsLimitController中实现Excel导出接口，复用listUnitLimitByCompanyId的数据逻辑', 'deliverables': ['导出接口方法', 'Excel工具类', '导出模板文件'], 'completion_criteria': '接口可正常访问，能成功导出Excel文件，表头和数据格式正确', 'parameters': {'project_path': 'D:\\gitlab\\create_project/链数中建一局_1752115931/crcl-open', 'api_path': '/crcl-open-api/lsLimit/listUnitLimitByCompanyIdExport', 'http_method': 'GET', 'content_type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'request_params': {'gwCompanyId': '公司ID(必填)', 'unitName': '组织单元名称(可选)', 'limitSource': '额度来源(可选)', 'bizType': '业务类型(必填)'}, 'response_params': {'file': 'Excel文件流', 'filename': '导出文件名', 'contentType': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'}, 'business_logic': '复用listUnitLimitByCompanyId接口的查询逻辑，将结果导出为Excel格式', 'data_source': '调用listUnitLimitByCompanyId接口获取数据', 'export_format': 'xlsx', 'export_headers': ['组织单元名称', '额度名称', '额度类型', '已分配额度', '已用额度', '可用额度'], 'validation_rules': {'gwCompanyId': '必填，数值类型', 'bizType': '必填，业务类型枚举值'}}}, {'task_id': 'task_011', 'service_name': '系统', 'task_type': 'integration_test', 'priority': 9, 'dependencies': ['task_008', 'task_009', 'task_010'], 'estimated_duration': '30分钟', 'description': '测试确权开立服务调用用户服务接口的完整流程', 'implementation_details': '编写集成测试用例，验证服务间调用正确性和数据完整性', 'deliverables': ['集成测试用例', '测试数据脚本', '测试报告'], 'completion_criteria': '所有测试用例通过，接口调用链路正常，数据返回格式正确', 'parameters': {'test_scenarios': ['组织单元额度查询测试'], 'test_data': {'gwCompanyId': 1, 'unitName': '测试单元', 'bizType': 80}}}, {'task_id': 'task_012', 'service_name': '系统', 'task_type': 'deployment', 'priority': 10, 'dependencies': ['task_011'], 'estimated_duration': '20分钟', 'description': '提交代码到GitLab仓库，commit message: feat: 新增组织单元额度管理功能', 'implementation_details': '执行git add、git commit和git push命令，提交所有新增和修改的代码文件', 'deliverables': ['Git提交记录', '代码合并报告', '部署文档'], 'completion_criteria': '代码成功提交到GitLab仓库，commit信息清晰，无冲突', 'parameters': {'repositories': [{'path': 'D:\\gitlab\\create_project/链数中建一局_1752115931/zqyl-user-center-service', 'changes': '新增组织单元查询接口'}, {'path': 'D:\\gitlab\\create_project/链数中建一局_1752115931/crcl-open', 'changes': '新增组织单元额度列表和导出接口'}]}}], 'total_tasks': 12, 'summary': '生成12个任务：GitLab代码下载->结构分析->环境配置->接口开发->测试部署。严格使用设计文档中的真实接口路径和参数，确保先开发用户服务接口，再开发依赖它的确权开立服务接口。 生成12个任务：GitLab代码下载->结构分析->环境配置->接口开发->测试部署。严格使用设计文档中的真实接口路径和参数，确保先开发用户服务接口，再开发依赖它的确权开立服务接口。 生成12个任务：GitLab代码'}
2025-07-10 11:05:58 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 🎯 生成的任务列表: [{'task_id': 'task_001', 'service_name': '系统', 'task_type': 'git_extraction', 'priority': 1, 'dependencies': [], 'estimated_duration': '5分钟', 'description': '从设计文档提取GitLab仓库地址', 'implementation_details': '解析设计文档，提取用户服务 http://gitlab.local/ls/zqyl-user-center-service.git 和确权开立服务 http://gitlab.local/ls/crcl-open.git 仓库地址', 'deliverables': ['GitLab仓库地址清单', '仓库访问验证报告'], 'completion_criteria': '成功提取并验证两个GitLab仓库地址可访问性', 'parameters': {'repositories': ['zqyl-user-center-service', 'crcl-open']}}, {'task_id': 'task_002', 'service_name': '用户服务', 'task_type': 'git_clone', 'priority': 2, 'dependencies': ['task_001'], 'estimated_duration': '10分钟', 'description': '下载用户服务代码到D:\\gitlab\\create_project/链数中建一局_1752115931/zqyl-user-center-service', 'implementation_details': '使用git clone命令下载用户服务代码到指定目录，确保项目结构完整可编译', 'deliverables': ['用户服务源码目录'], 'completion_criteria': '代码下载完成，项目目录存在且包含pom.xml文件', 'parameters': {'git_url': 'http://gitlab.local/ls/zqyl-user-center-service.git', 'local_path': 'D:\\gitlab\\create_project/链数中建一局_1752115931/zqyl-user-center-service'}}, {'task_id': 'task_003', 'service_name': '确权开立服务', 'task_type': 'git_clone', 'priority': 2, 'dependencies': ['task_001'], 'estimated_duration': '10分钟', 'description': '下载确权开立服务代码到D:\\gitlab\\create_project/链数中建一局_1752115931/crcl-open', 'implementation_details': '使用git clone命令下载确权开立服务代码到指定目录，确保项目结构完整可编译', 'deliverables': ['确权开立服务源码目录'], 'completion_criteria': '代码下载完成，项目目录存在且包含pom.xml文件', 'parameters': {'git_url': 'http://gitlab.local/ls/crcl-open.git', 'local_path': 'D:\\gitlab\\create_project/链数中建一局_1752115931/crcl-open'}}, {'task_id': 'task_004', 'service_name': '用户服务', 'task_type': 'code_analysis', 'priority': 3, 'dependencies': ['task_002'], 'estimated_duration': '20分钟', 'description': '分析用户服务代码结构，确定MultiorgManageController添加位置', 'implementation_details': '分析项目package结构和controller层，找到或创建MultiorgManageController类的最佳位置', 'deliverables': ['代码结构从Controller层开始到数据获取的完整路径'], 'completion_criteria': '确定MultiorgManageController的包路径和文件位置，明确依赖的Service层结构', 'parameters': {'project_path': 'D:\\gitlab\\create_project/链数中建一局_1752115931/zqyl-user-center-service', 'target_controller': 'MultiorgManageController', 'target_api': '/general/multiorgManage/queryCompanyUnitList'}}, {'task_id': 'task_005', 'service_name': '确权开立服务', 'task_type': 'code_analysis', 'priority': 3, 'dependencies': ['task_003'], 'estimated_duration': '20分钟', 'description': '分析确权开立服务代码结构，确定LsLimitController添加位置', 'implementation_details': '分析项目package结构和controller层，找到或创建LsLimitController类的最佳位置，支持两个接口开发', 'deliverables': ['代码结构从Controller层开始到数据获取的完整路径', 'Feign客户端配置方案'], 'completion_criteria': '确定LsLimitController的包路径和文件位置，明确服务间调用的Feign配置', 'parameters': {'project_path': 'D:\\gitlab\\create_project/链数中建一局_1752115931/crcl-open', 'target_controller': 'LsLimitController', 'target_apis': ['/crcl-open-api/lsLimit/listUnitLimitByCompanyId', '/crcl-open-api/lsLimit/listUnitLimitByCompanyIdExport']}}, {'task_id': 'task_006', 'service_name': '用户服务', 'task_type': 'config', 'priority': 4, 'dependencies': ['task_004'], 'estimated_duration': '15分钟', 'description': '配置用户服务数据库连接：jdbc:mysql://localhost:6446/dbwebappdb', 'implementation_details': '修改application.yml文件，配置数据库连接信息包括URL、用户名密码和连接池设置', 'deliverables': ['数据库配置文件', '连接测试报告'], 'completion_criteria': 'application.yml文件已更新，数据库连接配置正确且可连通', 'parameters': {'config_file': 'D:\\gitlab\\create_project/链数中建一局_1752115931/zqyl-user-center-service/src/main/resources/application.yml', 'database_url': 'jdbc:mysql://localhost:6446/dbwebappdb?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC&characterEncoding=utf8&useUnicode=true', 'username': 'dbwebapp', 'password': 'dbwebapp'}}, {'task_id': 'task_007', 'service_name': '用户服务', 'task_type': 'database', 'priority': 5, 'dependencies': ['task_006'], 'estimated_duration': '15分钟', 'description': '创建t_cust_multiorg_unit表，包含id,company_id,unit_code,unit_name等字段', 'implementation_details': '编写建表SQL脚本，定义主键、索引和字段约束，创建对应的Entity和Mapper文件', 'deliverables': ['建表SQL脚本', 'Entity实体类', 'Mapper接口文件'], 'completion_criteria': '表结构创建成功，Entity和Mapper文件可正常编译，支持基本CRUD操作', 'parameters': {'table_name': 't_cust_multiorg_unit', 'sql_location': 'src/main/resources/sql/t_cust_multiorg_unit.sql'}}, {'task_id': 'task_008', 'service_name': '用户服务', 'task_type': 'api', 'priority': 6, 'dependencies': ['task_007'], 'estimated_duration': '60分钟', 'description': '实现GET /general/multiorgManage/queryCompanyUnitList接口', 'implementation_details': '在MultiorgManageController中实现查询接口，支持条件查询和分页，返回规定的字段格式', 'deliverables': ['MultiorgManageController类', 'Service业务逻辑层', '接口文档'], 'completion_criteria': '接口可正常访问，返回数据格式符合规范，支持条件查询和分页功能', 'parameters': {'project_path': 'D:\\gitlab\\create_project/链数中建一局_1752115931/zqyl-user-center-service', 'api_path': '/general/multiorgManage/queryCompanyUnitList', 'http_method': 'GET', 'content_type': 'application/json', 'request_params': {'unitCode': '组织单元编码(可选)', 'openStatus': '开通状态(可选)', 'unitList': '组织单元列表(可选)'}, 'response_params': {'unitId': '组织单元ID', 'unitTypeDicType': '组织单元类型字典类型', 'unitTypeId': '组织单元类型ID', 'openStatus': '开通状态', 'unitCode': '组织单元编码', 'unitName': '组织单元名称'}, 'business_logic': '根据查询条件查询组织单元信息，支持按编码、状态等条件筛选', 'data_source': 't_cust_multiorg_unit表', 'validation_rules': {'unitCode': '长度不超过50字符', 'openStatus': '取值范围0-1'}}}, {'task_id': 'task_009', 'service_name': '确权开立服务', 'task_type': 'api', 'priority': 7, 'dependencies': ['task_008'], 'estimated_duration': '90分钟', 'description': '实现GET /crcl-open-api/lsLimit/listUnitLimitByCompanyId接口，调用用户服务', 'implementation_details': '在LsLimitController中实现额度查询接口，配置Feign客户端调用用户服务接口获取组织单元信息', 'deliverables': ['LsLimitController类', 'Feign客户端配置', '业务逻辑层'], 'completion_criteria': '接口可正常访问，能成功调用用户服务，返回额度数据格式正确', 'parameters': {'project_path': 'D:\\gitlab\\create_project/链数中建一局_1752115931/crcl-open', 'api_path': '/crcl-open-api/lsLimit/listUnitLimitByCompanyId', 'http_method': 'GET', 'content_type': 'application/json', 'request_params': {'gwCompanyId': '公司ID(必填)', 'unitName': '组织单元名称(可选)', 'limitSource': '额度来源(可选)', 'bizType': '业务类型(必填)', 'page': '页码(可选,默认1)', 'pageRow': '每页行数(可选,默认10)'}, 'response_params': {'totalLimitAmt': '总额度金额', 'usedLimitAmt': '已用额度金额', 'usableLimitAmt': '可用额度金额', 'unitLimitListDetail': '单元额度详情列表'}, 'business_logic': '根据公司ID和筛选条件查询组织单元额度信息，调用用户服务获取组织单元基础信息', 'data_source': '本地额度表 + 用户服务接口', 'external_call': '/general/multiorgManage/queryCompanyUnitList', 'validation_rules': {'gwCompanyId': '必填，数值类型', 'bizType': '必填，业务类型枚举值', 'page': '正整数，默认1', 'pageRow': '正整数，范围1-100'}}}, {'task_id': 'task_010', 'service_name': '确权开立服务', 'task_type': 'api', 'priority': 8, 'dependencies': ['task_009'], 'estimated_duration': '45分钟', 'description': '实现GET /crcl-open-api/lsLimit/listUnitLimitByCompanyIdExport导出接口', 'implementation_details': '在LsLimitController中实现Excel导出接口，复用listUnitLimitByCompanyId的数据逻辑', 'deliverables': ['导出接口方法', 'Excel工具类', '导出模板文件'], 'completion_criteria': '接口可正常访问，能成功导出Excel文件，表头和数据格式正确', 'parameters': {'project_path': 'D:\\gitlab\\create_project/链数中建一局_1752115931/crcl-open', 'api_path': '/crcl-open-api/lsLimit/listUnitLimitByCompanyIdExport', 'http_method': 'GET', 'content_type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'request_params': {'gwCompanyId': '公司ID(必填)', 'unitName': '组织单元名称(可选)', 'limitSource': '额度来源(可选)', 'bizType': '业务类型(必填)'}, 'response_params': {'file': 'Excel文件流', 'filename': '导出文件名', 'contentType': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'}, 'business_logic': '复用listUnitLimitByCompanyId接口的查询逻辑，将结果导出为Excel格式', 'data_source': '调用listUnitLimitByCompanyId接口获取数据', 'export_format': 'xlsx', 'export_headers': ['组织单元名称', '额度名称', '额度类型', '已分配额度', '已用额度', '可用额度'], 'validation_rules': {'gwCompanyId': '必填，数值类型', 'bizType': '必填，业务类型枚举值'}}}, {'task_id': 'task_011', 'service_name': '系统', 'task_type': 'integration_test', 'priority': 9, 'dependencies': ['task_008', 'task_009', 'task_010'], 'estimated_duration': '30分钟', 'description': '测试确权开立服务调用用户服务接口的完整流程', 'implementation_details': '编写集成测试用例，验证服务间调用正确性和数据完整性', 'deliverables': ['集成测试用例', '测试数据脚本', '测试报告'], 'completion_criteria': '所有测试用例通过，接口调用链路正常，数据返回格式正确', 'parameters': {'test_scenarios': ['组织单元额度查询测试'], 'test_data': {'gwCompanyId': 1, 'unitName': '测试单元', 'bizType': 80}}}, {'task_id': 'task_012', 'service_name': '系统', 'task_type': 'deployment', 'priority': 10, 'dependencies': ['task_011'], 'estimated_duration': '20分钟', 'description': '提交代码到GitLab仓库，commit message: feat: 新增组织单元额度管理功能', 'implementation_details': '执行git add、git commit和git push命令，提交所有新增和修改的代码文件', 'deliverables': ['Git提交记录', '代码合并报告', '部署文档'], 'completion_criteria': '代码成功提交到GitLab仓库，commit信息清晰，无冲突', 'parameters': {'repositories': [{'path': 'D:\\gitlab\\create_project/链数中建一局_1752115931/zqyl-user-center-service', 'changes': '新增组织单元查询接口'}, {'path': 'D:\\gitlab\\create_project/链数中建一局_1752115931/crcl-open', 'changes': '新增组织单元额度列表和导出接口'}]}}]
2025-07-10 11:05:58 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 🔢 生成的任务数量: 12
2025-07-10 11:05:58 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 已保存 12 个任务到数据库
2025-07-10 11:05:58 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 已生成并保存 12 个任务到数据库
2025-07-10 11:05:58 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📤 最终服务列表: ['用户服务', '确权开立服务']
2025-07-10 11:05:58 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📤 生成并行任务批次: [{'batch_id': 'batch_1', 'services': ['用户服务', '确权开立服务'], 'dependencies': []}]
2025-07-10 11:05:58 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📤 输出状态键: ['design_doc', 'project_name', 'identified_services', 'service_dependencies', 'task_execution_plan', 'parallel_tasks', 'git_repo_url', 'target_branch', 'project_paths', 'output_path', 'repo_initialized', 'generated_services', 'generated_apis', 'generated_sql', 'service_interconnections', 'unit_test_results', 'test_coverage', 'interface_compatibility', 'code_review_results', 'static_analysis_results', 'security_scan_results', 'commit_hashes', 'push_results', 'pr_urls', 'current_phase', 'completed_services', 'failed_services', 'retry_count', 'execution_errors', 'generated_tasks']
2025-07-10 11:05:58 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📤 输出 - 识别服务: ['用户服务', '确权开立服务']
2025-07-10 11:05:58 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📤 输出 - 当前阶段: intelligent_coding
2025-07-10 11:05:58 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 任务拆分完成，识别 2 个服务，生成 12 个任务
2025-07-10 11:05:58 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🚀 Git管理节点开始执行...
2025-07-10 11:05:58 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 11:05:58 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🎯 git_management_node 开始执行任务...
2025-07-10 11:05:58 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 📋 找到 1 个可执行任务
2025-07-10 11:05:58 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🚀 开始执行任务: task_001 (git_extraction)
2025-07-10 11:05:58 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_001 已被 git_management_node 领取
2025-07-10 11:05:58 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🔍 执行Git提取任务: task_001
2025-07-10 11:05:58 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 📄 提取源文本: 解析设计文档，提取用户服务 http://gitlab.local/ls/zqyl-user-center-service.git 和确权开立服务 http://gitlab.local/ls/crcl-open.git 仓库地址 从设计文档提取GitLab仓库地址...
2025-07-10 11:05:58 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🔍 开始从文本提取Git URL...
2025-07-10 11:05:58 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🔗 找到Git仓库: http://gitlab.local/ls/zqyl-user-center-service.git
2025-07-10 11:05:58 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🔗 找到Git仓库: http://gitlab.local/ls/crcl-open.git
2025-07-10 11:05:58 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 提取到 2 个Git仓库
2025-07-10 11:05:58 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_001 状态更新为 completed
2025-07-10 11:05:58 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 任务 task_001 执行成功
2025-07-10 11:05:58 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ Git管理任务执行完成，共处理 1 个任务
2025-07-10 11:05:58 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🚀 基于提取结果自动克隆 2 个仓库...
2025-07-10 11:05:58 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 📥 自动克隆仓库: http://gitlab.local/ls/zqyl-user-center-service.git -> D:\gitlab\create_project/链数中建一局_1752115931/zqyl-user-center-service
2025-07-10 11:05:58 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 📥 开始克隆仓库: http://gitlab.local/ls/zqyl-user-center-service.git -> D:\gitlab\create_project/链数中建一局_1752115931/zqyl-user-center-service
2025-07-10 11:06:00 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 已切换到分支: master
2025-07-10 11:06:00 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 仓库克隆成功: D:\gitlab\create_project/链数中建一局_1752115931/zqyl-user-center-service
2025-07-10 11:06:00 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 自动克隆成功: zqyl-user-center-service
2025-07-10 11:06:00 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 已标记任务 task_002 为完成状态
2025-07-10 11:06:00 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 📥 自动克隆仓库: http://gitlab.local/ls/crcl-open.git -> D:\gitlab\create_project/链数中建一局_1752115931/crcl-open
2025-07-10 11:06:00 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 📥 开始克隆仓库: http://gitlab.local/ls/crcl-open.git -> D:\gitlab\create_project/链数中建一局_1752115931/crcl-open
2025-07-10 11:06:02 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 已切换到分支: master
2025-07-10 11:06:02 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 仓库克隆成功: D:\gitlab\create_project/链数中建一局_1752115931/crcl-open
2025-07-10 11:06:02 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 自动克隆成功: crcl-open
2025-07-10 11:06:02 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 已标记任务 task_003 为完成状态
2025-07-10 11:06:02 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ Git管理节点完成 - 提取: 2 个仓库, 克隆: 2 个仓库, 仓库初始化状态: True
2025-07-10 11:06:02 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 11:06:02 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 11:06:02 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 11:06:02 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: none)
2025-07-10 11:06:02 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 11:06:02 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 11:06:02 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 11:06:02 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 第1轮找到 2 个可执行任务
2025-07-10 11:06:02 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 开始执行任务: task_004 (code_analysis)
2025-07-10 11:06:02 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_004 已被 intelligent_coding_node 领取
2025-07-10 11:06:02 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行代码分析任务: task_004
2025-07-10 11:06:02 - src.utils.java_code_analyzer - INFO - 🔍 开始分析企业级Java项目: D:\gitlab\create_project/链数中建一局_1752115931/zqyl-user-center-service
2025-07-10 11:06:02 - src.utils.java_code_analyzer - INFO - ✅ 企业级项目分析完成，共分析 29 个Java文件
2025-07-10 11:06:02 - src.utils.java_code_analyzer - INFO - 📄 企业级分析报告已导出: outputs\用户服务_java_analysis_20250710_110602.md
2025-07-10 11:06:02 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_004 状态更新为 completed
2025-07-10 11:06:02 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 任务 task_004 执行成功
2025-07-10 11:06:02 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 开始执行任务: task_005 (code_analysis)
2025-07-10 11:06:02 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_005 已被 intelligent_coding_node 领取
2025-07-10 11:06:02 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行代码分析任务: task_005
2025-07-10 11:06:02 - src.utils.java_code_analyzer - INFO - 🔍 开始分析企业级Java项目: D:\gitlab\create_project/链数中建一局_1752115931/crcl-open
2025-07-10 11:06:13 - src.utils.java_code_analyzer - INFO - ✅ 企业级项目分析完成，共分析 2262 个Java文件
2025-07-10 11:06:13 - src.utils.java_code_analyzer - INFO - 📄 企业级分析报告已导出: outputs\确权开立服务_java_analysis_20250710_110613.md
2025-07-10 11:06:14 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_005 状态更新为 completed
2025-07-10 11:06:14 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 任务 task_005 执行成功
2025-07-10 11:06:14 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 第1轮执行完成，处理了 2 个任务
2025-07-10 11:06:14 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第2轮任务检查...
2025-07-10 11:06:14 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 第2轮找到 1 个可执行任务
2025-07-10 11:06:14 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 开始执行任务: task_006 (config)
2025-07-10 11:06:14 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_006 已被 intelligent_coding_node 领取
2025-07-10 11:06:14 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ⚙️ 执行配置生成任务: task_006
2025-07-10 11:06:14 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_006 状态更新为 completed
2025-07-10 11:06:14 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 任务 task_006 执行成功
2025-07-10 11:06:14 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 第2轮执行完成，处理了 1 个任务
2025-07-10 11:06:14 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第3轮任务检查...
2025-07-10 11:06:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 第3轮找到 1 个可执行任务
2025-07-10 11:06:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 开始执行任务: task_007 (database)
2025-07-10 11:06:15 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_007 已被 intelligent_coding_node 领取
2025-07-10 11:06:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🗄️ 执行数据库设计任务: task_007
2025-07-10 11:06:15 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_007 状态更新为 completed
2025-07-10 11:06:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 任务 task_007 执行成功
2025-07-10 11:06:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 第3轮执行完成，处理了 1 个任务
2025-07-10 11:06:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第4轮任务检查...
2025-07-10 11:06:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 第4轮找到 1 个可执行任务
2025-07-10 11:06:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 开始执行任务: task_008 (api)
2025-07-10 11:06:15 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_008 已被 intelligent_coding_node 领取
2025-07-10 11:06:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🌐 执行API接口生成任务: task_008
2025-07-10 11:06:15 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_008 状态更新为 failed
2025-07-10 11:06:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - ERROR - ❌ 任务 task_008 执行失败: LLM客户端未初始化，无法执行代码生成
2025-07-10 11:06:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 第4轮执行完成，处理了 1 个任务
2025-07-10 11:06:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第5轮任务检查...
2025-07-10 11:06:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第5轮没有可执行的智能编码任务
2025-07-10 11:06:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 5 个任务，共5轮
2025-07-10 11:06:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 5 个任务
2025-07-10 11:06:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 11:06:15 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 11:06:15 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 11:06:15 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: none)
2025-07-10 11:06:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 11:06:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 11:06:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 11:06:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 11:06:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 11:06:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 11:06:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 11:06:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 11:06:15 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 11:06:15 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 11:06:15 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: none)
2025-07-10 11:06:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 11:06:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 11:06:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 11:06:16 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 11:06:16 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 11:06:16 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 11:06:16 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 11:06:16 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 11:06:16 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 11:06:16 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 11:06:16 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: none)
2025-07-10 11:06:16 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 11:06:16 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 11:06:16 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 11:06:16 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 11:06:16 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 11:06:16 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 11:06:16 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 11:06:16 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 11:06:16 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 11:06:16 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 11:06:16 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: none)
2025-07-10 11:06:16 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 11:06:16 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 11:06:16 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 11:06:17 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 11:06:17 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 11:06:17 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 11:06:17 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 11:06:17 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 11:06:17 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 11:06:17 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 11:06:17 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: none)
2025-07-10 11:06:17 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 11:06:17 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 11:06:17 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 11:06:17 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 11:06:17 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 11:06:17 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 11:06:17 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 11:06:17 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 11:06:17 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 11:06:17 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 11:06:17 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: none)
2025-07-10 11:06:17 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 11:06:17 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 11:06:17 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 11:06:17 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 11:06:17 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 11:06:17 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 11:06:17 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 11:06:17 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 11:06:17 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 11:06:17 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 11:06:17 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: none)
2025-07-10 11:06:17 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 11:06:17 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 11:06:17 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 11:06:17 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 11:06:17 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 11:06:17 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 11:06:17 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 11:06:17 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 11:06:17 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 11:06:17 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 11:06:17 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: none)
2025-07-10 11:06:17 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 11:06:17 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 11:06:17 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 11:06:18 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 11:06:18 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 11:06:18 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 11:06:18 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 11:06:18 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 11:06:18 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 11:06:18 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 11:06:18 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: none)
2025-07-10 11:06:18 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 11:06:18 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 11:06:18 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 11:06:18 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 11:06:18 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 11:06:18 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 11:06:18 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 11:06:18 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 11:06:18 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 11:06:18 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 11:06:18 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: none)
2025-07-10 11:06:18 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 11:06:18 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 11:06:18 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 11:06:18 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 11:06:18 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 11:06:18 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 11:06:18 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 11:06:18 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 11:06:18 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 11:06:18 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 11:06:18 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: none)
2025-07-10 11:06:18 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 11:06:18 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 11:06:18 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 11:06:19 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 11:06:19 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 11:06:19 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 11:06:19 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 11:06:19 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 11:06:19 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 11:06:19 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 11:06:19 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: none)
2025-07-10 11:06:19 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 11:06:19 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 11:06:19 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 11:06:19 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 11:06:19 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 11:06:19 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 11:06:19 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 11:06:19 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 11:06:19 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 11:06:19 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 11:06:19 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: none)
2025-07-10 11:06:19 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 11:06:19 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 11:06:19 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 11:06:19 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 11:06:19 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 11:06:19 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 11:06:19 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 11:06:19 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 11:06:19 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 11:06:19 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 11:06:19 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: none)
2025-07-10 11:06:19 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 11:06:19 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 11:06:19 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 11:06:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 11:06:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 11:06:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 11:06:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 11:06:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 11:06:20 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 11:06:20 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 11:06:20 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: none)
2025-07-10 11:06:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 11:06:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 11:06:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 11:06:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 11:06:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 11:06:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 11:06:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 11:06:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 11:06:20 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 11:06:20 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 11:06:20 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: none)
2025-07-10 11:06:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 11:06:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 11:06:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 11:06:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 11:06:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 11:06:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 11:06:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 11:06:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 11:06:20 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 11:06:20 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 11:06:20 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: none)
2025-07-10 11:06:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 11:06:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 11:06:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 11:06:21 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 11:06:21 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 11:06:21 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 11:06:21 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 11:06:21 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 11:06:21 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 11:06:21 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 11:06:21 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: none)
2025-07-10 11:06:21 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 11:06:21 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 11:06:21 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 11:06:21 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 11:06:21 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 11:06:21 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 11:06:21 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 11:06:21 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 11:06:21 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 11:06:21 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 11:06:21 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: none)
2025-07-10 11:06:21 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 11:06:21 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 11:06:21 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 11:06:21 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 11:06:21 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 11:06:21 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 11:06:21 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 11:06:21 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 11:06:21 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 11:06:21 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 11:06:21 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: none)
2025-07-10 11:06:21 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 11:06:21 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 11:06:21 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 11:06:22 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 11:06:22 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 11:06:22 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 11:06:22 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 11:06:22 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 11:06:22 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 11:06:22 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 11:06:22 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: none)
2025-07-10 11:06:22 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 11:06:22 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 11:06:22 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 11:06:22 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 11:06:22 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 11:06:22 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 11:06:22 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 11:06:22 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 11:06:22 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 11:06:22 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 11:06:22 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: none)
2025-07-10 11:06:22 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 11:06:22 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 11:06:22 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 11:06:22 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 11:06:22 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 11:06:22 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 11:06:22 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 11:06:22 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 11:06:22 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 11:06:22 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 11:06:22 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: none)
2025-07-10 11:06:22 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 11:06:22 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 11:06:22 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 11:06:23 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 11:06:23 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 11:06:23 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 11:06:23 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 11:06:23 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 11:06:23 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 11:06:23 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 11:06:23 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: none)
2025-07-10 11:06:23 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 11:06:23 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 11:06:23 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 11:06:23 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 11:06:23 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 11:06:23 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 11:06:23 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 11:06:23 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 11:06:23 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 11:06:23 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 11:06:23 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: none)
2025-07-10 11:06:23 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 11:06:23 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 11:06:23 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 11:06:23 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 11:06:23 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 11:06:23 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 11:06:23 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 11:06:23 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 11:06:23 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 11:06:23 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 11:06:23 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: none)
2025-07-10 11:06:23 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 11:06:23 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 11:06:23 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 11:06:24 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 11:06:24 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 11:06:24 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 11:06:24 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 11:06:24 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 11:06:24 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 11:06:24 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 11:06:24 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: none)
2025-07-10 11:06:24 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 11:06:24 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 11:06:24 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 11:06:24 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 11:06:24 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 11:06:24 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 11:06:24 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 11:06:24 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 11:06:24 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 11:06:24 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 11:06:24 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: none)
2025-07-10 11:06:24 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 11:06:24 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 11:06:24 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 11:06:24 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 11:06:24 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 11:06:24 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 11:06:24 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 11:06:24 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 11:06:24 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 11:06:24 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 11:06:24 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: none)
2025-07-10 11:06:24 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 11:06:24 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 11:06:24 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 11:06:25 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 11:06:25 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 11:06:25 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 11:06:25 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 11:06:25 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 11:06:25 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 11:06:25 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 11:06:25 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: none)
2025-07-10 11:06:25 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 11:06:25 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 11:06:25 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 11:06:25 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 11:06:25 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 11:06:25 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 11:06:25 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 11:06:25 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 11:06:25 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 11:06:25 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 11:06:25 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: none)
2025-07-10 11:06:25 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 11:06:25 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 11:06:25 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 11:06:25 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 11:06:25 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 11:06:25 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 11:06:25 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 11:06:25 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 11:06:25 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 11:06:25 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 11:06:25 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: none)
2025-07-10 11:06:25 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 11:06:25 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 11:06:25 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 11:06:25 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 11:06:25 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 11:06:25 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 11:06:25 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 11:06:25 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 11:06:25 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 11:06:25 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 11:06:25 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: none)
2025-07-10 11:06:25 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 11:06:25 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 11:06:25 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 11:06:26 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 11:06:26 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 11:06:26 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 11:06:26 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 11:06:26 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 11:06:26 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 11:06:26 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 11:06:26 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: none)
2025-07-10 11:06:26 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 11:06:26 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 11:06:26 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 11:06:26 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 11:06:26 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 11:06:26 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 11:06:26 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 11:06:26 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 11:06:26 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 11:06:26 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 11:06:26 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: none)
2025-07-10 11:06:26 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 11:06:26 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 11:06:26 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 11:06:26 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 11:06:26 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 11:06:26 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 11:06:26 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 11:06:26 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 11:06:26 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 11:06:26 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 11:06:26 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: none)
2025-07-10 11:06:26 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 11:06:26 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 11:06:26 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 11:06:27 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 11:06:27 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 11:06:27 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 11:06:27 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 11:06:27 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 11:06:27 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 11:06:27 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 11:06:27 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: none)
2025-07-10 11:06:27 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 11:06:27 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 11:06:27 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 11:06:27 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 11:06:27 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 11:06:27 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 11:06:27 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 11:06:27 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 11:06:27 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 11:06:27 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 11:06:27 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: none)
2025-07-10 11:06:27 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 11:06:27 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 11:06:27 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 11:06:27 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 11:06:27 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 11:06:27 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 11:06:27 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 11:06:27 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 11:06:27 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 11:06:27 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 11:06:27 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: none)
2025-07-10 11:06:27 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 11:06:27 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 11:06:27 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 11:06:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 11:06:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 11:06:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 11:06:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 11:06:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 11:06:28 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 11:06:28 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 11:06:28 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: none)
2025-07-10 11:06:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 11:06:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 11:06:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 11:06:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 11:06:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 11:06:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 11:06:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 11:06:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 11:06:28 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 11:06:28 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 11:06:28 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: none)
2025-07-10 11:06:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 11:06:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 11:06:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 11:06:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 11:06:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 11:06:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 11:06:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 11:06:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 11:06:28 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 11:06:28 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 11:06:28 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: none)
2025-07-10 11:06:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 11:06:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 11:06:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 11:06:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 11:06:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 11:06:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 11:06:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 11:06:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 11:06:28 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 11:06:28 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 11:06:28 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: none)
2025-07-10 11:06:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 11:06:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 11:06:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 11:06:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 11:06:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 11:06:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 11:06:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 11:06:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 11:06:29 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 11:06:29 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 11:06:29 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: none)
2025-07-10 11:06:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 11:06:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 11:06:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 11:06:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 11:06:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 11:06:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 11:06:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 11:06:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 11:06:29 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 11:06:29 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 11:06:29 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: none)
2025-07-10 11:06:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 11:06:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 11:06:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 11:06:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 11:06:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 11:06:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 11:06:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 11:06:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 11:06:29 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 11:06:29 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 11:06:29 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: none)
2025-07-10 11:06:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 11:06:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 11:06:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 11:06:30 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 11:06:30 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 11:06:30 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 11:06:30 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 11:06:30 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 11:06:30 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 11:06:30 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 11:06:30 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: none)
2025-07-10 11:06:30 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 11:06:30 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 11:06:30 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 11:06:30 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 11:06:30 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 11:06:30 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 11:06:30 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 11:06:30 - src.corder_integration.langgraph.workflow_orchestrator - ERROR - 工作流执行失败: Recursion limit of 50 reached without hitting a stop condition. You can increase the limit by setting the `recursion_limit` config key.
For troubleshooting, visit: https://python.langchain.com/docs/troubleshooting/errors/GRAPH_RECURSION_LIMIT
2025-07-10 11:06:30 - api_server - INFO - ✅ POST coder_agent_api.process_design_document [200] (859.37s)
2025-07-10 11:06:30 - werkzeug - INFO - 127.0.0.1 - - [10/Jul/2025 11:06:30] "POST /api/coder-agent/process-document HTTP/1.1" 200 -
2025-07-10 11:12:06 - werkzeug - INFO -  * Detected change in 'D:\\ai_project\\document_analyzer\\src\\corder_integration\\langgraph\\workflow_orchestrator.py', reloading
2025-07-10 11:12:08 - werkzeug - INFO -  * Restarting with stat
2025-07-10 11:12:10 - system - INFO - ==================================================
2025-07-10 11:12:10 - system - INFO - 🚀 智能分析系统日志系统初始化完成
2025-07-10 11:12:10 - system - INFO - 📁 日志根目录: D:\ai_project\document_analyzer\logs
2025-07-10 11:12:10 - system - INFO - 📊 日志级别: INFO
2025-07-10 11:12:10 - system - INFO - 📅 按日期轮转: 每天午夜自动轮转
2025-07-10 11:12:10 - system - INFO - 📂 按月分目录: logs/YYYY-MM/
2025-07-10 11:12:10 - system - INFO - 📝 主日志: logs/2025-07/app.log
2025-07-10 11:12:10 - system - INFO - 🔧 API日志: logs/2025-07/api_server.log
2025-07-10 11:12:10 - system - INFO - 🧪 分析日志: logs/2025-07/analysis_service.log
2025-07-10 11:12:10 - system - INFO - ❌ 错误日志: logs/2025-07/error.log
2025-07-10 11:12:10 - system - INFO - 🗂️ 保留天数: 5 天
2025-07-10 11:12:10 - system - INFO - ==================================================
2025-07-10 11:12:22 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-10 11:12:23 - root - WARNING - 智能编码节点不可用: cannot import name 'IntelligentCodingAgent' from partially initialized module 'src.corder_integration.langgraph.nodes.intelligent_coding_node' (most likely due to a circular import) (D:\ai_project\document_analyzer\src\corder_integration\langgraph\nodes\intelligent_coding_node.py)
2025-07-10 11:12:23 - src.utils.task_storage - INFO - 数据库初始化成功
2025-07-10 11:12:23 - markdown_storage - INFO - Markdown存储管理器初始化完成
2025-07-10 11:12:23 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-10 11:12:23 - api_server - INFO - 从配置文件读取火山引擎配置: {'api_key': '7fcb3541-9363-4bfa-90aa-19e9f691bc25', 'endpoint': 'https://ark.cn-beijing.volces.com/api/v3', 'max_tokens': 4000, 'model': 'ep-20250605091804-wmw6w', 'temperature': 0.7}
2025-07-10 11:12:23 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-10 11:12:23 - api_server - INFO - 火山引擎客户端初始化成功
2025-07-10 11:12:23 - api_server - INFO - Weaviate配置: http://localhost:8080
2025-07-10 11:12:23 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-10 11:12:24 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-10 11:12:25 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-10 11:12:25 - WeaviateVectorDatabase - INFO - ✅ Weaviate连接成功: http://localhost:8080 (gRPC: 50051)
2025-07-10 11:12:25 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/schema/AnalyDesignDocuments "HTTP/1.1 200 OK"
2025-07-10 11:12:25 - WeaviateVectorDatabase - INFO - ✅ Weaviate集合已存在: AnalyDesignDocuments
2025-07-10 11:12:25 - AnalysisServiceManager - INFO - 初始化向量数据库: weaviate
2025-07-10 11:12:25 - sentence_transformers.SentenceTransformer - INFO - Use pytorch device_name: cpu
2025-07-10 11:12:25 - sentence_transformers.SentenceTransformer - INFO - Load pretrained SentenceTransformer: BAAI/bge-large-zh
2025-07-10 11:12:31 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-10 11:12:32 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-10 11:12:32 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-10 11:12:32 - src.utils.weaviate_helper - INFO - 成功连接到 Weaviate: localhost:8080
2025-07-10 11:12:32 - AnalysisServiceManager - INFO - 分析服务管理器初始化完成
2025-07-10 11:12:32 - api_server - INFO - 分析服务管理器初始化成功
2025-07-10 11:12:32 - api_server - INFO - 分析服务管理器已集成到API服务器
2025-07-10 11:12:32 - src.utils.enhanced_analyzer - INFO - 增强分析器初始化完成
2025-07-10 11:12:32 - api_server - INFO - 增强分析器初始化成功
2025-07-10 11:12:32 - api_server - INFO - 初始化任务存储数据库...
2025-07-10 11:12:32 - api_server - INFO - 任务存储数据库初始化成功
2025-07-10 11:12:32 - werkzeug - WARNING -  * Debugger is active!
2025-07-10 11:12:32 - werkzeug - INFO -  * Debugger PIN: 887-537-592
2025-07-10 11:20:06 - werkzeug - INFO -  * Detected change in 'D:\\ai_project\\document_analyzer\\src\\corder_integration\\langgraph\\nodes\\intelligent_coding_node.py', reloading
2025-07-10 11:20:08 - werkzeug - INFO -  * Restarting with stat
2025-07-10 11:20:09 - system - INFO - ==================================================
2025-07-10 11:20:09 - system - INFO - 🚀 智能分析系统日志系统初始化完成
2025-07-10 11:20:09 - system - INFO - 📁 日志根目录: D:\ai_project\document_analyzer\logs
2025-07-10 11:20:09 - system - INFO - 📊 日志级别: INFO
2025-07-10 11:20:09 - system - INFO - 📅 按日期轮转: 每天午夜自动轮转
2025-07-10 11:20:09 - system - INFO - 📂 按月分目录: logs/YYYY-MM/
2025-07-10 11:20:09 - system - INFO - 📝 主日志: logs/2025-07/app.log
2025-07-10 11:20:09 - system - INFO - 🔧 API日志: logs/2025-07/api_server.log
2025-07-10 11:20:09 - system - INFO - 🧪 分析日志: logs/2025-07/analysis_service.log
2025-07-10 11:20:09 - system - INFO - ❌ 错误日志: logs/2025-07/error.log
2025-07-10 11:20:09 - system - INFO - 🗂️ 保留天数: 5 天
2025-07-10 11:20:09 - system - INFO - ==================================================
2025-07-10 11:20:21 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-10 11:20:21 - root - WARNING - 智能编码节点不可用: cannot import name 'IntelligentCodingAgent' from partially initialized module 'src.corder_integration.langgraph.nodes.intelligent_coding_node' (most likely due to a circular import) (D:\ai_project\document_analyzer\src\corder_integration\langgraph\nodes\intelligent_coding_node.py)
2025-07-10 11:20:22 - src.utils.task_storage - INFO - 数据库初始化成功
2025-07-10 11:20:22 - markdown_storage - INFO - Markdown存储管理器初始化完成
2025-07-10 11:20:22 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-10 11:20:22 - api_server - INFO - 从配置文件读取火山引擎配置: {'api_key': '7fcb3541-9363-4bfa-90aa-19e9f691bc25', 'endpoint': 'https://ark.cn-beijing.volces.com/api/v3', 'max_tokens': 4000, 'model': 'ep-20250605091804-wmw6w', 'temperature': 0.7}
2025-07-10 11:20:22 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-10 11:20:22 - api_server - INFO - 火山引擎客户端初始化成功
2025-07-10 11:20:22 - api_server - INFO - Weaviate配置: http://localhost:8080
2025-07-10 11:20:22 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-10 11:20:23 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-10 11:20:23 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-10 11:20:23 - WeaviateVectorDatabase - INFO - ✅ Weaviate连接成功: http://localhost:8080 (gRPC: 50051)
2025-07-10 11:20:23 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/schema/AnalyDesignDocuments "HTTP/1.1 200 OK"
2025-07-10 11:20:23 - WeaviateVectorDatabase - INFO - ✅ Weaviate集合已存在: AnalyDesignDocuments
2025-07-10 11:20:23 - AnalysisServiceManager - INFO - 初始化向量数据库: weaviate
2025-07-10 11:20:23 - sentence_transformers.SentenceTransformer - INFO - Use pytorch device_name: cpu
2025-07-10 11:20:23 - sentence_transformers.SentenceTransformer - INFO - Load pretrained SentenceTransformer: BAAI/bge-large-zh
2025-07-10 11:20:30 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-10 11:20:31 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-10 11:20:31 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-10 11:20:31 - src.utils.weaviate_helper - INFO - 成功连接到 Weaviate: localhost:8080
2025-07-10 11:20:31 - AnalysisServiceManager - INFO - 分析服务管理器初始化完成
2025-07-10 11:20:31 - api_server - INFO - 分析服务管理器初始化成功
2025-07-10 11:20:31 - api_server - INFO - 分析服务管理器已集成到API服务器
2025-07-10 11:20:31 - src.utils.enhanced_analyzer - INFO - 增强分析器初始化完成
2025-07-10 11:20:31 - api_server - INFO - 增强分析器初始化成功
2025-07-10 11:20:31 - api_server - INFO - 初始化任务存储数据库...
2025-07-10 11:20:31 - api_server - INFO - 任务存储数据库初始化成功
2025-07-10 11:20:31 - werkzeug - WARNING -  * Debugger is active!
2025-07-10 11:20:31 - werkzeug - INFO -  * Debugger PIN: 887-537-592
2025-07-10 11:22:50 - system - INFO - ==================================================
2025-07-10 11:22:50 - system - INFO - 🚀 智能分析系统日志系统初始化完成
2025-07-10 11:22:50 - system - INFO - 📁 日志根目录: D:\ai_project\document_analyzer\logs
2025-07-10 11:22:50 - system - INFO - 📊 日志级别: INFO
2025-07-10 11:22:50 - system - INFO - 📅 按日期轮转: 每天午夜自动轮转
2025-07-10 11:22:50 - system - INFO - 📂 按月分目录: logs/YYYY-MM/
2025-07-10 11:22:50 - system - INFO - 📝 主日志: logs/2025-07/app.log
2025-07-10 11:22:50 - system - INFO - 🔧 API日志: logs/2025-07/api_server.log
2025-07-10 11:22:50 - system - INFO - 🧪 分析日志: logs/2025-07/analysis_service.log
2025-07-10 11:22:50 - system - INFO - ❌ 错误日志: logs/2025-07/error.log
2025-07-10 11:22:50 - system - INFO - 🗂️ 保留天数: 5 天
2025-07-10 11:22:50 - system - INFO - ==================================================
2025-07-10 11:22:57 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-10 11:22:57 - root - WARNING - 智能编码节点不可用: cannot import name 'IntelligentCodingAgent' from partially initialized module 'src.corder_integration.langgraph.nodes.intelligent_coding_node' (most likely due to a circular import) (D:\ai_project\document_analyzer\src\corder_integration\langgraph\nodes\intelligent_coding_node.py)
2025-07-10 11:22:57 - src.utils.task_storage - INFO - 数据库初始化成功
2025-07-10 11:22:57 - markdown_storage - INFO - Markdown存储管理器初始化完成
2025-07-10 11:22:57 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-10 11:22:57 - api_server - INFO - 从配置文件读取火山引擎配置: {'api_key': '7fcb3541-9363-4bfa-90aa-19e9f691bc25', 'endpoint': 'https://ark.cn-beijing.volces.com/api/v3', 'max_tokens': 4000, 'model': 'ep-20250605091804-wmw6w', 'temperature': 0.7}
2025-07-10 11:22:58 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-10 11:22:58 - api_server - INFO - 火山引擎客户端初始化成功
2025-07-10 11:22:58 - api_server - INFO - Weaviate配置: http://localhost:8080
2025-07-10 11:22:58 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-10 11:22:58 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-10 11:22:59 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-10 11:22:59 - WeaviateVectorDatabase - INFO - ✅ Weaviate连接成功: http://localhost:8080 (gRPC: 50051)
2025-07-10 11:22:59 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/schema/AnalyDesignDocuments "HTTP/1.1 200 OK"
2025-07-10 11:22:59 - WeaviateVectorDatabase - INFO - ✅ Weaviate集合已存在: AnalyDesignDocuments
2025-07-10 11:22:59 - AnalysisServiceManager - INFO - 初始化向量数据库: weaviate
2025-07-10 11:22:59 - sentence_transformers.SentenceTransformer - INFO - Use pytorch device_name: cpu
2025-07-10 11:22:59 - sentence_transformers.SentenceTransformer - INFO - Load pretrained SentenceTransformer: BAAI/bge-large-zh
2025-07-10 11:23:05 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-10 11:23:05 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-10 11:23:06 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-10 11:23:06 - src.utils.weaviate_helper - INFO - 成功连接到 Weaviate: localhost:8080
2025-07-10 11:23:06 - AnalysisServiceManager - INFO - 分析服务管理器初始化完成
2025-07-10 11:23:06 - api_server - INFO - 分析服务管理器初始化成功
2025-07-10 11:23:06 - api_server - INFO - 分析服务管理器已集成到API服务器
2025-07-10 11:23:06 - src.utils.enhanced_analyzer - INFO - 增强分析器初始化完成
2025-07-10 11:23:06 - api_server - INFO - 增强分析器初始化成功
2025-07-10 11:23:06 - api_server - INFO - 初始化任务存储数据库...
2025-07-10 11:23:06 - api_server - INFO - 任务存储数据库初始化成功
2025-07-10 11:23:06 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:8082
 * Running on http://26.26.26.1:8082
2025-07-10 11:23:06 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-07-10 11:23:06 - werkzeug - INFO -  * Restarting with stat
2025-07-10 11:23:06 - system - INFO - ==================================================
2025-07-10 11:23:06 - system - INFO - 🚀 智能分析系统日志系统初始化完成
2025-07-10 11:23:06 - system - INFO - 📁 日志根目录: D:\ai_project\document_analyzer\logs
2025-07-10 11:23:06 - system - INFO - 📊 日志级别: INFO
2025-07-10 11:23:06 - system - INFO - 📅 按日期轮转: 每天午夜自动轮转
2025-07-10 11:23:06 - system - INFO - 📂 按月分目录: logs/YYYY-MM/
2025-07-10 11:23:06 - system - INFO - 📝 主日志: logs/2025-07/app.log
2025-07-10 11:23:06 - system - INFO - 🔧 API日志: logs/2025-07/api_server.log
2025-07-10 11:23:06 - system - INFO - 🧪 分析日志: logs/2025-07/analysis_service.log
2025-07-10 11:23:06 - system - INFO - ❌ 错误日志: logs/2025-07/error.log
2025-07-10 11:23:06 - system - INFO - 🗂️ 保留天数: 5 天
2025-07-10 11:23:06 - system - INFO - ==================================================
2025-07-10 11:23:13 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-10 11:23:13 - root - WARNING - 智能编码节点不可用: cannot import name 'IntelligentCodingAgent' from partially initialized module 'src.corder_integration.langgraph.nodes.intelligent_coding_node' (most likely due to a circular import) (D:\ai_project\document_analyzer\src\corder_integration\langgraph\nodes\intelligent_coding_node.py)
2025-07-10 11:23:13 - src.utils.task_storage - INFO - 数据库初始化成功
2025-07-10 11:23:13 - markdown_storage - INFO - Markdown存储管理器初始化完成
2025-07-10 11:23:13 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-10 11:23:13 - api_server - INFO - 从配置文件读取火山引擎配置: {'api_key': '7fcb3541-9363-4bfa-90aa-19e9f691bc25', 'endpoint': 'https://ark.cn-beijing.volces.com/api/v3', 'max_tokens': 4000, 'model': 'ep-20250605091804-wmw6w', 'temperature': 0.7}
2025-07-10 11:23:13 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-10 11:23:13 - api_server - INFO - 火山引擎客户端初始化成功
2025-07-10 11:23:13 - api_server - INFO - Weaviate配置: http://localhost:8080
2025-07-10 11:23:14 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-10 11:23:14 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-10 11:23:14 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-10 11:23:14 - WeaviateVectorDatabase - INFO - ✅ Weaviate连接成功: http://localhost:8080 (gRPC: 50051)
2025-07-10 11:23:14 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/schema/AnalyDesignDocuments "HTTP/1.1 200 OK"
2025-07-10 11:23:14 - WeaviateVectorDatabase - INFO - ✅ Weaviate集合已存在: AnalyDesignDocuments
2025-07-10 11:23:14 - AnalysisServiceManager - INFO - 初始化向量数据库: weaviate
2025-07-10 11:23:15 - sentence_transformers.SentenceTransformer - INFO - Use pytorch device_name: cpu
2025-07-10 11:23:15 - sentence_transformers.SentenceTransformer - INFO - Load pretrained SentenceTransformer: BAAI/bge-large-zh
2025-07-10 11:23:21 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-10 11:23:22 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-10 11:23:22 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-10 11:23:22 - src.utils.weaviate_helper - INFO - 成功连接到 Weaviate: localhost:8080
2025-07-10 11:23:22 - AnalysisServiceManager - INFO - 分析服务管理器初始化完成
2025-07-10 11:23:22 - api_server - INFO - 分析服务管理器初始化成功
2025-07-10 11:23:22 - api_server - INFO - 分析服务管理器已集成到API服务器
2025-07-10 11:23:22 - src.utils.enhanced_analyzer - INFO - 增强分析器初始化完成
2025-07-10 11:23:22 - api_server - INFO - 增强分析器初始化成功
2025-07-10 11:23:22 - api_server - INFO - 初始化任务存储数据库...
2025-07-10 11:23:22 - api_server - INFO - 任务存储数据库初始化成功
2025-07-10 11:23:22 - werkzeug - WARNING -  * Debugger is active!
2025-07-10 11:23:22 - werkzeug - INFO -  * Debugger PIN: 887-537-592
2025-07-10 11:23:22 - src.apis.coder_agent_api - INFO - 开始处理文档: 链数中建一局_1752117791
2025-07-10 11:23:22 - src.apis.coder_agent_api - INFO - 文档长度: 4931 字符
2025-07-10 11:23:22 - src.apis.coder_agent_api - INFO - 使用LangGraph: True
2025-07-10 11:23:22 - src.apis.coder_agent_api - INFO - 代码输出路径: D:\gitlab\create_project
2025-07-10 11:23:22 - src.apis.coder_agent_api - INFO - 使用LangGraph工作流处理项目: 链数中建一局_1752117791
2025-07-10 11:23:22 - src.corder_integration.langgraph.workflow_orchestrator - INFO - 准备使用异步SQLite检查点: D:\ai_project\document_analyzer\workflow_checkpoints.db
2025-07-10 11:23:22 - src.corder_integration.langgraph.workflow_orchestrator - INFO - 生成目标分支名称: 链数中建一局_1752117791 -> D_20250710_链数中建一局_1752117791
2025-07-10 11:23:22 - src.corder_integration.langgraph.workflow_orchestrator - INFO - 开始执行编码工作流: 链数中建一局_1752117791 -> D:\gitlab\create_project
2025-07-10 11:23:22 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🚀 Git管理节点开始执行...
2025-07-10 11:23:22 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 11:23:22 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🎯 git_management_node 开始执行任务...
2025-07-10 11:23:22 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ℹ️ 没有可执行的Git管理任务
2025-07-10 11:23:22 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ Git管理节点完成 - 提取: 0 个仓库, 克隆: 0 个仓库, 仓库初始化状态: False
2025-07-10 11:23:22 - src.corder_integration.langgraph.workflow_orchestrator - WARNING - 没有识别到任何服务，Git设置阶段结束
2025-07-10 11:23:22 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 11:23:22 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 11:23:22 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: config.yaml
2025-07-10 11:23:23 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-10 11:23:23 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-10 11:23:23 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-10 11:23:23 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 11:23:23 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-10 11:23:23 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 11:23:23 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 11:23:23 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 11:23:23 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 第1轮找到 1 个可执行任务
2025-07-10 11:23:23 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 开始执行任务: task_008 (api)
2025-07-10 11:23:23 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_008 已被 intelligent_coding_node 领取
2025-07-10 11:23:23 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🌐 执行API接口生成任务: task_008
2025-07-10 11:23:23 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 解析的接口信息:
2025-07-10 11:23:23 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 接口名称: CompanyUnitList
2025-07-10 11:23:23 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - API路径: /general/multiorgManage/queryCompanyUnitList
2025-07-10 11:23:23 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - HTTP方法: GET
2025-07-10 11:23:23 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 输入参数: 3个
2025-07-10 11:23:23 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 输出参数: 6个
2025-07-10 11:23:23 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 业务描述: 根据查询条件查询组织单元信息，支持按编码、状态等条件筛选
2025-07-10 11:23:23 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 在 D:\gitlab\create_project/链数中建一局_1752115931/zqyl-user-center-service 中查找最佳Java项目路径...
2025-07-10 11:23:23 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 目标服务名: 用户服务
2025-07-10 11:23:23 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📐 中等深度结构 (深度7) -> +100
2025-07-10 11:23:23 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📦 服务模块匹配: basic-service -> +80
2025-07-10 11:23:23 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📦 服务模块匹配: user-basic-service -> +80
2025-07-10 11:23:23 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📦 服务模块匹配: basic-general -> +80
2025-07-10 11:23:23 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📦 服务模块匹配: user-basic-general -> +80
2025-07-10 11:23:23 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📦 服务模块匹配: service -> +80
2025-07-10 11:23:23 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    🏢 业务域匹配: user -> +50
2025-07-10 11:23:23 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    🏢 业务域匹配: basic -> +50
2025-07-10 11:23:23 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    🏢 业务域匹配: general -> +50
2025-07-10 11:23:23 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    🏗️ 架构层级匹配: application -> +30
2025-07-10 11:23:23 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 发现Java项目: user-basic-general
2025-07-10 11:23:23 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       🎯 相对路径: user-basic-service\user-basic-general
2025-07-10 11:23:23 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       📊 Java文件: 29个
2025-07-10 11:23:23 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       📐 目录深度: 2
2025-07-10 11:23:23 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       🏆 优先级分数: 709
2025-07-10 11:23:23 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 排序后的候选路径（前3个）:
2025-07-10 11:23:23 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    1. user-basic-service\user-basic-general (优先级: 709)
2025-07-10 11:23:23 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 选择最佳Java项目路径:
2025-07-10 11:23:23 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 完整路径: D:\gitlab\create_project\链数中建一局_1752115931\zqyl-user-center-service\user-basic-service\user-basic-general
2025-07-10 11:23:23 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📋 相对路径: user-basic-service\user-basic-general
2025-07-10 11:23:23 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    🏆 最终优先级: 709
2025-07-10 11:23:23 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 从API路径 /general/multiorgManage/queryCompanyUnitList 提取关键字: multiorgManage
2025-07-10 11:23:23 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 在项目中搜索关键字相关路径: multiorgManage
2025-07-10 11:23:23 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    ❌ 未找到包含关键字 'multiorgManage' 的相关目录
2025-07-10 11:23:23 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -  分析目标项目: D:\gitlab\create_project\链数中建一局_1752115931\zqyl-user-center-service\user-basic-service\user-basic-general
2025-07-10 11:23:23 - src.apis.project_analysis_api - INFO - 🔍 开始分析项目用于代码生成: D:\gitlab\create_project\链数中建一局_1752115931\zqyl-user-center-service\user-basic-service\user-basic-general
2025-07-10 11:23:23 - src.apis.project_analysis_api - INFO - 🔍 在 D:\gitlab\create_project\链数中建一局_1752115931\zqyl-user-center-service\user-basic-service\user-basic-general 中查找最佳Java项目路径...
2025-07-10 11:23:23 - src.apis.project_analysis_api - INFO - 🎯 目标服务名: 用户服务
2025-07-10 11:23:23 - src.apis.project_analysis_api - INFO -    📐 中等深度结构 (深度7) -> +100
2025-07-10 11:23:23 - src.apis.project_analysis_api - INFO -    📦 服务模块匹配: user-basic-service -> +120
2025-07-10 11:23:23 - src.apis.project_analysis_api - INFO -    🏢 业务域匹配: user -> +60
2025-07-10 11:23:23 - src.apis.project_analysis_api - INFO -    🏗️ 架构层级匹配: service -> +100
2025-07-10 11:23:23 - src.apis.project_analysis_api - INFO -    🎯🎯🎯 深层服务模块路径匹配 -> +800
2025-07-10 11:23:23 - src.apis.project_analysis_api - INFO -    📁 发现Java项目: user-basic-general
2025-07-10 11:23:23 - src.apis.project_analysis_api - INFO -       🎯 相对路径: .
2025-07-10 11:23:23 - src.apis.project_analysis_api - INFO -       📊 Java文件: 29个
2025-07-10 11:23:23 - src.apis.project_analysis_api - INFO -       📐 目录深度: 0
2025-07-10 11:23:23 - src.apis.project_analysis_api - INFO -       🏆 优先级分数: 1181
2025-07-10 11:23:23 - src.apis.project_analysis_api - INFO - 📋 排序后的候选路径（前3个）:
2025-07-10 11:23:23 - src.apis.project_analysis_api - INFO -    1. . (优先级: 1181)
2025-07-10 11:23:23 - src.apis.project_analysis_api - INFO - ✅ 选择最佳Java项目路径:
2025-07-10 11:23:23 - src.apis.project_analysis_api - INFO -    📁 完整路径: D:\gitlab\create_project\链数中建一局_1752115931\zqyl-user-center-service\user-basic-service\user-basic-general
2025-07-10 11:23:23 - src.apis.project_analysis_api - INFO -    📋 相对路径: .
2025-07-10 11:23:23 - src.apis.project_analysis_api - INFO -    🏆 最终优先级: 1181
2025-07-10 11:23:23 - src.apis.project_analysis_api - INFO - 📂 实际分析路径: D:\gitlab\create_project\链数中建一局_1752115931\zqyl-user-center-service\user-basic-service\user-basic-general
2025-07-10 11:23:23 - src.utils.java_code_analyzer - INFO - 🔍 开始分析企业级Java项目: D:\gitlab\create_project\链数中建一局_1752115931\zqyl-user-center-service\user-basic-service\user-basic-general
2025-07-10 11:23:23 - src.utils.java_code_analyzer - INFO - ✅ 企业级项目分析完成，共分析 29 个Java文件
2025-07-10 11:23:23 - src.apis.project_analysis_api - INFO - 📦 动态检测到基础包: com.yljr.user.basicgeneral (出现29次)
2025-07-10 11:23:23 - src.apis.project_analysis_api - INFO - 📦 动态检测到基础包: com.yljr.user.basicgeneral (出现29次)
2025-07-10 11:23:23 - src.apis.project_analysis_api - INFO - 📦 动态检测到基础包: com.yljr.user.basicgeneral (出现29次)
2025-07-10 11:23:23 - src.apis.project_analysis_api - INFO - ✅ 项目分析完成，已提取代码生成上下文
2025-07-10 11:23:23 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -  调用volcengine大模型生成代码...
2025-07-10 11:23:23 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 开始代码生成...
2025-07-10 11:23:23 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎨 使用模板+AI混合模式生成代码
2025-07-10 11:23:23 - src.corder_integration.code_generator.template_ai_generator - INFO - 🎨 开始模板+AI混合代码生成: CompanyUnitList
2025-07-10 11:23:23 - src.corder_integration.code_generator.template_ai_generator - INFO - 🤖 使用unknown增强模板代码...
2025-07-10 11:23:23 - src.corder_integration.code_generator.template_ai_generator - ERROR - ❌ service_impl AI增强异常: 'VolcengineClient' object has no attribute 'chat_completion'
2025-07-10 11:23:23 - src.corder_integration.code_generator.template_ai_generator - ERROR - ❌ controller AI增强异常: 'VolcengineClient' object has no attribute 'chat_completion'
2025-07-10 11:23:23 - src.corder_integration.code_generator.template_ai_generator - ERROR - ❌ service_interface AI增强异常: 'VolcengineClient' object has no attribute 'chat_completion'
2025-07-10 11:23:23 - src.corder_integration.code_generator.template_ai_generator - ERROR - ❌ request_dto AI增强异常: 'VolcengineClient' object has no attribute 'chat_completion'
2025-07-10 11:23:23 - src.corder_integration.code_generator.template_ai_generator - ERROR - ❌ response_dto AI增强异常: 'VolcengineClient' object has no attribute 'chat_completion'
2025-07-10 11:23:23 - src.corder_integration.code_generator.template_ai_generator - ERROR - ❌ entity AI增强异常: 'VolcengineClient' object has no attribute 'chat_completion'
2025-07-10 11:23:23 - src.corder_integration.code_generator.template_ai_generator - ERROR - ❌ mapper AI增强异常: 'VolcengineClient' object has no attribute 'chat_completion'
2025-07-10 11:23:23 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI生成成功，生成代码类型: ['service_impl', 'controller', 'service_interface', 'request_dto', 'response_dto', 'entity', 'mapper']
2025-07-10 11:23:23 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 开始写入生成的代码文件...
2025-07-10 11:23:23 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔧 统一类名基础: CompanyUnitList
2025-07-10 11:23:23 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ service_impl 类名: CompanyUnitListServiceImpl
2025-07-10 11:23:23 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ controller 类名: CompanyUnitListController
2025-07-10 11:23:23 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ request_dto 类名: CompanyUnitListReq
2025-07-10 11:23:23 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ response_dto 类名: CompanyUnitListResp
2025-07-10 11:23:23 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ entity 类名: CompanyUnitListEntity
2025-07-10 11:23:23 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 检测到service_impl但缺少service，这是正常的（接口会被自动生成）
2025-07-10 11:23:23 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 标准化后的代码类型: ['service_impl', 'controller', 'service_interface', 'request_dto', 'response_dto', 'entity', 'mapper']
2025-07-10 11:23:23 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🤖 调用volcengine判断Java文件输出路径...
2025-07-10 11:23:52 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-10 11:23:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM路径判断成功，配置了 7 个Java文件路径
2025-07-10 11:23:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 controller: CompanyUnitListController.java
2025-07-10 11:23:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 service_interface: CompanyUnitListService.java
2025-07-10 11:23:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 service_impl: CompanyUnitListServiceImpl.java
2025-07-10 11:23:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 request_dto: CompanyUnitListReq.java
2025-07-10 11:23:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 response_dto: CompanyUnitListResp.java
2025-07-10 11:23:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 entity: CompanyUnitListEntity.java
2025-07-10 11:23:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 mapper: CompanyUnitListMapper.java
2025-07-10 11:23:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: D:\gitlab\create_project\链数中建一局_1752115931\zqyl-user-center-service\user-basic-service\user-basic-general\src\main\java\com\yljr\user\basicgeneral\application\service\impl\CompanyUnitListServiceImpl.java
2025-07-10 11:23:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: D:\gitlab\create_project\链数中建一局_1752115931\zqyl-user-center-service\user-basic-service\user-basic-general\src\main\java\com\yljr\user\basicgeneral\application\service\impl\CompanyUnitListServiceImpl.java
2025-07-10 11:23:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: D:\gitlab\create_project\链数中建一局_1752115931\zqyl-user-center-service\user-basic-service\user-basic-general\src\main\java\com\yljr\user\basicgeneral\interfaces\rest\CompanyUnitListController.java
2025-07-10 11:23:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: D:\gitlab\create_project\链数中建一局_1752115931\zqyl-user-center-service\user-basic-service\user-basic-general\src\main\java\com\yljr\user\basicgeneral\interfaces\rest\CompanyUnitListController.java
2025-07-10 11:23:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: D:\gitlab\create_project\链数中建一局_1752115931\zqyl-user-center-service\user-basic-service\user-basic-general\src\main\java\com\yljr\user\basicgeneral\application\service\CompanyUnitListService.java
2025-07-10 11:23:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: D:\gitlab\create_project\链数中建一局_1752115931\zqyl-user-center-service\user-basic-service\user-basic-general\src\main\java\com\yljr\user\basicgeneral\application\service\CompanyUnitListService.java
2025-07-10 11:23:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: D:\gitlab\create_project\链数中建一局_1752115931\zqyl-user-center-service\user-basic-service\user-basic-general\src\main\java\com\yljr\user\basicgeneral\interfaces\dto\CompanyUnitListReq.java
2025-07-10 11:23:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: D:\gitlab\create_project\链数中建一局_1752115931\zqyl-user-center-service\user-basic-service\user-basic-general\src\main\java\com\yljr\user\basicgeneral\interfaces\dto\CompanyUnitListReq.java
2025-07-10 11:23:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: D:\gitlab\create_project\链数中建一局_1752115931\zqyl-user-center-service\user-basic-service\user-basic-general\src\main\java\com\yljr\user\basicgeneral\interfaces\dto\CompanyUnitListResp.java
2025-07-10 11:23:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: D:\gitlab\create_project\链数中建一局_1752115931\zqyl-user-center-service\user-basic-service\user-basic-general\src\main\java\com\yljr\user\basicgeneral\interfaces\dto\CompanyUnitListResp.java
2025-07-10 11:23:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: D:\gitlab\create_project\链数中建一局_1752115931\zqyl-user-center-service\user-basic-service\user-basic-general\src\main\java\com\yljr\user\basicgeneral\domain\entity\CompanyUnitListEntity.java
2025-07-10 11:23:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: D:\gitlab\create_project\链数中建一局_1752115931\zqyl-user-center-service\user-basic-service\user-basic-general\src\main\java\com\yljr\user\basicgeneral\domain\entity\CompanyUnitListEntity.java
2025-07-10 11:23:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: D:\gitlab\create_project\链数中建一局_1752115931\zqyl-user-center-service\user-basic-service\user-basic-general\src\main\java\com\yljr\user\basicgeneral\domain\mapper\CompanyUnitListMapper.java
2025-07-10 11:23:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: D:\gitlab\create_project\链数中建一局_1752115931\zqyl-user-center-service\user-basic-service\user-basic-general\src\main\java\com\yljr\user\basicgeneral\domain\mapper\CompanyUnitListMapper.java
2025-07-10 11:23:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📊 代码生成完成，共写入 7 个文件到项目中
2025-07-10 11:23:52 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_008 状态更新为 completed
2025-07-10 11:23:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 任务 task_008 执行成功
2025-07-10 11:23:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 第1轮执行完成，处理了 1 个任务
2025-07-10 11:23:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第2轮任务检查...
2025-07-10 11:23:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 第2轮找到 1 个可执行任务
2025-07-10 11:23:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 开始执行任务: task_009 (api)
2025-07-10 11:23:52 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_009 已被 intelligent_coding_node 领取
2025-07-10 11:23:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🌐 执行API接口生成任务: task_009
2025-07-10 11:23:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 解析的接口信息:
2025-07-10 11:23:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 接口名称: UnitLimitByCompanyId
2025-07-10 11:23:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - API路径: /crcl-open-api/lsLimit/listUnitLimitByCompanyId
2025-07-10 11:23:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - HTTP方法: GET
2025-07-10 11:23:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 输入参数: 6个
2025-07-10 11:23:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 输出参数: 4个
2025-07-10 11:23:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 业务描述: 根据公司ID和筛选条件查询组织单元额度信息，调用用户服务获取组织单元基础信息
2025-07-10 11:23:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 在 D:\gitlab\create_project/链数中建一局_1752115931/crcl-open 中查找最佳Java项目路径...
2025-07-10 11:23:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 目标服务名: 确权开立服务
2025-07-10 11:23:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    🏗️ 架构层级匹配: interfaces -> +30
2025-07-10 11:23:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 发现Java项目: crcl-open
2025-07-10 11:23:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       🎯 相对路径: .
2025-07-10 11:23:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       📊 Java文件: 2251个
2025-07-10 11:23:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       📐 目录深度: 0
2025-07-10 11:23:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       🏆 优先级分数: 2281
2025-07-10 11:23:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 排序后的候选路径（前3个）:
2025-07-10 11:23:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    1. . (优先级: 2281)
2025-07-10 11:23:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 选择最佳Java项目路径:
2025-07-10 11:23:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 完整路径: D:\gitlab\create_project\链数中建一局_1752115931\crcl-open
2025-07-10 11:23:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📋 相对路径: .
2025-07-10 11:23:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    🏆 最终优先级: 2281
2025-07-10 11:23:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 从API路径 /crcl-open-api/lsLimit/listUnitLimitByCompanyId 提取关键字: lsLimit
2025-07-10 11:23:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 在项目中搜索关键字相关路径: lsLimit
2025-07-10 11:23:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 找到匹配目录: limit (得分: 25)
2025-07-10 11:23:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 找到匹配目录: ls (得分: 25)
2025-07-10 11:23:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 找到匹配目录: ls (得分: 25)
2025-07-10 11:23:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 找到匹配目录: ls (得分: 25)
2025-07-10 11:23:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 找到匹配目录: limit (得分: 25)
2025-07-10 11:23:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    ✅ 选择最佳匹配目录: limit (路径: src\main\java\com\yljr\crcl\limit)
2025-07-10 11:23:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 基于API关键字 'lsLimit' 找到现有路径: D:\gitlab\create_project\链数中建一局_1752115931\crcl-open\src\main\java\com\yljr\crcl\limit
2025-07-10 11:23:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -  分析目标项目: D:\gitlab\create_project\链数中建一局_1752115931\crcl-open\src\main\java\com\yljr\crcl\limit
2025-07-10 11:23:53 - src.apis.project_analysis_api - INFO - 🔍 开始分析项目用于代码生成: D:\gitlab\create_project\链数中建一局_1752115931\crcl-open\src\main\java\com\yljr\crcl\limit
2025-07-10 11:23:53 - src.apis.project_analysis_api - INFO - 🔍 在 D:\gitlab\create_project\链数中建一局_1752115931\crcl-open\src\main\java\com\yljr\crcl\limit 中查找最佳Java项目路径...
2025-07-10 11:23:53 - src.apis.project_analysis_api - INFO - 🎯 目标服务名: 确权开立服务
2025-07-10 11:23:53 - src.apis.project_analysis_api - WARNING - ⚠️ 在 D:\gitlab\create_project\链数中建一局_1752115931\crcl-open\src\main\java\com\yljr\crcl\limit 中未找到包含Java文件的src/main/java结构
2025-07-10 11:23:53 - src.apis.project_analysis_api - INFO - 📂 实际分析路径: D:\gitlab\create_project\链数中建一局_1752115931\crcl-open\src\main\java\com\yljr\crcl\limit
2025-07-10 11:23:53 - src.utils.java_code_analyzer - INFO - 🔍 开始分析企业级Java项目: D:\gitlab\create_project\链数中建一局_1752115931\crcl-open\src\main\java\com\yljr\crcl\limit
2025-07-10 11:23:56 - src.utils.java_code_analyzer - INFO - ✅ 企业级项目分析完成，共分析 533 个Java文件
2025-07-10 11:23:56 - src.apis.project_analysis_api - INFO - 📦 动态检测到基础包: com.yljr.crcl.limit (出现533次)
2025-07-10 11:23:56 - src.apis.project_analysis_api - INFO - 📦 动态检测到基础包: com.yljr.crcl.limit (出现533次)
2025-07-10 11:23:56 - src.apis.project_analysis_api - INFO - 📦 动态检测到基础包: com.yljr.crcl.limit (出现533次)
2025-07-10 11:23:56 - src.apis.project_analysis_api - INFO - ✅ 项目分析完成，已提取代码生成上下文
2025-07-10 11:23:56 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -  调用volcengine大模型生成代码...
2025-07-10 11:23:56 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 开始代码生成...
2025-07-10 11:23:56 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎨 使用模板+AI混合模式生成代码
2025-07-10 11:23:56 - src.corder_integration.code_generator.template_ai_generator - INFO - 🎨 开始模板+AI混合代码生成: UnitLimitByCompanyId
2025-07-10 11:23:56 - src.corder_integration.code_generator.template_ai_generator - INFO - 🤖 使用unknown增强模板代码...
2025-07-10 11:23:56 - src.corder_integration.code_generator.template_ai_generator - ERROR - ❌ service_impl AI增强异常: 'VolcengineClient' object has no attribute 'chat_completion'
2025-07-10 11:23:56 - src.corder_integration.code_generator.template_ai_generator - ERROR - ❌ controller AI增强异常: 'VolcengineClient' object has no attribute 'chat_completion'
2025-07-10 11:23:56 - src.corder_integration.code_generator.template_ai_generator - ERROR - ❌ service_interface AI增强异常: 'VolcengineClient' object has no attribute 'chat_completion'
2025-07-10 11:23:56 - src.corder_integration.code_generator.template_ai_generator - ERROR - ❌ request_dto AI增强异常: 'VolcengineClient' object has no attribute 'chat_completion'
2025-07-10 11:23:56 - src.corder_integration.code_generator.template_ai_generator - ERROR - ❌ response_dto AI增强异常: 'VolcengineClient' object has no attribute 'chat_completion'
2025-07-10 11:23:56 - src.corder_integration.code_generator.template_ai_generator - ERROR - ❌ entity AI增强异常: 'VolcengineClient' object has no attribute 'chat_completion'
2025-07-10 11:23:56 - src.corder_integration.code_generator.template_ai_generator - ERROR - ❌ mapper AI增强异常: 'VolcengineClient' object has no attribute 'chat_completion'
2025-07-10 11:23:56 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI生成成功，生成代码类型: ['service_impl', 'controller', 'service_interface', 'request_dto', 'response_dto', 'entity', 'mapper']
2025-07-10 11:23:56 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 开始写入生成的代码文件...
2025-07-10 11:23:56 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔧 统一类名基础: UnitLimitByCompanyId
2025-07-10 11:23:56 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ service_impl 类名: UnitLimitByCompanyIdServiceImpl
2025-07-10 11:23:56 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ controller 类名: UnitLimitByCompanyIdController
2025-07-10 11:23:56 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ request_dto 类名: UnitLimitByCompanyIdReq
2025-07-10 11:23:56 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ response_dto 类名: UnitLimitByCompanyIdResp
2025-07-10 11:23:56 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ entity 类名: UnitLimitByCompanyIdEntity
2025-07-10 11:23:56 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 检测到service_impl但缺少service，这是正常的（接口会被自动生成）
2025-07-10 11:23:56 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 标准化后的代码类型: ['service_impl', 'controller', 'service_interface', 'request_dto', 'response_dto', 'entity', 'mapper']
2025-07-10 11:23:56 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🤖 调用volcengine判断Java文件输出路径...
2025-07-10 11:24:20 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-10 11:24:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM路径判断成功，配置了 7 个Java文件路径
2025-07-10 11:24:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 controller: UnitLimitByCompanyIdController.java
2025-07-10 11:24:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 service_interface: UnitLimitByCompanyIdService.java
2025-07-10 11:24:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 service_impl: UnitLimitByCompanyIdServiceImpl.java
2025-07-10 11:24:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 request_dto: UnitLimitByCompanyIdReq.java
2025-07-10 11:24:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 response_dto: UnitLimitByCompanyIdResp.java
2025-07-10 11:24:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 entity: UnitLimitByCompanyIdEntity.java
2025-07-10 11:24:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 mapper: UnitLimitByCompanyIdMapper.java
2025-07-10 11:24:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: D:\gitlab\create_project\链数中建一局_1752115931\crcl-open\src\main\java\com\yljr\crcl\limit\application\service\impl\UnitLimitByCompanyIdServiceImpl.java
2025-07-10 11:24:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: D:\gitlab\create_project\链数中建一局_1752115931\crcl-open\src\main\java\com\yljr\crcl\limit\application\service\impl\UnitLimitByCompanyIdServiceImpl.java
2025-07-10 11:24:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: D:\gitlab\create_project\链数中建一局_1752115931\crcl-open\src\main\java\com\yljr\crcl\limit\interfaces\rest\UnitLimitByCompanyIdController.java
2025-07-10 11:24:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: D:\gitlab\create_project\链数中建一局_1752115931\crcl-open\src\main\java\com\yljr\crcl\limit\interfaces\rest\UnitLimitByCompanyIdController.java
2025-07-10 11:24:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: D:\gitlab\create_project\链数中建一局_1752115931\crcl-open\src\main\java\com\yljr\crcl\limit\application\service\UnitLimitByCompanyIdService.java
2025-07-10 11:24:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: D:\gitlab\create_project\链数中建一局_1752115931\crcl-open\src\main\java\com\yljr\crcl\limit\application\service\UnitLimitByCompanyIdService.java
2025-07-10 11:24:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: D:\gitlab\create_project\链数中建一局_1752115931\crcl-open\src\main\java\com\yljr\crcl\limit\interfaces\dto\UnitLimitByCompanyIdReq.java
2025-07-10 11:24:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: D:\gitlab\create_project\链数中建一局_1752115931\crcl-open\src\main\java\com\yljr\crcl\limit\interfaces\dto\UnitLimitByCompanyIdReq.java
2025-07-10 11:24:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: D:\gitlab\create_project\链数中建一局_1752115931\crcl-open\src\main\java\com\yljr\crcl\limit\interfaces\dto\UnitLimitByCompanyIdResp.java
2025-07-10 11:24:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: D:\gitlab\create_project\链数中建一局_1752115931\crcl-open\src\main\java\com\yljr\crcl\limit\interfaces\dto\UnitLimitByCompanyIdResp.java
2025-07-10 11:24:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: D:\gitlab\create_project\链数中建一局_1752115931\crcl-open\src\main\java\com\yljr\crcl\limit\domain\entity\UnitLimitByCompanyIdEntity.java
2025-07-10 11:24:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: D:\gitlab\create_project\链数中建一局_1752115931\crcl-open\src\main\java\com\yljr\crcl\limit\domain\entity\UnitLimitByCompanyIdEntity.java
2025-07-10 11:24:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: D:\gitlab\create_project\链数中建一局_1752115931\crcl-open\src\main\java\com\yljr\crcl\limit\domain\mapper\UnitLimitByCompanyIdMapper.java
2025-07-10 11:24:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: D:\gitlab\create_project\链数中建一局_1752115931\crcl-open\src\main\java\com\yljr\crcl\limit\domain\mapper\UnitLimitByCompanyIdMapper.java
2025-07-10 11:24:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📊 代码生成完成，共写入 7 个文件到项目中
2025-07-10 11:24:20 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_009 状态更新为 completed
2025-07-10 11:24:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 任务 task_009 执行成功
2025-07-10 11:24:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 第2轮执行完成，处理了 1 个任务
2025-07-10 11:24:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第3轮任务检查...
2025-07-10 11:24:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 第3轮找到 1 个可执行任务
2025-07-10 11:24:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 开始执行任务: task_010 (api)
2025-07-10 11:24:20 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_010 已被 intelligent_coding_node 领取
2025-07-10 11:24:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🌐 执行API接口生成任务: task_010
2025-07-10 11:24:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 解析的接口信息:
2025-07-10 11:24:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 接口名称: UnitLimitByCompanyIdExport
2025-07-10 11:24:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - API路径: /crcl-open-api/lsLimit/listUnitLimitByCompanyIdExport
2025-07-10 11:24:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - HTTP方法: GET
2025-07-10 11:24:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 输入参数: 4个
2025-07-10 11:24:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 输出参数: 3个
2025-07-10 11:24:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 业务描述: 复用listUnitLimitByCompanyId接口的查询逻辑，将结果导出为Excel格式
2025-07-10 11:24:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 在 D:\gitlab\create_project/链数中建一局_1752115931/crcl-open 中查找最佳Java项目路径...
2025-07-10 11:24:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 目标服务名: 确权开立服务
2025-07-10 11:24:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    🏗️ 架构层级匹配: interfaces -> +30
2025-07-10 11:24:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 发现Java项目: crcl-open
2025-07-10 11:24:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       🎯 相对路径: .
2025-07-10 11:24:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       📊 Java文件: 2258个
2025-07-10 11:24:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       📐 目录深度: 0
2025-07-10 11:24:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       🏆 优先级分数: 2288
2025-07-10 11:24:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 排序后的候选路径（前3个）:
2025-07-10 11:24:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    1. . (优先级: 2288)
2025-07-10 11:24:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 选择最佳Java项目路径:
2025-07-10 11:24:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 完整路径: D:\gitlab\create_project\链数中建一局_1752115931\crcl-open
2025-07-10 11:24:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📋 相对路径: .
2025-07-10 11:24:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    🏆 最终优先级: 2288
2025-07-10 11:24:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 从API路径 /crcl-open-api/lsLimit/listUnitLimitByCompanyIdExport 提取关键字: lsLimit
2025-07-10 11:24:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 在项目中搜索关键字相关路径: lsLimit
2025-07-10 11:24:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 找到匹配目录: limit (得分: 25)
2025-07-10 11:24:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 找到匹配目录: ls (得分: 25)
2025-07-10 11:24:21 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 找到匹配目录: ls (得分: 25)
2025-07-10 11:24:21 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 找到匹配目录: ls (得分: 25)
2025-07-10 11:24:21 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 找到匹配目录: limit (得分: 25)
2025-07-10 11:24:21 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    ✅ 选择最佳匹配目录: limit (路径: src\main\java\com\yljr\crcl\limit)
2025-07-10 11:24:21 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 基于API关键字 'lsLimit' 找到现有路径: D:\gitlab\create_project\链数中建一局_1752115931\crcl-open\src\main\java\com\yljr\crcl\limit
2025-07-10 11:24:21 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -  分析目标项目: D:\gitlab\create_project\链数中建一局_1752115931\crcl-open\src\main\java\com\yljr\crcl\limit
2025-07-10 11:24:21 - src.apis.project_analysis_api - INFO - 🔍 开始分析项目用于代码生成: D:\gitlab\create_project\链数中建一局_1752115931\crcl-open\src\main\java\com\yljr\crcl\limit
2025-07-10 11:24:21 - src.apis.project_analysis_api - INFO - 📋 使用缓存的分析结果
2025-07-10 11:24:21 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -  调用volcengine大模型生成代码...
2025-07-10 11:24:21 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 开始代码生成...
2025-07-10 11:24:21 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎨 使用模板+AI混合模式生成代码
2025-07-10 11:24:21 - src.corder_integration.code_generator.template_ai_generator - INFO - 🎨 开始模板+AI混合代码生成: UnitLimitByCompanyIdExport
2025-07-10 11:24:21 - src.corder_integration.code_generator.template_ai_generator - INFO - 🤖 使用unknown增强模板代码...
2025-07-10 11:24:21 - src.corder_integration.code_generator.template_ai_generator - ERROR - ❌ service_impl AI增强异常: 'VolcengineClient' object has no attribute 'chat_completion'
2025-07-10 11:24:21 - src.corder_integration.code_generator.template_ai_generator - ERROR - ❌ controller AI增强异常: 'VolcengineClient' object has no attribute 'chat_completion'
2025-07-10 11:24:21 - src.corder_integration.code_generator.template_ai_generator - ERROR - ❌ service_interface AI增强异常: 'VolcengineClient' object has no attribute 'chat_completion'
2025-07-10 11:24:21 - src.corder_integration.code_generator.template_ai_generator - ERROR - ❌ request_dto AI增强异常: 'VolcengineClient' object has no attribute 'chat_completion'
2025-07-10 11:24:21 - src.corder_integration.code_generator.template_ai_generator - ERROR - ❌ response_dto AI增强异常: 'VolcengineClient' object has no attribute 'chat_completion'
2025-07-10 11:24:21 - src.corder_integration.code_generator.template_ai_generator - ERROR - ❌ entity AI增强异常: 'VolcengineClient' object has no attribute 'chat_completion'
2025-07-10 11:24:21 - src.corder_integration.code_generator.template_ai_generator - ERROR - ❌ mapper AI增强异常: 'VolcengineClient' object has no attribute 'chat_completion'
2025-07-10 11:24:21 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI生成成功，生成代码类型: ['service_impl', 'controller', 'service_interface', 'request_dto', 'response_dto', 'entity', 'mapper']
2025-07-10 11:24:21 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 开始写入生成的代码文件...
2025-07-10 11:24:21 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔧 统一类名基础: UnitLimitByCompanyIdExport
2025-07-10 11:24:21 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ service_impl 类名: UnitLimitByCompanyIdExportServiceImpl
2025-07-10 11:24:21 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ controller 类名: UnitLimitByCompanyIdExportController
2025-07-10 11:24:21 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ request_dto 类名: UnitLimitByCompanyIdExportReq
2025-07-10 11:24:21 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ response_dto 类名: UnitLimitByCompanyIdExportResp
2025-07-10 11:24:21 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ entity 类名: UnitLimitByCompanyIdExportEntity
2025-07-10 11:24:21 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 检测到service_impl但缺少service，这是正常的（接口会被自动生成）
2025-07-10 11:24:21 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 标准化后的代码类型: ['service_impl', 'controller', 'service_interface', 'request_dto', 'response_dto', 'entity', 'mapper']
2025-07-10 11:24:21 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🤖 调用volcengine判断Java文件输出路径...
2025-07-10 11:24:48 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-10 11:24:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM路径判断成功，配置了 7 个Java文件路径
2025-07-10 11:24:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 controller: UnitLimitByCompanyIdExportController.java
2025-07-10 11:24:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 service_interface: UnitLimitByCompanyIdExportService.java
2025-07-10 11:24:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 service_impl: UnitLimitByCompanyIdExportServiceImpl.java
2025-07-10 11:24:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 request_dto: UnitLimitByCompanyIdExportReq.java
2025-07-10 11:24:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 response_dto: UnitLimitByCompanyIdExportResp.java
2025-07-10 11:24:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 entity: UnitLimitByCompanyIdExportEntity.java
2025-07-10 11:24:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 mapper: UnitLimitByCompanyIdExportMapper.java
2025-07-10 11:24:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: D:\gitlab\create_project\链数中建一局_1752115931\crcl-open\src\main\java\com\yljr\crcl\limit\application\service\impl\UnitLimitByCompanyIdExportServiceImpl.java
2025-07-10 11:24:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: D:\gitlab\create_project\链数中建一局_1752115931\crcl-open\src\main\java\com\yljr\crcl\limit\application\service\impl\UnitLimitByCompanyIdExportServiceImpl.java
2025-07-10 11:24:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: D:\gitlab\create_project\链数中建一局_1752115931\crcl-open\src\main\java\com\yljr\crcl\limit\interfaces\rest\UnitLimitByCompanyIdExportController.java
2025-07-10 11:24:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: D:\gitlab\create_project\链数中建一局_1752115931\crcl-open\src\main\java\com\yljr\crcl\limit\interfaces\rest\UnitLimitByCompanyIdExportController.java
2025-07-10 11:24:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: D:\gitlab\create_project\链数中建一局_1752115931\crcl-open\src\main\java\com\yljr\crcl\limit\application\service\UnitLimitByCompanyIdExportService.java
2025-07-10 11:24:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: D:\gitlab\create_project\链数中建一局_1752115931\crcl-open\src\main\java\com\yljr\crcl\limit\application\service\UnitLimitByCompanyIdExportService.java
2025-07-10 11:24:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: D:\gitlab\create_project\链数中建一局_1752115931\crcl-open\src\main\java\com\yljr\crcl\limit\interfaces\dto\UnitLimitByCompanyIdExportReq.java
2025-07-10 11:24:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: D:\gitlab\create_project\链数中建一局_1752115931\crcl-open\src\main\java\com\yljr\crcl\limit\interfaces\dto\UnitLimitByCompanyIdExportReq.java
2025-07-10 11:24:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: D:\gitlab\create_project\链数中建一局_1752115931\crcl-open\src\main\java\com\yljr\crcl\limit\interfaces\dto\UnitLimitByCompanyIdExportResp.java
2025-07-10 11:24:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: D:\gitlab\create_project\链数中建一局_1752115931\crcl-open\src\main\java\com\yljr\crcl\limit\interfaces\dto\UnitLimitByCompanyIdExportResp.java
2025-07-10 11:24:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: D:\gitlab\create_project\链数中建一局_1752115931\crcl-open\src\main\java\com\yljr\crcl\limit\domain\entity\UnitLimitByCompanyIdExportEntity.java
2025-07-10 11:24:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: D:\gitlab\create_project\链数中建一局_1752115931\crcl-open\src\main\java\com\yljr\crcl\limit\domain\entity\UnitLimitByCompanyIdExportEntity.java
2025-07-10 11:24:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: D:\gitlab\create_project\链数中建一局_1752115931\crcl-open\src\main\java\com\yljr\crcl\limit\domain\mapper\UnitLimitByCompanyIdExportMapper.java
2025-07-10 11:24:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: D:\gitlab\create_project\链数中建一局_1752115931\crcl-open\src\main\java\com\yljr\crcl\limit\domain\mapper\UnitLimitByCompanyIdExportMapper.java
2025-07-10 11:24:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📊 代码生成完成，共写入 7 个文件到项目中
2025-07-10 11:24:48 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_010 状态更新为 completed
2025-07-10 11:24:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 任务 task_010 执行成功
2025-07-10 11:24:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 第3轮执行完成，处理了 1 个任务
2025-07-10 11:24:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第4轮任务检查...
2025-07-10 11:24:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第4轮没有可执行的智能编码任务
2025-07-10 11:24:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 3 个任务，共4轮
2025-07-10 11:24:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 3 个任务
2025-07-10 11:24:49 - src.corder_integration.langgraph.workflow_orchestrator - WARNING - 没有识别到任何服务，结束编码流程
2025-07-10 11:24:49 - src.corder_integration.langgraph.workflow_orchestrator - INFO - 工作流执行成功: 链数中建一局_1752117791, 完成服务数: 0
2025-07-10 11:24:49 - api_server - INFO - ✅ POST coder_agent_api.process_design_document [200] (86.21s)
2025-07-10 11:24:49 - werkzeug - INFO - 127.0.0.1 - - [10/Jul/2025 11:24:49] "POST /api/coder-agent/process-document HTTP/1.1" 200 -
2025-07-10 13:43:39 - werkzeug - INFO -  * Detected change in 'D:\\ai_project\\document_analyzer\\src\\corder_integration\\langgraph\\workflow_orchestrator.py', reloading
2025-07-10 13:56:34 - system - INFO - ==================================================
2025-07-10 13:56:34 - system - INFO - 🚀 智能分析系统日志系统初始化完成
2025-07-10 13:56:34 - system - INFO - 📁 日志根目录: D:\ai_project\document_analyzer\logs
2025-07-10 13:56:34 - system - INFO - 📊 日志级别: INFO
2025-07-10 13:56:34 - system - INFO - 📅 按日期轮转: 每天午夜自动轮转
2025-07-10 13:56:34 - system - INFO - 📂 按月分目录: logs/YYYY-MM/
2025-07-10 13:56:34 - system - INFO - 📝 主日志: logs/2025-07/app.log
2025-07-10 13:56:34 - system - INFO - 🔧 API日志: logs/2025-07/api_server.log
2025-07-10 13:56:34 - system - INFO - 🧪 分析日志: logs/2025-07/analysis_service.log
2025-07-10 13:56:34 - system - INFO - ❌ 错误日志: logs/2025-07/error.log
2025-07-10 13:56:34 - system - INFO - 🗂️ 保留天数: 5 天
2025-07-10 13:56:34 - system - INFO - ==================================================
2025-07-10 13:56:44 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-10 13:56:44 - root - WARNING - 智能编码节点不可用: cannot import name 'IntelligentCodingAgent' from partially initialized module 'src.corder_integration.langgraph.nodes.intelligent_coding_node' (most likely due to a circular import) (D:\ai_project\document_analyzer\src\corder_integration\langgraph\nodes\intelligent_coding_node.py)
2025-07-10 13:56:44 - src.utils.task_storage - INFO - 数据库初始化成功
2025-07-10 13:56:44 - markdown_storage - INFO - Markdown存储管理器初始化完成
2025-07-10 13:56:44 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-10 13:56:44 - api_server - INFO - 从配置文件读取火山引擎配置: {'api_key': '7fcb3541-9363-4bfa-90aa-19e9f691bc25', 'endpoint': 'https://ark.cn-beijing.volces.com/api/v3', 'max_tokens': 4000, 'model': 'ep-20250605091804-wmw6w', 'temperature': 0.7}
2025-07-10 13:56:44 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-10 13:56:44 - api_server - INFO - 火山引擎客户端初始化成功
2025-07-10 13:56:44 - api_server - INFO - Weaviate配置: http://localhost:8080
2025-07-10 13:56:44 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-10 13:56:45 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-10 13:56:45 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-10 13:56:45 - WeaviateVectorDatabase - INFO - ✅ Weaviate连接成功: http://localhost:8080 (gRPC: 50051)
2025-07-10 13:56:45 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/schema/AnalyDesignDocuments "HTTP/1.1 200 OK"
2025-07-10 13:56:45 - WeaviateVectorDatabase - INFO - ✅ Weaviate集合已存在: AnalyDesignDocuments
2025-07-10 13:56:45 - AnalysisServiceManager - INFO - 初始化向量数据库: weaviate
2025-07-10 13:56:45 - sentence_transformers.SentenceTransformer - INFO - Use pytorch device_name: cpu
2025-07-10 13:56:45 - sentence_transformers.SentenceTransformer - INFO - Load pretrained SentenceTransformer: BAAI/bge-large-zh
2025-07-10 13:56:50 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-10 13:56:51 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-10 13:56:51 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-10 13:56:51 - src.utils.weaviate_helper - INFO - 成功连接到 Weaviate: localhost:8080
2025-07-10 13:56:51 - AnalysisServiceManager - INFO - 分析服务管理器初始化完成
2025-07-10 13:56:51 - api_server - INFO - 分析服务管理器初始化成功
2025-07-10 13:56:51 - api_server - INFO - 分析服务管理器已集成到API服务器
2025-07-10 13:56:51 - src.utils.enhanced_analyzer - INFO - 增强分析器初始化完成
2025-07-10 13:56:51 - api_server - INFO - 增强分析器初始化成功
2025-07-10 13:56:51 - api_server - INFO - 初始化任务存储数据库...
2025-07-10 13:56:51 - api_server - INFO - 任务存储数据库初始化成功
2025-07-10 13:56:51 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:8082
 * Running on http://26.26.26.1:8082
2025-07-10 13:56:51 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-07-10 13:56:51 - werkzeug - INFO -  * Restarting with stat
2025-07-10 13:56:52 - system - INFO - ==================================================
2025-07-10 13:56:52 - system - INFO - 🚀 智能分析系统日志系统初始化完成
2025-07-10 13:56:52 - system - INFO - 📁 日志根目录: D:\ai_project\document_analyzer\logs
2025-07-10 13:56:52 - system - INFO - 📊 日志级别: INFO
2025-07-10 13:56:52 - system - INFO - 📅 按日期轮转: 每天午夜自动轮转
2025-07-10 13:56:52 - system - INFO - 📂 按月分目录: logs/YYYY-MM/
2025-07-10 13:56:52 - system - INFO - 📝 主日志: logs/2025-07/app.log
2025-07-10 13:56:52 - system - INFO - 🔧 API日志: logs/2025-07/api_server.log
2025-07-10 13:56:52 - system - INFO - 🧪 分析日志: logs/2025-07/analysis_service.log
2025-07-10 13:56:52 - system - INFO - ❌ 错误日志: logs/2025-07/error.log
2025-07-10 13:56:52 - system - INFO - 🗂️ 保留天数: 5 天
2025-07-10 13:56:52 - system - INFO - ==================================================
2025-07-10 13:56:59 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-10 13:57:00 - root - WARNING - 智能编码节点不可用: cannot import name 'IntelligentCodingAgent' from partially initialized module 'src.corder_integration.langgraph.nodes.intelligent_coding_node' (most likely due to a circular import) (D:\ai_project\document_analyzer\src\corder_integration\langgraph\nodes\intelligent_coding_node.py)
2025-07-10 13:57:00 - src.utils.task_storage - INFO - 数据库初始化成功
2025-07-10 13:57:00 - markdown_storage - INFO - Markdown存储管理器初始化完成
2025-07-10 13:57:00 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-10 13:57:00 - api_server - INFO - 从配置文件读取火山引擎配置: {'api_key': '7fcb3541-9363-4bfa-90aa-19e9f691bc25', 'endpoint': 'https://ark.cn-beijing.volces.com/api/v3', 'max_tokens': 4000, 'model': 'ep-20250605091804-wmw6w', 'temperature': 0.7}
2025-07-10 13:57:00 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-10 13:57:00 - api_server - INFO - 火山引擎客户端初始化成功
2025-07-10 13:57:00 - api_server - INFO - Weaviate配置: http://localhost:8080
2025-07-10 13:57:00 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-10 13:57:01 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-10 13:57:01 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-10 13:57:01 - WeaviateVectorDatabase - INFO - ✅ Weaviate连接成功: http://localhost:8080 (gRPC: 50051)
2025-07-10 13:57:01 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/schema/AnalyDesignDocuments "HTTP/1.1 200 OK"
2025-07-10 13:57:01 - WeaviateVectorDatabase - INFO - ✅ Weaviate集合已存在: AnalyDesignDocuments
2025-07-10 13:57:01 - AnalysisServiceManager - INFO - 初始化向量数据库: weaviate
2025-07-10 13:57:01 - sentence_transformers.SentenceTransformer - INFO - Use pytorch device_name: cpu
2025-07-10 13:57:01 - sentence_transformers.SentenceTransformer - INFO - Load pretrained SentenceTransformer: BAAI/bge-large-zh
2025-07-10 13:57:06 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-10 13:57:07 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-10 13:57:07 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-10 13:57:07 - src.utils.weaviate_helper - INFO - 成功连接到 Weaviate: localhost:8080
2025-07-10 13:57:07 - AnalysisServiceManager - INFO - 分析服务管理器初始化完成
2025-07-10 13:57:07 - api_server - INFO - 分析服务管理器初始化成功
2025-07-10 13:57:07 - api_server - INFO - 分析服务管理器已集成到API服务器
2025-07-10 13:57:07 - src.utils.enhanced_analyzer - INFO - 增强分析器初始化完成
2025-07-10 13:57:07 - api_server - INFO - 增强分析器初始化成功
2025-07-10 13:57:07 - api_server - INFO - 初始化任务存储数据库...
2025-07-10 13:57:07 - api_server - INFO - 任务存储数据库初始化成功
2025-07-10 13:57:07 - werkzeug - WARNING -  * Debugger is active!
2025-07-10 13:57:07 - werkzeug - INFO -  * Debugger PIN: 887-537-592
2025-07-10 13:58:55 - src.apis.coder_agent_api - INFO - 开始处理文档: 链数中建一局_1752127134
2025-07-10 13:58:55 - src.apis.coder_agent_api - INFO - 文档长度: 4931 字符
2025-07-10 13:58:55 - src.apis.coder_agent_api - INFO - 使用LangGraph: True
2025-07-10 13:58:55 - src.apis.coder_agent_api - INFO - 代码输出路径: D:\gitlab\create_project
2025-07-10 13:58:55 - src.apis.coder_agent_api - INFO - 使用LangGraph工作流处理项目: 链数中建一局_1752127134
2025-07-10 13:58:55 - src.corder_integration.langgraph.workflow_orchestrator - INFO - 准备使用异步SQLite检查点: D:\ai_project\document_analyzer\workflow_checkpoints.db
2025-07-10 13:58:55 - src.corder_integration.langgraph.workflow_orchestrator - INFO - 生成目标分支名称: 链数中建一局_1752127134 -> D_20250710_链数中建一局_1752127134
2025-07-10 13:58:55 - src.corder_integration.langgraph.workflow_orchestrator - INFO - 开始执行编码工作流: 链数中建一局_1752127134 -> D:\gitlab\create_project
2025-07-10 13:58:55 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 🚀 开始执行任务拆分: 链数中建一局_1752127134
2025-07-10 13:58:55 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📥 输入状态键: ['design_doc', 'project_name', 'identified_services', 'service_dependencies', 'task_execution_plan', 'parallel_tasks', 'git_repo_url', 'target_branch', 'project_paths', 'output_path', 'repo_initialized', 'generated_services', 'generated_apis', 'generated_sql', 'service_interconnections', 'unit_test_results', 'test_coverage', 'interface_compatibility', 'code_review_results', 'static_analysis_results', 'security_scan_results', 'commit_hashes', 'push_results', 'pr_urls', 'current_phase', 'completed_services', 'failed_services', 'retry_count', 'execution_errors']
2025-07-10 13:58:55 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📄 设计文档长度: 4930
2025-07-10 13:58:55 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 🔄 当前阶段: task_splitting
2025-07-10 13:58:55 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📁 计算的基础项目路径: D:\gitlab\create_project/链数中建一局_1752127134
2025-07-10 13:58:55 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-10 13:58:55 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 模板 task_splitting/design_analysis_prompts.jinja2 加载成功
2025-07-10 13:58:55 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 模板 task_splitting/service_boundary_prompts.jinja2 加载成功
2025-07-10 13:58:55 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 模板 task_splitting/dependency_analysis_prompts.jinja2 加载成功
2025-07-10 13:58:55 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 模板 task_splitting/task_scheduling_prompts.jinja2 加载成功
2025-07-10 13:58:55 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 模板 task_splitting/generate_sqlite_tasks_prompts.jinja2 加载成功
2025-07-10 13:58:55 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 任务数据库初始化完成
2025-07-10 13:58:55 - src.corder_integration.langgraph.nodes.task_splitting_node - WARNING - ⚠️ 无法删除文件 coding_agent_workflow.db-wal，可能被其他进程占用
2025-07-10 13:58:55 - src.corder_integration.langgraph.nodes.task_splitting_node - WARNING - ⚠️ 无法删除文件 coding_agent_workflow.db-shm，可能被其他进程占用
2025-07-10 13:58:55 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 数据库WAL检查点和优化完成
2025-07-10 13:58:55 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 数据库表结构重置完成
2025-07-10 13:58:55 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📋 步骤1：开始设计文档分析...
2025-07-10 13:58:55 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📄 文档分割完成：4930 字符 -> 3 个窗口
2025-07-10 13:58:55 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📄 设计文档分割成 3 个窗口
2025-07-10 13:58:55 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 分析窗口 1/3 (字符: 0-1926)
2025-07-10 13:59:11 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-10 13:59:11 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 窗口 1 分析完成
2025-07-10 13:59:11 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 分析窗口 2/3 (字符: 1626-3553)
2025-07-10 13:59:23 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-10 13:59:23 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 窗口 2 分析完成
2025-07-10 13:59:23 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 分析窗口 3/3 (字符: 3253-4930)
2025-07-10 13:59:36 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-10 13:59:36 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 窗口 3 分析完成
2025-07-10 13:59:36 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 🔄 合并 3 个设计分析分析结果...
2025-07-10 13:59:36 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📊 合并后的设计分析结果: {'architecture_style': '微服务', 'technology_stack': ['MyBatis Plus 3.5.x', 'Redis 6.0', 'RESTful API', 'Redis', 'pageHelper', 'Spring Boot 2.7.x', 'PageHelper', 'Spring Cloud 2021.x', 'Nacos', 'Excel导出工具', 'RabbitMQ 3.8', 'MySQL 8.0', 'Spring Boot', 'MySQL'], 'functional_modules': [{'name': '用户服务', 'description': '负责用户管理、权限控制和角色管理', 'responsibilities': ['组织单元管理', '用户认证与授权']}, {'name': '确权开立服务', 'description': '处理业务数据的推送和校验逻辑', 'responsibilities': ['业务数据校验', '数据推送接口管理']}, {'name': '多组织单元管理', 'description': '管理组织单元的基本信息和状态', 'responsibilities': ['组织单元CRUD', '状态管理', '多平台类型支持']}, {'name': '确权开立服务', 'description': '处理确权开立和额度管理业务', 'responsibilities': ['额度分配', '额度查询', '业务类型管理']}, {'name': '额度管理模块', 'description': '处理组织单元额度的查询和导出功能', 'responsibilities': ['额度信息查询', '额度信息导出']}, {'name': '组织单元信息获取模块', 'description': '从用户服务获取组织单元详细信息', 'responsibilities': ['调用外部API获取组织单元信息']}], 'system_components': ['crcl-open', 'Service Discovery', 'Redis', 'API Gateway', 'zqyl-user-center-service', 'Database', 'MySQL'], 'data_flow': ['组织单元数据 -> 多组织单元管理服务 -> 数据库', '导出请求 -> crcl-open服务 -> 生成Excel文件 -> 返回文件下载地址', '组织单元额度数据查询与展示', '客户端请求 -> API Gateway -> 确权开立服务 -> 数据库', '客户端请求 -> crcl-open服务 -> 调用zqyl-user-center-service获取组织单元信息 -> 查询数据库获取额度信息 -> 处理数据并返回结果', '核心企业修改数据后重新推送至平台'], 'integration_points': ['企业系统与多组织单元管理的数据同步', 'crcl-open服务的/lsLimit/listUnitLimitByCompanyIdExport接口', '核心企业系统与链数平台的数据推送接口', '组织单元管理服务与确权开立服务的API集成', 'zqyl-user-center-service的/queryCompanyUnitList接口', '用户服务与确权开立服务间的数据交互'], 'summary': '该设计采用微服务架构，通过用户服务和确权开立服务实现松耦合。技术栈选型成熟，包含Spring Boot、MySQL和Redis等。主要调整了接口校验逻辑以支持数据重推，并新增组织单元额度管理功能。系统通过Nacos实现服务发现和配置管理，整体设计合理且可扩展。 该设计采用微服务架构，包含组织单元管理和确权开立两个核心服务。技术栈基于Spring Boot和MySQL，通过RESTful API进行'}
2025-07-10 13:59:36 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 设计概要: 该设计采用微服务架构，通过用户服务和确权开立服务实现松耦合。技术栈选型成熟，包含Spring Boot、MySQL和Redis等。主要调整了接口校验逻辑以支持数据重推，并新增组织单元额度管理功能。系统通过Nacos实现服务发现和配置管理，整体设计合理且可扩展。 该设计采用微服务架构，包含组织单元管理和确权开立两个核心服务。技术栈基于Spring Boot和MySQL，通过RESTful API进行
2025-07-10 13:59:36 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 🏗️ 步骤2：开始技术架构分析...
2025-07-10 13:59:36 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 技术架构概要: 该设计采用微服务架构，通过用户服务和确权开立服务实现松耦合。技术栈选型成熟，包含Spring Boot、MySQL和Redis等。主要调整了接口校验逻辑以支持数据重推，并新增组织单元额度管理功能。系统通过Nacos实现服务发现和配置管理，整体设计合理且可扩展。 该设计采用微服务架构，包含组织单元管理和确权开立两个核心服务。技术栈基于Spring Boot和MySQL，通过RESTful API进行
2025-07-10 13:59:36 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 🔍 步骤3：开始服务边界识别...
2025-07-10 13:59:36 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 输入 - 设计概要: 该设计采用微服务架构，通过用户服务和确权开立服务实现松耦合。技术栈选型成熟，包含Spring Boot、MySQL和Redis等。主要调整了接口校验逻辑以支持数据重推，并新增组织单元额度管理功能。系统通过Nacos实现服务发现和配置管理，整体设计合理且可扩展。 该设计采用微服务架构，包含组织单元管理和确权开立两个核心服务。技术栈基于Spring Boot和MySQL，通过RESTful API进行
2025-07-10 13:59:36 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 输入 - 架构概要: 该设计采用微服务架构，通过用户服务和确权开立服务实现松耦合。技术栈选型成熟，包含Spring Boot、MySQL和Redis等。主要调整了接口校验逻辑以支持数据重推，并新增组织单元额度管理功能。系统通过Nacos实现服务发现和配置管理，整体设计合理且可扩展。 该设计采用微服务架构，包含组织单元管理和确权开立两个核心服务。技术栈基于Spring Boot和MySQL，通过RESTful API进行
2025-07-10 13:59:36 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 服务拆分提示词长度: 2333
2025-07-10 13:59:47 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-10 13:59:47 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 服务拆分LLM响应长度: 975
2025-07-10 13:59:47 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📊 服务拆分解析结果: {'identified_services': [{'name': '用户服务', 'description': '处理用户相关功能的服务', 'git_repository': '', 'responsibilities': ['用户管理'], 'api_endpoints': [], 'database_tables': [], 'external_service_calls': [], 'config_requirements': []}, {'name': '确权开立服务', 'description': '处理确权开立相关功能的服务', 'git_repository': '', 'responsibilities': ['确权开立管理'], 'api_endpoints': [], 'database_tables': [], 'external_service_calls': [], 'config_requirements': []}, {'name': '组织单元管理服务', 'description': '处理组织单元额度管理的服务', 'git_repository': '', 'responsibilities': ['组织单元额度管理'], 'api_endpoints': [], 'database_tables': [], 'external_service_calls': [], 'config_requirements': []}], 'service_call_relationships': {'dependencies': []}, 'summary': '基于设计文档的服务分析概要，确认涉及3个服务（用户服务、确权开立服务、组织单元管理服务），0个新增接口，0个数据库表'}
2025-07-10 13:59:47 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 🎯 识别的服务列表: [{'name': '用户服务', 'description': '处理用户相关功能的服务', 'git_repository': '', 'responsibilities': ['用户管理'], 'api_endpoints': [], 'database_tables': [], 'external_service_calls': [], 'config_requirements': []}, {'name': '确权开立服务', 'description': '处理确权开立相关功能的服务', 'git_repository': '', 'responsibilities': ['确权开立管理'], 'api_endpoints': [], 'database_tables': [], 'external_service_calls': [], 'config_requirements': []}, {'name': '组织单元管理服务', 'description': '处理组织单元额度管理的服务', 'git_repository': '', 'responsibilities': ['组织单元额度管理'], 'api_endpoints': [], 'database_tables': [], 'external_service_calls': [], 'config_requirements': []}]
2025-07-10 13:59:47 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 🔢 识别的服务数量: 3
2025-07-10 13:59:47 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 服务拆分概要: 基于设计文档的服务分析概要，确认涉及3个服务（用户服务、确权开立服务、组织单元管理服务），0个新增接口，0个数据库表
2025-07-10 13:59:47 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 🌐 步骤4：开始依赖分析...
2025-07-10 13:59:47 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 依赖分析提示词长度: 2354
2025-07-10 14:00:12 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-10 14:00:12 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 依赖分析LLM响应长度: 2259
2025-07-10 14:00:12 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📊 依赖分析解析结果: {'service_dependencies': {'用户服务': {'database_dependencies': [{'database_type': 'MySQL', 'config_info': '用户信息存储', 'tables_needed': ['user_info'], 'description': '存储用户基本信息'}], 'api_call_dependencies': [], 'provides_apis': [{'endpoint': '/api/user/{userId}', 'used_by': ['确权开立服务']}]}, '组织单元管理服务': {'database_dependencies': [{'database_type': 'MySQL', 'config_info': '组织单元信息存储', 'tables_needed': ['org_unit'], 'description': '存储组织单元信息'}], 'api_call_dependencies': [], 'provides_apis': [{'endpoint': '/api/org-unit/{orgUnitId}', 'used_by': ['确权开立服务']}]}, '确权开立服务': {'database_dependencies': [{'database_type': 'MySQL', 'config_info': '确权信息存储', 'tables_needed': ['entitlement'], 'description': '存储确权开立信息'}], 'api_call_dependencies': [{'target_service': '用户服务', 'target_endpoint': '/api/user/{userId}', 'call_purpose': '获取用户信息', 'dependency_type': '强依赖'}, {'target_service': '组织单元管理服务', 'target_endpoint': '/api/org-unit/{orgUnitId}', 'call_purpose': '获取组织单元信息', 'dependency_type': '强依赖'}], 'provides_apis': []}}, 'development_order': [{'phase': 1, 'services': ['用户服务', '组织单元管理服务'], 'tasks': ['创建user_info表', '创建org_unit表', '实现用户信息查询接口', '实现组织单元信息查询接口'], 'reason': '确权开立服务强依赖这两个服务的接口'}, {'phase': 2, 'services': ['确权开立服务'], 'tasks': ['创建entitlement表', '实现确权开立业务逻辑', '调用用户服务和组织单元管理服务接口'], 'reason': '依赖第一阶段服务的接口'}], 'critical_path': ['用户服务 -> 确权开立服务', '组织单元管理服务 -> 确权开立服务'], 'parallel_development': [{'phase': '阶段1', 'parallel_services': ['用户服务', '组织单元管理服务'], 'reason': '这两个服务之间没有直接依赖关系'}], 'summary': '分析了3个服务的依赖关系，建议分2个阶段开发，关键路径为用户服务和组织单元管理服务到确权开立服务'}
2025-07-10 14:00:12 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 依赖分析概要: 分析了3个服务的依赖关系，建议分2个阶段开发，关键路径为用户服务和组织单元管理服务到确权开立服务
2025-07-10 14:00:12 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📅 步骤5：开始制定执行计划...
2025-07-10 14:00:12 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 任务调度提示词长度: 6252
2025-07-10 14:01:24 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-10 14:01:24 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 任务调度LLM响应长度: 6639
2025-07-10 14:01:24 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📊 执行计划解析结果: {'execution_phases': [{'phase_name': '基础设施搭建阶段', 'phase_order': 1, 'description': '搭建基础环境，包括数据库、配置中心和服务发现', 'estimated_duration': '2天', 'services_involved': ['全部服务'], 'task_categories': [{'category': 'database', 'description': '数据库基础设施', 'tasks': [{'task_name': '创建MySQL数据库实例', 'service': '基础设施', 'deliverable': '3个服务的数据库实例', 'estimated_hours': 4, 'prerequisites': [], 'assignee_role': 'DBA'}, {'task_name': '验证数据库连接配置', 'service': '全部服务', 'deliverable': '数据库连接测试报告', 'estimated_hours': 2, 'prerequisites': ['数据库实例创建'], 'assignee_role': '后端开发'}]}, {'category': 'config', 'description': '配置管理', 'tasks': [{'task_name': '部署Nacos配置中心', 'service': '基础设施', 'deliverable': 'Nacos服务可用', 'estimated_hours': 4, 'prerequisites': [], 'assignee_role': '运维工程师'}, {'task_name': '配置服务注册发现', 'service': '全部服务', 'deliverable': '服务注册成功', 'estimated_hours': 3, 'prerequisites': ['Nacos部署'], 'assignee_role': '后端开发'}]}], 'success_criteria': ['所有数据库实例可连接', 'Nacos配置中心可用', '服务注册发现功能正常'], 'parallel_execution': True}, {'phase_name': '核心服务开发阶段', 'phase_order': 2, 'description': '开发用户服务和组织单元管理服务，为确权开立服务做准备', 'estimated_duration': '5天', 'services_involved': ['用户服务', '组织单元管理服务'], 'task_categories': [{'category': 'business', 'description': '业务逻辑实现', 'tasks': [{'task_name': '用户服务核心逻辑开发', 'service': '用户服务', 'deliverable': '用户管理功能实现', 'estimated_hours': 16, 'prerequisites': ['数据库连接验证'], 'assignee_role': '后端开发'}, {'task_name': '组织单元额度管理开发', 'service': '组织单元管理服务', 'deliverable': '额度管理功能实现', 'estimated_hours': 20, 'prerequisites': ['数据库连接验证'], 'assignee_role': '后端开发'}]}, {'category': 'api', 'description': '内部API开发', 'tasks': [{'task_name': '用户服务内部API实现', 'service': '用户服务', 'deliverable': '内部API文档', 'estimated_hours': 8, 'prerequisites': ['用户服务核心逻辑'], 'assignee_role': '后端开发'}]}], 'success_criteria': ['用户服务功能测试通过', '组织单元管理服务功能测试通过', '内部API文档完成'], 'parallel_execution': True}, {'phase_name': '服务集成阶段', 'phase_order': 3, 'description': '开发确权开立服务并进行服务间集成', 'estimated_duration': '4天', 'services_involved': ['确权开立服务', '用户服务', '组织单元管理服务'], 'task_categories': [{'category': 'business', 'description': '确权服务开发', 'tasks': [{'task_name': '确权开立核心逻辑开发', 'service': '确权开立服务', 'deliverable': '确权功能实现', 'estimated_hours': 24, 'prerequisites': ['用户服务完成', '组织单元管理服务完成'], 'assignee_role': '后端开发'}]}, {'category': 'integration', 'description': '服务集成', 'tasks': [{'task_name': '用户服务集成测试', 'service': '确权开立服务', 'deliverable': '集成测试报告', 'estimated_hours': 8, 'prerequisites': ['确权核心逻辑完成'], 'assignee_role': '测试工程师'}]}], 'success_criteria': ['确权开立服务功能测试通过', '服务间调用测试通过', '数据一致性验证完成'], 'parallel_execution': False}, {'phase_name': '系统测试和部署阶段', 'phase_order': 4, 'description': '系统集成测试和生产环境部署', 'estimated_duration': '3天', 'services_involved': ['全部服务'], 'task_categories': [{'category': 'test', 'description': '系统测试', 'tasks': [{'task_name': '端到端测试', 'service': '全部服务', 'deliverable': 'E2E测试报告', 'estimated_hours': 12, 'prerequisites': ['服务集成完成'], 'assignee_role': '测试工程师'}]}, {'category': 'deployment', 'description': '生产部署', 'tasks': [{'task_name': '容器化部署', 'service': '全部服务', 'deliverable': '生产环境部署完成', 'estimated_hours': 8, 'prerequisites': ['E2E测试通过'], 'assignee_role': '运维工程师'}]}], 'success_criteria': ['系统测试覆盖率达标', '生产环境稳定运行', '监控告警系统正常'], 'parallel_execution': False}], 'parallel_groups': [{'group_name': '基础服务并行组', 'group_order': 1, 'services': ['用户服务', '组织单元管理服务'], 'estimated_duration': '5天', 'description': '两个基础服务可并行开发', 'coordination_points': ['数据库模型确认', '配置中心使用规范']}], 'execution_order': ['基础设施搭建', '用户服务开发(并行)', '组织单元管理服务开发(并行)', '确权开立服务开发', '服务集成测试', '系统测试', '生产部署'], 'resource_allocation': {'backend_developers': 3, 'test_engineers': 1, 'devops_engineers': 1, 'total_estimated_time': '14天'}, 'risk_management': {'critical_dependencies': [{'task': '组织单元管理服务', 'risk': '开发延期影响确权服务', 'mitigation': '优先保证该服务开发资源'}], 'buffer_time': '15%', 'contingency_plans': ['关键服务双人开发', '每日站会跟踪进度']}, 'summary': '项目分4个阶段实施，关键路径为用户服务和组织单元管理服务到确权开立服务，预计14天完成'}
2025-07-10 14:01:24 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 💾 步骤6：开始生成SQLite任务...
2025-07-10 14:01:24 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📄 执行计划较长(6633字符)，使用滑动窗口处理
2025-07-10 14:01:24 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📄 文档分割完成：6633 字符 -> 4 个窗口
2025-07-10 14:01:24 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 处理计划窗口 1/4
2025-07-10 14:03:46 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-10 14:03:46 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 窗口 1 任务生成完成
2025-07-10 14:03:46 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 处理计划窗口 2/4
2025-07-10 14:06:22 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-10 14:06:22 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 窗口 2 任务生成完成
2025-07-10 14:06:22 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 处理计划窗口 3/4
2025-07-10 14:09:06 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-10 14:09:06 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 窗口 3 任务生成完成
2025-07-10 14:09:06 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📝 处理计划窗口 4/4
2025-07-10 14:11:23 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-10 14:11:23 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 窗口 4 任务生成完成
2025-07-10 14:11:23 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 🔄 合并 4 个任务生成分析结果...
2025-07-10 14:11:23 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📊 任务生成解析结果: {'tasks': [{'task_id': 'task_001', 'service_name': '系统', 'task_type': 'git_extraction', 'priority': 1, 'dependencies': [], 'estimated_duration': '5分钟', 'description': '从设计文档提取GitLab仓库地址', 'implementation_details': '解析设计文档，提取用户服务 http://gitlab.local/ls/zqyl-user-center-service.git 和确权开立服务 http://gitlab.local/ls/crcl-open.git 仓库地址', 'deliverables': ['GitLab仓库地址清单', '仓库访问验证报告'], 'completion_criteria': '成功提取并验证两个GitLab仓库地址可访问性', 'parameters': {'repositories': ['zqyl-user-center-service', 'crcl-open']}}, {'task_id': 'task_002', 'service_name': '用户服务', 'task_type': 'git_clone', 'priority': 2, 'dependencies': ['task_001'], 'estimated_duration': '10分钟', 'description': '下载用户服务代码到D:\\gitlab\\create_project/链数中建一局_1752127134/zqyl-user-center-service', 'implementation_details': '使用git clone命令下载用户服务代码到指定目录，确保项目结构完整可编译', 'deliverables': ['用户服务源码目录'], 'completion_criteria': '代码下载完成，项目目录存在且包含pom.xml文件', 'parameters': {'git_url': 'http://gitlab.local/ls/zqyl-user-center-service.git', 'local_path': 'D:\\gitlab\\create_project/链数中建一局_1752127134/zqyl-user-center-service'}}, {'task_id': 'task_003', 'service_name': '确权开立服务', 'task_type': 'git_clone', 'priority': 2, 'dependencies': ['task_001'], 'estimated_duration': '10分钟', 'description': '下载确权开立服务代码到D:\\gitlab\\create_project/链数中建一局_1752127134/crcl-open', 'implementation_details': '使用git clone命令下载确权开立服务代码到指定目录，确保项目结构完整可编译', 'deliverables': ['确权开立服务源码目录'], 'completion_criteria': '代码下载完成，项目目录存在且包含pom.xml文件', 'parameters': {'git_url': 'http://gitlab.local/ls/crcl-open.git', 'local_path': 'D:\\gitlab\\create_project/链数中建一局_1752127134/crcl-open'}}, {'task_id': 'task_004', 'service_name': '用户服务', 'task_type': 'code_analysis', 'priority': 3, 'dependencies': ['task_002'], 'estimated_duration': '20分钟', 'description': '分析用户服务代码结构，确定MultiorgManageController添加位置', 'implementation_details': '分析项目package结构和controller层，找到或创建MultiorgManageController类的最佳位置', 'deliverables': ['代码结构从Controller层开始到数据获取的完整路径'], 'completion_criteria': '确定MultiorgManageController的包路径和文件位置，明确依赖的Service层结构', 'parameters': {'project_path': 'D:\\gitlab\\create_project/链数中建一局_1752127134/zqyl-user-center-service', 'target_controller': 'MultiorgManageController', 'target_api': '/general/multiorgManage/queryCompanyUnitList'}}, {'task_id': 'task_005', 'service_name': '确权开立服务', 'task_type': 'code_analysis', 'priority': 3, 'dependencies': ['task_003'], 'estimated_duration': '20分钟', 'description': '分析确权开立服务代码结构，确定LsLimitController添加位置', 'implementation_details': '分析项目package结构和controller层，找到或创建LsLimitController类的最佳位置，支持两个接口开发', 'deliverables': ['代码结构从Controller层开始到数据获取的完整路径', 'Feign客户端配置方案'], 'completion_criteria': '确定LsLimitController的包路径和文件位置，明确服务间调用的Feign配置', 'parameters': {'project_path': 'D:\\gitlab\\create_project/链数中建一局_1752127134/crcl-open', 'target_controller': 'LsLimitController', 'target_apis': ['/crcl-open-api/lsLimit/listUnitLimitByCompanyId', '/crcl-open-api/lsLimit/listUnitLimitByCompanyIdExport']}}, {'task_id': 'task_006', 'service_name': '用户服务', 'task_type': 'config', 'priority': 4, 'dependencies': ['task_004'], 'estimated_duration': '15分钟', 'description': '配置用户服务数据库连接：jdbc:mysql://localhost:6446/dbwebappdb', 'implementation_details': '修改application.yml文件，配置数据库连接信息包括URL、用户名密码和连接池设置', 'deliverables': ['数据库配置文件', '连接测试报告'], 'completion_criteria': 'application.yml文件已更新，数据库连接配置正确且可连通', 'parameters': {'config_file': 'D:\\gitlab\\create_project/链数中建一局_1752127134/zqyl-user-center-service/src/main/resources/application.yml', 'database_url': 'jdbc:mysql://localhost:6446/dbwebappdb?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC&characterEncoding=utf8&useUnicode=true', 'username': 'dbwebapp', 'password': 'dbwebapp'}}, {'task_id': 'task_007', 'service_name': '用户服务', 'task_type': 'database', 'priority': 5, 'dependencies': ['task_006'], 'estimated_duration': '15分钟', 'description': '创建t_cust_multiorg_unit表，包含id,company_id,unit_code,unit_name等字段', 'implementation_details': '编写建表SQL脚本，定义主键、索引和字段约束，创建对应的Entity和Mapper文件', 'deliverables': ['建表SQL脚本', 'Entity实体类', 'Mapper接口文件'], 'completion_criteria': '表结构创建成功，Entity和Mapper文件可正常编译，支持基本CRUD操作', 'parameters': {'table_name': 't_cust_multiorg_unit', 'sql_location': 'src/main/resources/sql/t_cust_multiorg_unit.sql'}}, {'task_id': 'task_008', 'service_name': '用户服务', 'task_type': 'api', 'priority': 6, 'dependencies': ['task_007'], 'estimated_duration': '60分钟', 'description': '实现GET /general/multiorgManage/queryCompanyUnitList接口', 'implementation_details': '在MultiorgManageController中实现查询接口，支持条件查询和分页，返回规定的字段格式', 'deliverables': ['MultiorgManageController类', 'Service业务逻辑层', '接口文档'], 'completion_criteria': '接口可正常访问，返回数据格式符合规范，支持条件查询和分页功能', 'parameters': {'project_path': 'D:\\gitlab\\create_project/链数中建一局_1752127134/zqyl-user-center-service', 'api_path': '/general/multiorgManage/queryCompanyUnitList', 'http_method': 'GET', 'content_type': 'application/json', 'request_params': {'unitCode': '组织单元编码(可选)', 'openStatus': '开通状态(可选)', 'unitList': '组织单元列表(可选)'}, 'response_params': {'unitId': '组织单元ID', 'unitTypeDicType': '组织单元类型字典类型', 'unitTypeId': '组织单元类型ID', 'openStatus': '开通状态', 'unitCode': '组织单元编码', 'unitName': '组织单元名称'}, 'business_logic': '根据查询条件查询组织单元信息，支持按编码、状态等条件筛选', 'data_source': 't_cust_multiorg_unit表', 'validation_rules': {'unitCode': '长度不超过50字符', 'openStatus': '取值范围0-1'}}}, {'task_id': 'task_009', 'service_name': '确权开立服务', 'task_type': 'api', 'priority': 7, 'dependencies': ['task_008'], 'estimated_duration': '90分钟', 'description': '实现GET /crcl-open-api/lsLimit/listUnitLimitByCompanyId接口，调用用户服务', 'implementation_details': '在LsLimitController中实现额度查询接口，配置Feign客户端调用用户服务接口获取组织单元信息', 'deliverables': ['LsLimitController类', 'Feign客户端配置', '业务逻辑层'], 'completion_criteria': '接口可正常访问，能成功调用用户服务，返回额度数据格式正确', 'parameters': {'project_path': 'D:\\gitlab\\create_project/链数中建一局_1752127134/crcl-open', 'api_path': '/crcl-open-api/lsLimit/listUnitLimitByCompanyId', 'http_method': 'GET', 'content_type': 'application/json', 'request_params': {'gwCompanyId': '公司ID(必填)', 'unitName': '组织单元名称(可选)', 'limitSource': '额度来源(可选)', 'bizType': '业务类型(必填)', 'page': '页码(可选,默认1)', 'pageRow': '每页行数(可选,默认10)'}, 'response_params': {'totalLimitAmt': '总额度金额', 'usedLimitAmt': '已用额度金额', 'usableLimitAmt': '可用额度金额', 'unitLimitListDetail': '单元额度详情列表'}, 'business_logic': '根据公司ID和筛选条件查询组织单元额度信息，调用用户服务获取组织单元基础信息', 'data_source': '本地额度表 + 用户服务接口', 'external_call': '/general/multiorgManage/queryCompanyUnitList', 'validation_rules': {'gwCompanyId': '必填，数值类型', 'bizType': '必填，业务类型枚举值', 'page': '正整数，默认1', 'pageRow': '正整数，范围1-100'}}}, {'task_id': 'task_010', 'service_name': '确权开立服务', 'task_type': 'api', 'priority': 8, 'dependencies': ['task_009'], 'estimated_duration': '45分钟', 'description': '实现GET /crcl-open-api/lsLimit/listUnitLimitByCompanyIdExport导出接口', 'implementation_details': '在LsLimitController中实现Excel导出接口，复用listUnitLimitByCompanyId的数据逻辑', 'deliverables': ['导出接口方法', 'Excel工具类', '导出模板文件'], 'completion_criteria': '接口可正常访问，能成功导出Excel文件，表头和数据格式正确', 'parameters': {'project_path': 'D:\\gitlab\\create_project/链数中建一局_1752127134/crcl-open', 'api_path': '/crcl-open-api/lsLimit/listUnitLimitByCompanyIdExport', 'http_method': 'GET', 'content_type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'request_params': {'gwCompanyId': '公司ID(必填)', 'unitName': '组织单元名称(可选)', 'limitSource': '额度来源(可选)', 'bizType': '业务类型(必填)'}, 'response_params': {'file': 'Excel文件流', 'filename': '导出文件名', 'contentType': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'}, 'business_logic': '复用listUnitLimitByCompanyId接口的查询逻辑，将结果导出为Excel格式', 'data_source': '调用listUnitLimitByCompanyId接口获取数据', 'export_format': 'xlsx', 'export_headers': ['组织单元名称', '额度名称', '额度类型', '已分配额度', '已用额度', '可用额度'], 'validation_rules': {'gwCompanyId': '必填，数值类型', 'bizType': '必填，业务类型枚举值'}}}, {'task_id': 'task_011', 'service_name': '系统', 'task_type': 'integration_test', 'priority': 9, 'dependencies': ['task_008', 'task_009', 'task_010'], 'estimated_duration': '30分钟', 'description': '测试确权开立服务调用用户服务接口的完整流程', 'implementation_details': '编写集成测试用例，验证服务间调用正确性和数据完整性', 'deliverables': ['集成测试用例', '测试数据脚本', '测试报告'], 'completion_criteria': '所有测试用例通过，接口调用链路正常，数据返回格式正确', 'parameters': {'test_scenarios': ['组织单元额度查询测试'], 'test_data': {'gwCompanyId': 1, 'unitName': '测试单元', 'bizType': 80}}}, {'task_id': 'task_012', 'service_name': '系统', 'task_type': 'deployment', 'priority': 10, 'dependencies': ['task_011'], 'estimated_duration': '20分钟', 'description': '提交代码到GitLab仓库，commit message: feat: 新增组织单元额度管理功能', 'implementation_details': '执行git add、git commit和git push命令，提交所有新增和修改的代码文件', 'deliverables': ['Git提交记录', '代码合并报告', '部署文档'], 'completion_criteria': '代码成功提交到GitLab仓库，commit信息清晰，无冲突', 'parameters': {'repositories': [{'path': 'D:\\gitlab\\create_project/链数中建一局_1752127134/zqyl-user-center-service', 'changes': '新增组织单元查询接口'}, {'path': 'D:\\gitlab\\create_project/链数中建一局_1752127134/crcl-open', 'changes': '新增组织单元额度列表和导出接口'}]}}], 'total_tasks': 12, 'summary': '生成12个任务：GitLab代码下载->结构分析->环境配置->接口开发->测试部署。严格使用设计文档中的真实接口路径和参数，确保先开发用户服务接口，再开发依赖它的确权开立服务接口。 生成12个任务：GitLab代码下载->结构分析->环境配置->接口开发->测试部署。严格使用设计文档中的真实接口路径和参数，确保先开发用户服务接口，再开发依赖它的确权开立服务接口。 生成12个任务：GitLab代码'}
2025-07-10 14:11:23 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 🎯 生成的任务列表: [{'task_id': 'task_001', 'service_name': '系统', 'task_type': 'git_extraction', 'priority': 1, 'dependencies': [], 'estimated_duration': '5分钟', 'description': '从设计文档提取GitLab仓库地址', 'implementation_details': '解析设计文档，提取用户服务 http://gitlab.local/ls/zqyl-user-center-service.git 和确权开立服务 http://gitlab.local/ls/crcl-open.git 仓库地址', 'deliverables': ['GitLab仓库地址清单', '仓库访问验证报告'], 'completion_criteria': '成功提取并验证两个GitLab仓库地址可访问性', 'parameters': {'repositories': ['zqyl-user-center-service', 'crcl-open']}}, {'task_id': 'task_002', 'service_name': '用户服务', 'task_type': 'git_clone', 'priority': 2, 'dependencies': ['task_001'], 'estimated_duration': '10分钟', 'description': '下载用户服务代码到D:\\gitlab\\create_project/链数中建一局_1752127134/zqyl-user-center-service', 'implementation_details': '使用git clone命令下载用户服务代码到指定目录，确保项目结构完整可编译', 'deliverables': ['用户服务源码目录'], 'completion_criteria': '代码下载完成，项目目录存在且包含pom.xml文件', 'parameters': {'git_url': 'http://gitlab.local/ls/zqyl-user-center-service.git', 'local_path': 'D:\\gitlab\\create_project/链数中建一局_1752127134/zqyl-user-center-service'}}, {'task_id': 'task_003', 'service_name': '确权开立服务', 'task_type': 'git_clone', 'priority': 2, 'dependencies': ['task_001'], 'estimated_duration': '10分钟', 'description': '下载确权开立服务代码到D:\\gitlab\\create_project/链数中建一局_1752127134/crcl-open', 'implementation_details': '使用git clone命令下载确权开立服务代码到指定目录，确保项目结构完整可编译', 'deliverables': ['确权开立服务源码目录'], 'completion_criteria': '代码下载完成，项目目录存在且包含pom.xml文件', 'parameters': {'git_url': 'http://gitlab.local/ls/crcl-open.git', 'local_path': 'D:\\gitlab\\create_project/链数中建一局_1752127134/crcl-open'}}, {'task_id': 'task_004', 'service_name': '用户服务', 'task_type': 'code_analysis', 'priority': 3, 'dependencies': ['task_002'], 'estimated_duration': '20分钟', 'description': '分析用户服务代码结构，确定MultiorgManageController添加位置', 'implementation_details': '分析项目package结构和controller层，找到或创建MultiorgManageController类的最佳位置', 'deliverables': ['代码结构从Controller层开始到数据获取的完整路径'], 'completion_criteria': '确定MultiorgManageController的包路径和文件位置，明确依赖的Service层结构', 'parameters': {'project_path': 'D:\\gitlab\\create_project/链数中建一局_1752127134/zqyl-user-center-service', 'target_controller': 'MultiorgManageController', 'target_api': '/general/multiorgManage/queryCompanyUnitList'}}, {'task_id': 'task_005', 'service_name': '确权开立服务', 'task_type': 'code_analysis', 'priority': 3, 'dependencies': ['task_003'], 'estimated_duration': '20分钟', 'description': '分析确权开立服务代码结构，确定LsLimitController添加位置', 'implementation_details': '分析项目package结构和controller层，找到或创建LsLimitController类的最佳位置，支持两个接口开发', 'deliverables': ['代码结构从Controller层开始到数据获取的完整路径', 'Feign客户端配置方案'], 'completion_criteria': '确定LsLimitController的包路径和文件位置，明确服务间调用的Feign配置', 'parameters': {'project_path': 'D:\\gitlab\\create_project/链数中建一局_1752127134/crcl-open', 'target_controller': 'LsLimitController', 'target_apis': ['/crcl-open-api/lsLimit/listUnitLimitByCompanyId', '/crcl-open-api/lsLimit/listUnitLimitByCompanyIdExport']}}, {'task_id': 'task_006', 'service_name': '用户服务', 'task_type': 'config', 'priority': 4, 'dependencies': ['task_004'], 'estimated_duration': '15分钟', 'description': '配置用户服务数据库连接：jdbc:mysql://localhost:6446/dbwebappdb', 'implementation_details': '修改application.yml文件，配置数据库连接信息包括URL、用户名密码和连接池设置', 'deliverables': ['数据库配置文件', '连接测试报告'], 'completion_criteria': 'application.yml文件已更新，数据库连接配置正确且可连通', 'parameters': {'config_file': 'D:\\gitlab\\create_project/链数中建一局_1752127134/zqyl-user-center-service/src/main/resources/application.yml', 'database_url': 'jdbc:mysql://localhost:6446/dbwebappdb?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC&characterEncoding=utf8&useUnicode=true', 'username': 'dbwebapp', 'password': 'dbwebapp'}}, {'task_id': 'task_007', 'service_name': '用户服务', 'task_type': 'database', 'priority': 5, 'dependencies': ['task_006'], 'estimated_duration': '15分钟', 'description': '创建t_cust_multiorg_unit表，包含id,company_id,unit_code,unit_name等字段', 'implementation_details': '编写建表SQL脚本，定义主键、索引和字段约束，创建对应的Entity和Mapper文件', 'deliverables': ['建表SQL脚本', 'Entity实体类', 'Mapper接口文件'], 'completion_criteria': '表结构创建成功，Entity和Mapper文件可正常编译，支持基本CRUD操作', 'parameters': {'table_name': 't_cust_multiorg_unit', 'sql_location': 'src/main/resources/sql/t_cust_multiorg_unit.sql'}}, {'task_id': 'task_008', 'service_name': '用户服务', 'task_type': 'api', 'priority': 6, 'dependencies': ['task_007'], 'estimated_duration': '60分钟', 'description': '实现GET /general/multiorgManage/queryCompanyUnitList接口', 'implementation_details': '在MultiorgManageController中实现查询接口，支持条件查询和分页，返回规定的字段格式', 'deliverables': ['MultiorgManageController类', 'Service业务逻辑层', '接口文档'], 'completion_criteria': '接口可正常访问，返回数据格式符合规范，支持条件查询和分页功能', 'parameters': {'project_path': 'D:\\gitlab\\create_project/链数中建一局_1752127134/zqyl-user-center-service', 'api_path': '/general/multiorgManage/queryCompanyUnitList', 'http_method': 'GET', 'content_type': 'application/json', 'request_params': {'unitCode': '组织单元编码(可选)', 'openStatus': '开通状态(可选)', 'unitList': '组织单元列表(可选)'}, 'response_params': {'unitId': '组织单元ID', 'unitTypeDicType': '组织单元类型字典类型', 'unitTypeId': '组织单元类型ID', 'openStatus': '开通状态', 'unitCode': '组织单元编码', 'unitName': '组织单元名称'}, 'business_logic': '根据查询条件查询组织单元信息，支持按编码、状态等条件筛选', 'data_source': 't_cust_multiorg_unit表', 'validation_rules': {'unitCode': '长度不超过50字符', 'openStatus': '取值范围0-1'}}}, {'task_id': 'task_009', 'service_name': '确权开立服务', 'task_type': 'api', 'priority': 7, 'dependencies': ['task_008'], 'estimated_duration': '90分钟', 'description': '实现GET /crcl-open-api/lsLimit/listUnitLimitByCompanyId接口，调用用户服务', 'implementation_details': '在LsLimitController中实现额度查询接口，配置Feign客户端调用用户服务接口获取组织单元信息', 'deliverables': ['LsLimitController类', 'Feign客户端配置', '业务逻辑层'], 'completion_criteria': '接口可正常访问，能成功调用用户服务，返回额度数据格式正确', 'parameters': {'project_path': 'D:\\gitlab\\create_project/链数中建一局_1752127134/crcl-open', 'api_path': '/crcl-open-api/lsLimit/listUnitLimitByCompanyId', 'http_method': 'GET', 'content_type': 'application/json', 'request_params': {'gwCompanyId': '公司ID(必填)', 'unitName': '组织单元名称(可选)', 'limitSource': '额度来源(可选)', 'bizType': '业务类型(必填)', 'page': '页码(可选,默认1)', 'pageRow': '每页行数(可选,默认10)'}, 'response_params': {'totalLimitAmt': '总额度金额', 'usedLimitAmt': '已用额度金额', 'usableLimitAmt': '可用额度金额', 'unitLimitListDetail': '单元额度详情列表'}, 'business_logic': '根据公司ID和筛选条件查询组织单元额度信息，调用用户服务获取组织单元基础信息', 'data_source': '本地额度表 + 用户服务接口', 'external_call': '/general/multiorgManage/queryCompanyUnitList', 'validation_rules': {'gwCompanyId': '必填，数值类型', 'bizType': '必填，业务类型枚举值', 'page': '正整数，默认1', 'pageRow': '正整数，范围1-100'}}}, {'task_id': 'task_010', 'service_name': '确权开立服务', 'task_type': 'api', 'priority': 8, 'dependencies': ['task_009'], 'estimated_duration': '45分钟', 'description': '实现GET /crcl-open-api/lsLimit/listUnitLimitByCompanyIdExport导出接口', 'implementation_details': '在LsLimitController中实现Excel导出接口，复用listUnitLimitByCompanyId的数据逻辑', 'deliverables': ['导出接口方法', 'Excel工具类', '导出模板文件'], 'completion_criteria': '接口可正常访问，能成功导出Excel文件，表头和数据格式正确', 'parameters': {'project_path': 'D:\\gitlab\\create_project/链数中建一局_1752127134/crcl-open', 'api_path': '/crcl-open-api/lsLimit/listUnitLimitByCompanyIdExport', 'http_method': 'GET', 'content_type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'request_params': {'gwCompanyId': '公司ID(必填)', 'unitName': '组织单元名称(可选)', 'limitSource': '额度来源(可选)', 'bizType': '业务类型(必填)'}, 'response_params': {'file': 'Excel文件流', 'filename': '导出文件名', 'contentType': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'}, 'business_logic': '复用listUnitLimitByCompanyId接口的查询逻辑，将结果导出为Excel格式', 'data_source': '调用listUnitLimitByCompanyId接口获取数据', 'export_format': 'xlsx', 'export_headers': ['组织单元名称', '额度名称', '额度类型', '已分配额度', '已用额度', '可用额度'], 'validation_rules': {'gwCompanyId': '必填，数值类型', 'bizType': '必填，业务类型枚举值'}}}, {'task_id': 'task_011', 'service_name': '系统', 'task_type': 'integration_test', 'priority': 9, 'dependencies': ['task_008', 'task_009', 'task_010'], 'estimated_duration': '30分钟', 'description': '测试确权开立服务调用用户服务接口的完整流程', 'implementation_details': '编写集成测试用例，验证服务间调用正确性和数据完整性', 'deliverables': ['集成测试用例', '测试数据脚本', '测试报告'], 'completion_criteria': '所有测试用例通过，接口调用链路正常，数据返回格式正确', 'parameters': {'test_scenarios': ['组织单元额度查询测试'], 'test_data': {'gwCompanyId': 1, 'unitName': '测试单元', 'bizType': 80}}}, {'task_id': 'task_012', 'service_name': '系统', 'task_type': 'deployment', 'priority': 10, 'dependencies': ['task_011'], 'estimated_duration': '20分钟', 'description': '提交代码到GitLab仓库，commit message: feat: 新增组织单元额度管理功能', 'implementation_details': '执行git add、git commit和git push命令，提交所有新增和修改的代码文件', 'deliverables': ['Git提交记录', '代码合并报告', '部署文档'], 'completion_criteria': '代码成功提交到GitLab仓库，commit信息清晰，无冲突', 'parameters': {'repositories': [{'path': 'D:\\gitlab\\create_project/链数中建一局_1752127134/zqyl-user-center-service', 'changes': '新增组织单元查询接口'}, {'path': 'D:\\gitlab\\create_project/链数中建一局_1752127134/crcl-open', 'changes': '新增组织单元额度列表和导出接口'}]}}]
2025-07-10 14:11:23 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 🔢 生成的任务数量: 12
2025-07-10 14:11:23 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 已保存 12 个任务到数据库
2025-07-10 14:11:23 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 已生成并保存 12 个任务到数据库
2025-07-10 14:11:23 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📤 最终服务列表: ['用户服务', '确权开立服务', '组织单元管理服务']
2025-07-10 14:11:23 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📤 生成并行任务批次: [{'batch_id': 'batch_1', 'services': ['用户服务', '确权开立服务', '组织单元管理服务'], 'dependencies': []}]
2025-07-10 14:11:23 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📤 输出状态键: ['design_doc', 'project_name', 'identified_services', 'service_dependencies', 'task_execution_plan', 'parallel_tasks', 'git_repo_url', 'target_branch', 'project_paths', 'output_path', 'repo_initialized', 'generated_services', 'generated_apis', 'generated_sql', 'service_interconnections', 'unit_test_results', 'test_coverage', 'interface_compatibility', 'code_review_results', 'static_analysis_results', 'security_scan_results', 'commit_hashes', 'push_results', 'pr_urls', 'current_phase', 'completed_services', 'failed_services', 'retry_count', 'execution_errors', 'generated_tasks']
2025-07-10 14:11:23 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📤 输出 - 识别服务: ['用户服务', '确权开立服务', '组织单元管理服务']
2025-07-10 14:11:23 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - 📤 输出 - 当前阶段: intelligent_coding
2025-07-10 14:11:23 - src.corder_integration.langgraph.nodes.task_splitting_node - INFO - ✅ 任务拆分完成，识别 3 个服务，生成 12 个任务
2025-07-10 14:11:23 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🚀 Git管理节点开始执行...
2025-07-10 14:11:23 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 14:11:23 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🎯 git_management_node 开始执行任务...
2025-07-10 14:11:23 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 📋 找到 1 个可执行任务
2025-07-10 14:11:23 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🚀 开始执行任务: task_001 (git_extraction)
2025-07-10 14:11:23 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_001 已被 git_management_node 领取
2025-07-10 14:11:23 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🔍 执行Git提取任务: task_001
2025-07-10 14:11:23 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 📄 提取源文本: 解析设计文档，提取用户服务 http://gitlab.local/ls/zqyl-user-center-service.git 和确权开立服务 http://gitlab.local/ls/crcl-open.git 仓库地址 从设计文档提取GitLab仓库地址...
2025-07-10 14:11:23 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🔍 开始从文本提取Git URL...
2025-07-10 14:11:23 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🔗 找到Git仓库: http://gitlab.local/ls/zqyl-user-center-service.git
2025-07-10 14:11:23 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🔗 找到Git仓库: http://gitlab.local/ls/crcl-open.git
2025-07-10 14:11:23 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 提取到 2 个Git仓库
2025-07-10 14:11:23 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_001 状态更新为 completed
2025-07-10 14:11:23 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 任务 task_001 执行成功
2025-07-10 14:11:23 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ Git管理任务执行完成，共处理 1 个任务
2025-07-10 14:11:23 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 🚀 基于提取结果自动克隆 2 个仓库...
2025-07-10 14:11:23 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 📥 自动克隆仓库: http://gitlab.local/ls/zqyl-user-center-service.git -> D:\gitlab\create_project/链数中建一局_1752127134/zqyl-user-center-service
2025-07-10 14:11:23 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 📥 开始克隆仓库: http://gitlab.local/ls/zqyl-user-center-service.git -> D:\gitlab\create_project/链数中建一局_1752127134/zqyl-user-center-service
2025-07-10 14:11:26 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 已切换到分支: master
2025-07-10 14:11:26 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 仓库克隆成功: D:\gitlab\create_project/链数中建一局_1752127134/zqyl-user-center-service
2025-07-10 14:11:26 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 自动克隆成功: zqyl-user-center-service
2025-07-10 14:11:26 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 已标记任务 task_002 为完成状态
2025-07-10 14:11:26 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 📥 自动克隆仓库: http://gitlab.local/ls/crcl-open.git -> D:\gitlab\create_project/链数中建一局_1752127134/crcl-open
2025-07-10 14:11:26 - src.corder_integration.langgraph.nodes.git_management_node - INFO - 📥 开始克隆仓库: http://gitlab.local/ls/crcl-open.git -> D:\gitlab\create_project/链数中建一局_1752127134/crcl-open
2025-07-10 14:11:28 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 已切换到分支: master
2025-07-10 14:11:28 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 仓库克隆成功: D:\gitlab\create_project/链数中建一局_1752127134/crcl-open
2025-07-10 14:11:28 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 自动克隆成功: crcl-open
2025-07-10 14:11:28 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ 已标记任务 task_003 为完成状态
2025-07-10 14:11:28 - src.corder_integration.langgraph.nodes.git_management_node - INFO - ✅ Git管理节点完成 - 提取: 2 个仓库, 克隆: 2 个仓库, 仓库初始化状态: True
2025-07-10 14:11:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 14:11:28 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 14:11:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-10 14:11:29 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-10 14:11:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-10 14:11:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-10 14:11:29 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 14:11:29 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-10 14:11:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 14:11:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 14:11:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 14:11:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 第1轮找到 2 个可执行任务
2025-07-10 14:11:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 开始执行任务: task_004 (code_analysis)
2025-07-10 14:11:29 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_004 已被 intelligent_coding_node 领取
2025-07-10 14:11:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行代码分析任务: task_004
2025-07-10 14:11:29 - src.utils.java_code_analyzer - INFO - 🔍 开始分析企业级Java项目: D:\gitlab\create_project/链数中建一局_1752127134/zqyl-user-center-service
2025-07-10 14:11:29 - src.utils.java_code_analyzer - INFO - ✅ 企业级项目分析完成，共分析 29 个Java文件
2025-07-10 14:11:29 - src.utils.java_code_analyzer - INFO - 📄 企业级分析报告已导出: outputs\用户服务_java_analysis_20250710_141129.md
2025-07-10 14:11:29 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_004 状态更新为 completed
2025-07-10 14:11:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 任务 task_004 执行成功
2025-07-10 14:11:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 开始执行任务: task_005 (code_analysis)
2025-07-10 14:11:29 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_005 已被 intelligent_coding_node 领取
2025-07-10 14:11:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行代码分析任务: task_005
2025-07-10 14:11:29 - src.utils.java_code_analyzer - INFO - 🔍 开始分析企业级Java项目: D:\gitlab\create_project/链数中建一局_1752127134/crcl-open
2025-07-10 14:11:39 - src.utils.java_code_analyzer - INFO - ✅ 企业级项目分析完成，共分析 2262 个Java文件
2025-07-10 14:11:40 - src.utils.java_code_analyzer - INFO - 📄 企业级分析报告已导出: outputs\确权开立服务_java_analysis_20250710_141139.md
2025-07-10 14:11:40 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_005 状态更新为 completed
2025-07-10 14:11:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 任务 task_005 执行成功
2025-07-10 14:11:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 第1轮执行完成，处理了 2 个任务
2025-07-10 14:11:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第2轮任务检查...
2025-07-10 14:11:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 第2轮找到 1 个可执行任务
2025-07-10 14:11:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 开始执行任务: task_006 (config)
2025-07-10 14:11:41 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_006 已被 intelligent_coding_node 领取
2025-07-10 14:11:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ⚙️ 执行配置生成任务: task_006
2025-07-10 14:11:41 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_006 状态更新为 completed
2025-07-10 14:11:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 任务 task_006 执行成功
2025-07-10 14:11:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 第2轮执行完成，处理了 1 个任务
2025-07-10 14:11:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第3轮任务检查...
2025-07-10 14:11:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 第3轮找到 1 个可执行任务
2025-07-10 14:11:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 开始执行任务: task_007 (database)
2025-07-10 14:11:41 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_007 已被 intelligent_coding_node 领取
2025-07-10 14:11:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🗄️ 执行数据库设计任务: task_007
2025-07-10 14:11:41 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_007 状态更新为 completed
2025-07-10 14:11:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 任务 task_007 执行成功
2025-07-10 14:11:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 第3轮执行完成，处理了 1 个任务
2025-07-10 14:11:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第4轮任务检查...
2025-07-10 14:11:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 第4轮找到 1 个可执行任务
2025-07-10 14:11:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 开始执行任务: task_008 (api)
2025-07-10 14:11:41 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_008 已被 intelligent_coding_node 领取
2025-07-10 14:11:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🌐 执行API接口生成任务: task_008
2025-07-10 14:11:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 解析的接口信息:
2025-07-10 14:11:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 接口名称: CompanyUnitList
2025-07-10 14:11:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - API路径: /general/multiorgManage/queryCompanyUnitList
2025-07-10 14:11:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - HTTP方法: GET
2025-07-10 14:11:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 输入参数: 3个
2025-07-10 14:11:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 输出参数: 6个
2025-07-10 14:11:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 业务描述: 根据查询条件查询组织单元信息，支持按编码、状态等条件筛选
2025-07-10 14:11:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 在 D:\gitlab\create_project/链数中建一局_1752127134/zqyl-user-center-service 中查找最佳Java项目路径...
2025-07-10 14:11:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 目标服务名: 用户服务
2025-07-10 14:11:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📐 中等深度结构 (深度7) -> +100
2025-07-10 14:11:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📦 服务模块匹配: basic-service -> +80
2025-07-10 14:11:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📦 服务模块匹配: user-basic-service -> +80
2025-07-10 14:11:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📦 服务模块匹配: basic-general -> +80
2025-07-10 14:11:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📦 服务模块匹配: user-basic-general -> +80
2025-07-10 14:11:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📦 服务模块匹配: service -> +80
2025-07-10 14:11:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    🏢 业务域匹配: user -> +50
2025-07-10 14:11:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    🏢 业务域匹配: basic -> +50
2025-07-10 14:11:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    🏢 业务域匹配: general -> +50
2025-07-10 14:11:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    🏗️ 架构层级匹配: application -> +30
2025-07-10 14:11:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 发现Java项目: user-basic-general
2025-07-10 14:11:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       🎯 相对路径: user-basic-service\user-basic-general
2025-07-10 14:11:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       📊 Java文件: 29个
2025-07-10 14:11:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       📐 目录深度: 2
2025-07-10 14:11:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       🏆 优先级分数: 709
2025-07-10 14:11:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 排序后的候选路径（前3个）:
2025-07-10 14:11:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    1. user-basic-service\user-basic-general (优先级: 709)
2025-07-10 14:11:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 选择最佳Java项目路径:
2025-07-10 14:11:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 完整路径: D:\gitlab\create_project\链数中建一局_1752127134\zqyl-user-center-service\user-basic-service\user-basic-general
2025-07-10 14:11:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📋 相对路径: user-basic-service\user-basic-general
2025-07-10 14:11:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    🏆 最终优先级: 709
2025-07-10 14:11:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 从API路径 /general/multiorgManage/queryCompanyUnitList 提取关键字: multiorgManage
2025-07-10 14:11:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 在项目中搜索关键字相关路径: multiorgManage
2025-07-10 14:11:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    ❌ 未找到包含关键字 'multiorgManage' 的相关目录
2025-07-10 14:11:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -  分析目标项目: D:\gitlab\create_project\链数中建一局_1752127134\zqyl-user-center-service\user-basic-service\user-basic-general
2025-07-10 14:11:41 - src.apis.project_analysis_api - INFO - 🔍 开始分析项目用于代码生成: D:\gitlab\create_project\链数中建一局_1752127134\zqyl-user-center-service\user-basic-service\user-basic-general
2025-07-10 14:11:41 - src.apis.project_analysis_api - INFO - 🔍 在 D:\gitlab\create_project\链数中建一局_1752127134\zqyl-user-center-service\user-basic-service\user-basic-general 中查找最佳Java项目路径...
2025-07-10 14:11:41 - src.apis.project_analysis_api - INFO - 🎯 目标服务名: 用户服务
2025-07-10 14:11:41 - src.apis.project_analysis_api - INFO -    📐 中等深度结构 (深度7) -> +100
2025-07-10 14:11:41 - src.apis.project_analysis_api - INFO -    📦 服务模块匹配: user-basic-service -> +120
2025-07-10 14:11:41 - src.apis.project_analysis_api - INFO -    🏢 业务域匹配: user -> +60
2025-07-10 14:11:41 - src.apis.project_analysis_api - INFO -    🏗️ 架构层级匹配: service -> +100
2025-07-10 14:11:41 - src.apis.project_analysis_api - INFO -    🎯🎯🎯 深层服务模块路径匹配 -> +800
2025-07-10 14:11:41 - src.apis.project_analysis_api - INFO -    📁 发现Java项目: user-basic-general
2025-07-10 14:11:41 - src.apis.project_analysis_api - INFO -       🎯 相对路径: .
2025-07-10 14:11:41 - src.apis.project_analysis_api - INFO -       📊 Java文件: 29个
2025-07-10 14:11:41 - src.apis.project_analysis_api - INFO -       📐 目录深度: 0
2025-07-10 14:11:41 - src.apis.project_analysis_api - INFO -       🏆 优先级分数: 1181
2025-07-10 14:11:41 - src.apis.project_analysis_api - INFO - 📋 排序后的候选路径（前3个）:
2025-07-10 14:11:41 - src.apis.project_analysis_api - INFO -    1. . (优先级: 1181)
2025-07-10 14:11:41 - src.apis.project_analysis_api - INFO - ✅ 选择最佳Java项目路径:
2025-07-10 14:11:41 - src.apis.project_analysis_api - INFO -    📁 完整路径: D:\gitlab\create_project\链数中建一局_1752127134\zqyl-user-center-service\user-basic-service\user-basic-general
2025-07-10 14:11:41 - src.apis.project_analysis_api - INFO -    📋 相对路径: .
2025-07-10 14:11:41 - src.apis.project_analysis_api - INFO -    🏆 最终优先级: 1181
2025-07-10 14:11:41 - src.apis.project_analysis_api - INFO - 📂 实际分析路径: D:\gitlab\create_project\链数中建一局_1752127134\zqyl-user-center-service\user-basic-service\user-basic-general
2025-07-10 14:11:41 - src.utils.java_code_analyzer - INFO - 🔍 开始分析企业级Java项目: D:\gitlab\create_project\链数中建一局_1752127134\zqyl-user-center-service\user-basic-service\user-basic-general
2025-07-10 14:11:42 - src.utils.java_code_analyzer - INFO - ✅ 企业级项目分析完成，共分析 29 个Java文件
2025-07-10 14:11:42 - src.apis.project_analysis_api - INFO - 📦 动态检测到基础包: com.yljr.user.basicgeneral (出现29次)
2025-07-10 14:11:42 - src.apis.project_analysis_api - INFO - 📦 动态检测到基础包: com.yljr.user.basicgeneral (出现29次)
2025-07-10 14:11:42 - src.apis.project_analysis_api - INFO - 📦 动态检测到基础包: com.yljr.user.basicgeneral (出现29次)
2025-07-10 14:11:42 - src.apis.project_analysis_api - INFO - ✅ 项目分析完成，已提取代码生成上下文
2025-07-10 14:11:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -  调用volcengine大模型生成代码...
2025-07-10 14:11:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 开始代码生成...
2025-07-10 14:11:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎨 使用模板+AI混合模式生成代码
2025-07-10 14:11:42 - src.corder_integration.code_generator.template_ai_generator - INFO - 🎨 开始模板+AI混合代码生成: CompanyUnitList
2025-07-10 14:11:42 - src.corder_integration.code_generator.template_ai_generator - INFO - 🤖 使用unknown增强模板代码...
2025-07-10 14:12:12 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-10 14:12:12 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ service_impl AI增强完成
2025-07-10 14:17:24 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-10 14:17:24 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ controller AI增强完成
2025-07-10 14:17:36 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-10 14:17:36 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ service_interface AI增强完成
2025-07-10 14:17:53 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-10 14:17:53 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ request_dto AI增强完成
2025-07-10 14:18:14 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-10 14:18:14 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ response_dto AI增强完成
2025-07-10 14:18:34 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-10 14:18:34 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ entity AI增强完成
2025-07-10 14:18:50 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-10 14:18:50 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ mapper AI增强完成
2025-07-10 14:18:50 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI生成成功，生成代码类型: ['service_impl', 'controller', 'service_interface', 'request_dto', 'response_dto', 'entity', 'mapper']
2025-07-10 14:18:50 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 开始写入生成的代码文件...
2025-07-10 14:18:50 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔧 统一类名基础: CompanyUnitList
2025-07-10 14:18:50 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ service_impl 类名: CompanyUnitListServiceImpl
2025-07-10 14:18:50 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ controller 类名: CompanyUnitListController
2025-07-10 14:18:50 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ request_dto 类名: CompanyUnitListReq
2025-07-10 14:18:50 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ response_dto 类名: CompanyUnitListResp
2025-07-10 14:18:50 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ entity 类名: CompanyUnitListEntity
2025-07-10 14:18:50 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 检测到service_impl但缺少service，这是正常的（接口会被自动生成）
2025-07-10 14:18:50 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 标准化后的代码类型: ['service_impl', 'controller', 'service_interface', 'request_dto', 'response_dto', 'entity', 'mapper']
2025-07-10 14:18:50 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🤖 调用volcengine判断Java文件输出路径...
2025-07-10 14:19:09 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-10 14:19:09 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM路径判断成功，配置了 7 个Java文件路径
2025-07-10 14:19:09 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 controller: CompanyUnitListController.java
2025-07-10 14:19:09 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 service_interface: CompanyUnitListService.java
2025-07-10 14:19:09 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 service_impl: CompanyUnitListServiceImpl.java
2025-07-10 14:19:09 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 request_dto: CompanyUnitListReq.java
2025-07-10 14:19:09 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 response_dto: CompanyUnitListResp.java
2025-07-10 14:19:09 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 entity: CompanyUnitListEntity.java
2025-07-10 14:19:09 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 mapper: CompanyUnitListMapper.java
2025-07-10 14:19:09 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: D:\gitlab\create_project\链数中建一局_1752127134\zqyl-user-center-service\user-basic-service\user-basic-general\src\main\java\com\yljr\user\basicgeneral\application\service\impl\CompanyUnitListServiceImpl.java
2025-07-10 14:19:09 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: D:\gitlab\create_project\链数中建一局_1752127134\zqyl-user-center-service\user-basic-service\user-basic-general\src\main\java\com\yljr\user\basicgeneral\application\service\impl\CompanyUnitListServiceImpl.java
2025-07-10 14:19:09 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: D:\gitlab\create_project\链数中建一局_1752127134\zqyl-user-center-service\user-basic-service\user-basic-general\src\main\java\com\yljr\user\basicgeneral\interfaces\rest\CompanyUnitListController.java
2025-07-10 14:19:09 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: D:\gitlab\create_project\链数中建一局_1752127134\zqyl-user-center-service\user-basic-service\user-basic-general\src\main\java\com\yljr\user\basicgeneral\interfaces\rest\CompanyUnitListController.java
2025-07-10 14:19:09 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: D:\gitlab\create_project\链数中建一局_1752127134\zqyl-user-center-service\user-basic-service\user-basic-general\src\main\java\com\yljr\user\basicgeneral\application\service\CompanyUnitListService.java
2025-07-10 14:19:09 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: D:\gitlab\create_project\链数中建一局_1752127134\zqyl-user-center-service\user-basic-service\user-basic-general\src\main\java\com\yljr\user\basicgeneral\application\service\CompanyUnitListService.java
2025-07-10 14:19:09 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: D:\gitlab\create_project\链数中建一局_1752127134\zqyl-user-center-service\user-basic-service\user-basic-general\src\main\java\com\yljr\user\basicgeneral\interfaces\dto\CompanyUnitListReq.java
2025-07-10 14:19:09 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: D:\gitlab\create_project\链数中建一局_1752127134\zqyl-user-center-service\user-basic-service\user-basic-general\src\main\java\com\yljr\user\basicgeneral\interfaces\dto\CompanyUnitListReq.java
2025-07-10 14:19:09 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: D:\gitlab\create_project\链数中建一局_1752127134\zqyl-user-center-service\user-basic-service\user-basic-general\src\main\java\com\yljr\user\basicgeneral\interfaces\dto\CompanyUnitListResp.java
2025-07-10 14:19:09 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: D:\gitlab\create_project\链数中建一局_1752127134\zqyl-user-center-service\user-basic-service\user-basic-general\src\main\java\com\yljr\user\basicgeneral\interfaces\dto\CompanyUnitListResp.java
2025-07-10 14:19:09 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: D:\gitlab\create_project\链数中建一局_1752127134\zqyl-user-center-service\user-basic-service\user-basic-general\src\main\java\com\yljr\user\basicgeneral\domain\entity\CompanyUnitListEntity.java
2025-07-10 14:19:09 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: D:\gitlab\create_project\链数中建一局_1752127134\zqyl-user-center-service\user-basic-service\user-basic-general\src\main\java\com\yljr\user\basicgeneral\domain\entity\CompanyUnitListEntity.java
2025-07-10 14:19:09 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: D:\gitlab\create_project\链数中建一局_1752127134\zqyl-user-center-service\user-basic-service\user-basic-general\src\main\java\com\yljr\user\basicgeneral\domain\mapper\CompanyUnitListMapper.java
2025-07-10 14:19:09 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: D:\gitlab\create_project\链数中建一局_1752127134\zqyl-user-center-service\user-basic-service\user-basic-general\src\main\java\com\yljr\user\basicgeneral\domain\mapper\CompanyUnitListMapper.java
2025-07-10 14:19:09 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📊 代码生成完成，共写入 7 个文件到项目中
2025-07-10 14:19:09 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_008 状态更新为 completed
2025-07-10 14:19:09 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 任务 task_008 执行成功
2025-07-10 14:19:09 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 第4轮执行完成，处理了 1 个任务
2025-07-10 14:19:09 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第5轮任务检查...
2025-07-10 14:19:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 第5轮找到 1 个可执行任务
2025-07-10 14:19:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 开始执行任务: task_009 (api)
2025-07-10 14:19:10 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_009 已被 intelligent_coding_node 领取
2025-07-10 14:19:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🌐 执行API接口生成任务: task_009
2025-07-10 14:19:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 解析的接口信息:
2025-07-10 14:19:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 接口名称: UnitLimitByCompanyId
2025-07-10 14:19:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - API路径: /crcl-open-api/lsLimit/listUnitLimitByCompanyId
2025-07-10 14:19:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - HTTP方法: GET
2025-07-10 14:19:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 输入参数: 6个
2025-07-10 14:19:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 输出参数: 4个
2025-07-10 14:19:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 业务描述: 根据公司ID和筛选条件查询组织单元额度信息，调用用户服务获取组织单元基础信息
2025-07-10 14:19:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 在 D:\gitlab\create_project/链数中建一局_1752127134/crcl-open 中查找最佳Java项目路径...
2025-07-10 14:19:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 目标服务名: 确权开立服务
2025-07-10 14:19:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    🏗️ 架构层级匹配: interfaces -> +30
2025-07-10 14:19:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 发现Java项目: crcl-open
2025-07-10 14:19:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       🎯 相对路径: .
2025-07-10 14:19:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       📊 Java文件: 2251个
2025-07-10 14:19:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       📐 目录深度: 0
2025-07-10 14:19:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       🏆 优先级分数: 2281
2025-07-10 14:19:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 排序后的候选路径（前3个）:
2025-07-10 14:19:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    1. . (优先级: 2281)
2025-07-10 14:19:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 选择最佳Java项目路径:
2025-07-10 14:19:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 完整路径: D:\gitlab\create_project\链数中建一局_1752127134\crcl-open
2025-07-10 14:19:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📋 相对路径: .
2025-07-10 14:19:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    🏆 最终优先级: 2281
2025-07-10 14:19:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 从API路径 /crcl-open-api/lsLimit/listUnitLimitByCompanyId 提取关键字: lsLimit
2025-07-10 14:19:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 在项目中搜索关键字相关路径: lsLimit
2025-07-10 14:19:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 找到匹配目录: limit (得分: 25)
2025-07-10 14:19:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 找到匹配目录: ls (得分: 25)
2025-07-10 14:19:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 找到匹配目录: ls (得分: 25)
2025-07-10 14:19:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 找到匹配目录: ls (得分: 25)
2025-07-10 14:19:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 找到匹配目录: limit (得分: 25)
2025-07-10 14:19:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    ✅ 选择最佳匹配目录: limit (路径: src\main\java\com\yljr\crcl\limit)
2025-07-10 14:19:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 基于API关键字 'lsLimit' 找到现有路径: D:\gitlab\create_project\链数中建一局_1752127134\crcl-open\src\main\java\com\yljr\crcl\limit
2025-07-10 14:19:10 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -  分析目标项目: D:\gitlab\create_project\链数中建一局_1752127134\crcl-open\src\main\java\com\yljr\crcl\limit
2025-07-10 14:19:10 - src.apis.project_analysis_api - INFO - 🔍 开始分析项目用于代码生成: D:\gitlab\create_project\链数中建一局_1752127134\crcl-open\src\main\java\com\yljr\crcl\limit
2025-07-10 14:19:10 - src.apis.project_analysis_api - INFO - 🔍 在 D:\gitlab\create_project\链数中建一局_1752127134\crcl-open\src\main\java\com\yljr\crcl\limit 中查找最佳Java项目路径...
2025-07-10 14:19:10 - src.apis.project_analysis_api - INFO - 🎯 目标服务名: 确权开立服务
2025-07-10 14:19:10 - src.apis.project_analysis_api - WARNING - ⚠️ 在 D:\gitlab\create_project\链数中建一局_1752127134\crcl-open\src\main\java\com\yljr\crcl\limit 中未找到包含Java文件的src/main/java结构
2025-07-10 14:19:10 - src.apis.project_analysis_api - INFO - 📂 实际分析路径: D:\gitlab\create_project\链数中建一局_1752127134\crcl-open\src\main\java\com\yljr\crcl\limit
2025-07-10 14:19:10 - src.utils.java_code_analyzer - INFO - 🔍 开始分析企业级Java项目: D:\gitlab\create_project\链数中建一局_1752127134\crcl-open\src\main\java\com\yljr\crcl\limit
2025-07-10 14:19:13 - src.utils.java_code_analyzer - INFO - ✅ 企业级项目分析完成，共分析 533 个Java文件
2025-07-10 14:19:13 - src.apis.project_analysis_api - INFO - 📦 动态检测到基础包: com.yljr.crcl.limit (出现533次)
2025-07-10 14:19:13 - src.apis.project_analysis_api - INFO - 📦 动态检测到基础包: com.yljr.crcl.limit (出现533次)
2025-07-10 14:19:13 - src.apis.project_analysis_api - INFO - 📦 动态检测到基础包: com.yljr.crcl.limit (出现533次)
2025-07-10 14:19:13 - src.apis.project_analysis_api - INFO - ✅ 项目分析完成，已提取代码生成上下文
2025-07-10 14:19:13 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -  调用volcengine大模型生成代码...
2025-07-10 14:19:13 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 开始代码生成...
2025-07-10 14:19:13 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎨 使用模板+AI混合模式生成代码
2025-07-10 14:19:13 - src.corder_integration.code_generator.template_ai_generator - INFO - 🎨 开始模板+AI混合代码生成: UnitLimitByCompanyId
2025-07-10 14:19:13 - src.corder_integration.code_generator.template_ai_generator - INFO - 🤖 使用unknown增强模板代码...
2025-07-10 14:19:54 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-10 14:19:54 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ service_impl AI增强完成
2025-07-10 14:20:28 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-10 14:20:28 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ controller AI增强完成
2025-07-10 14:20:37 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-10 14:20:37 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ service_interface AI增强完成
2025-07-10 14:21:00 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-10 14:21:00 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ request_dto AI增强完成
2025-07-10 14:21:23 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-10 14:21:23 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ response_dto AI增强完成
2025-07-10 14:21:49 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-10 14:21:49 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ entity AI增强完成
2025-07-10 14:22:06 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-10 14:22:06 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ mapper AI增强完成
2025-07-10 14:22:06 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI生成成功，生成代码类型: ['service_impl', 'controller', 'service_interface', 'request_dto', 'response_dto', 'entity', 'mapper']
2025-07-10 14:22:06 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 开始写入生成的代码文件...
2025-07-10 14:22:06 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔧 统一类名基础: UnitLimitByCompanyId
2025-07-10 14:22:06 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ service_impl 类名: UnitLimitByCompanyIdServiceImpl
2025-07-10 14:22:06 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ controller 类名: UnitLimitByCompanyIdController
2025-07-10 14:22:06 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ request_dto 类名: UnitLimitByCompanyIdReq
2025-07-10 14:22:06 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ response_dto 类名: UnitLimitByCompanyIdResp
2025-07-10 14:22:06 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ entity 类名: UnitLimitByCompanyIdEntity
2025-07-10 14:22:06 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 检测到service_impl但缺少service，这是正常的（接口会被自动生成）
2025-07-10 14:22:06 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 标准化后的代码类型: ['service_impl', 'controller', 'service_interface', 'request_dto', 'response_dto', 'entity', 'mapper']
2025-07-10 14:22:06 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🤖 调用volcengine判断Java文件输出路径...
2025-07-10 14:22:28 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-10 14:22:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM路径判断成功，配置了 7 个Java文件路径
2025-07-10 14:22:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 controller: UnitLimitByCompanyIdController.java
2025-07-10 14:22:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 service_interface: UnitLimitByCompanyIdService.java
2025-07-10 14:22:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 service_impl: UnitLimitByCompanyIdServiceImpl.java
2025-07-10 14:22:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 request_dto: UnitLimitByCompanyIdReq.java
2025-07-10 14:22:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 response_dto: UnitLimitByCompanyIdResp.java
2025-07-10 14:22:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 entity: UnitLimitByCompanyIdEntity.java
2025-07-10 14:22:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 mapper: UnitLimitByCompanyIdMapper.java
2025-07-10 14:22:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: D:\gitlab\create_project\链数中建一局_1752127134\crcl-open\src\main\java\com\yljr\crcl\limit\src\main\java\com\yljr\crcl\limit\application\service\impl\UnitLimitByCompanyIdServiceImpl.java
2025-07-10 14:22:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: D:\gitlab\create_project\链数中建一局_1752127134\crcl-open\src\main\java\com\yljr\crcl\limit\src\main\java\com\yljr\crcl\limit\application\service\impl\UnitLimitByCompanyIdServiceImpl.java
2025-07-10 14:22:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: D:\gitlab\create_project\链数中建一局_1752127134\crcl-open\src\main\java\com\yljr\crcl\limit\src\main\java\com\yljr\crcl\limit\interfaces\rest\UnitLimitByCompanyIdController.java
2025-07-10 14:22:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: D:\gitlab\create_project\链数中建一局_1752127134\crcl-open\src\main\java\com\yljr\crcl\limit\src\main\java\com\yljr\crcl\limit\interfaces\rest\UnitLimitByCompanyIdController.java
2025-07-10 14:22:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: D:\gitlab\create_project\链数中建一局_1752127134\crcl-open\src\main\java\com\yljr\crcl\limit\src\main\java\com\yljr\crcl\limit\application\service\UnitLimitByCompanyIdService.java
2025-07-10 14:22:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: D:\gitlab\create_project\链数中建一局_1752127134\crcl-open\src\main\java\com\yljr\crcl\limit\src\main\java\com\yljr\crcl\limit\application\service\UnitLimitByCompanyIdService.java
2025-07-10 14:22:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: D:\gitlab\create_project\链数中建一局_1752127134\crcl-open\src\main\java\com\yljr\crcl\limit\src\main\java\com\yljr\crcl\limit\interfaces\dto\UnitLimitByCompanyIdReq.java
2025-07-10 14:22:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: D:\gitlab\create_project\链数中建一局_1752127134\crcl-open\src\main\java\com\yljr\crcl\limit\src\main\java\com\yljr\crcl\limit\interfaces\dto\UnitLimitByCompanyIdReq.java
2025-07-10 14:22:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: D:\gitlab\create_project\链数中建一局_1752127134\crcl-open\src\main\java\com\yljr\crcl\limit\src\main\java\com\yljr\crcl\limit\interfaces\dto\UnitLimitByCompanyIdResp.java
2025-07-10 14:22:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: D:\gitlab\create_project\链数中建一局_1752127134\crcl-open\src\main\java\com\yljr\crcl\limit\src\main\java\com\yljr\crcl\limit\interfaces\dto\UnitLimitByCompanyIdResp.java
2025-07-10 14:22:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: D:\gitlab\create_project\链数中建一局_1752127134\crcl-open\src\main\java\com\yljr\crcl\limit\src\main\java\com\yljr\crcl\limit\domain\entity\UnitLimitByCompanyIdEntity.java
2025-07-10 14:22:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: D:\gitlab\create_project\链数中建一局_1752127134\crcl-open\src\main\java\com\yljr\crcl\limit\src\main\java\com\yljr\crcl\limit\domain\entity\UnitLimitByCompanyIdEntity.java
2025-07-10 14:22:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: D:\gitlab\create_project\链数中建一局_1752127134\crcl-open\src\main\java\com\yljr\crcl\limit\src\main\java\com\yljr\crcl\limit\domain\mapper\UnitLimitByCompanyIdMapper.java
2025-07-10 14:22:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: D:\gitlab\create_project\链数中建一局_1752127134\crcl-open\src\main\java\com\yljr\crcl\limit\src\main\java\com\yljr\crcl\limit\domain\mapper\UnitLimitByCompanyIdMapper.java
2025-07-10 14:22:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📊 代码生成完成，共写入 7 个文件到项目中
2025-07-10 14:22:28 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_009 状态更新为 completed
2025-07-10 14:22:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 任务 task_009 执行成功
2025-07-10 14:22:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 第5轮执行完成，处理了 1 个任务
2025-07-10 14:22:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第6轮任务检查...
2025-07-10 14:22:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 第6轮找到 1 个可执行任务
2025-07-10 14:22:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 开始执行任务: task_010 (api)
2025-07-10 14:22:28 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_010 已被 intelligent_coding_node 领取
2025-07-10 14:22:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🌐 执行API接口生成任务: task_010
2025-07-10 14:22:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 解析的接口信息:
2025-07-10 14:22:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 接口名称: UnitLimitByCompanyIdExport
2025-07-10 14:22:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - API路径: /crcl-open-api/lsLimit/listUnitLimitByCompanyIdExport
2025-07-10 14:22:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - HTTP方法: GET
2025-07-10 14:22:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 输入参数: 4个
2025-07-10 14:22:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 输出参数: 3个
2025-07-10 14:22:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    - 业务描述: 复用listUnitLimitByCompanyId接口的查询逻辑，将结果导出为Excel格式
2025-07-10 14:22:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 在 D:\gitlab\create_project/链数中建一局_1752127134/crcl-open 中查找最佳Java项目路径...
2025-07-10 14:22:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 目标服务名: 确权开立服务
2025-07-10 14:22:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    🏗️ 架构层级匹配: interfaces -> +30
2025-07-10 14:22:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 发现Java项目: crcl-open
2025-07-10 14:22:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       🎯 相对路径: .
2025-07-10 14:22:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       📊 Java文件: 2258个
2025-07-10 14:22:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       📐 目录深度: 0
2025-07-10 14:22:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       🏆 优先级分数: 2288
2025-07-10 14:22:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📐 深层目录结构 (深度12) -> +150
2025-07-10 14:22:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    🏗️ 架构层级匹配: interfaces -> +30
2025-07-10 14:22:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 发现Java项目: limit
2025-07-10 14:22:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       🎯 相对路径: src\main\java\com\yljr\crcl\limit
2025-07-10 14:22:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       📊 Java文件: 7个
2025-07-10 14:22:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       📐 目录深度: 7
2025-07-10 14:22:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -       🏆 优先级分数: 187
2025-07-10 14:22:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 排序后的候选路径（前3个）:
2025-07-10 14:22:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    1. . (优先级: 2288)
2025-07-10 14:22:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    2. src\main\java\com\yljr\crcl\limit (优先级: 187)
2025-07-10 14:22:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 选择最佳Java项目路径:
2025-07-10 14:22:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 完整路径: D:\gitlab\create_project\链数中建一局_1752127134\crcl-open
2025-07-10 14:22:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📋 相对路径: .
2025-07-10 14:22:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    🏆 最终优先级: 2288
2025-07-10 14:22:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 从API路径 /crcl-open-api/lsLimit/listUnitLimitByCompanyIdExport 提取关键字: lsLimit
2025-07-10 14:22:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 在项目中搜索关键字相关路径: lsLimit
2025-07-10 14:22:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 找到匹配目录: limit (得分: 25)
2025-07-10 14:22:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 找到匹配目录: limit (得分: 25)
2025-07-10 14:22:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 找到匹配目录: ls (得分: 25)
2025-07-10 14:22:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 找到匹配目录: ls (得分: 25)
2025-07-10 14:22:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 找到匹配目录: ls (得分: 25)
2025-07-10 14:22:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    📁 找到匹配目录: limit (得分: 25)
2025-07-10 14:22:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -    ✅ 选择最佳匹配目录: limit (路径: src\main\java\com\yljr\crcl\limit)
2025-07-10 14:22:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 基于API关键字 'lsLimit' 找到现有路径: D:\gitlab\create_project\链数中建一局_1752127134\crcl-open\src\main\java\com\yljr\crcl\limit
2025-07-10 14:22:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -  分析目标项目: D:\gitlab\create_project\链数中建一局_1752127134\crcl-open\src\main\java\com\yljr\crcl\limit
2025-07-10 14:22:28 - src.apis.project_analysis_api - INFO - 🔍 开始分析项目用于代码生成: D:\gitlab\create_project\链数中建一局_1752127134\crcl-open\src\main\java\com\yljr\crcl\limit
2025-07-10 14:22:28 - src.apis.project_analysis_api - INFO - 📋 使用缓存的分析结果
2025-07-10 14:22:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO -  调用volcengine大模型生成代码...
2025-07-10 14:22:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 开始代码生成...
2025-07-10 14:22:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎨 使用模板+AI混合模式生成代码
2025-07-10 14:22:28 - src.corder_integration.code_generator.template_ai_generator - INFO - 🎨 开始模板+AI混合代码生成: UnitLimitByCompanyIdExport
2025-07-10 14:22:28 - src.corder_integration.code_generator.template_ai_generator - INFO - 🤖 使用unknown增强模板代码...
2025-07-10 14:23:13 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-10 14:23:13 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ service_impl AI增强完成
2025-07-10 14:23:37 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-10 14:23:37 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ controller AI增强完成
2025-07-10 14:23:47 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-10 14:23:47 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ service_interface AI增强完成
2025-07-10 14:24:05 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-10 14:24:05 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ request_dto AI增强完成
2025-07-10 14:24:18 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-10 14:24:18 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ response_dto AI增强完成
2025-07-10 14:24:40 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-10 14:24:40 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ entity AI增强完成
2025-07-10 14:24:52 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-10 14:24:52 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ mapper AI增强完成
2025-07-10 14:24:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI生成成功，生成代码类型: ['service_impl', 'controller', 'service_interface', 'request_dto', 'response_dto', 'entity', 'mapper']
2025-07-10 14:24:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 开始写入生成的代码文件...
2025-07-10 14:24:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔧 统一类名基础: ExportUnitLimitByCompanyId
2025-07-10 14:24:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ service_impl 类名: ExportUnitLimitByCompanyIdServiceImpl
2025-07-10 14:24:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ controller 类名: ExportUnitLimitByCompanyIdController
2025-07-10 14:24:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ request_dto 类名: ExportUnitLimitByCompanyIdReq
2025-07-10 14:24:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ response_dto 类名: ExportUnitLimitByCompanyIdResp
2025-07-10 14:24:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ entity 类名: ExportUnitLimitByCompanyIdEntity
2025-07-10 14:24:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 检测到service_impl但缺少service，这是正常的（接口会被自动生成）
2025-07-10 14:24:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📋 标准化后的代码类型: ['service_impl', 'controller', 'service_interface', 'request_dto', 'response_dto', 'entity', 'mapper']
2025-07-10 14:24:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🤖 调用volcengine判断Java文件输出路径...
2025-07-10 14:25:15 - httpx - INFO - HTTP Request: POST https://ark.cn-beijing.volces.com/api/v3/chat/completions "HTTP/1.1 200 OK"
2025-07-10 14:25:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM路径判断成功，配置了 7 个Java文件路径
2025-07-10 14:25:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 controller: ExportUnitLimitByCompanyIdController.java
2025-07-10 14:25:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 service_interface: ExportUnitLimitByCompanyIdService.java
2025-07-10 14:25:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 service_impl: ExportUnitLimitByCompanyIdServiceImpl.java
2025-07-10 14:25:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 request_dto: ExportUnitLimitByCompanyIdReq.java
2025-07-10 14:25:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 response_dto: ExportUnitLimitByCompanyIdResp.java
2025-07-10 14:25:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 entity: ExportUnitLimitByCompanyIdEntity.java
2025-07-10 14:25:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📍 mapper: ExportUnitLimitByCompanyIdMapper.java
2025-07-10 14:25:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: D:\gitlab\create_project\链数中建一局_1752127134\crcl-open\src\main\java\com\yljr\crcl\limit\src\main\java\com\yljr\crcl\limit\application\service\impl\ExportUnitLimitByCompanyIdServiceImpl.java
2025-07-10 14:25:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: D:\gitlab\create_project\链数中建一局_1752127134\crcl-open\src\main\java\com\yljr\crcl\limit\src\main\java\com\yljr\crcl\limit\application\service\impl\ExportUnitLimitByCompanyIdServiceImpl.java
2025-07-10 14:25:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: D:\gitlab\create_project\链数中建一局_1752127134\crcl-open\src\main\java\com\yljr\crcl\limit\src\main\java\com\yljr\crcl\limit\interfaces\rest\ExportUnitLimitByCompanyIdController.java
2025-07-10 14:25:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: D:\gitlab\create_project\链数中建一局_1752127134\crcl-open\src\main\java\com\yljr\crcl\limit\src\main\java\com\yljr\crcl\limit\interfaces\rest\ExportUnitLimitByCompanyIdController.java
2025-07-10 14:25:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: D:\gitlab\create_project\链数中建一局_1752127134\crcl-open\src\main\java\com\yljr\crcl\limit\src\main\java\com\yljr\crcl\limit\application\service\ExportUnitLimitByCompanyIdService.java
2025-07-10 14:25:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: D:\gitlab\create_project\链数中建一局_1752127134\crcl-open\src\main\java\com\yljr\crcl\limit\src\main\java\com\yljr\crcl\limit\application\service\ExportUnitLimitByCompanyIdService.java
2025-07-10 14:25:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: D:\gitlab\create_project\链数中建一局_1752127134\crcl-open\src\main\java\com\yljr\crcl\limit\src\main\java\com\yljr\crcl\limit\interfaces\dto\ExportUnitLimitByCompanyIdReq.java
2025-07-10 14:25:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: D:\gitlab\create_project\链数中建一局_1752127134\crcl-open\src\main\java\com\yljr\crcl\limit\src\main\java\com\yljr\crcl\limit\interfaces\dto\ExportUnitLimitByCompanyIdReq.java
2025-07-10 14:25:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: D:\gitlab\create_project\链数中建一局_1752127134\crcl-open\src\main\java\com\yljr\crcl\limit\src\main\java\com\yljr\crcl\limit\interfaces\dto\ExportUnitLimitByCompanyIdResp.java
2025-07-10 14:25:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: D:\gitlab\create_project\链数中建一局_1752127134\crcl-open\src\main\java\com\yljr\crcl\limit\src\main\java\com\yljr\crcl\limit\interfaces\dto\ExportUnitLimitByCompanyIdResp.java
2025-07-10 14:25:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: D:\gitlab\create_project\链数中建一局_1752127134\crcl-open\src\main\java\com\yljr\crcl\limit\src\main\java\com\yljr\crcl\limit\domain\entity\ExportUnitLimitByCompanyIdEntity.java
2025-07-10 14:25:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: D:\gitlab\create_project\链数中建一局_1752127134\crcl-open\src\main\java\com\yljr\crcl\limit\src\main\java\com\yljr\crcl\limit\domain\entity\ExportUnitLimitByCompanyIdEntity.java
2025-07-10 14:25:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📝 已生成代码文件: D:\gitlab\create_project\链数中建一局_1752127134\crcl-open\src\main\java\com\yljr\crcl\limit\src\main\java\com\yljr\crcl\limit\domain\mapper\ExportUnitLimitByCompanyIdMapper.java
2025-07-10 14:25:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 文件写入验证成功: D:\gitlab\create_project\链数中建一局_1752127134\crcl-open\src\main\java\com\yljr\crcl\limit\src\main\java\com\yljr\crcl\limit\domain\mapper\ExportUnitLimitByCompanyIdMapper.java
2025-07-10 14:25:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 📊 代码生成完成，共写入 7 个文件到项目中
2025-07-10 14:25:15 - src.corder_integration.langgraph.task_manager - INFO - ✅ 任务 task_010 状态更新为 completed
2025-07-10 14:25:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 任务 task_010 执行成功
2025-07-10 14:25:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 第6轮执行完成，处理了 1 个任务
2025-07-10 14:25:15 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第7轮任务检查...
2025-07-10 14:25:16 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第7轮没有可执行的智能编码任务
2025-07-10 14:25:16 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 7 个任务，共7轮
2025-07-10 14:25:16 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 7 个任务
2025-07-10 14:25:16 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 14:25:16 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 14:25:16 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-10 14:25:16 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-10 14:25:16 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-10 14:25:16 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-10 14:25:16 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 14:25:16 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-10 14:25:16 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 14:25:16 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 14:25:16 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 14:25:16 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 14:25:16 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 14:25:16 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 14:25:16 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 14:25:16 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 14:25:16 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 14:25:17 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-10 14:25:17 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-10 14:25:17 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-10 14:25:17 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-10 14:25:17 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 14:25:17 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-10 14:25:17 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 14:25:17 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 14:25:17 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 14:25:17 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 14:25:17 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 14:25:17 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 14:25:17 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 14:25:17 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 14:25:17 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 14:25:17 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-10 14:25:18 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-10 14:25:18 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-10 14:25:18 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-10 14:25:18 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 14:25:18 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-10 14:25:18 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 14:25:18 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 14:25:18 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 14:25:18 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 14:25:18 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 14:25:18 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 14:25:18 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 14:25:18 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 14:25:18 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 14:25:18 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-10 14:25:19 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-10 14:25:19 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-10 14:25:19 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-10 14:25:19 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 14:25:19 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-10 14:25:19 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 14:25:19 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 14:25:19 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 14:25:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 14:25:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 14:25:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 14:25:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 14:25:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 14:25:20 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 14:25:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-10 14:25:20 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-10 14:25:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-10 14:25:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-10 14:25:20 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 14:25:20 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-10 14:25:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 14:25:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 14:25:20 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 14:25:21 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 14:25:21 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 14:25:21 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 14:25:21 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 14:25:21 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 14:25:21 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 14:25:21 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-10 14:25:22 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-10 14:25:22 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-10 14:25:22 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-10 14:25:22 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 14:25:22 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-10 14:25:22 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 14:25:22 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 14:25:22 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 14:25:22 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 14:25:22 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 14:25:22 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 14:25:22 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 14:25:22 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 14:25:22 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 14:25:22 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-10 14:25:23 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-10 14:25:23 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-10 14:25:23 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-10 14:25:23 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 14:25:23 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-10 14:25:23 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 14:25:23 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 14:25:23 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 14:25:23 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 14:25:23 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 14:25:23 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 14:25:23 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 14:25:23 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 14:25:23 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 14:25:23 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-10 14:25:24 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-10 14:25:24 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-10 14:25:24 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-10 14:25:24 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 14:25:24 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-10 14:25:24 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 14:25:24 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 14:25:24 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 14:25:24 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 14:25:24 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 14:25:24 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 14:25:24 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 14:25:24 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 14:25:24 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 14:25:24 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-10 14:25:25 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-10 14:25:25 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-10 14:25:25 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-10 14:25:25 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 14:25:25 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-10 14:25:25 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 14:25:25 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 14:25:25 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 14:25:26 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 14:25:26 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 14:25:26 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 14:25:26 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 14:25:26 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 14:25:26 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 14:25:26 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-10 14:25:27 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-10 14:25:27 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-10 14:25:27 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-10 14:25:27 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 14:25:27 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-10 14:25:27 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 14:25:27 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 14:25:27 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 14:25:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 14:25:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 14:25:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 14:25:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 14:25:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 14:25:28 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 14:25:28 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-10 14:25:29 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-10 14:25:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-10 14:25:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-10 14:25:29 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 14:25:29 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-10 14:25:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 14:25:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 14:25:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 14:25:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 14:25:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 14:25:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 14:25:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 14:25:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 14:25:29 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 14:25:29 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-10 14:25:30 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-10 14:25:30 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-10 14:25:30 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-10 14:25:30 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 14:25:30 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-10 14:25:30 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 14:25:30 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 14:25:30 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 14:25:32 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 14:25:32 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 14:25:32 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 14:25:32 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 14:25:32 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 14:25:32 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 14:25:32 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-10 14:25:33 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-10 14:25:33 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-10 14:25:33 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-10 14:25:33 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 14:25:33 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-10 14:25:33 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 14:25:33 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 14:25:33 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 14:25:34 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 14:25:34 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 14:25:34 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 14:25:34 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 14:25:34 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 14:25:34 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 14:25:34 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-10 14:25:34 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-10 14:25:34 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-10 14:25:34 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-10 14:25:34 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 14:25:34 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-10 14:25:34 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 14:25:34 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 14:25:34 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 14:25:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 14:25:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 14:25:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 14:25:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 14:25:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 14:25:35 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 14:25:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-10 14:25:35 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-10 14:25:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-10 14:25:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-10 14:25:35 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 14:25:35 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-10 14:25:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 14:25:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 14:25:35 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 14:25:36 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 14:25:36 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 14:25:36 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 14:25:36 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 14:25:36 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 14:25:36 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 14:25:36 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-10 14:25:36 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-10 14:25:36 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-10 14:25:36 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-10 14:25:36 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 14:25:36 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-10 14:25:36 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 14:25:36 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 14:25:36 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 14:25:36 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 14:25:36 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 14:25:36 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 14:25:36 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 14:25:36 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 14:25:36 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 14:25:36 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-10 14:25:37 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-10 14:25:37 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-10 14:25:37 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-10 14:25:37 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 14:25:37 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-10 14:25:37 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 14:25:37 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 14:25:37 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 14:25:37 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 14:25:37 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 14:25:37 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 14:25:37 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 14:25:37 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 14:25:37 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 14:25:37 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-10 14:25:38 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-10 14:25:38 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-10 14:25:38 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-10 14:25:38 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 14:25:38 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-10 14:25:38 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 14:25:38 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 14:25:38 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 14:25:39 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 14:25:39 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 14:25:39 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 14:25:39 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 14:25:39 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 14:25:39 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 14:25:39 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-10 14:25:39 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-10 14:25:39 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-10 14:25:39 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-10 14:25:39 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 14:25:39 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-10 14:25:39 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 14:25:39 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 14:25:39 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 14:25:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 14:25:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 14:25:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 14:25:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 14:25:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 14:25:40 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 14:25:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-10 14:25:40 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-10 14:25:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-10 14:25:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-10 14:25:40 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 14:25:40 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-10 14:25:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 14:25:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 14:25:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 14:25:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 14:25:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 14:25:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 14:25:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 14:25:40 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 14:25:40 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 14:25:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-10 14:25:41 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-10 14:25:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-10 14:25:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-10 14:25:41 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 14:25:41 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-10 14:25:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 14:25:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 14:25:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 14:25:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 14:25:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 14:25:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 14:25:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 14:25:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 14:25:41 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 14:25:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-10 14:25:41 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-10 14:25:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-10 14:25:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-10 14:25:41 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 14:25:41 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-10 14:25:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 14:25:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 14:25:41 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 14:25:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 14:25:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 14:25:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 14:25:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 14:25:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 14:25:42 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 14:25:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-10 14:25:42 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-10 14:25:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-10 14:25:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-10 14:25:42 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 14:25:42 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-10 14:25:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 14:25:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 14:25:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 14:25:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 14:25:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 14:25:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 14:25:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 14:25:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 14:25:42 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 14:25:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-10 14:25:42 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-10 14:25:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-10 14:25:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-10 14:25:42 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 14:25:42 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-10 14:25:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 14:25:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 14:25:42 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 14:25:43 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 14:25:43 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 14:25:43 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 14:25:43 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 14:25:43 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 14:25:43 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 14:25:43 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-10 14:25:43 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-10 14:25:43 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-10 14:25:43 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-10 14:25:43 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 14:25:43 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-10 14:25:43 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 14:25:43 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 14:25:43 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 14:25:43 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 14:25:43 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 14:25:43 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 14:25:43 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 14:25:43 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 14:25:43 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 14:25:43 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-10 14:25:44 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-10 14:25:44 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-10 14:25:44 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-10 14:25:44 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 14:25:44 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-10 14:25:44 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 14:25:44 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 14:25:44 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 14:25:44 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 14:25:44 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 14:25:44 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 14:25:44 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 14:25:44 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 14:25:44 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 14:25:44 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-10 14:25:44 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-10 14:25:44 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-10 14:25:44 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-10 14:25:44 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 14:25:44 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-10 14:25:44 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 14:25:44 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 14:25:44 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 14:25:44 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 14:25:44 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 14:25:44 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 14:25:44 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 14:25:44 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 14:25:44 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 14:25:44 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-10 14:25:45 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-10 14:25:45 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-10 14:25:45 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-10 14:25:45 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 14:25:45 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-10 14:25:45 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 14:25:45 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 14:25:45 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 14:25:45 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 14:25:45 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 14:25:45 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 14:25:45 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 14:25:45 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 14:25:45 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 14:25:45 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-10 14:25:45 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-10 14:25:45 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-10 14:25:45 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-10 14:25:45 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 14:25:45 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-10 14:25:45 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 14:25:45 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 14:25:45 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 14:25:46 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 14:25:46 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 14:25:46 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 14:25:46 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 14:25:46 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 14:25:46 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 14:25:46 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-10 14:25:46 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-10 14:25:46 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-10 14:25:46 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-10 14:25:46 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 14:25:46 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-10 14:25:46 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 14:25:46 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 14:25:46 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 14:25:46 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 14:25:46 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 14:25:46 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 14:25:46 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 14:25:46 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 14:25:46 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 14:25:46 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-10 14:25:47 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-10 14:25:47 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-10 14:25:47 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-10 14:25:47 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 14:25:47 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-10 14:25:47 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 14:25:47 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 14:25:47 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 14:25:47 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 14:25:47 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 14:25:47 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 14:25:47 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 14:25:47 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 14:25:47 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 14:25:47 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-10 14:25:47 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-10 14:25:47 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-10 14:25:47 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-10 14:25:47 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 14:25:47 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-10 14:25:47 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 14:25:47 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 14:25:47 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 14:25:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 14:25:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 14:25:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 14:25:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 14:25:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 14:25:48 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 14:25:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-10 14:25:48 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-10 14:25:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-10 14:25:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-10 14:25:48 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 14:25:48 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-10 14:25:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 14:25:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 14:25:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 14:25:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 14:25:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 14:25:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 14:25:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 14:25:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 14:25:48 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 14:25:48 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-10 14:25:49 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-10 14:25:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-10 14:25:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-10 14:25:49 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 14:25:49 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-10 14:25:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 14:25:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 14:25:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 14:25:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 14:25:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 14:25:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 14:25:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 14:25:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 14:25:49 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 14:25:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-10 14:25:49 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-10 14:25:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-10 14:25:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-10 14:25:49 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 14:25:49 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-10 14:25:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 14:25:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 14:25:49 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 14:25:50 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 14:25:50 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 14:25:50 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 14:25:50 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 14:25:50 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 14:25:50 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 14:25:50 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-10 14:25:50 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-10 14:25:50 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-10 14:25:50 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-10 14:25:50 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 14:25:50 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-10 14:25:50 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 14:25:50 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 14:25:50 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 14:25:50 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 14:25:50 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 14:25:50 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 14:25:50 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 14:25:50 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 14:25:50 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 14:25:50 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-10 14:25:51 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-10 14:25:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-10 14:25:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-10 14:25:51 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 14:25:51 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-10 14:25:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 14:25:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 14:25:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 14:25:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 14:25:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 14:25:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 14:25:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 14:25:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 14:25:51 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 14:25:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-10 14:25:51 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-10 14:25:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-10 14:25:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-10 14:25:51 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 14:25:51 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-10 14:25:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 14:25:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 14:25:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 14:25:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 14:25:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 14:25:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 14:25:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 14:25:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 14:25:51 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 14:25:51 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-10 14:25:52 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-10 14:25:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-10 14:25:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-10 14:25:52 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 14:25:52 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-10 14:25:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 14:25:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 14:25:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 14:25:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 14:25:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 14:25:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 14:25:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 14:25:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 14:25:52 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 14:25:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-10 14:25:52 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-10 14:25:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-10 14:25:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-10 14:25:52 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 14:25:52 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-10 14:25:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 14:25:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 14:25:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 14:25:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 14:25:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 14:25:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 14:25:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 14:25:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 14:25:52 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 14:25:52 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-10 14:25:53 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-10 14:25:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-10 14:25:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-10 14:25:53 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 14:25:53 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-10 14:25:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 14:25:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 14:25:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 14:25:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 14:25:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 14:25:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 14:25:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 14:25:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 14:25:53 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 14:25:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-10 14:25:53 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-10 14:25:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-10 14:25:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-10 14:25:53 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 14:25:53 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-10 14:25:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 14:25:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 14:25:53 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 14:25:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 14:25:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 14:25:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 14:25:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 14:25:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 14:25:54 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 14:25:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-10 14:25:54 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-10 14:25:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-10 14:25:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-10 14:25:54 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 14:25:54 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-10 14:25:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 14:25:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 14:25:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 14:25:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 14:25:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 14:25:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 14:25:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 14:25:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 14:25:54 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 14:25:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-10 14:25:54 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-10 14:25:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-10 14:25:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-10 14:25:54 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 14:25:54 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-10 14:25:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 14:25:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 14:25:54 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 14:25:55 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 14:25:55 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 14:25:55 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 14:25:55 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 14:25:55 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 14:25:55 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 14:25:55 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-10 14:25:55 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-10 14:25:55 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-10 14:25:55 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-10 14:25:55 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 14:25:55 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-10 14:25:55 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 14:25:55 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 14:25:55 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 14:25:55 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 14:25:55 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 14:25:55 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 14:25:55 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 14:25:55 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 14:25:55 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 14:25:55 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-10 14:25:55 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-10 14:25:55 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-10 14:25:55 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-10 14:25:55 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 14:25:55 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-10 14:25:55 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 14:25:55 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 14:25:55 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 14:25:56 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 14:25:56 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 14:25:56 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 14:25:56 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 14:25:56 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🚀 智能编码节点开始执行...
2025-07-10 14:25:56 - src.corder_integration.langgraph.task_manager - INFO - 📂 使用数据库: D:\ai_project\document_analyzer\coding_agent_workflow.db
2025-07-10 14:25:56 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 成功加载配置文件: D:/ai_project/document_analyzer/config.yaml
2025-07-10 14:25:56 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-10 14:25:56 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 使用火山引擎LLM客户端：ep-20250605091804-wmw6w
2025-07-10 14:25:56 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ LLM客户端初始化成功: volcengine
2025-07-10 14:25:56 - src.corder_integration.code_generator.java_templates - INFO - ✅ Java模板管理器初始化完成
2025-07-10 14:25:56 - src.corder_integration.code_generator.template_ai_generator - INFO - ✅ 模板+AI生成器初始化完成 (LLM: unknown)
2025-07-10 14:25:56 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 模板+AI代码生成器初始化完成
2025-07-10 14:25:56 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🎯 intelligent_coding_node 开始执行任务...
2025-07-10 14:25:56 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔄 第1轮任务检查...
2025-07-10 14:25:56 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ℹ️ 第1轮没有可执行的智能编码任务
2025-07-10 14:25:56 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码任务执行完成，共处理 0 个任务，共1轮
2025-07-10 14:25:56 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - 🔍 执行传统并行任务（向后兼容）
2025-07-10 14:25:56 - src.corder_integration.langgraph.nodes.intelligent_coding_node - INFO - ✅ 智能编码节点完成，处理了 0 个任务
2025-07-10 14:25:57 - src.corder_integration.langgraph.workflow_orchestrator - ERROR - 工作流执行失败: Recursion limit of 50 reached without hitting a stop condition. You can increase the limit by setting the `recursion_limit` config key.
For troubleshooting, visit: https://python.langchain.com/docs/troubleshooting/errors/GRAPH_RECURSION_LIMIT
2025-07-10 14:25:57 - api_server - INFO - ✅ POST coder_agent_api.process_design_document [200] (1622.04s)
2025-07-10 14:25:57 - werkzeug - INFO - 127.0.0.1 - - [10/Jul/2025 14:25:57] "POST /api/coder-agent/process-document HTTP/1.1" 200 -
2025-07-10 14:41:44 - werkzeug - INFO -  * Detected change in 'D:\\ai_project\\document_analyzer\\src\\utils\\logger_config.py', reloading
2025-07-10 14:41:46 - werkzeug - INFO -  * Restarting with stat
2025-07-10 14:41:47 - system - INFO - ==================================================
2025-07-10 14:41:47 - system - INFO - 🚀 智能分析系统日志系统初始化完成
2025-07-10 14:41:47 - system - INFO - 📁 日志根目录: D:\ai_project\document_analyzer\logs
2025-07-10 14:41:47 - system - INFO - 📊 日志级别: INFO
2025-07-10 14:41:47 - system - INFO - 📅 按日期轮转: 每天午夜自动轮转
2025-07-10 14:41:47 - system - INFO - 📂 按月分目录: logs/YYYY-MM/
2025-07-10 14:41:47 - system - INFO - 📝 主日志: logs/2025-07/app.log
2025-07-10 14:41:47 - system - INFO - 🔧 API日志: logs/2025-07/api_server.log
2025-07-10 14:41:47 - system - INFO - 🗂️ 保留天数: 5 天
2025-07-10 14:41:47 - system - INFO - ==================================================
2025-07-10 14:42:03 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-10 14:42:03 - root - WARNING - 智能编码节点不可用: cannot import name 'IntelligentCodingAgent' from partially initialized module 'src.corder_integration.langgraph.nodes.intelligent_coding_node' (most likely due to a circular import) (D:\ai_project\document_analyzer\src\corder_integration\langgraph\nodes\intelligent_coding_node.py)
2025-07-10 14:42:04 - src.utils.task_storage - INFO - 数据库初始化成功
2025-07-10 14:42:04 - markdown_storage - INFO - Markdown存储管理器初始化完成
2025-07-10 14:42:04 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-10 14:42:04 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-10 14:42:05 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-10 14:42:05 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-10 14:42:06 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-10 14:42:06 - WeaviateVectorDatabase - INFO - ✅ Weaviate连接成功: http://localhost:8080 (gRPC: 50051)
2025-07-10 14:42:06 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/schema/AnalyDesignDocuments "HTTP/1.1 200 OK"
2025-07-10 14:42:06 - WeaviateVectorDatabase - INFO - ✅ Weaviate集合已存在: AnalyDesignDocuments
2025-07-10 14:42:06 - AnalysisServiceManager - INFO - 初始化向量数据库: weaviate
2025-07-10 14:42:06 - sentence_transformers.SentenceTransformer - INFO - Use pytorch device_name: cpu
2025-07-10 14:42:06 - sentence_transformers.SentenceTransformer - INFO - Load pretrained SentenceTransformer: BAAI/bge-large-zh
2025-07-10 14:42:13 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-10 14:42:14 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-10 14:42:15 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-10 14:42:15 - src.utils.weaviate_helper - INFO - 成功连接到 Weaviate: localhost:8080
2025-07-10 14:42:15 - AnalysisServiceManager - INFO - 分析服务管理器初始化完成
2025-07-10 14:42:15 - src.utils.enhanced_analyzer - INFO - 增强分析器初始化完成
2025-07-10 14:42:15 - werkzeug - WARNING -  * Debugger is active!
2025-07-10 14:42:15 - werkzeug - INFO -  * Debugger PIN: 887-537-592
2025-07-10 14:45:21 - werkzeug - INFO -  * Detected change in 'D:\\ai_project\\document_analyzer\\cleanup_logs.py', reloading
2025-07-10 14:45:23 - werkzeug - INFO -  * Restarting with stat
2025-07-10 14:45:25 - system - INFO - ==================================================
2025-07-10 14:45:25 - system - INFO - 🚀 智能分析系统日志系统初始化完成
2025-07-10 14:45:25 - system - INFO - 📁 日志根目录: D:\ai_project\document_analyzer\logs
2025-07-10 14:45:25 - system - INFO - 📊 日志级别: INFO
2025-07-10 14:45:25 - system - INFO - 📅 按日期轮转: 每天午夜自动轮转
2025-07-10 14:45:25 - system - INFO - 📂 按月分目录: logs/YYYY-MM/
2025-07-10 14:45:25 - system - INFO - 📝 主日志: logs/2025-07/app.log
2025-07-10 14:45:25 - system - INFO - 🔧 API日志: logs/2025-07/api_server.log
2025-07-10 14:45:25 - system - INFO - 🗂️ 保留天数: 7 天
2025-07-10 14:45:25 - system - INFO - ==================================================
2025-07-10 16:47:10 - system - INFO - ==================================================
2025-07-10 16:47:10 - system - INFO - 🚀 智能分析系统日志系统初始化完成
2025-07-10 16:47:10 - system - INFO - 📁 日志根目录: D:\ai_project\document_analyzer\logs
2025-07-10 16:47:10 - system - INFO - 📊 日志级别: INFO
2025-07-10 16:47:10 - system - INFO - 📅 按日期轮转: 每天午夜自动轮转
2025-07-10 16:47:10 - system - INFO - 📂 按月分目录: logs/YYYY-MM/
2025-07-10 16:47:10 - system - INFO - 📝 主日志: logs/2025-07/app.log
2025-07-10 16:47:10 - system - INFO - 🔧 API日志: logs/2025-07/api_server.log
2025-07-10 16:47:10 - system - INFO - 🗂️ 保留天数: 7 天
2025-07-10 16:47:10 - system - INFO - ==================================================
2025-07-10 16:47:19 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-10 16:47:19 - root - WARNING - 智能编码节点不可用: cannot import name 'IntelligentCodingAgent' from partially initialized module 'src.corder_integration.langgraph.nodes.intelligent_coding_node' (most likely due to a circular import) (D:\ai_project\document_analyzer\src\corder_integration\langgraph\nodes\intelligent_coding_node.py)
2025-07-10 16:47:19 - src.utils.task_storage - INFO - 数据库初始化成功
2025-07-10 16:47:19 - markdown_storage - INFO - Markdown存储管理器初始化完成
2025-07-10 16:47:19 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-10 16:47:20 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-10 16:47:20 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-10 16:47:21 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-10 16:47:21 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-10 16:47:21 - WeaviateVectorDatabase - INFO - ✅ Weaviate连接成功: http://localhost:8080 (gRPC: 50051)
2025-07-10 16:47:21 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/schema/AnalyDesignDocuments "HTTP/1.1 200 OK"
2025-07-10 16:47:21 - WeaviateVectorDatabase - INFO - ✅ Weaviate集合已存在: AnalyDesignDocuments
2025-07-10 16:47:21 - AnalysisServiceManager - INFO - 初始化向量数据库: weaviate
2025-07-10 16:47:21 - sentence_transformers.SentenceTransformer - INFO - Use pytorch device_name: cpu
2025-07-10 16:47:21 - sentence_transformers.SentenceTransformer - INFO - Load pretrained SentenceTransformer: BAAI/bge-large-zh
2025-07-10 16:47:27 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-10 16:47:28 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-10 16:47:28 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-10 16:47:28 - src.utils.weaviate_helper - INFO - 成功连接到 Weaviate: localhost:8080
2025-07-10 16:47:28 - AnalysisServiceManager - INFO - 分析服务管理器初始化完成
2025-07-10 16:47:28 - src.utils.enhanced_analyzer - INFO - 增强分析器初始化完成
2025-07-10 16:47:28 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:8082
 * Running on http://26.26.26.1:8082
2025-07-10 16:47:28 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-07-10 16:47:28 - werkzeug - INFO -  * Restarting with stat
2025-07-10 16:47:28 - system - INFO - ==================================================
2025-07-10 16:47:28 - system - INFO - 🚀 智能分析系统日志系统初始化完成
2025-07-10 16:47:28 - system - INFO - 📁 日志根目录: D:\ai_project\document_analyzer\logs
2025-07-10 16:47:28 - system - INFO - 📊 日志级别: INFO
2025-07-10 16:47:28 - system - INFO - 📅 按日期轮转: 每天午夜自动轮转
2025-07-10 16:47:28 - system - INFO - 📂 按月分目录: logs/YYYY-MM/
2025-07-10 16:47:28 - system - INFO - 📝 主日志: logs/2025-07/app.log
2025-07-10 16:47:28 - system - INFO - 🔧 API日志: logs/2025-07/api_server.log
2025-07-10 16:47:28 - system - INFO - 🗂️ 保留天数: 7 天
2025-07-10 16:47:28 - system - INFO - ==================================================
2025-07-10 16:47:34 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-10 16:47:35 - root - WARNING - 智能编码节点不可用: cannot import name 'IntelligentCodingAgent' from partially initialized module 'src.corder_integration.langgraph.nodes.intelligent_coding_node' (most likely due to a circular import) (D:\ai_project\document_analyzer\src\corder_integration\langgraph\nodes\intelligent_coding_node.py)
2025-07-10 16:47:35 - src.utils.task_storage - INFO - 数据库初始化成功
2025-07-10 16:47:35 - markdown_storage - INFO - Markdown存储管理器初始化完成
2025-07-10 16:47:35 - src.utils.analysis_utils - INFO - 分析目录初始化完成
2025-07-10 16:47:35 - src.utils.volcengine_client - INFO - 火山引擎客户端初始化成功
2025-07-10 16:47:35 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-10 16:47:36 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-10 16:47:36 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-10 16:47:36 - WeaviateVectorDatabase - INFO - ✅ Weaviate连接成功: http://localhost:8080 (gRPC: 50051)
2025-07-10 16:47:36 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/schema/AnalyDesignDocuments "HTTP/1.1 200 OK"
2025-07-10 16:47:36 - WeaviateVectorDatabase - INFO - ✅ Weaviate集合已存在: AnalyDesignDocuments
2025-07-10 16:47:36 - AnalysisServiceManager - INFO - 初始化向量数据库: weaviate
2025-07-10 16:47:36 - sentence_transformers.SentenceTransformer - INFO - Use pytorch device_name: cpu
2025-07-10 16:47:36 - sentence_transformers.SentenceTransformer - INFO - Load pretrained SentenceTransformer: BAAI/bge-large-zh
2025-07-10 16:47:42 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/meta "HTTP/1.1 200 OK"
2025-07-10 16:47:43 - httpx - INFO - HTTP Request: GET https://pypi.org/pypi/weaviate-client/json "HTTP/1.1 200 OK"
2025-07-10 16:47:43 - httpx - INFO - HTTP Request: GET http://localhost:8080/v1/.well-known/ready "HTTP/1.1 200 OK"
2025-07-10 16:47:43 - src.utils.weaviate_helper - INFO - 成功连接到 Weaviate: localhost:8080
2025-07-10 16:47:43 - AnalysisServiceManager - INFO - 分析服务管理器初始化完成
2025-07-10 16:47:43 - src.utils.enhanced_analyzer - INFO - 增强分析器初始化完成
2025-07-10 16:47:43 - werkzeug - WARNING -  * Debugger is active!
2025-07-10 16:47:43 - werkzeug - INFO -  * Debugger PIN: 887-537-592
